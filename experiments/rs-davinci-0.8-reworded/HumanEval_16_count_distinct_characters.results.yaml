language: rs
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut _char_set:\
    \ HashSet<char> = HashSet::new();\n    for character in string.chars() {\n   \
    \     _char_set.insert(character.to_lowercase().to_string().chars().next().unwrap());\n\
    \    }\n    return _char_set.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmphm5071eu.rs:7:24\n\
    \  |\n7 |     let mut _char_set: HashSet<char> = HashSet::new();\n  |        \
    \                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmphm5071eu.rs:7:40\n\
    \  |\n7 |     let mut _char_set: HashSet<char> = HashSet::new();\n  |        \
    \                                ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // let mut\
    \ characters = HashSet::new();\n    // for ch in string.chars() {\n    //    \
    \ characters.insert(ch.to_lowercase().to_string());\n    // }\n    // characters.len()\
    \ as isize\n    string.chars().map(|ch| ch.to_lowercase().to_string()).collect::<HashSet<String>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpllecj0zt.rs:12:70\n\
    \   |\n12 |     string.chars().map(|ch| ch.to_lowercase().to_string()).collect::<HashSet<String>>().len()\
    \ as isize\n   |                                                             \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count:\
    \ isize = 0;\n    let mut st: HashSet<char> = HashSet::new();\n    for c in string.chars()\
    \ {\n        st.insert(c.to_lowercase().nth(0).unwrap());\n    }\n    count =\
    \ st.len() as isize;\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp4wq9xwda.rs:8:17\n\
    \  |\n8 |     let mut st: HashSet<char> = HashSet::new();\n  |               \
    \  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp4wq9xwda.rs:8:33\n  |\n8 |  \
    \   let mut st: HashSet<char> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct\
    \ = vec![];\n    for c in string.chars() {\n        if distinct.contains(&c.to_ascii_lowercase())\
    \ {\n            continue;\n        } else {\n            distinct.push(c.to_ascii_lowercase());\n\
    \        }\n    }\n    distinct.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822555
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_chars\
    \ = vec![];\n    let str_slice = string.as_str();\n    for c in str_slice.chars()\
    \ {\n        if !distinct_chars.contains(&c.to_lowercase().collect::<String>())\
    \ {\n            distinct_chars.push(c.to_lowercase().collect::<String>());\n\
    \        }\n    }\n    distinct_chars.len() as isize\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let distinct_characters:\
    \ HashSet<char> = string.chars().collect();\n    distinct_characters.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpbt4gg4hr.rs:7:30\n\
    \  |\n7 |     let distinct_characters: HashSet<char> = string.chars().collect();\n\
    \  |                              ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut seen_characters\
    \ = HashSet::new();\n    for character in string.chars() {\n        seen_characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    seen_characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpm2z_tj5b.rs:7:31\n  |\n7 |     let mut seen_characters = HashSet::new();\n\
    \  |                               ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // Hint: You\
    \ can use the .chars method to iterate through a string\n    // Hint: You can\
    \ use .collect() to turn a collection into a set\n    string.chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpdauh6yjw.rs:9:30\n\
    \  |\n9 |     string.chars().collect::<HashSet<char>>().len() as isize\n  |  \
    \                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut map\
    \ = HashMap::new();\n    let mut count = 0;\n    for character in string.chars()\
    \ {\n        let lower_case = character.to_lowercase().next().unwrap();\n    \
    \    if !map.contains_key(&lower_case) {\n            map.insert(lower_case, 1);\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpurykfsrz.rs:7:19\n  |\n7 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmp_mqoeikw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut vec:\
    \ Vec<char> = Vec::new();\n    for char in string.chars() {\n        if !vec.contains(&char.to_lowercase().collect::<Vec<char>>()[0])\
    \ {\n            vec.push(char.to_lowercase().collect::<Vec<char>>()[0]);\n  \
    \      }\n    }\n    vec.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822555
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let string\
    \ = string.to_lowercase();\n    let mut i = 0;\n    let mut chars = Vec::new();\n\
    \    while i < string.len() {\n        let character = string.chars().nth(i).unwrap();\n\
    \        if !chars.contains(&character) {\n            chars.push(character);\n\
    \        }\n        i += 1;\n    }\n    chars.len() as isize\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let low_string\
    \ = string.to_lowercase();\n    let mut chars: Vec<char> = low_string.chars().collect();\n\
    \    chars.sort();\n    let mut count = 1;\n    for i in 0..chars.len() - 1 {\n\
    \        if chars[i] != chars[i + 1] {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpbjbk80_u.rs:11:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpwqidv0kr.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO(implement\
    \ the function)\n    let mut set = HashSet::new();\n    for (i, c) in string.chars().enumerate()\
    \ {\n        set.insert(c.to_lowercase().collect::<String>());\n    }\n    set.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp55_s9pt5.rs:8:19\n  |\n8 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // write your\
    \ code here\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpsly9r25q.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count\
    \ = 0;\n    let mut chars = string.chars().collect::<Vec<char>>();\n    chars.sort();\n\
    \    let mut last = ' ';\n    for c in chars {\n        if c != last {\n     \
    \       count += 1;\n            last = c;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp6d6kumr2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set:\
    \ HashSet<char> = HashSet::new();\n    let str_lowercase = string.to_lowercase();\n\
    \    for ch in str_lowercase.chars() {\n        set.insert(ch);\n    }\n    set.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp5b3pyh_j.rs:7:18\n\
    \  |\n7 |     let mut set: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp5b3pyh_j.rs:7:34\n  |\n7 |  \
    \   let mut set: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().fold(HashSet::new(),\
    \ |mut set, ch| {\n        set.insert(ch.to_lowercase().next().unwrap());\n  \
    \      set\n    }).len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp3gh_dy8s.rs:7:25\n  |\n7 |     string.chars().fold(HashSet::new(), |mut\
    \ set, ch| {\n  |                         ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().map(|c|\
    \ c.to_ascii_lowercase()).collect::<HashSet<char>>().len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp0b3fcx8h.rs:7:62\n\
    \  |\n7 |     string.chars().map(|c| c.to_ascii_lowercase()).collect::<HashSet<char>>().len()\
    \ as isize\n  |                                                              ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut res\
    \ = 0;\n    for c in string.chars() {\n        if c.is_ascii_alphabetic() {\n\
    \            res += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmp7p3b9e_3.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars\
    \ = HashSet::new();\n    for c in string.chars() {\n        chars.insert(c.to_lowercase().to_string());\n\
    \    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpy03frhe9.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // your code\
    \ here\n    return 0;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpxxcbp7mm.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().map(|c|\
    \ c.to_ascii_lowercase()).collect::<Vec<char>>().into_iter().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpw_86r9t6.rs:7:97\n\
    \  |\n7 |     string.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<char>>().into_iter().collect::<HashSet<char>>().len()\
    \ as isize\n  |                                                              \
    \                                   ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_characters\
    \ = 0;\n    let mut char_map = HashMap::new();\n    for c in string.chars() {\n\
    \        let v = char_map.entry(c.to_lowercase().next().unwrap()).or_insert(0);\n\
    \        *v += 1;\n    }\n    for (_, count) in char_map {\n        if count ==\
    \ 1 {\n            distinct_characters += 1;\n        }\n    }\n    distinct_characters\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp0kyuheg7.rs:8:24\n  |\n8 |     let mut char_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars:\
    \ Vec<char> = string.chars().collect();\n    chars.sort();\n    chars.dedup();\n\
    \    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpdv2_rr53.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let _ = string;\
    \ // what can we do with a String\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpv4isp4m9.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set:\
    \ HashSet<char> = HashSet::new();\n    for c in string.chars() {\n        set.insert(c.to_lowercase().nth(0).unwrap());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmprcimt9jl.rs:7:18\n\
    \  |\n7 |     let mut set: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmprcimt9jl.rs:7:34\n  |\n7 |  \
    \   let mut set: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let string\
    \ = string.to_lowercase();\n    let mut dict: HashMap<char, isize> = HashMap::new();\n\
    \    for c in string.chars() {\n        let mut count = dict.entry(c).or_insert(0);\n\
    \        *count += 1;\n    }\n    dict.len() as isize\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpk5tgtca5.rs:8:19\n\
    \  |\n8 |     let mut dict: HashMap<char, isize> = HashMap::new();\n  |      \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpk5tgtca5.rs:8:42\n\
    \  |\n8 |     let mut dict: HashMap<char, isize> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_count\
    \ = 0;\n    let mut char_map = HashMap::new();\n    for ch in string.chars() {\n\
    \        let ch_lower = ch.to_lowercase().collect::<String>();\n        if !char_map.contains_key(&ch_lower)\
    \ {\n            char_map.insert(ch_lower, 1);\n            char_count += 1;\n\
    \        }\n    }\n    char_count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpmivwquyq.rs:8:24\n  |\n8 |     let mut char_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut num\
    \ = 0;\n    let mut v = vec![0; 52];\n    for c in string.chars() {\n        let\
    \ idx = get_char_idx(c);\n        if v[idx] == 0 {\n            num += 1;\n  \
    \          v[idx] = 1;\n        }\n    }\n    num\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_char_idx` in this scope\n  -->\
    \ /tmp/tmp1utb44v0.rs:10:19\n   |\n10 |         let idx = get_char_idx(c);\n \
    \  |                   ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO: Task\
    \ 4.0\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpoh99spej.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut res\
    \ = 0;\n    for ch in string.chars() {\n        if ch.is_alphabetic() {\n    \
    \        let mut tmp = res;\n            let lower_ch = ch.to_lowercase().next().unwrap();\n\
    \            for i in 0..tmp {\n                if (lower_ch as i8) == (i + 'a'\
    \ as i8) {\n                    tmp = i;\n                    break;\n       \
    \         }\n            }\n            if tmp == res {\n                res +=\
    \ 1;\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9prcc8zk.rs:23:5\n   |\n\
    6  | fn count_distinct_characters(string: String) -> isize {\n   |           \
    \                                      ----- expected `isize` because of return\
    \ type\n...\n23 |     res\n   |     ^^^ expected `isize`, found `i8`\n   |\nhelp:\
    \ you can convert an `i8` to an `isize`\n   |\n23 |     res.into()\n   |     \
    \   +++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.to_lowercase().chars().unique().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unique` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp80n5lyuj.rs:7:35\n  |\n7 |     string.to_lowercase().chars().unique().count()\
    \ as isize\n  |                                   ^^^^^^ method not found in `Chars<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let v: Vec<char>\
    \ = string.chars().collect();\n    let mut counter = 0;\n    let mut count = [0;\
    \ 256];\n    for i in v {\n        if count[i as usize] == 0 {\n            count[i\
    \ as usize] += 1;\n            counter += 1;\n        }\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp6w8fvufy.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO: insert\
    \ code here\n    string.chars().fold(0, |sum, c| {\n        if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            sum + 1\n       \
    \ } else {\n            sum\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmp083x77_b.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO: Your\
    \ code here.\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpedn_885f.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct\
    \ = HashSet::new();\n    for c in string.chars() {\n        distinct.insert(c.to_lowercase().to_string());\n\
    \    }\n    distinct.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpbmpxhsl1.rs:7:24\n  |\n7 |     let mut distinct = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp0zbnbkrt.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut result\
    \ = HashSet::new();\n    for (i, c) in string.chars().enumerate() {\n        if\
    \ c.is_ascii_alphabetic() {\n            result.insert(c.to_ascii_lowercase());\n\
    \        }\n    }\n    result.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpy73s469f.rs:7:22\n  |\n7 |     let mut result = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut characters:\
    \ HashSet<char> = HashSet::new();\n    for c in string.chars() {\n        characters.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpqsf5_wbh.rs:7:25\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpqsf5_wbh.rs:7:41\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_set\
    \ = HashSet::new();\n    for char in string.chars() {\n        char_set.insert(char.to_lowercase().collect::<String>());\n\
    \    }\n    char_set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpshxio3fl.rs:7:24\n  |\n7 |     let mut char_set = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let chars:\
    \ Vec<char> = string.chars().collect();\n    let mut unique_chars: Vec<char> =\
    \ Vec::new();\n    for c in chars {\n        if !unique_chars.contains(&c) {\n\
    \            unique_chars.push(c);\n        }\n    }\n    return unique_chars.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp7x20hatq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut result\
    \ = 0;\n    for c in string.to_lowercase().chars() {\n        if !c.is_ascii_alphabetic()\
    \ {\n            return -1;\n        }\n        if !c.is_ascii_lowercase() {\n\
    \            result += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpspt0mgg1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // let mut\
    \ result: isize = 0;\n    // let mut count: isize = 0;\n    // let mut map: HashMap<String,\
    \ isize> = HashMap::new();\n    // for c in string.chars() {\n    //     let key\
    \ = c.to_lowercase().to_string();\n    //     count = match map.get(&key) {\n\
    \    //         Some(v) => *v,\n    //         None => 0,\n    //     };\n   \
    \ //     map.insert(key, count + 1);\n    // }\n    // println!(\"{:?}\", map);\n\
    \    // result = map.len() as isize;\n    // result\n    string.chars().map(|c|\
    \ c.to_lowercase().to_string()).collect::<HashSet<String>>().len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpu4hi55wh.rs:21:68\n\
    \   |\n21 |     string.chars().map(|c| c.to_lowercase().to_string()).collect::<HashSet<String>>().len()\
    \ as isize\n   |                                                             \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().fold(HashSet::new(),\
    \ |mut set, c| {\n        set.insert(c.to_lowercase().next().unwrap());\n    \
    \    set\n    }).len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpl016qcia.rs:7:25\n  |\n7 |     string.chars().fold(HashSet::new(), |mut\
    \ set, c| {\n  |                         ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut lower_chars\
    \ = HashSet::new();\n    let mut upper_chars = HashSet::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            upper_chars.insert(c);\n     \
    \   } else {\n            lower_chars.insert(c);\n        }\n    }\n    (lower_chars.len()\
    \ + upper_chars.len()) as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpvnqgtfha.rs:7:27\n  |\n7 |     let mut lower_chars = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpvnqgtfha.rs:8:27\n\
    \  |\n8 |     let mut upper_chars = HashSet::new();\n  |                     \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct\
    \ = Vec::new();\n    for c in string.chars() {\n        if !distinct.contains(&c.to_ascii_lowercase())\
    \ {\n            distinct.push(c.to_ascii_lowercase());\n        }\n    }\n  \
    \  distinct.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO: implement\
    \ the function\n    return 0;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmplbv9pw64.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let lower_case_string\
    \ = string.to_lowercase();\n    let mut distinct_characters: HashSet<char> = HashSet::new();\n\
    \    let character_list = lower_case_string.chars();\n    for character in character_list\
    \ {\n        distinct_characters.insert(character);\n    }\n    return distinct_characters.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpmxsqaqlr.rs:8:34\n\
    \  |\n8 |     let mut distinct_characters: HashSet<char> = HashSet::new();\n \
    \ |                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpmxsqaqlr.rs:8:50\n\
    \  |\n8 |     let mut distinct_characters: HashSet<char> = HashSet::new();\n \
    \ |                                                  ^^^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO this\
    \ function definition is incomplete, it is only a starting point\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpny4y7u5s.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set\
    \ = BTreeSet::new();\n    for c in string.chars() {\n        set.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpbfwrnacj.rs:7:19\n  |\n7 |     let mut set = BTreeSet::new();\n  | \
    \                  ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count:\
    \ isize = 0;\n    let mut string_check: String = String::new();\n    for ch in\
    \ string.chars() {\n        let ch_lower: char = ch.to_lowercase().collect::<Vec<char>>()[0];\n\
    \        if !string_check.contains(ch_lower) {\n            count += 1;\n    \
    \        string_check.push(ch_lower);\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO: implement\
    \ this\n    // Check to see if the length of the string is 0\n    // If it is,\
    \ return 0\n    // Otherwise, return the length of the hashmap\n    let mut map\
    \ = HashMap::new();\n    for i in string.to_lowercase().chars() {\n        map.insert(i,\
    \ \"0\");\n    }\n    return map.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmparwu1pwr.rs:11:19\n   |\n11 |     let mut map = HashMap::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars_seen\
    \ = HashSet::new();\n    for c in string.chars() {\n        chars_seen.insert(c.to_lowercase().to_string());\n\
    \    }\n    chars_seen.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp93b44h2i.rs:7:26\n  |\n7 |     let mut chars_seen = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars:\
    \ Vec<char> = Vec::new();\n    for c in string.chars() {\n        let mut already_exists\
    \ = false;\n        for current_char in chars.iter() {\n            if current_char.to_lowercase().to_string()\
    \ == c.to_lowercase().to_string() {\n                already_exists = true;\n\
    \                break;\n            }\n        }\n        if !already_exists\
    \ {\n            chars.push(c);\n        }\n    }\n    chars.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // Turn the\
    \ string into a character list, transform it and count distinct characters\n \
    \   string.chars().fold(HashSet::new(), |mut chars: HashSet<char>, c| {\n    \
    \    chars.insert(c.to_ascii_lowercase());\n        chars\n    }).len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpv6duv935.rs:8:25\n  |\n8 |     string.chars().fold(HashSet::new(), |mut\
    \ chars: HashSet<char>, c| {\n  |                         ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpv6duv935.rs:8:53\n\
    \  |\n8 |     string.chars().fold(HashSet::new(), |mut chars: HashSet<char>, c|\
    \ {\n  |                                                     ^^^^^^^ not found\
    \ in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let v: Vec<char>\
    \ = string.chars().collect();\n    let mut count = 0;\n    for i in 0..v.len()\
    \ {\n        let mut found = false;\n        for j in 0..i {\n            if v[i].to_lowercase().to_string()\
    \ == v[j].to_lowercase().to_string() {\n                found = true;\n      \
    \          break;\n            }\n        }\n        if !found {\n           \
    \ count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut hash_map\
    \ = HashMap::new();\n    for ch in string.chars() {\n        let ch = ch.to_ascii_lowercase();\n\
    \        let count = hash_map.entry(ch).or_insert(0);\n        *count += 1;\n\
    \    }\n    return hash_map.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmput5tdtsi.rs:7:24\n  |\n7 |     let mut hash_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut num_distinct\
    \ = 0;\n    let mut seen_chars = HashSet::new();\n    for ch in string.chars()\
    \ {\n        let upper_ch = ch.to_uppercase().next().unwrap();\n        if !seen_chars.contains(&upper_ch)\
    \ {\n            num_distinct += 1;\n            seen_chars.insert(upper_ch);\n\
    \        }\n    }\n    num_distinct\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqh9lof5g.rs:8:26\n  |\n8 |     let mut seen_chars = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let lower\
    \ = string.to_lowercase();\n    let mut map = HashMap::new();\n    for c in lower.chars()\
    \ {\n        *map.entry(c).or_insert(0) += 1;\n    }\n    map.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp1t1apnd3.rs:8:19\n  |\n8 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set\
    \ = HashSet::new();\n    let low_string = string.to_lowercase();\n    for letter\
    \ in low_string.chars() {\n        set.insert(letter);\n    }\n    set.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpimlkeplj.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut characters\
    \ = HashSet::new();\n    for c in string.chars() {\n        characters.insert(c.to_lowercase().to_string());\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1oqzj_m7.rs:7:26\n  |\n7 |     let mut characters = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    0\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpuxbaqqly.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut myset\
    \ = HashSet::new();\n    for character in string.chars() {\n        myset.insert(character.to_lowercase().to_string());\n\
    \    }\n    myset.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp9ms_0apx.rs:7:21\n  |\n7 |     let mut myset = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut a:\
    \ Vec<char> = Vec::new();\n    let new_string = string.to_lowercase();\n    for\
    \ c in new_string.chars() {\n        if !a.contains(&c) {\n            a.push(c);\n\
    \        }\n    }\n    a.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set\
    \ = HashSet::new();\n    for c in string.chars() {\n        set.insert(c.to_lowercase().to_string());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpcf9zx5r6.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|&c|\
    \ c.is_alphabetic()).collect::<HashSet<char>>().len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpog40c88_.rs:7:61\n\
    \  |\n7 |     string.chars().filter(|&c| c.is_alphabetic()).collect::<HashSet<char>>().len()\
    \ as isize\n  |                                                             ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut n\
    \ = 0;\n    for char in string.to_lowercase().chars() {\n        n |= 1 << (char\
    \ as usize - 97);\n    }\n    n.count_ones() as isize\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `count_ones` on ambiguous numeric type\
    \ `{integer}`\n  --> /tmp/tmpdq4qd3yw.rs:11:7\n   |\n11 |     n.count_ones() as\
    \ isize\n   |       ^^^^^^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `i32`\n   |\n7  |     let mut n: i32 = 0;\n   |         ~~~~~~~~~~\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0689`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpddn38jqu.rs:7:30\n\
    \  |\n7 |     string.chars().collect::<HashSet<char>>().len() as isize\n  |  \
    \                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmp_mqoeikw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars\
    \ = HashSet::new();\n    for char in string.chars() {\n        chars.insert(char.to_lowercase().next().unwrap());\n\
    \    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpmx6ekvab.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpwqidv0kr.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let lower_str\
    \ = string.to_lowercase();\n    let mut chars = HashSet::new();\n    for ch in\
    \ lower_str.chars() {\n        chars.insert(ch);\n    }\n    chars.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp7_mpbsgq.rs:8:21\n  |\n8 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().collect::<Vec<char>>().iter().unique().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unique` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpkapdc_uo.rs:7:50\n  |\n7 |     string.chars().collect::<Vec<char>>().iter().unique().count()\
    \ as isize\n  |                                                  ^^^^^^ method\
    \ not found in `std::slice::Iter<'_, char>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // let mut\
    \ string_chars = string.chars();\n    // let mut seen = HashSet::new();\n    //\
    \ for char in string_chars {\n    //     seen.insert(char);\n    // }\n    //\
    \ seen.len() as isize\n    string.chars().collect::<HashSet<char>>().len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpy61t7211.rs:13:30\n\
    \   |\n13 |     string.chars().collect::<HashSet<char>>().len() as isize\n   |\
    \                              ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set\
    \ = HashSet::new();\n    for (idx, c) in string.chars().enumerate() {\n      \
    \  set.insert(c.to_lowercase().collect::<String>());\n    }\n    set.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpzlry9y70.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    0\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpuxbaqqly.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut string_chars\
    \ = string.chars();\n    let mut distinct_characters = HashSet::new();\n    while\
    \ let Some(c) = string_chars.next() {\n        distinct_characters.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpr40h0i5w.rs:8:35\n  |\n8 |     let mut distinct_characters = HashSet::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // Convert\
    \ to lowercase, then collect into a set to remove duplicates. Finally, convert\
    \ back\n    // to a vector to get the length\n    let distinct_chars: Vec<char>\
    \ = string.to_lowercase().chars().collect::<std::collections::HashSet<char>>().iter().collect();\n\
    \    distinct_chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<char>` cannot be built from an iterator\
    \ over elements of type `&char`\n    --> /tmp/tmph6oq9o6j.rs:9:119\n     |\n9\
    \    |     let distinct_chars: Vec<char> = string.to_lowercase().chars().collect::<std::collections::HashSet<char>>().iter().collect();\n\
    \     |                                                                      \
    \                                                 ^^^^^^^ value of type `Vec<char>`\
    \ cannot be built from `std::iter::Iterator<Item=&char>`\n     |\n     = help:\
    \ the trait `FromIterator<&char>` is not implemented for `Vec<char>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut buffer\
    \ = string.to_lowercase();\n    buffer.sort();\n    buffer.dedup();\n    buffer.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpxaehd0pb.rs:8:12\n  |\n8 |     buffer.sort();\n  |     \
    \       ^^^^ method not found in `String`\n\nerror[E0599]: no method named `dedup`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpxaehd0pb.rs:9:12\n\
    \  |\n9 |     buffer.dedup();\n  |            ^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let lower_string\
    \ = string.to_lowercase();\n    let mut chars = lower_string.chars();\n    let\
    \ first_char = chars.next();\n    let mut distinct_counter = 1;\n    for c in\
    \ chars {\n        if c != first_char.unwrap() {\n            distinct_counter\
    \ += 1;\n        }\n    }\n    distinct_counter\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppr9gor4_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_counts\
    \ = HashMap::new();\n    for c in string.chars() {\n        let key = c.to_lowercase().collect::<String>();\n\
    \        let count = char_counts.entry(key).or_insert(0);\n        *count += 1;\n\
    \    }\n    char_counts.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmppy8vyhzk.rs:7:27\n  |\n7 |     let mut char_counts = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let char_vec:\
    \ Vec<char> = string.chars().collect();\n    let mut result: HashSet<char> = HashSet::new();\n\
    \    for c in char_vec {\n        result.insert(c.to_ascii_lowercase());\n   \
    \ }\n    result.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpuy5iwz0x.rs:8:21\n\
    \  |\n8 |     let mut result: HashSet<char> = HashSet::new();\n  |           \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpuy5iwz0x.rs:8:37\n\
    \  |\n8 |     let mut result: HashSet<char> = HashSet::new();\n  |           \
    \                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_chars:\
    \ HashSet<char> = HashSet::new();\n    for c in string.chars() {\n        distinct_chars.insert(c.to_lowercase().to_string().chars().next().unwrap());\n\
    \    }\n    distinct_chars.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpwfwq11qz.rs:7:29\n\
    \  |\n7 |     let mut distinct_chars: HashSet<char> = HashSet::new();\n  |   \
    \                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpwfwq11qz.rs:7:45\n\
    \  |\n7 |     let mut distinct_chars: HashSet<char> = HashSet::new();\n  |   \
    \                                          ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_characters\
    \ = HashSet::new();\n    let string_chars: Vec<char> = string.chars().collect();\n\
    \    for character in string_chars {\n        distinct_characters.insert(character.to_ascii_lowercase());\n\
    \    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpv2hswnfk.rs:7:35\n  |\n7 |     let mut distinct_characters = HashSet::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let lower_chars:\
    \ HashSet<char> = string.chars().map(|c| c.to_lowercase().nth(0).unwrap()).collect();\n\
    \    lower_chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpc2qgi08q.rs:7:22\n\
    \  |\n7 |     let lower_chars: HashSet<char> = string.chars().map(|c| c.to_lowercase().nth(0).unwrap()).collect();\n\
    \  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_characters:\
    \ HashSet<char> = HashSet::new();\n    for character in string.chars() {\n   \
    \     distinct_characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp9pvik44x.rs:7:34\n\
    \  |\n7 |     let mut distinct_characters: HashSet<char> = HashSet::new();\n \
    \ |                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9pvik44x.rs:7:50\n\
    \  |\n7 |     let mut distinct_characters: HashSet<char> = HashSet::new();\n \
    \ |                                                  ^^^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars\
    \ = string.chars().collect::<Vec<char>>();\n    chars.sort();\n    chars.dedup();\n\
    \    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp054bgmex.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_char_count:\
    \ HashSet<char> = HashSet::new();\n    for c in string.chars() {\n        distinct_char_count.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    distinct_char_count.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp5c9optpl.rs:7:34\n\
    \  |\n7 |     let mut distinct_char_count: HashSet<char> = HashSet::new();\n \
    \ |                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp5c9optpl.rs:7:50\n\
    \  |\n7 |     let mut distinct_char_count: HashSet<char> = HashSet::new();\n \
    \ |                                                  ^^^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count\
    \ = 0;\n    let mut map = HashMap::new();\n    for ch in string.chars() {\n  \
    \      if !map.contains_key(&ch.to_ascii_lowercase()) {\n            count +=\
    \ 1;\n            map.insert(ch.to_ascii_lowercase(), 1);\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp5q5h281m.rs:8:19\n  |\n8 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO: Implement\
    \ function here\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpju4vs425.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let lowercase_string\
    \ = string.to_lowercase();\n    let mut characters: Vec<char> = Vec::new();\n\
    \    for c in lowercase_string.chars() {\n        if !characters.contains(&c)\
    \ {\n            characters.push(c);\n        }\n    }\n    characters.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count\
    \ = 0;\n    let mut map = HashMap::new();\n    for c in string.chars() {\n   \
    \     let key = c.to_ascii_lowercase();\n        map.entry(key).or_insert(true);\n\
    \    }\n    for key in map.keys() {\n        count += 1;\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpjzno164y.rs:8:19\n  |\n8 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_characters\
    \ = HashSet::new();\n    for character in string.chars() {\n        distinct_characters.insert(character.to_lowercase().to_string());\n\
    \    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp67kcar5v.rs:7:35\n  |\n7 |     let mut distinct_characters = HashSet::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // Hint: Use\
    \ BTreeSet\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp02s2e_8x.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // your code\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp0tej5hei.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_chars:\
    \ Vec<char> = Vec::new();\n    for character in string.chars() {\n        if distinct_chars.contains(&character.to_ascii_lowercase())\
    \ {\n            continue;\n        }\n        distinct_chars.push(character.to_ascii_lowercase());\n\
    \    }\n    distinct_chars.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars:\
    \ Vec<char> = string.to_lowercase().chars().collect();\n    chars.sort();\n  \
    \  let mut cnt = 1;\n    for i in 1..chars.len() {\n        if chars[i] != chars[i\
    \ - 1] {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptj29us8k.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars:\
    \ Vec<char> = string.chars().collect();\n    chars.sort();\n    chars.dedup();\n\
    \    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpdv2_rr53.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO implement\
    \ this function\n    // Please don't use any built-in function for solving this\
    \ exercise\n    let string_len = string.len();\n    let mut result = 0;\n    let\
    \ mut distinct = 0;\n    let mut i = 0;\n    while i < string_len {\n        let\
    \ mut j = 0;\n        while j < string_len {\n            if string.chars().nth(i).unwrap()\
    \ == string.chars().nth(j).unwrap() {\n                distinct += 1;\n      \
    \      }\n            j += 1;\n        }\n        if distinct == 1 {\n       \
    \     result += 1;\n        }\n        distinct = 0;\n        i += 1;\n    }\n\
    \    result as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpztclh2c0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set\
    \ = HashSet::new();\n    let mut count = 0;\n    for c in string.chars() {\n \
    \       if set.insert(c.to_ascii_lowercase()) {\n            count += 1;\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp376a09p_.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars:\
    \ Vec<char> = Vec::new();\n    for c in string.chars() {\n        let mut found\
    \ = false;\n        for i in chars.iter() {\n            if i.to_ascii_lowercase()\
    \ == c.to_ascii_lowercase() {\n                found = true;\n               \
    \ break;\n            }\n        }\n        if !found {\n            chars.push(c);\n\
    \        }\n    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut characters:\
    \ Vec<char> = Vec::new();\n    for character in string.chars() {\n        if !characters.contains(&character.to_ascii_lowercase())\
    \ {\n            characters.push(character.to_ascii_lowercase());\n        }\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    0\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpuxbaqqly.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut result\
    \ = 0;\n    let mut bit_vector = 0;\n    for ch in string.chars() {\n        let\
    \ code = ch as isize - 'a' as isize;\n        if code < 0 {\n            let code\
    \ = ch as isize - 'A' as isize;\n            if code < 0 {\n                continue;\n\
    \            }\n        }\n        let shift = 1 << code;\n        if bit_vector\
    \ & shift == 0 {\n            result += 1;\n            bit_vector |= shift;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to shift left with overflow'', /tmp/tmpccq4aaaf.rs:17:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpwqidv0kr.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars\
    \ = string.chars().collect::<Vec<char>>();\n    chars.sort();\n    chars.dedup();\n\
    \    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp054bgmex.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpwqidv0kr.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().map(|c|\
    \ c.to_lowercase().to_string()).collect::<HashSet<String>>().len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpndc44yvw.rs:7:68\n\
    \  |\n7 |     string.chars().map(|c| c.to_lowercase().to_string()).collect::<HashSet<String>>().len()\
    \ as isize\n  |                                                              \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars:\
    \ HashSet<char> = HashSet::new();\n    for c in string.chars() {\n        chars.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpam2c3lwu.rs:7:20\n\
    \  |\n7 |     let mut chars: HashSet<char> = HashSet::new();\n  |            \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpam2c3lwu.rs:7:36\n  |\n7 |  \
    \   let mut chars: HashSet<char> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.to_lowercase().chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmplgd0dex4.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set\
    \ = HashSet::new();\n    for c in string.chars() {\n        let c = c.to_lowercase().next().unwrap();\n\
    \        set.insert(c);\n    }\n    set.len() as isize\n}\n\nfn main() {\n   \
    \ let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpc5fd2v9d.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut characters:\
    \ HashSet<char> = HashSet::new();\n    for char in string.chars() {\n        characters.insert(char.to_lowercase().next().unwrap());\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpe8bxn67i.rs:7:25\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpe8bxn67i.rs:7:41\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let lowercase_string\
    \ = string.to_lowercase();\n    let mut distinct_characters = HashSet::new();\n\
    \    for character in lowercase_string.chars() {\n        distinct_characters.insert(character);\n\
    \    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp4sin694j.rs:8:35\n  |\n8 |     let mut distinct_characters = HashSet::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let string\
    \ = string.to_lowercase();\n    let mut set = HashSet::new();\n    for c in string.chars()\
    \ {\n        set.insert(c);\n    }\n    set.len() as isize\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp23rg4kgx.rs:8:19\n  |\n8 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut res\
    \ = 0;\n    let mut set = HashSet::new();\n    for c in string.chars() {\n   \
    \     let c = c.to_lowercase().next().unwrap();\n        if !set.contains(&c)\
    \ {\n            set.insert(c);\n            res += 1;\n        }\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmptdnziqf2.rs:8:19\n  |\n8 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO: Write\
    \ your code here\n    return 0;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpybleekjn.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars\
    \ = HashSet::new();\n    for c in string.chars() {\n        chars.insert(c.to_lowercase().to_string());\n\
    \    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpy03frhe9.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut string\
    \ = string.to_lowercase();\n    let mut prev = 'a';\n    let mut count = 0;\n\
    \    string.pop();\n    for c in string.chars() {\n        if c != prev {\n  \
    \          count += 1;\n        }\n        prev = c;\n    }\n    count + 1\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpw8ipokod.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut dict:\
    \ HashMap<char, bool> = HashMap::new();\n    let lower_string = string.to_lowercase();\n\
    \    for c in lower_string.chars() {\n        dict.insert(c, true);\n    }\n \
    \   dict.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpt_un1dm1.rs:7:19\n\
    \  |\n7 |     let mut dict: HashMap<char, bool> = HashMap::new();\n  |       \
    \            ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpt_un1dm1.rs:7:41\n\
    \  |\n7 |     let mut dict: HashMap<char, bool> = HashMap::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut used\
    \ = HashSet::new();\n    let mut count = 0;\n    for c in string.chars() {\n \
    \       if !used.contains(&c.to_lowercase().to_string()) {\n            used.insert(c.to_lowercase().to_string());\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpi00lm7e5.rs:7:20\n  |\n7 |     let mut used = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    0\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpuxbaqqly.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_characters:\
    \ isize = 0;\n    let s: Vec<char> = string.chars().collect();\n    for i in 0..s.len()\
    \ {\n        for j in 0..s.len() {\n            if s[i].to_uppercase().next().unwrap()\
    \ == s[j].to_uppercase().next().unwrap() {\n                break;\n         \
    \   }\n            if j == s.len() - 1 {\n                distinct_characters\
    \ += 1;\n            }\n        }\n    }\n    distinct_characters\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmphnvzje0y.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_map:\
    \ HashMap<char, bool> = HashMap::new();\n    for c in string.chars() {\n     \
    \   char_map.insert(c.to_lowercase().to_string().chars().next().unwrap(), true);\n\
    \    }\n    char_map.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpzqy6zjgj.rs:7:23\n\
    \  |\n7 |     let mut char_map: HashMap<char, bool> = HashMap::new();\n  |   \
    \                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpzqy6zjgj.rs:7:45\n\
    \  |\n7 |     let mut char_map: HashMap<char, bool> = HashMap::new();\n  |   \
    \                                          ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let characters:\
    \ Vec<char> = string.chars().collect();\n    let mut unique_characters: Vec<char>\
    \ = Vec::new();\n    for character in characters {\n        if !unique_characters.contains(&character)\
    \ {\n            unique_characters.push(character);\n        }\n    }\n    unique_characters.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpj9lafw3a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO: Complete\
    \ me!\n    -1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `0`', /tmp/tmpfs88yu7a.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let string\
    \ = string.to_ascii_lowercase();\n    let mut chars_set = HashSet::new();\n  \
    \  for c in string.chars() {\n        chars_set.insert(c);\n    }\n    chars_set.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqzp63en_.rs:8:25\n  |\n8 |     let mut chars_set = HashSet::new();\n\
    \  |                         ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let lowercase\
    \ = string.to_lowercase();\n    let mut vec: Vec<char> = lowercase.chars().collect();\n\
    \    vec.sort();\n    vec.dedup();\n    return vec.len() as isize;\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let set: HashSet<_>\
    \ = string.chars().collect();\n    return set.len() as isize;\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpnlz5o1_r.rs:7:14\n\
    \  |\n7 |     let set: HashSet<_> = string.chars().collect();\n  |           \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut s:\
    \ HashSet<char> = HashSet::new();\n    for i in string.chars() {\n        s.insert(i);\n\
    \    }\n    s.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpy87tiow_.rs:7:16\n\
    \  |\n7 |     let mut s: HashSet<char> = HashSet::new();\n  |                ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `HashSet`\n --> /tmp/tmpy87tiow_.rs:7:32\n  |\n7 |     let\
    \ mut s: HashSet<char> = HashSet::new();\n  |                                ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut result\
    \ = HashSet::new();\n    for c in string.chars() {\n        result.insert(c.to_lowercase().to_string());\n\
    \    }\n    result.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpcxqzlo5r.rs:7:22\n  |\n7 |     let mut result = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut seen_chars:\
    \ HashSet<char> = HashSet::new();\n    for char in string.chars() {\n        seen_chars.insert(char.to_lowercase().to_string().chars().next().unwrap());\n\
    \    }\n    seen_chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmphh34lvcu.rs:7:25\n\
    \  |\n7 |     let mut seen_chars: HashSet<char> = HashSet::new();\n  |       \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmphh34lvcu.rs:7:41\n\
    \  |\n7 |     let mut seen_chars: HashSet<char> = HashSet::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_characters:\
    \ HashSet<char> = HashSet::new();\n    let mut string_chars: Vec<char> = string.chars().collect();\n\
    \    string_chars.sort();\n    for c in string_chars {\n        distinct_characters.insert(c);\n\
    \    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp0r92hjs6.rs:7:34\n\
    \  |\n7 |     let mut distinct_characters: HashSet<char> = HashSet::new();\n \
    \ |                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp0r92hjs6.rs:7:50\n\
    \  |\n7 |     let mut distinct_characters: HashSet<char> = HashSet::new();\n \
    \ |                                                  ^^^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut unique_chars\
    \ = HashSet::new();\n    for c in string.chars() {\n        unique_chars.insert(c.to_lowercase().to_string());\n\
    \    }\n    unique_chars.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpkv0jcz75.rs:7:28\n  |\n7 |     let mut unique_chars = HashSet::new();\n\
    \  |                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n    // the above one-liner would be nicer than the loop below, but\
    \ didn't pass tests on codewars\n    let mut char_counts = HashMap::new();\n \
    \   for c in string.chars() {\n        *char_counts.entry(c.to_lowercase().next().unwrap()).or_insert(0)\
    \ += 1;\n    }\n    char_counts.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp40kvshzq.rs:9:27\n  |\n9 |     let mut char_counts = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counter\
    \ = 0;\n    let mut container = HashSet::new();\n    for i in string.chars() {\n\
    \        container.insert(i.to_ascii_lowercase());\n    }\n    container.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpjp014wi0.rs:8:25\n  |\n8 |     let mut container = HashSet::new();\n\
    \  |                         ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut lower\
    \ = HashSet::new();\n    let mut upper = HashSet::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            lower.insert(c);\n        } else\
    \ {\n            upper.insert(c);\n        }\n    }\n    (lower.len() + upper.len())\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp2bc8n9e8.rs:7:21\n  |\n7 |     let mut lower = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp2bc8n9e8.rs:8:21\n\
    \  |\n8 |     let mut upper = HashSet::new();\n  |                     ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut i:\
    \ isize = 0;\n    for c in string.chars() {\n        if c.is_lowercase() && string.to_uppercase().contains(c)\
    \ {\n            i = i + 1;\n        }\n    }\n    (string.len() as isize) - i\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpf811oia6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpwqidv0kr.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822554
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set:\
    \ HashSet<char> = HashSet::new();\n    for ch in string.chars() {\n        set.insert(ch.to_lowercase().to_string().chars().next().unwrap());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpb8w3q4x5.rs:7:18\n\
    \  |\n7 |     let mut set: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpb8w3q4x5.rs:7:34\n  |\n7 |  \
    \   let mut set: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut s\
    \ = String::new();\n    for c in string.chars() {\n        if !s.contains(c) {\n\
    \            s.push(c);\n        }\n    }\n    s.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpo_fr5abz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set:\
    \ HashSet<char> = HashSet::new();\n    let lower_case_string = string.to_lowercase();\n\
    \    for character in lower_case_string.chars() {\n        set.insert(character);\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpbgf40o0_.rs:7:18\n\
    \  |\n7 |     let mut set: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpbgf40o0_.rs:7:34\n  |\n7 |  \
    \   let mut set: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().map(|x|\
    \ x.to_ascii_lowercase()).collect::<HashSet<char>>().len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpg46k23sd.rs:7:62\n\
    \  |\n7 |     string.chars().map(|x| x.to_ascii_lowercase()).collect::<HashSet<char>>().len()\
    \ as isize\n  |                                                              ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let chars\
    \ = string.chars();\n    let mut chars_set = std::collections::HashSet::new();\n\
    \    for c in chars {\n        chars_set.insert(c.to_lowercase().collect::<String>());\n\
    \    }\n    chars_set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut temp\
    \ = string.to_lowercase();\n    temp.drain(..);\n    let mut out: HashSet<char>\
    \ = HashSet::new();\n    temp.chars().for_each(|ch| {\n        out.insert(ch);\n\
    \    });\n    out.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp8tvlaagf.rs:9:18\n\
    \  |\n9 |     let mut out: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp8tvlaagf.rs:9:34\n  |\n9 |  \
    \   let mut out: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counted\
    \ = HashSet::new();\n    for c in string.chars() {\n        counted.insert(c.to_lowercase().to_string());\n\
    \    }\n    counted.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplmth19es.rs:7:23\n  |\n7 |     let mut counted = HashSet::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut result\
    \ = string.to_ascii_lowercase();\n    for i in 1..string.len() {\n        if string.to_ascii_lowercase().contains(string.chars().nth(i).unwrap())\
    \ {\n            result.remove(i);\n        }\n    }\n    result.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''cannot remove a char from the end of a string'',
    /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/alloc/src/string.rs:1336:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_count\
    \ = 0;\n    let mut chars: Vec<char> = string.chars().collect();\n    chars.sort();\n\
    \    if chars.len() > 0 {\n        char_count += 1;\n        for i in 1..chars.len()\
    \ {\n            if chars[i] != chars[i - 1] {\n                char_count +=\
    \ 1;\n            }\n        }\n    }\n    char_count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpv1xc6prx.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // count how\
    \ many distinct characters in the string\n\n    let mut count: isize = 0;\n  \
    \  let mut is_distinct: bool = true;\n\n    for (idx, val) in string.chars().enumerate()\
    \ {\n        is_distinct = true;\n        let string: Vec<char> = string.chars().collect();\n\
    \        for i in 0..idx {\n            if val.to_lowercase().to_string() == string[i].to_lowercase().to_string()\
    \ {\n                is_distinct = false;\n            }\n        }\n        if\
    \ is_distinct {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars:\
    \ Vec<char> = Vec::new();\n    let mut counter = 0;\n    for c in string.chars()\
    \ {\n        chars.push(c.to_lowercase().to_string().pop().unwrap());\n    }\n\
    \    for c in chars.iter() {\n        if chars.contains(c) {\n            counter\
    \ += 1;\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmp5yh8cegg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO\n\
    \    let mut set = HashSet::new();\n    for c in string.chars() {\n        set.insert(c.to_lowercase().to_string());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp_b_arqje.rs:8:19\n  |\n8 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnnm1h50_.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let lowercase\
    \ = string.to_lowercase();\n    let mut distinct_characters = 0;\n    let mut\
    \ char_set = HashSet::new();\n    for c in lowercase.chars() {\n        if !char_set.contains(&c)\
    \ {\n            char_set.insert(c);\n            distinct_characters += 1;\n\
    \        }\n    }\n    distinct_characters\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp51_e2gz9.rs:9:24\n  |\n9 |     let mut char_set = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // Implement\
    \ your solution here\n    todo!()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not yet implemented'', /tmp/tmpfpk08ogw.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976666
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3v2_g4ui.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set\
    \ = HashSet::new();\n    for c in string.chars() {\n        set.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpgj79r98u.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set\
    \ = HashSet::new();\n    for c in string.chars() {\n        set.insert(c.to_lowercase().to_string());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpcf9zx5r6.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // TODO: write\
    \ code here\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmphqn546nd.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let string\
    \ = string.to_lowercase();\n    let mut characters = String::new();\n    for c\
    \ in string.chars() {\n        if !characters.contains(c) {\n            characters.push(c);\n\
    \        }\n    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976666
