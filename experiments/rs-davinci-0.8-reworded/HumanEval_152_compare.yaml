name: HumanEval_152_compare
language: rs
prompt: "/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two vectors of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return a vector of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\n/// >>>\
  \ compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0,\
  \ 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4,\
  \ 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
  \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
  \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
completions: ['    return game.iter().zip(guess.iter()).map(|x| (x.0 - x.1).abs()).collect();',
  "    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push(\n\
    \            if game[i] < 0 && guess[i] < 0 {\n                (game[i] - guess[i]).abs()\n\
    \            } else if game[i] < 0 && guess[i] > 0 {\n                game[i]\
    \ - guess[i]\n            } else if game[i] > 0 && guess[i] < 0 {\n          \
    \      game[i] - guess[i]\n            } else {\n                (game[i] - guess[i]).abs()\n\
    \            }\n        );\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    for _ in game {\n        let mut diff = game[i] - guess[i];\n\
    \        if diff < 0 {\n            diff = -diff;\n        }\n        result.push(diff);\n\
    \        i += 1;\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    assert_eq!(game.len(), guess.len());\n   \
    \ let mut result = Vec::new();\n    for i in 0..game.len() {\n        let diff\
    \ = (game[i] - guess[i]).abs();\n        result.push(diff);\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(g, &gu)| g.abs_diff(&gu)).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let rng = Range::new(0, guess.len());\n  \
    \  let mut rng = thread_rng();\n    let mut v: Vec<isize> = vec![];\n    for i\
    \ in 0..guess.len() {\n        if guess[i] > game[i] {\n            v.push(guess[i]\
    \ - game[i]);\n        } else if guess[i] < game[i] {\n            v.push(game[i]\
    \ - guess[i]);\n        } else {\n            v.push(0);\n        }\n    }\n \
    \   return v;", '    game.iter().zip(guess.iter()).map(|(g, gs)| g - gs).collect()',
  '    game.iter().zip(guess.iter()).map(|(g, gs)| (g - gs).abs()).collect()', '    unimplemented!()',
  "    let mut res = Vec::new();\n    for i in 0..game.len() {\n        res.push(cmp::max(game[i],\
    \ guess[i]) - cmp::min(game[i], guess[i]));\n    }\n    res", "    // apply an\
    \ abs(guess - game) to each index of the two vectors\n    let ret = game.iter().zip(guess.iter()).map(|(g,\
    \ h)| (g - h).abs()).collect();\n    ret", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut res = Vec::new();\n    for i in 0..game.len()\
    \ {\n        res.push( (game[i] - guess[i]).abs() );\n    }\n    res", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(c, g)|
    (c - g).abs()).collect()', "    // TODO\n    vec![]", "    assert_eq!(game.len(),\
    \ guess.len());\n    let mut score: Vec<isize> = Vec::new();\n    for i in 0..game.len()\
    \ {\n        score.push(game[i] - guess[i]).abs();\n    }\n    score", '    game.iter().zip(guess.iter()).map(|(v,
    g)| (v - g).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        result.push(game[i] - guess[i]).abs();\n\
    \    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()', '    return
    game.iter().zip(guess.iter()).map(|(&g, &g2)| (g - g2).abs()).collect();', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut result = Vec::with_capacity(game.len());\n\
    \    for i in 0..game.len() {\n        result.push(\n            if game[i] >=\
    \ 0 && guess[i] >= 0 {\n                game[i] - guess[i]\n            } else\
    \ if game[i] < 0 && guess[i] < 0 {\n                -game[i] - guess[i]\n    \
    \        } else {\n                game[i] + guess[i]\n            }\n       \
    \ );\n    }\n    result", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        let mut g = game[i] - guess[i];\n        if g < 0 {\n           \
    \ g = -g;\n        }\n        result.push(g);\n    }\n    result", "    let diff\
    \ = game.iter().zip(guess.iter()).map(|(a, b)| a - b).collect::<Vec<isize>>();\n\
    \    diff.iter().map(|x| x.abs()).collect::<Vec<isize>>()", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for (score, guess) in game.iter().zip(guess.iter()) {\n        if *score\
    \ == *guess {\n            result.push(0);\n        } else {\n            result.push((score\
    \ - guess).abs());\n        }\n    }\n    result", "    // TODO: Implement the\
    \ function here\n    return vec![];", '    game.iter().zip(guess.iter()).map(|(g,
    gs)| (g - gs).abs()).collect()', "    let mut result = Vec::with_capacity(game.len());\n\
    \    for (g, v) in game.iter().zip(guess.iter()) {\n        result.push(if g >\
    \ v { g - v } else { v - g });\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(g,
    gs)| gs.abs() - g.abs()).collect()', '    game.iter().zip(guess.iter()).map(|(i,
    j)| (i - j).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    if a > b { a - b } else { b - a }).collect()', "    game.iter().zip(guess.iter()).map(|(a,\
    \ b)| {\n        let c = (a - b).abs();\n        if c == 0 { return 0; }\n   \
    \     c\n    }).collect()", "    // TODO: Write a function to determine how far\
    \ off each guess was.\n    vec![]", "    let mut results = Vec::new();\n    for\
    \ (item1, item2) in game.iter().zip(guess.iter()) {\n        results.push(item1\
    \ - item2);\n    }\n    results", '    game.iter().zip(guess.iter()).map(|(game,
    guess)| (game - guess).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g,
    h)| (g - h).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    if game.len() == guess.len() {\n        for i in 0..game.len() {\n      \
    \      result.push(game[i] - guess[i]);\n        }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(game,
    guess)| (game - guess).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(game,
    guess)| game - guess).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        result.push(game[i] - guess[i]);\n    }\n\
    \    result", "    let mut ans: Vec<isize> = Vec::new();\n    for i in 0..game.len()\
    \ {\n        ans.push(game[i].abs() - guess[i].abs());\n    }\n    ans", "   \
    \ if game.len() != guess.len() {\n        return vec![];\n    }\n    let mut result\
    \ = vec![];\n    for i in 0..game.len() {\n        let diff = (game[i] - guess[i]).abs();\n\
    \        result.push(diff);\n    }\n    result", "    // \u043D\u0430\u043F\u0438\
    \u0448\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044C \u0440\u0435\u0448\u0435\
    \u043D\u0438\u0435 \u043F\u0440\u0438\u043C\u0435\u043D\u044F\u044F \u0432\u043E\
    \u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u0438 \u043F\u0430\u043A\u0435\
    \u0442\u0430 num\n    // \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\
    \u0443\u0439\u0442\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043E\u0440\u044B\
    \n    // \u044D\u0442\u043E \u043C\u043E\u0436\u043D\u043E \u0441\u0434\u0435\u043B\
    \u0430\u0442\u044C \u0437\u0430\u0434\u0430\u0432\u0430\u044F \u043D\u0443\u0436\
    \u043D\u0443\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u0432 \u043A\u0430\
    \u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0442\u043E\u0440\u043E\u0433\u043E\
    \ \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430 \u0444\u0443\u043D\u043A\
    \u0446\u0438\u0438 zip\n    // \u044D\u0442\u0430 \u0444\u0443\u043D\u043A\u0446\
    \u0438\u044F \u0434\u043E\u043B\u0436\u043D\u0430 \u0432\u043E\u0437\u0432\u0440\
    \u0430\u0449\u0430\u0442\u044C 0 \u0435\u0441\u043B\u0438 \u0437\u043D\u0430\u0447\
    \u0435\u043D\u0438\u044F \u0440\u0430\u0432\u043D\u044B \u0438\u043B\u0438 \u0438\
    \u0445 \u0430\u0431\u0441\u043E\u043B\u044E\u0442\u043D\u0443\u044E \u0440\u0430\
    \u0437\u043D\u0438\u0446\u0443 \u0432 \u043F\u0440\u043E\u0442\u0438\u0432\u043D\
    \u043E\u043C \u0441\u043B\u0443\u0447\u0430\u0435\n\n    let mut result = vec![];\n\
    \    for (x, y) in game.iter().zip(guess.iter()) {\n        if x == y {\n    \
    \        result.push(0);\n        } else {\n            result.push((x - y).abs());\n\
    \        }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(g, gs)|
    (g - gs).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      result.push(if game[i] >= guess[i] {\n            game[i] - guess[i]\n\
    \        } else {\n            guess[i] - game[i]\n        });\n    }\n    result",
  "    if game.len() != guess.len() {\n        panic!(\"Different length\");\n   \
    \ }\n\n    let mut result = Vec::new();\n    for i in 0..game.len() {\n      \
    \  result.push(compare_values(game[i], guess[i]));\n    }\n    result", "    let\
    \ mut v = Vec::new();\n    for i in 0..game.len() {\n        let g = game[i];\n\
    \        let g2 = guess[i];\n        if g > g2 {\n            v.push(g - g2);\n\
    \        } else {\n            v.push(g2 - g);\n        }\n    }\n    v", "  \
    \  let mut result: Vec<isize> = Vec::new();\n    for (val, guess) in game.iter().zip(guess.iter())\
    \ {\n        result.push(if *val == *guess { 0 } else { (val - guess).abs() });\n\
    \    }\n    result", '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    // implement here\n    vec![]", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)|
    (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g, gs)| (g
    - gs).abs()).collect()', "    assert_eq!(game.len(), guess.len());\n    let mut\
    \ match_result = Vec::new();\n    for i in 0..game.len() {\n        match_result.push(score_compare(game[i],\
    \ guess[i]));\n    }\n    match_result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g, p)|
    (g - p).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)| (x
    - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(s, g)| (s - g).abs()).collect()', "   \
    \ let mut v = Vec::new();\n    for i in 0..game.len() {\n        v.push( (game[i]\
    \ - guess[i]).abs() );\n    }\n    v", "\tlet mut result: Vec<isize> = Vec::new();\n\
    \tfor i in 0..game.len() {\n\t\tresult.push(compare_index(game[i], guess[i]));\n\
    \t}\n\tresult", "    // This is your job. Add your code here.\n    let mut result:\
    \ Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n        let diff = (game[i]\
    \ - guess[i]).abs();\n        result.push(diff);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut res: Vec<isize> = Vec::new();\n  \
    \  for (i, e) in game.iter().enumerate() {\n        res.push(e - guess[i]);\n\
    \    }\n    res", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(x, y)| if x == y { 0 } else { (x - y).abs()
    }).collect()', '    game.iter().zip(guess.iter()).map(|(g, r)| g - r).collect()',
  "    let mut result = Vec::new();\n    for (index, _) in game.iter().enumerate()\
    \ {\n        let diff = game[index] - guess[index];\n        if diff < 0 {\n \
    \           result.push(diff.abs());\n        } else {\n            result.push(diff);\n\
    \        }\n    }\n    result", "    let result = game.iter().zip(guess.iter()).map(|(x,\
    \ y)| (x - y).abs()).collect();\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in\
    \ 0..game.len() {\n        let mut diff = (game[i] - guess[i]).abs();\n      \
    \  if diff == 1 && guess[i] > game[i] {\n            diff = diff + 1;\n      \
    \  }\n        result.push(diff);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(game,
    guess)| game - guess).collect()', "    let mut results = Vec::new();\n    if game.len()\
    \ != guess.len() {\n        panic!(\"Game length must be equal to guess length\"\
    );\n    }\n    for (idx, val) in game.iter().enumerate() {\n        let guess_val\
    \ = guess[idx];\n        let diff = (*val - guess_val).abs();\n        results.push(diff);\n\
    \    }\n    results", "    assert_eq!(game.len(), guess.len());\n    return game.iter().zip(guess.iter()).map(|(s,\
    \ g)| (s - g).abs()).collect();", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for (index, item)\
    \ in game.iter().enumerate() {\n        result.push(guess[index] - item);\n  \
    \  }\n    result", "    // guesses - scores\n    let result = game.iter().zip(guess.iter())\n\
    \        .map(|(s, g)| (g - s).abs())\n        .collect();\n    result", "   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n   \
    \     result.push(compare_score(game[i], guess[i]));\n    }\n    result", "  \
    \  let mut result = Vec::new();\n    for i in 0..game.len() {\n        let x =\
    \ (game[i] - guess[i]).abs();\n        result.push(x);\n    }\n    result", "\t\
    let mut results = Vec::new();\n\tfor i in 0..game.len() {\n\t\tresults.push(game[i]\
    \ - guess[i]);\n\t}\n\treturn results;", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)|
    (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)| (x
    - y).abs()).collect()', "    // Implement your solution here\n    vec![]", " \
    \   let mut result = Vec::new();\n    for i in 0..game.len() {\n        let mut\
    \ diff = game[i] - guess[i];\n        if diff < 0 {\n            diff = -diff;\n\
    \        }\n        result.push(diff);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    // add code here\n    Vec::new()", "    let\
    \ mut result = Vec::new();\n    for (g, h) in game.iter().zip(guess.iter()) {\n\
    \        result.push(g - h);\n    }\n    result", "    let mut result: Vec<isize>\
    \ = Vec::new();\n    for (i, _) in game.iter().enumerate() {\n        let temp\
    \ = game[i] - guess[i];\n        if temp < 0 {\n            result.push(-temp);\n\
    \        } else {\n            result.push(temp);\n        }\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    unimplemented!()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', "    let mut result = Vec::new();\n    let mut\
    \ iter_game = game.iter();\n    let mut iter_guess = guess.iter();\n    while\
    \ let (Some(game_score), Some(guess_score)) = (iter_game.next(), iter_guess.next())\
    \ {\n        result.push(if *game_score == *guess_score {\n            0\n   \
    \     } else {\n            (*game_score - *guess_score).abs()\n        });\n\
    \    }\n    result", "    let mut results = Vec::new();\n    for (score, guess)\
    \ in game.iter().zip(guess.iter()) {\n        results.push(\n            (score\
    \ - guess).abs()\n        );\n    }\n    results", "    let game_len = game.len();\n\
    \    let mut res = Vec::with_capacity(game_len);\n    for i in 0..game_len {\n\
    \        res.push(game[i] - guess[i]);\n    }\n    res", '    game.iter().zip(guess.iter()).map(|(game,
    guess)| (game - guess).abs()).collect()', "    let mut results = Vec::with_capacity(game.len());\n\
    \    for (score, num) in game.iter().zip(guess.iter()) {\n        results.push(score.abs()\
    \ - num.abs());\n    }\n    results", '    game.iter().zip(guess.iter()).map(|(i,
    j)| (i - j).abs()).collect()', "    // your code here\n    let mut result = Vec::new();\n\
    \    for i in 0..game.len() {\n        let dif = (game[i] - guess[i]).abs();\n\
    \        result.push(dif);\n    }\n    result", "    if game.len() != guess.len()\
    \ {\n        return vec![];\n    }\n    game.iter().zip(guess.iter()).map(|(x,\
    \ y)| (x - y).abs()).collect()", "    assert_eq!(game.len(), guess.len());\n \
    \   let ans = game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect();\n\
    \    println!(\"{:?}\", ans);\n    ans", "    let mut results = Vec::with_capacity(game.len());\n\
    \    for i in 0..game.len() {\n        let res = (game[i] - guess[i]).abs();\n\
    \        results.push(res);\n    }\n    results", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', "\tlet mut distance = Vec::new();\n\tfor i in 0..game.len()\
    \ {\n\t\tlet diff = (game[i] - guess[i]).abs();\n\t\tdistance.push(diff);\n\t\
    }\n\tdistance", "    let mut results = Vec::new();\n    for (idx, item) in game.iter().enumerate()\
    \ {\n        results.push(item - guess[idx]);\n    }\n    results", '    game.iter().zip(guess.iter()).map(|(i,
    j)| (i - j).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g, gs)| (g -
    gs).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut v: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n        let\
    \ g: isize = game[i];\n        let gs: isize = guess[i];\n        let diff: isize\
    \ = (g - gs).abs();\n        v.push(diff);\n    }\n    v", "    let mut result:\
    \ Vec<isize> = Vec::new();\n    for (i, j) in game.iter().zip(guess.iter()) {\n\
    \        result.push(i - j).abs();\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(score,
    guessed)| if score == guessed {0} else {(score - guessed).abs()}).collect()',
  "    if game.len() != guess.len() {\n        return vec![];\n    }\n    let mut\
    \ result = vec![];\n    for i in 0..game.len() {\n        let diff = if game[i]\
    \ < guess[i] {\n            guess[i] - game[i]\n        } else {\n           \
    \ game[i] - guess[i]\n        };\n        result.push(diff);\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(game, guess)| (game - guess).abs()).collect()',
  "    let mut diff = Vec::new();\n    for i in 0..game.len() {\n        diff.push(game[i]\
    \ - guess[i]);\n    }\n    diff", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g, gs)|
    (g - gs).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut res = Vec::with_capacity(game.len());\n \
    \   let mut iter = game.iter().zip(guess.iter());\n    while let Some((a, b))\
    \ = iter.next() {\n        let diff = (a - b).abs();\n        res.push(diff);\n\
    \    }\n    res", '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ if game.len() != guess.len() {\n        panic!(\"Game vector and guess vector\
    \ must be the same length\");\n    }\n\n    let mut results = Vec::with_capacity(game.len());\n\
    \n    for (idx, g) in game.iter().enumerate() {\n        let guess = guess[idx];\n\
    \        results.push(if guess < *g {\n            g - guess\n        } else {\n\
    \            guess - g\n        });\n    }\n\n    results", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)|
    (x - y).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        let diff = (game[i] - guess[i]).abs();\n        result.push(diff);\n\
    \    }\n    result", "    let score = game.iter().zip(guess.iter()).map(|(x, y)|\
    \ (x - y).abs()).collect();\n    score", "    // old version:\n    // game.iter().zip(guess.iter()).map(|(a,\
    \ b)| (a - b).abs()).collect()\n    // A new version, has no runtime difference,\
    \ but more clear\n    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()",
  "    let mut res = Vec::new();\n    for (g, f) in game.iter().zip(guess.iter())\
    \ {\n        res.push(g.abs() - f.abs());\n    }\n    res", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)|
    (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    game.iter().zip(guess.iter()).map(|(g, gs)|\n   \
    \     if g == gs {\n            0\n        } else {\n            (g - gs).abs()\n\
    \        }\n    ).collect()", "    let mut result = Vec::new();\n    for index\
    \ in 0..game.len() {\n        let actual = game[index];\n        let expected\
    \ = guess[index];\n        result.push(if actual == expected {\n            0\n\
    \        } else {\n            (actual - expected).abs()\n        });\n    }\n\
    \    result", '    game.iter().zip(guess.iter()).map(|(g, gs)| (g - gs).abs()).collect()',
  "    let scores: Vec<isize> = game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect();\n\
    \    scores", '    game.iter().zip(guess.iter()).map(|(x, y)| (*x - *y).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    return game.iter().zip(guess.iter()).map(|(&x,
    &y)| (x - y).abs()).collect();', '    vec![0; game.len()]', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    // your code here\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in 0..game.len() {\n        let mut diff = (game[i]\
    \ - guess[i]).abs();\n        result.push(diff);\n    }\n    result", "\tlet mut\
    \ guess: Vec<isize> = guess;\n\tfor (score, guess) in game.iter().zip(guess.iter_mut())\
    \ {\n\t\tif *guess > *score {\n\t\t\t*guess -= *score;\n\t\t} else {\n\t\t\t*guess\
    \ = *score - *guess;\n\t\t}\n\t}\n\tguess", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut results = Vec::with_capacity(game.len());\n\
    \    for i in 0..game.len() {\n        results.push(game[i] - guess[i]);\n   \
    \ }\n    results", "    // your code here\n    let mut v = Vec::new();\n    for\
    \ (g, gue) in game.iter().zip(guess.iter()) {\n        if g > gue {\n        \
    \    v.push(g - gue);\n        } else {\n            v.push(gue - g);\n      \
    \  }\n    }\n    v", '    game.iter().zip(guess.iter()).map(|(a, b)| a - b).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut results = Vec::new();\n    for (game_s, guess_s) in game.iter().zip(guess.iter())\
    \ {\n        results.push(\n            if game_s > guess_s { game_s - guess_s\
    \ } else { guess_s - game_s }\n        );\n    }\n    results", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(game,
    guess)| (game - guess).abs()).collect()', "    let mut distances = Vec::with_capacity(game.len());\n\
    \    for (s, g) in game.iter().zip(guess.iter()) {\n        let distance = (s\
    \ - g).abs();\n        distances.push(distance);\n    }\n    distances", "   \
    \ let mut result = Vec::new();\n    for (idx, _game) in game.iter().enumerate()\
    \ {\n        let _guess = guess[idx];\n        let res = if _game > &_guess {\n\
    \            _game - &_guess\n        } else {\n            _guess - _game\n \
    \       };\n        result.push(res);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    for i in 0..game.len() {\n        let diff = (game[i] - guess[i]).abs();\n\
    \        result.push(diff);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    for i in 0..game.len() {\n        let value = game[i] - guess[i];\n     \
    \   result.push(value.abs());\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(game,
    guess)| (game - guess).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g,
    a)| (g - a).abs()).collect()', "    let mut comp: Vec<isize> = Vec::new();\n \
    \   for i in 0..game.len() {\n        comp.push(game[i] - guess[i]);\n    }\n\
    \    return comp;", "    // TODO: implement this function!\n    unimplemented!();",
  "    let mut result = Vec::new();\n    for (&a, &b) in game.iter().zip(guess.iter())\
    \ {\n        result.push(a.abs_diff(b));\n    }\n    result", "    if game.len()\
    \ != guess.len() {\n        panic!(\"wrong input!\");\n    }\n\n    let diffs:\
    \ Vec<isize> = game.iter().zip(guess.iter()).map(|(&a, &b)| (a - b).abs()).collect();\n\
    \    diffs", '    game.iter().zip(guess.iter()).map(|(game, guess)| (game - guess).abs()).collect()',
  "    let mut arr: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n     \
    \   arr.push(game[i] - guess[i]);\n    }\n    arr", "    if game.len() != guess.len()\
    \ {\n        panic!(\"[-] The two vectors must be of equal length!\");\n    }\n\
    \    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()", " \
    \   let mut res = Vec::new();\n    for i in 0..game.len() {\n        res.push(cmp::max(game[i],\
    \ guess[i]) - cmp::min(game[i], guess[i]));\n    }\n    res", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for (i, _v) in game.iter().enumerate() {\n        result.push(game[i] - guess[i]).abs();\n\
    \    }\n    result", "    // unimplemented!();\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in 0..game.len() {\n        let mut tmp = game[i] -\
    \ guess[i];\n        if tmp < 0 {\n            tmp = -tmp;\n        }\n      \
    \  result.push(tmp);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(game,
    guess)| (game - guess).abs()).collect()', "    assert_eq!(game.len(), guess.len());\n\
    \    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()", " \
    \   let mut res = Vec::new();\n    for (idx, value) in game.iter().enumerate()\
    \ {\n        let diff = value - guess[idx];\n        res.push(diff.abs());\n \
    \   }\n    res", "    game.iter().zip(guess.iter()).map(|(s, g)| {\n        let\
    \ diff = s - g;\n        diff.abs()\n    }).collect()", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut ret: Vec<isize> = Vec::new();\n  \
    \  for (i, v) in game.iter().enumerate() {\n        if v == &guess[i] {\n    \
    \        ret.push(0);\n        } else {\n            ret.push((v - guess[i]).abs());\n\
    \        }\n    }\n    ret", "    let xs = game.iter();\n    let ys = guess.iter();\n\
    \    xs.zip(ys).map(|(x, y)| (x - y).abs()).collect()", '    game.iter().zip(guess.iter()).map(|(g,
    gs)| (g - gs).abs()).collect()', "    let mut res = Vec::new();\n    if game.len()\
    \ == guess.len() {\n        for i in 0..game.len() {\n            res.push((game[i]\
    \ - guess[i]).abs());\n        }\n    }\n    res", '    vec![0,0,0,0,0,0]', "\t\
    let mut result = Vec::new();\n\tfor (i, g) in game.iter().enumerate() {\n\t\t\
    let mut d = g - guess[i];\n\t\tif d < 0 { d = -d; }\n\t\tresult.push(d);\n\t}\n\
    \tresult", "    game.iter().zip(guess.iter()).map(|(score, guess)| {\n       \
    \ (score - guess).abs()\n    }).collect()", '    return game.iter().zip(guess.iter()).map(|(game,
    guess)| (game - guess).abs()).collect();', '    game.iter().zip(guess.iter()).map(|(x,
    y)| if x > y { x - y } else { y - x }).collect()', "    let score = game.iter().zip(guess.iter()).map(|(&x,\
    \ &y)|\n        match x.cmp(&y) {\n            Ordering::Equal => 0,\n       \
    \     Ordering::Greater => x - y,\n            Ordering::Less => y - x,\n    \
    \    }\n    ).collect();\n    score"]
stop_tokens:
- "\n}"
