name: HumanEval_152_compare
language: rs
prompt: "/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two vectors of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return a vector of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\n/// >>>\
  \ compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0,\
  \ 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4,\
  \ 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
  \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
  \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
completions: ['    return game.iter().zip(guess.iter()).map(|x| (x.0 - x.1).abs()).collect();',
  "    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push(\n\
    \            if game[i] < 0 && guess[i] < 0 {\n                (game[i] - guess[i]).abs()\n\
    \            } else if game[i] < 0 && guess[i] > 0 {\n                game[i]\
    \ - guess[i]\n            } else if game[i] > 0 && guess[i] < 0 {\n          \
    \      game[i] - guess[i]\n            } else {\n                (game[i] - guess[i]).abs()\n\
    \            }\n        );\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    for _ in game {\n        let mut diff = game[i] - guess[i];\n\
    \        if diff < 0 {\n            diff = -diff;\n        }\n        result.push(diff);\n\
    \        i += 1;\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    assert_eq!(game.len(), guess.len());\n   \
    \ let mut result = Vec::new();\n    for i in 0..game.len() {\n        let diff\
    \ = (game[i] - guess[i]).abs();\n        result.push(diff);\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(g, &gu)| g.abs_diff(&gu)).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let rng = Range::new(0, guess.len());\n  \
    \  let mut rng = thread_rng();\n    let mut v: Vec<isize> = vec![];\n    for i\
    \ in 0..guess.len() {\n        if guess[i] > game[i] {\n            v.push(guess[i]\
    \ - game[i]);\n        } else if guess[i] < game[i] {\n            v.push(game[i]\
    \ - guess[i]);\n        } else {\n            v.push(0);\n        }\n    }\n \
    \   return v;", '    game.iter().zip(guess.iter()).map(|(g, gs)| g - gs).collect()',
  '    game.iter().zip(guess.iter()).map(|(g, gs)| (g - gs).abs()).collect()', '    unimplemented!()',
  "    let mut res = Vec::new();\n    for i in 0..game.len() {\n        res.push(cmp::max(game[i],\
    \ guess[i]) - cmp::min(game[i], guess[i]));\n    }\n    res", "    // apply an\
    \ abs(guess - game) to each index of the two vectors\n    let ret = game.iter().zip(guess.iter()).map(|(g,\
    \ h)| (g - h).abs()).collect();\n    ret", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut res = Vec::new();\n    for i in 0..game.len()\
    \ {\n        res.push( (game[i] - guess[i]).abs() );\n    }\n    res", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(c, g)|
    (c - g).abs()).collect()', "    // TODO\n    vec![]", "    assert_eq!(game.len(),\
    \ guess.len());\n    let mut score: Vec<isize> = Vec::new();\n    for i in 0..game.len()\
    \ {\n        score.push(game[i] - guess[i]).abs();\n    }\n    score", '    game.iter().zip(guess.iter()).map(|(v,
    g)| (v - g).abs()).collect()']
stop_tokens:
- "\n}"
