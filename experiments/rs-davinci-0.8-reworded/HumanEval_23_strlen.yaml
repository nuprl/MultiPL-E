name: HumanEval_23_strlen
language: rs
prompt: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n///\
  \ 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String) ->\
  \ isize {\n"
tests: "}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
  asdasnakj\")), 9);\n}\n"
completions: ['    string.len() as isize', "    let mut i = 0;\n    while i < string.len()\
    \ {\n        i += 1;\n    }\n    i", '    string.len() as isize', '    string.len()
    as isize', "    let mut length = 0;\n    for _ in string.chars() {\n        length\
    \ += 1;\n    }\n    length", "    let mut len = 0;\n    for _ in string.chars()\
    \ {\n        len += 1;\n    }\n    len", "    let mut count = 0;\n    for _ in\
    \ string.chars() {\n        count += 1;\n    }\n    count", '    strlen_char_iter(string.chars())',
  '    string.len() as isize', '    string.len() as isize', "    if string.is_empty()\
    \ {\n        0\n    } else {\n        1 + strlen(string[1..].to_string())\n  \
    \  }", "    let mut length = 0;\n    for c in string.chars() {\n        length\
    \ += 1;\n    }\n    length", "    let mut length = 0;\n    for c in string.chars()\
    \ {\n        length += 1;\n    }\n    length", '    string.len() as isize', " \
    \   let r = string.into_bytes();\n    r.len() as isize", "    let mut x = 0;\n\
    \    for _ in string.chars() {\n        x += 1;\n    }\n    x", "    let chars:\
    \ Vec<char> = string.chars().collect();\n    let len = chars.len() as isize;\n\
    \    len", "    if string.is_empty() {\n        0\n    } else {\n        1 + strlen(tail(string))\n\
    \    }", '    string.len() as isize', '    string.len() as isize']
stop_tokens:
- "\n}"
