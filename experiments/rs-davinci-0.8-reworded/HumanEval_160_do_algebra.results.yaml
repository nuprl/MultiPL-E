language: rs
name: HumanEval_160_do_algebra
results:
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Write\
    \ your code here\n    let mut eval_result = operand[0];\n    for i in 0..operand.len()\
    \ - 1 {\n        if operator[i] == \"+\" {\n            eval_result += operand[i\
    \ + 1];\n        } else if operator[i] == \"-\" {\n            eval_result -=\
    \ operand[i + 1];\n        } else if operator[i] == \"*\" {\n            eval_result\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            eval_result\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            eval_result\
    \ = eval_result.pow(operand[i + 1] as u32);\n        }\n    }\n    eval_result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5tnfcg8l.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut  stack: Vec<isize> = Vec::new();\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => {\n                let\
    \ b = stack.pop().unwrap();\n                let a = stack.pop().unwrap();\n \
    \               stack.push(a + b);\n            },\n            \"-\" => {\n \
    \               let b = stack.pop().unwrap();\n                let a = stack.pop().unwrap();\n\
    \                stack.push(a - b);\n            },\n            \"*\" => {\n\
    \                let b = stack.pop().unwrap();\n                let a = stack.pop().unwrap();\n\
    \                stack.push(a * b);\n            },\n            \"//\" => {\n\
    \                let b = stack.pop().unwrap();\n                let a = stack.pop().unwrap();\n\
    \                stack.push(a / b);\n            },\n            \"**\" => {\n\
    \                let b = stack.pop().unwrap();\n                let a = stack.pop().unwrap();\n\
    \                stack.push(a.pow(b as u32));\n            },\n            _ =>\
    \ (),\n        }\n        stack.push(operand[i+1]);\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmptx9b5zuv.rs:44:37

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut it = operand.iter();\n    let mut result = *it.next().unwrap();\n    for\
    \ op in operator {\n        let x = *it.next().unwrap();\n        match op.as_str()\
    \ {\n            \"+\" => result += x,\n            \"-\" => result -= x,\n  \
    \          \"*\" => result *= x,\n            \"//\" => result /= x,\n       \
    \     \"**\" => result = result.pow(x as u32),\n            _ => {}\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwcnxda0i.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut total = operand[0];\n    for i in 0..operand.len() - 1 {\n        match\
    \ operator[i].as_str() {\n            \"+\" => total += operand[i + 1],\n    \
    \        \"-\" => total -= operand[i + 1],\n            \"*\" => total *= operand[i\
    \ + 1],\n            \"//\" => total /= operand[i + 1],\n            \"**\" =>\
    \ total = total.pow(operand[i + 1] as u32),\n            _ => panic!(\"Unknown\
    \ operator: {}\", operator[i])\n        }\n    }\n    total\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmps_enobh1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand.iter().zip(operator.iter()).fold(\n\
    \        operand[0],\n        |acc, (operand, op)| match op.as_str() {\n     \
    \       \"+\" => acc + operand,\n            \"-\" => acc - operand,\n       \
    \     \"*\" => acc * operand,\n            \"//\" => acc / operand,\n        \
    \    \"**\" => acc.pow(*operand as u32),\n            _ => panic!(\"Unknown operator\"\
    ),\n        },\n    )\n}\n\nfn main() {\n    let candidate = do_algebra;\n   \
    \ assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `37`', /tmp/tmpnn83z8mm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ operator: Vec<char> = operator.iter().map(|s| s.chars().next().unwrap()).collect();\n\
    \    let mut stack: Vec<isize> = Vec::new();\n    let mut operand_iter = operand.iter();\n\
    \    let mut op_iter = operator.iter();\n    let mut curr_operand = operand_iter.next().unwrap();\n\
    \    while let Some(op) = op_iter.next() {\n        match op {\n            '+'\
    \ => stack.push(*curr_operand),\n            '-' => stack.push(-*curr_operand),\n\
    \            '*' => stack.push(stack.pop().unwrap() * *curr_operand),\n      \
    \      '//' => stack.push(stack.pop().unwrap() / *curr_operand),\n           \
    \ '^' => stack.push(stack.pop().unwrap().pow(*curr_operand as u32)),\n       \
    \     _ => unreachable!(),\n        }\n        curr_operand = operand_iter.next().unwrap();\n\
    \    }\n    stack.push(*curr_operand);\n    stack.iter().sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp2p3l21h6.rs:30:13\n\
    \   |\n30 |             '//' => stack.push(stack.pop().unwrap() / *curr_operand),\n\
    \   |             ^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa_2_9de0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  if operand.len()\
    \ == 0 { return 0; }\n  if operand.len() == 1 { return operand[0]; }\n  let mut\
    \ result = operand[0];\n  for i in 0..operator.len() {\n    let oper = operator[i].clone();\n\
    \    let next_val = operand[i+1];\n    match oper.as_str() {\n      \"+\" => result\
    \ += next_val,\n      \"-\" => result -= next_val,\n      \"*\" => result *= next_val,\n\
    \      \"//\" => result /= next_val,\n      \"**\" => result = result.pow(next_val\
    \ as u32),\n      _ => {},\n    }\n  }\n  result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwm4ksf20.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        return 0;\n    }\n    let mut stack: Vec<isize>\
    \ = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < operand.len()\
    \ {\n        stack.push(operand[i]);\n        if j < operator.len() {\n      \
    \      match operator[j].as_str() {\n                \"+\" => {\n            \
    \        stack.push(stack.pop().unwrap() + stack.pop().unwrap());\n          \
    \      }\n                \"-\" => {\n                    let v1 = stack.pop().unwrap();\n\
    \                    let v2 = stack.pop().unwrap();\n                    stack.push(v2\
    \ - v1);\n                }\n                \"*\" => {\n                    stack.push(stack.pop().unwrap()\
    \ * stack.pop().unwrap());\n                }\n                \"//\" => {\n \
    \                   let v1 = stack.pop().unwrap();\n                    let v2\
    \ = stack.pop().unwrap();\n                    stack.push(v2 / v1);\n        \
    \        }\n                \"**\" => {\n                    let v1 = stack.pop().unwrap();\n\
    \                    let v2 = stack.pop().unwrap();\n                    stack.push(v2.pow(v1\
    \ as u32));\n                }\n                _ => {}\n            }\n     \
    \       j += 1;\n        }\n        i += 1;\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmpwp2lah1z.rs:31:32\n   |\n31 |                     stack.push(stack.pop().unwrap()\
    \ + stack.pop().unwrap());\n   |                     -----------^^^^^^^^^^^---------------------------------\n\
    \   |                     |     |    |\n   |                     |     |    second\
    \ mutable borrow occurs here\n   |                     |     first borrow later\
    \ used by call\n   |                     first mutable borrow occurs here\n  \
    \ |\nhelp: try adding a local storing this argument...\n  --> /tmp/tmpwp2lah1z.rs:31:32\n\
    \   |\n31 |                     stack.push(stack.pop().unwrap() + stack.pop().unwrap());\n\
    \   |                                ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmpwp2lah1z.rs:31:21\n   |\n\
    31 |                     stack.push(stack.pop().unwrap() + stack.pop().unwrap());\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0499]: cannot borrow `stack` as mutable more than once at a time\n  -->\
    \ /tmp/tmpwp2lah1z.rs:31:55\n   |\n31 |                     stack.push(stack.pop().unwrap()\
    \ + stack.pop().unwrap());\n   |                     ----------------------------------^^^^^^^^^^^----------\n\
    \   |                     |     |                           |\n   |          \
    \           |     |                           second mutable borrow occurs here\n\
    \   |                     |     first borrow later used by call\n   |        \
    \             first mutable borrow occurs here\n   |\nhelp: try adding a local\
    \ storing this argument...\n  --> /tmp/tmpwp2lah1z.rs:31:55\n   |\n31 |      \
    \               stack.push(stack.pop().unwrap() + stack.pop().unwrap());\n   |\
    \                                                       ^^^^^^^^^^^\nhelp: ...and\
    \ then using that local as the argument to this call\n  --> /tmp/tmpwp2lah1z.rs:31:21\n\
    \   |\n31 |                     stack.push(stack.pop().unwrap() + stack.pop().unwrap());\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerr"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut output = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => output += operand[i + 1],\n            \"-\" => output\
    \ -= operand[i + 1],\n            \"*\" => output *= operand[i + 1],\n       \
    \     \"//\" => output /= operand[i + 1],\n            \"**\" => output = output.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"unexpected operator\"),\n        }\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpd7haupjy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // check\
    \ if the operator vector is one smaller than the operand vector\n    assert_eq!(operator.len(),\
    \ operand.len() - 1);\n    // check if the operator vector has at least one operator\n\
    \    assert!(operator.len() > 0);\n    // check if the operand vector has at least\
    \ two operands\n    assert!(operand.len() > 1);\n    // check if the operand vector\
    \ has all non-negative integers\n    assert!(operand.iter().all(|&num| num >=\
    \ 0));\n\n    let mut result = operand[0];\n    for (idx, op) in operator.iter().enumerate()\
    \ {\n        let left = operand[idx];\n        let right = operand[idx + 1];\n\
    \        match op.as_str() {\n            \"+\" => result = left + right,\n  \
    \          \"-\" => result = left - right,\n            \"*\" => result = left\
    \ * right,\n            \"//\" => result = left / right,\n            \"**\" =>\
    \ result = left.pow(right as u32),\n            _ => panic!(\"Wrong operator format!\"\
    ),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpog7fi0vy.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut index = 0;\n    let mut operators = Vec::new();\n    let mut operands =\
    \ Vec::new();\n    for op in &operator {\n        if op == \"+\" {\n         \
    \   operators.push(1);\n        } else if op == \"-\" {\n            operators.push(2);\n\
    \        } else if op == \"*\" {\n            operators.push(3);\n        } else\
    \ if op == \"//\" {\n            operators.push(4);\n        } else if op == \"\
    **\" {\n            operators.push(5);\n        }\n    }\n    for num in &operand\
    \ {\n        operands.push(*num);\n    }\n    for op in &operators {\n       \
    \ if *op == 5 {\n            // **\n            let a = operands[index];\n   \
    \         let b = operands[index + 1];\n            operands[index] = a.pow(b\
    \ as u32);\n            operands.remove(index + 1);\n            operators.remove(index);\n\
    \        } else if *op == 4 {\n            // //\n            let a = operands[index];\n\
    \            let b = operands[index + 1];\n            operands[index] = a / b;\n\
    \            operands.remove(index + 1);\n            operators.remove(index);\n\
    \        } else if *op == 3 {\n            // *\n            let a = operands[index];\n\
    \            let b = operands[index + 1];\n            operands[index] = a * b;\n\
    \            operands.remove(index + 1);\n            operators.remove(index);\n\
    \        }\n    }\n    for op in &operators {\n        if *op == 2 {\n       \
    \     // -\n            let a = operands[index];\n            let b = operands[index\
    \ + 1];\n            operands[index] = a - b;\n            operands.remove(index\
    \ + 1);\n            operators.remove(index);\n        } else if *op == 1 {\n\
    \            // +\n            let a = operands[index];\n            let b = operands[index\
    \ + 1];\n            operands[index] = a + b;\n            operands.remove(index\
    \ + 1);\n            operators.\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpml3liwfx.rs:85:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n...\n63 |     for op in &operators {\n   |             \
    \             - unclosed delimiter\n...\n71 |         } else if *op == 1 {\n \
    \  |                            - this delimiter might not be properly closed...\n\
    ...\n78 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    85 | }\n   |   ^\n\nerror: unexpected token: `}`\n  --> /tmp/tmpml3liwfx.rs:78:1\n\
    \   |\n78 | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpml3liwfx.rs:77:13\n\
    \   |\n71 |           } else if *op == 1 {\n   |  ________________-\n72 | |  \
    \           // +\n73 | |             let a = operands[index];\n74 | |        \
    \     let b = operands[index + 1];\n...  |\n77 | |             operators.\n  \
    \ | |             ^^^^^^^^^ expected `()`, found struct `Vec`\n78 | | }\n   |\
    \ |_- expected this to be `()`\n   |\n   = note: expected unit type `()`\n   \
    \              found struct `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpml3liwfx.rs:63:5\n   |\n19 |   fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                          ----- expected `isize` because of return type\n...\n\
    63 | /     for op in &operators {\n64 | |         if *op == 2 {\n65 | |      \
    \       // -\n66 | |             let a = operands[index];\n...  |\n84 | |    \
    \ assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7,\
    \ 3, 4]), 8);\n85 | | }\n   | |__^ expected `isize`, found `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ == 0 {\n        return operand[0];\n    }\n    let mut idx = 0;\n    let mut\
    \ stack = vec![];\n    for op in operator {\n        match op.as_str() {\n   \
    \         \"+\" => {\n                let l = stack.pop().unwrap();\n        \
    \        let r = operand[idx + 1];\n                stack.push(l + r);\n     \
    \       }\n            \"-\" => {\n                let l = stack.pop().unwrap();\n\
    \                let r = operand[idx + 1];\n                stack.push(l - r);\n\
    \            }\n            \"*\" => {\n                let l = stack.pop().unwrap();\n\
    \                let r = operand[idx + 1];\n                stack.push(l * r);\n\
    \            }\n            \"/\" => {\n                let l = stack.pop().unwrap();\n\
    \                let r = operand[idx + 1];\n                stack.push(l / r);\n\
    \            }\n            \"^\" => {\n                let l = stack.pop().unwrap();\n\
    \                let r = operand[idx + 1];\n                stack.push(l.pow(r\
    \ as u32));\n            }\n            _ => panic!(\"Invalid operator!\"),\n\
    \        }\n        idx += 1;\n    }\n    stack.pop().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `Vec<T>`\n  --> /tmp/tmpp7dh3n5v.rs:50:28\n\
    \   |\n24 |     let mut stack = vec![];\n   |         --------- consider giving\
    \ `stack` the explicit type `Vec<T>`, with the type parameters specified\n...\n\
    50 |                 stack.push(l.pow(r as u32));\n   |                      \
    \      ^ cannot infer type\n   |\n   = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op = operator.iter();\n    let mut opd = operand.iter();\n    let mut result\
    \ = opd.next().unwrap();\n    for (op, opd) in op.zip(opd) {\n        let mut\
    \ opd = *opd;\n        if op == &\"//\" {\n            opd = opd.floor();\n  \
    \      }\n        result = match op.as_str() {\n            \"+\" => result +\
    \ opd,\n            \"-\" => result - opd,\n            \"*\" => result * opd,\n\
    \            \"//\" => result / opd,\n            \"**\" => result.pow(opd as\
    \ u32),\n            _ => result,\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpcx0pw4_n.rs:26:23\n   |\n26 |             opd = opd.floor();\n\
    \   |                       ^^^^^ help: there is an associated function with a\
    \ similar name: `div_floor`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcx0pw4_n.rs:29:20\n\
    \   |\n29 |             \"+\" => result + opd,\n   |                    ^^^^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&(result + opd)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpcx0pw4_n.rs:37:5\n   |\n19 | fn\
    \ do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |    \
    \                                                          ----- expected `isize`\
    \ because of return type\n...\n37 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n37 |  \
    \   *result\n   |     +\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    let mut result = operand.remove(0);\n    for (op,\
    \ num) in operator.iter().zip(operand) {\n        match op.as_str() {\n      \
    \      \"+\" => result += num,\n            \"-\" => result -= num,\n        \
    \    \"*\" => result *= num,\n            \"//\" => result /= num,\n         \
    \   \"**\" => result = result.pow(*num as u32),\n            _ => panic!(\"unknown\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmptwja74in.rs:28:41\n\
    \   |\n28 |             \"**\" => result = result.pow(*num as u32),\n   |    \
    \                                     ^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6xorodp5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut x = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => x += operand[i + 1],\n            \"-\" => x -= operand[i\
    \ + 1],\n            \"*\" => x *= operand[i + 1],\n            \"//\" => x /=\
    \ operand[i + 1],\n            \"**\" => x = x.pow(operand[i + 1] as u32),\n \
    \           _ => (),\n        }\n    }\n    x\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9pk221ry.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let mut\
    \ stack: Vec<isize> = Vec::new();\n  let mut idx = 0;\n  for op in operator {\n\
    \    stack.push(operand[idx]);\n    match op.as_str() {\n      \"+\" => {\n  \
    \      let a = stack.pop().unwrap();\n        let b = stack.pop().unwrap();\n\
    \        stack.push(a + b);\n      },\n      \"-\" => {\n        let a = stack.pop().unwrap();\n\
    \        let b = stack.pop().unwrap();\n        stack.push(b - a);\n      },\n\
    \      \"*\" => {\n        let a = stack.pop().unwrap();\n        let b = stack.pop().unwrap();\n\
    \        stack.push(a * b);\n      },\n      \"//\" => {\n        let a = stack.pop().unwrap();\n\
    \        let b = stack.pop().unwrap();\n        stack.push(b / a);\n      },\n\
    \      \"**\" => {\n        let a = stack.pop().unwrap();\n        let b = stack.pop().unwrap();\n\
    \        stack.push(b.pow(a as u32));\n      },\n      _ => panic!(\"Invalid operator!\"\
    ),\n    }\n    idx += 1;\n  }\n  stack.pop().unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpr2rfbodc.rs:47:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ op_iter = operator.iter();\n    let mut operand_iter = operand.iter();\n   \
    \ let a = *operand_iter.next().unwrap();\n    let b = *operand_iter.next().unwrap();\n\
    \    let mut result = do_op(a, b, op_iter.next().unwrap());\n    for op in op_iter\
    \ {\n        result = do_op(result, *operand_iter.next().unwrap(), op);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_op` in this scope\n  --> /tmp/tmpjti2m3wa.rs:24:22\n\
    \   |\n24 |     let mut result = do_op(a, b, op_iter.next().unwrap());\n   | \
    \                     ^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `do_op` in this scope\n  --> /tmp/tmpjti2m3wa.rs:26:18\n   |\n26 |\
    \         result = do_op(result, *operand_iter.next().unwrap(), op);\n   |   \
    \               ^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    for op in operator {\n        match op.as_str()\
    \ {\n            \"+\" => {\n                let operand_0 = operand.remove(0);\n\
    \                let operand_1 = operand.remove(0);\n                operand.insert(0,\
    \ operand_0 + operand_1);\n            }\n            \"-\" => {\n           \
    \     let operand_0 = operand.remove(0);\n                let operand_1 = operand.remove(0);\n\
    \                operand.insert(0, operand_0 - operand_1);\n            }\n  \
    \          \"*\" => {\n                let operand_0 = operand.remove(0);\n  \
    \              let operand_1 = operand.remove(0);\n                operand.insert(0,\
    \ operand_0 * operand_1);\n            }\n            \"//\" => {\n          \
    \      let operand_0 = operand.remove(0);\n                let operand_1 = operand.remove(0);\n\
    \                operand.insert(0, operand_0 / operand_1);\n            }\n  \
    \          \"**\" => {\n                let operand_0 = operand.remove(0);\n \
    \               let operand_1 = operand.remove(0);\n                operand.insert(0,\
    \ operand_0.pow(operand_1 as u32));\n            }\n            _ => panic!(\"\
    invalid operator\"),\n        }\n    }\n    return operand[0];\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpne8ls1qm.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // println!(\"\
    operator: {:?}\", operator);\n    // println!(\"operand: {:?}\", operand);\n \
    \   let mut operand = operand;\n    let mut acc: isize = operand.remove(0);\n\
    \    for (op, v) in operator.iter().zip(operand.iter()) {\n        match op.as_str()\
    \ {\n            \"+\" => acc += v,\n            \"-\" => acc -= v,\n        \
    \    \"*\" => acc *= v,\n            \"//\" => acc /= v,\n            \"**\" =>\
    \ acc = acc.pow(*v as u32),\n            _ => (),\n        }\n    }\n    acc\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpffhpx3xq.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (op, operand) in operator.iter().zip(operand.iter().skip(1))\
    \ {\n        if op == \"+\" {\n            result += operand;\n        } else\
    \ if op == \"-\" {\n            result -= operand;\n        } else if op == \"\
    *\" {\n            result *= operand;\n        } else if op == \"//\" {\n    \
    \        result /= operand;\n        } else if op == \"**\" {\n            result\
    \ = result.pow(*operand as u32);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpb7g7it7p.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut ops = operator.iter().map(|c| match c.as_str() {\n        \"+\" => Some(AddOp),\n\
    \        \"-\" => Some(SubOp),\n        \"*\" => Some(MulOp),\n        \"/\" =>\
    \ Some(DivOp),\n        \"^\" => Some(ExpOp),\n        _ => None,\n    });\n \
    \   let mut acc = operand[0];\n    for op in ops {\n        acc = match op {\n\
    \            Some(AddOp) => acc + operand[1],\n            Some(SubOp) => acc\
    \ - operand[1],\n            Some(MulOp) => acc * operand[1],\n            Some(DivOp)\
    \ => acc / operand[1],\n            Some(ExpOp) => acc.pow(operand[1] as u32),\n\
    \            None => panic!(\"No such operation!\"),\n        };\n    }\n    acc\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `AddOp` in this scope\n  --> /tmp/tmp6cc76to2.rs:21:21\n\
    \   |\n21 |         \"+\" => Some(AddOp),\n   |                     ^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `SubOp` in this scope\n\
    \  --> /tmp/tmp6cc76to2.rs:22:21\n   |\n22 |         \"-\" => Some(SubOp),\n \
    \  |                     ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `MulOp` in this scope\n  --> /tmp/tmp6cc76to2.rs:23:21\n   |\n23\
    \ |         \"*\" => Some(MulOp),\n   |                     ^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `DivOp` in this scope\n  --> /tmp/tmp6cc76to2.rs:24:21\n\
    \   |\n24 |         \"/\" => Some(DivOp),\n   |                     ^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `ExpOp` in this scope\n\
    \  --> /tmp/tmp6cc76to2.rs:25:21\n   |\n25 |         \"^\" => Some(ExpOp),\n \
    \  |                     ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpm4kvx4_q.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa_2_9de0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator.first() {\n        Some(item) => {\n            let new_operand = vec![operand[0],\
    \ operand[1]];\n            if item == &\"+\".to_string() {\n                do_algebra(\n\
    \                    operator[1..].to_vec(),\n                    [operand[2..].to_vec(),\
    \ vec![operand[0] + operand[1]]].concat(),\n                )\n            } else\
    \ if item == &\"-\".to_string() {\n                do_algebra(\n             \
    \       operator[1..].to_vec(),\n                    [operand[2..].to_vec(), vec![operand[0]\
    \ - operand[1]]].concat(),\n                )\n            } else if item == &\"\
    *\".to_string() {\n                do_algebra(\n                    operator[1..].to_vec(),\n\
    \                    [operand[2..].to_vec(), vec![operand[0] * operand[1]]].concat(),\n\
    \                )\n            } else if item == &\"//\".to_string() {\n    \
    \            do_algebra(\n                    operator[1..].to_vec(),\n      \
    \              [operand[2..].to_vec(), vec![operand[0] / operand[1]]].concat(),\n\
    \                )\n            } else if item == &\"**\".to_string() {\n    \
    \            do_algebra(\n                    operator[1..].to_vec(),\n      \
    \              [operand[2..].to_vec(), vec![operand[0].pow(operand[1] as u32)]].concat(),\n\
    \                )\n            } else {\n                0\n            }\n \
    \       }\n        None => operand[0],\n    }\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `37`', /tmp/tmpv4cr_uv9.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ operand: Vec<isize> = operand.iter().scan(None, |last, &curr| {\n        let\
    \ new = *last.unwrap_or(&0) + curr;\n        *last = Some(new);\n        Some(new)\n\
    \    }).collect();\n    // println!(\"{:?}\", operand);\n    (0..operator.len()).fold(operand[0],\
    \ |acc, i| {\n        let op = &operator[i];\n        let left = operand[i];\n\
    \        let right = operand[i + 1];\n        match op.as_str() {\n          \
    \  \"+\" => acc + right,\n            \"-\" => acc - right,\n            \"*\"\
    \ => acc * right,\n            \"//\" => acc / right,\n            \"**\" => acc.pow(right\
    \ as u32),\n            _ => unreachable!()\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeoxhlicn.rs:22:22\n   |\n\
    22 |         *last = Some(new);\n   |                      ^^^\n   |         \
    \             |\n   |                      expected `&isize`, found `isize`\n\
    \   |                      help: consider borrowing here: `&new`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut ans = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => ans += operand[i + 1],\n            \"-\" => ans -=\
    \ operand[i + 1],\n            \"*\" => ans *= operand[i + 1],\n            \"\
    //\" => ans /= operand[i + 1],\n            \"**\" => ans = ans.pow(operand[i\
    \ + 1] as u32),\n            _ => return 0,\n        }\n    }\n    ans\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmplh2vmuri.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut curr_operand = operand[0];\n    for i in 1..operand.len() {\n        match\
    \ operator[i - 1].as_str() {\n            \"+\" => curr_operand += operand[i],\n\
    \            \"-\" => curr_operand -= operand[i],\n            \"*\" => curr_operand\
    \ *= operand[i],\n            \"//\" => curr_operand /= operand[i],\n        \
    \    \"**\" => curr_operand = curr_operand.pow(operand[i] as u32),\n         \
    \   _ => panic!(\"Unexpected operator\"),\n        }\n    }\n    curr_operand\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqe3u3nku.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operand.len()\
    \ < 2 { return 0; }\n    let mut _operand = operand.to_vec();\n    let mut stack\
    \ = vec![];\n    for op in operator {\n        match op.as_str() {\n         \
    \   \"+\" => {\n                let a = _operand.pop().unwrap();\n           \
    \     let b = _operand.pop().unwrap();\n                _operand.push(a + b);\n\
    \            },\n            \"-\" => {\n                let a = _operand.pop().unwrap();\n\
    \                let b = _operand.pop().unwrap();\n                _operand.push(b\
    \ - a);\n            },\n            \"*\" => {\n                let a = _operand.pop().unwrap();\n\
    \                let b = _operand.pop().unwrap();\n                _operand.push(a\
    \ * b);\n            },\n            \"//\" => {\n                let a = _operand.pop().unwrap();\n\
    \                let b = _operand.pop().unwrap();\n                _operand.push(b\
    \ / a);\n            },\n            \"**\" => {\n                let a = _operand.pop().unwrap();\n\
    \                let b = _operand.pop().unwrap();\n                _operand.push(b.pow(a\
    \ as u32));\n            },\n            \"(\" => {\n                stack.push(_operand.pop().unwrap());\n\
    \            },\n            \")\" => {\n                let a = _operand.pop().unwrap();\n\
    \                let b = stack.pop().unwrap();\n                _operand.push(a\
    \ + b);\n            },\n            _ => { }\n        }\n    }\n    return _operand.pop().unwrap();\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3074`,\n right: `37`', /tmp/tmpr_cswlow.rs:66:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, &o) in operand.iter().enumerate().skip(1)\
    \ {\n        match &operator[i - 1][..] {\n            \"+\" => result += o,\n\
    \            \"-\" => result -= o,\n            \"*\" => result *= o,\n      \
    \      \"//\" => result /= o,\n            \"**\" => result = result.pow(o as\
    \ u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0uyniprw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    let mut operator = operator;\n    let mut result\
    \ = operand.remove(0);\n    loop {\n        let operand_current = operand.remove(0);\n\
    \        let operator_current = operator.remove(0);\n        match operator_current.as_str()\
    \ {\n            \"+\" => result += operand_current,\n            \"-\" => result\
    \ -= operand_current,\n            \"*\" => result *= operand_current,\n     \
    \       \"//\" => result /= operand_current,\n            \"**\" => result = result.pow(operand_current\
    \ as u32),\n            _ => panic!(\"Unknown operator {}\", operator_current),\n\
    \        }\n        if operator.is_empty() {\n            break;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpy2tyoc0m.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO:\
    \ Your code here\n    0\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpdjy61iew.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut operands: Vec<isize> = operand.clone();\n\
    \    let mut operators: Vec<String> = operator.clone();\n    while operands.len()\
    \ > 1 {\n        stack.push(operands.pop().unwrap());\n        let op = operators.pop().unwrap();\n\
    \        let left = operands.pop().unwrap();\n        let right = stack.pop().unwrap();\n\
    \        let result = evaluate(left, right, op);\n        operands.push(result);\n\
    \    }\n    operands.pop().unwrap()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `evaluate` in this scope\n  --> /tmp/tmp31_454vw.rs:28:22\n\
    \   |\n28 |         let result = evaluate(left, right, op);\n   |            \
    \          ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut _operand = operand.clone();\n    for (op, i) in operator.iter().zip(0..)\
    \ {\n        let left = _operand[i];\n        let right = _operand[i + 1];\n \
    \       _operand[i + 1] = match op.as_str() {\n            \"+\" => left + right,\n\
    \            \"-\" => left - right,\n            \"*\" => left * right,\n    \
    \        \"//\" => left / right,\n            \"**\" => left.pow(right as u32),\n\
    \            _ => panic!(\"Unknown operator\"),\n        };\n    }\n    _operand[operand.len()\
    \ - 1]\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqkfv3x59.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut iter = operand.iter();\n    iter.next()\n        .and_then(|initial| {\n\
    \            operator\n                .iter()\n                .zip(iter)\n \
    \               .fold(Some(*initial), |acc, (op, operand)| {\n               \
    \     acc.and_then(|value| match op.as_str() {\n                        \"+\"\
    \ => Some(value + operand),\n                        \"-\" => Some(value - operand),\n\
    \                        \"*\" => Some(value * operand),\n                   \
    \     \"//\" => Some(value / operand),\n                        \"**\" => Some(value.pow(*operand\
    \ as u32)),\n                        _ => None,\n                    })\n    \
    \            })\n        })\n        .unwrap_or(0)\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfe5fov1v.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut s = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => s += operand[i + 1],\n            \"-\" => s -= operand[i\
    \ + 1],\n            \"*\" => s *= operand[i + 1],\n            \"//\" => s /=\
    \ operand[i + 1],\n            \"**\" => s = s.pow(operand[i + 1] as u32),\n \
    \           _ => {}\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpk1ooi87o.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    for i in 0..operand.len() {\n     \
    \   match operator[i].as_str() {\n            \"+\" => stack.push(stack.pop().unwrap()\
    \ + operand[i]),\n            \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \            \"*\" => stack.push(stack.pop().unwrap() * operand[i]),\n       \
    \     \"//\" => stack.push(stack.pop().unwrap() / operand[i]),\n            \"\
    **\" => stack.push(stack.pop().unwrap().pow(operand[i] as u32)),\n           \
    \ _ => panic!(\"Invalid operator\")\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmp1ywqaiqc.rs:23:31\n   |\n23 |             \"+\" => stack.push(stack.pop().unwrap()\
    \ + operand[i]),\n   |                    -----------^^^^^^^^^^^-----------------------\n\
    \   |                    |     |    |\n   |                    |     |    second\
    \ mutable borrow occurs here\n   |                    |     first borrow later\
    \ used by call\n   |                    first mutable borrow occurs here\n   |\n\
    help: try adding a local storing this argument...\n  --> /tmp/tmp1ywqaiqc.rs:23:31\n\
    \   |\n23 |             \"+\" => stack.push(stack.pop().unwrap() + operand[i]),\n\
    \   |                               ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmp1ywqaiqc.rs:23:20\n   |\n\
    23 |             \"+\" => stack.push(stack.pop().unwrap() + operand[i]),\n   |\
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmp1ywqaiqc.rs:24:31\n\
    \   |\n24 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \   |                    -----------^^^^^^^^^^^-----------------------\n   | \
    \                   |     |    |\n   |                    |     |    second mutable\
    \ borrow occurs here\n   |                    |     first borrow later used by\
    \ call\n   |                    first mutable borrow occurs here\n   |\nhelp:\
    \ try adding a local storing this argument...\n  --> /tmp/tmp1ywqaiqc.rs:24:31\n\
    \   |\n24 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \   |                               ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmp1ywqaiqc.rs:24:20\n   |\n\
    24 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n   |\
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmp1ywqaiqc.rs:25:31\n\
    \   |\n25 |             \"*\" => stack.push(stack.pop().unwrap() * operand[i]),\n\
    \   |        "
  stdout: ''
  timestamp: 1659977836
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut eval_stack: Vec<isize> = Vec::new();\n\
    \    for x in operand {\n        stack.push(x);\n    }\n    for x in operator\
    \ {\n        if x == \"+\" {\n            let a = stack.pop().unwrap();\n    \
    \        let b = stack.pop().unwrap();\n            eval_stack.push(a + b);\n\
    \        } else if x == \"-\" {\n            let a = stack.pop().unwrap();\n \
    \           let b = stack.pop().unwrap();\n            eval_stack.push(b - a);\n\
    \        } else if x == \"*\" {\n            let a = stack.pop().unwrap();\n \
    \           let b = stack.pop().unwrap();\n            eval_stack.push(a * b);\n\
    \        } else if x == \"//\" {\n            let a = stack.pop().unwrap();\n\
    \            let b = stack.pop().unwrap();\n            eval_stack.push(b / a);\n\
    \        } else if x == \"**\" {\n            let a = stack.pop().unwrap();\n\
    \            let b = stack.pop().unwrap();\n            eval_stack.push(b.pow(a\
    \ as u32));\n        }\n    }\n    eval_stack.pop().unwrap()\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpj3tyxpv7.rs:27:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ == operand.len() - 1);\n    assert!(operator.len() >= 1);\n    assert!(operand.len()\
    \ >= 2);\n    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsnrba64f.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = vec![];\n    stack.push(operand[0]);\n    let n = operand.len();\n\
    \    for i in 1..n {\n        match operator[i - 1].as_str() {\n            \"\
    +\" => stack.push(stack.pop().unwrap() + operand[i]),\n            \"-\" => stack.push(stack.pop().unwrap()\
    \ - operand[i]),\n            \"*\" => stack.push(stack.pop().unwrap() * operand[i]),\n\
    \            \"//\" => stack.push(stack.pop().unwrap() / operand[i]),\n      \
    \      \"**\" => stack.push(stack.pop().unwrap().pow(operand[i] as u32)),\n  \
    \          _ => panic!(\"Unknown operator\"),\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmpxsodikdv.rs:25:31\n   |\n25 |             \"+\" => stack.push(stack.pop().unwrap()\
    \ + operand[i]),\n   |                    -----------^^^^^^^^^^^-----------------------\n\
    \   |                    |     |    |\n   |                    |     |    second\
    \ mutable borrow occurs here\n   |                    |     first borrow later\
    \ used by call\n   |                    first mutable borrow occurs here\n   |\n\
    help: try adding a local storing this argument...\n  --> /tmp/tmpxsodikdv.rs:25:31\n\
    \   |\n25 |             \"+\" => stack.push(stack.pop().unwrap() + operand[i]),\n\
    \   |                               ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmpxsodikdv.rs:25:20\n   |\n\
    25 |             \"+\" => stack.push(stack.pop().unwrap() + operand[i]),\n   |\
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmpxsodikdv.rs:26:31\n\
    \   |\n26 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \   |                    -----------^^^^^^^^^^^-----------------------\n   | \
    \                   |     |    |\n   |                    |     |    second mutable\
    \ borrow occurs here\n   |                    |     first borrow later used by\
    \ call\n   |                    first mutable borrow occurs here\n   |\nhelp:\
    \ try adding a local storing this argument...\n  --> /tmp/tmpxsodikdv.rs:26:31\n\
    \   |\n26 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \   |                               ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmpxsodikdv.rs:26:20\n   |\n\
    26 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n   |\
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmpxsodikdv.rs:27:31\n\
    \   |\n27 |             \"*\" => stack.push(stack.pop().unwrap() * operand[i]),\n\
    \   |        "
  stdout: ''
  timestamp: 1659977836
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  if operand.len()\
    \ < 2 {\n    return 0;\n  }\n  let mut result = operand[0];\n  for i in 0..operator.len()\
    \ {\n    match operator[i].as_str() {\n      \"+\" => result += operand[i + 1],\n\
    \      \"-\" => result -= operand[i + 1],\n      \"*\" => result *= operand[i\
    \ + 1],\n      \"//\" => result /= operand[i + 1],\n      \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n      _ => (),\n    }\n  }\n  result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpkj5dgk7b.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        let num = match op.as_str() {\n            \"+\" => operand[i] +\
    \ operand[i + 1],\n            \"-\" => operand[i] - operand[i + 1],\n       \
    \     \"*\" => operand[i] * operand[i + 1],\n            \"//\" => operand[i]\
    \ / operand[i + 1],\n            \"**\" => operand[i].pow(operand[i + 1] as u32),\n\
    \            _ => operand[i],\n        };\n        stack.push(num);\n    }\n \
    \   stack.pop().unwrap()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmptq1gf67d.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand.iter().skip(1).zip(operator).fold(operand[0],\
    \ |acc, (&o, &ref op)| {\n        match op.as_ref() {\n            \"+\" => acc\
    \ + o,\n            \"-\" => acc - o,\n            \"*\" => acc * o,\n       \
    \     \"//\" => acc / o,\n            \"**\" => acc.pow(o as u32),\n         \
    \   _ => panic!(\"Unknown operator!\"),\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe1bykl10.rs:20:70\n   |\n\
    20 |     operand.iter().skip(1).zip(operator).fold(operand[0], |acc, (&o, &ref\
    \ op)| {\n   |                                                               \
    \       ^^^^^^^- expected due to this\n   |                                  \
    \                                    |\n   |                                 \
    \                                     expected struct `String`, found reference\n\
    \   |                                                                      help:\
    \ you can probably remove the explicit borrow: `ref op`\n   |\n   = note: expected\
    \ struct `String`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Write\
    \ your code here\n    let mut stack = Vec::new();\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        if op == \"//\" {\n            let op2 = stack.pop().unwrap();\n\
    \            let op1 = stack.pop().unwrap();\n            stack.push(op1 / op2);\n\
    \        } else if op == \"**\" {\n            let op2 = stack.pop().unwrap();\n\
    \            let op1 = stack.pop().unwrap();\n            stack.push(op1.pow(op2\
    \ as u32));\n        } else {\n            let op1 = operand[i];\n           \
    \ let op2 = operand[i + 1];\n            stack.push(match op.as_str() {\n    \
    \            \"+\" => op1 + op2,\n                \"-\" => op1 - op2,\n      \
    \          \"*\" => op1 * op2,\n                _ => 0,\n            });\n   \
    \     }\n    }\n    stack.pop().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `Vec<T>`\n  --> /tmp/tmp1ao77wv_.rs:30:24\n\
    \   |\n21 |     let mut stack = Vec::new();\n   |         --------- consider giving\
    \ `stack` the explicit type `Vec<T>`, with the type parameters specified\n...\n\
    30 |             stack.push(op1.pow(op2 as u32));\n   |                      \
    \  ^^^ cannot infer type\n   |\n   = note: type must be known at this point\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659977836
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"operator vector is wrong length.\"\
    );\n    }\n    if operand.len() < 2 {\n        panic!(\"operand vector is too\
    \ short.\");\n    }\n    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_ref() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpyrikhy4u.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let operator_\
    \ = &operator[i];\n        if operator_ == \"+\" {\n            result += operand[i\
    \ + 1];\n        } else if operator_ == \"-\" {\n            result -= operand[i\
    \ + 1];\n        } else if operator_ == \"*\" {\n            result *= operand[i\
    \ + 1];\n        } else if operator_ == \"//\" {\n            result /= operand[i\
    \ + 1];\n        } else if operator_ == \"**\" {\n            result = result.pow(operand[i\
    \ + 1] as u32);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphcm7rscf.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut i = 0;\n    let mut stack = vec![];\n    while i < operand.len() {\n   \
    \     stack.push(operand[i]);\n        if i != 0 {\n            let op = operator[i\
    \ - 1].as_str();\n            let b = stack.pop().unwrap();\n            let a\
    \ = stack.pop().unwrap();\n            let c = match op {\n                \"\
    +\" => a + b,\n                \"-\" => a - b,\n                \"*\" => a * b,\n\
    \                \"//\" => a / b,\n                \"**\" => a.pow(b as u32),\n\
    \                _ => panic!(\"Unknow operation: {}\", op),\n            };\n\
    \            stack.push(c);\n        }\n        i += 1;\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwndlirxx.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let tmp\
    \ = match operator[i].as_str() {\n            \"+\" => result + operand[i + 1],\n\
    \            \"-\" => result - operand[i + 1],\n            \"*\" => result *\
    \ operand[i + 1],\n            \"//\" => result / operand[i + 1],\n          \
    \  \"**\" => result.pow(operand[i + 1] as u32),\n            _ => 0,\n       \
    \ };\n        result = tmp;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7gver1c_.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        result = match op.as_str() {\n            \"+\" => result + operand[i\
    \ + 1],\n            \"-\" => result - operand[i + 1],\n            \"*\" => result\
    \ * operand[i + 1],\n            \"//\" => result / operand[i + 1],\n        \
    \    \"**\" => result.pow(operand[i + 1] as u32),\n            _ => 0,\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpp5pqiubj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"Incorrect operator size\");\n    }\n\
    \    let mut result = 0;\n    for i in 0..operator.len() {\n        if i == 0\
    \ {\n            result = match operator[i].as_ref() {\n                \"+\"\
    \ => operand[i] + operand[i + 1],\n                \"-\" => operand[i] - operand[i\
    \ + 1],\n                \"*\" => operand[i] * operand[i + 1],\n             \
    \   \"//\" => operand[i] / operand[i + 1],\n                \"**\" => operand[i].pow(operand[i\
    \ + 1] as u32),\n                _ => panic!(\"Unknown operator\"),\n        \
    \    };\n        } else {\n            result = match operator[i].as_ref() {\n\
    \                \"+\" => result + operand[i + 1],\n                \"-\" => result\
    \ - operand[i + 1],\n                \"*\" => result * operand[i + 1],\n     \
    \           \"//\" => result / operand[i + 1],\n                \"**\" => result.pow(operand[i\
    \ + 1] as u32),\n                _ => panic!(\"Unknown operator\"),\n        \
    \    };\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvmzevdyu.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operator_iter = operator.iter();\n    let mut operand_iter = operand.iter();\n\
    \    let first_operand = operand_iter.next().unwrap();\n    let mut result = *first_operand;\n\
    \    while let Some(opt) = operator_iter.next() {\n        let operand = operand_iter.next().unwrap();\n\
    \        result = match opt.as_str() {\n            \"+\" => result + operand,\n\
    \            \"-\" => result - operand,\n            \"*\" => result * operand,\n\
    \            \"//\" => result / operand,\n            \"**\" => result.pow(*operand\
    \ as u32),\n            _ => panic!(\"Unknown operation {}\", opt),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3h13036h.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op_iter = operator.iter();\n    let mut num_iter = operand.iter();\n   \
    \ let mut result = num_iter.next().unwrap();\n    for op in op_iter {\n      \
    \  match op.as_str() {\n            \"+\" => result += num_iter.next().unwrap(),\n\
    \            \"-\" => result -= num_iter.next().unwrap(),\n            \"*\" =>\
    \ result *= num_iter.next().unwrap(),\n            \"//\" => result /= num_iter.next().unwrap(),\n\
    \            \"**\" => result = result.pow(*num_iter.next().unwrap() as u32),\n\
    \            _ => panic!(\"unknown operator\"),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpy4gpsb1b.rs:25:20\n   |\n25 |             \"+\" => result\
    \ += num_iter.next().unwrap(),\n   |                    ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `&isize`\n\
    \   |\nhelp: `+=` can be used on `isize`, you can dereference `result`\n   |\n\
    25 |             \"+\" => *result += num_iter.next().unwrap(),\n   |         \
    \           +\n\nerror[E0368]: binary assignment operation `-=` cannot be applied\
    \ to type `&isize`\n  --> /tmp/tmpy4gpsb1b.rs:26:20\n   |\n26 |             \"\
    -\" => result -= num_iter.next().unwrap(),\n   |                    ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `-=` on type `&isize`\n\
    \   |\nhelp: `-=` can be used on `isize`, you can dereference `result`\n   |\n\
    26 |             \"-\" => *result -= num_iter.next().unwrap(),\n   |         \
    \           +\n\nerror[E0368]: binary assignment operation `*=` cannot be applied\
    \ to type `&isize`\n  --> /tmp/tmpy4gpsb1b.rs:27:20\n   |\n27 |             \"\
    *\" => result *= num_iter.next().unwrap(),\n   |                    ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `*=` on type `&isize`\n\
    \   |\nhelp: `*=` can be used on `isize`, you can dereference `result`\n   |\n\
    27 |             \"*\" => *result *= num_iter.next().unwrap(),\n   |         \
    \           +\n\nerror[E0368]: binary assignment operation `/=` cannot be applied\
    \ to type `&isize`\n  --> /tmp/tmpy4gpsb1b.rs:28:21\n   |\n28 |             \"\
    //\" => result /= num_iter.next().unwrap(),\n   |                     ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     cannot use `/=` on type\
    \ `&isize`\n   |\nhelp: `/=` can be used on `isize`, you can dereference `result`\n\
    \   |\n28 |             \"//\" => *result /= num_iter.next().unwrap(),\n   | \
    \                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy4gpsb1b.rs:29:30\n\
    \   |\n22 |     let mut result = num_iter.next()."
  stdout: ''
  timestamp: 1659977836
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let mut\
    \ last_n = 0;\n  for i in 0..operand.len() {\n    let n = operand[i];\n    if\
    \ i == 0 {\n      last_n = n;\n    } else {\n      last_n = last_n.calc(&operator[i\
    \ - 1], n);\n    }\n  }\n  last_n\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `calc` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpeqnqm9hy.rs:26:23\n   |\n26 |       last_n = last_n.calc(&operator[i\
    \ - 1], n);\n   |                       ^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Write\
    \ your code here\n    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let o = &operator[i];\n        let l = &operand[i];\n        let\
    \ r = &operand[i + 1];\n        result = match o.as_str() {\n            \"+\"\
    \ => result + r,\n            \"-\" => result - r,\n            \"*\" => result\
    \ * r,\n            \"//\" => result / r,\n            \"**\" => result.pow(*r\
    \ as u32),\n            _ => 0,\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp07775cuq.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Build\
    \ a stack of operators\n    let mut ops = Vec::new();\n    for op in operator\
    \ {\n        match op.as_str() {\n            \"+\" => ops.push(Add),\n      \
    \      \"-\" => ops.push(Sub),\n            \"*\" => ops.push(Mul),\n        \
    \    \"/\" => ops.push(Div),\n            \"^\" => ops.push(Pow),\n          \
    \  _ => panic!(\"Unknown operator\"),\n        }\n    }\n\n    // Reverse the\
    \ operand array and use it to fold the operators\n    let mut operand = operand.into_iter().rev().collect::<Vec<isize>>();\n\
    \    ops.into_iter().fold(operand.pop().unwrap(), |acc, op| op.eval(acc, operand.pop().unwrap()))\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `Add` in this scope\n  --> /tmp/tmp7wj_p517.rs:24:29\n\
    \   |\n24 |             \"+\" => ops.push(Add),\n   |                        \
    \     ^^^ not found in this scope\n\nerror[E0425]: cannot find value `Sub` in\
    \ this scope\n  --> /tmp/tmp7wj_p517.rs:25:29\n   |\n25 |             \"-\" =>\
    \ ops.push(Sub),\n   |                             ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `Mul` in this scope\n  --> /tmp/tmp7wj_p517.rs:26:29\n\
    \   |\n26 |             \"*\" => ops.push(Mul),\n   |                        \
    \     ^^^ not found in this scope\n\nerror[E0425]: cannot find value `Div` in\
    \ this scope\n  --> /tmp/tmp7wj_p517.rs:27:29\n   |\n27 |             \"/\" =>\
    \ ops.push(Div),\n   |                             ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `Pow` in this scope\n  --> /tmp/tmp7wj_p517.rs:28:29\n\
    \   |\n28 |             \"^\" => ops.push(Pow),\n   |                        \
    \     ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut answer = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let current_operand = operand[i + 1];\n        match op.as_str() {\n\
    \            \"+\" => answer += current_operand,\n            \"-\" => answer\
    \ -= current_operand,\n            \"*\" => answer *= current_operand,\n     \
    \       \"//\" => answer /= current_operand,\n            \"**\" => answer = answer.pow(current_operand\
    \ as u32),\n            _ => (),\n        }\n    }\n    answer\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7nx1qfeu.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for (i, op) in operator.iter().enumerate() {\n        let\
    \ next = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ += next,\n            \"-\" => result -= next,\n            \"*\" => result\
    \ *= next,\n            \"//\" => result /= next,\n            \"**\" => result\
    \ = result.pow(next as u32),\n            _ => panic!(\"Invalid operator!\"),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `37`', /tmp/tmp23yl8n0z.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            result = result.pow(operand[i + 1] as u32);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprqc6o02h.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (op, operand) in operator.iter().zip(operand.iter().skip(1))\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand,\n  \
    \          \"-\" => result -= operand,\n            \"*\" => result *= operand,\n\
    \            \"//\" => result /= operand,\n            \"**\" => result = result.pow(*operand\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptn5jvwo9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut i = 1;\n    let mut res = operand[0];\n    while i < operand.len() {\n \
    \       match operator[i - 1].as_str() {\n            \"+\" => res += operand[i],\n\
    \            \"-\" => res -= operand[i],\n            \"*\" => res *= operand[i],\n\
    \            \"//\" => res /= operand[i],\n            \"**\" => res = res.pow(operand[i]\
    \ as u32),\n            _ => res = 0,\n        }\n        i += 1;\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsdjzta4s.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (op, opand) in operator.iter().zip(operand.iter().skip(1))\
    \ {\n        result = match op.as_str() {\n            \"+\" => result + opand,\n\
    \            \"-\" => result - opand,\n            \"*\" => result * opand,\n\
    \            \"//\" => result / opand,\n            \"**\" => result.pow(*opand\
    \ as u32),\n            _ => panic!(\"Unknown operator: {}\", op),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpo9eqv0wg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut error = false;\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        if op == \"+\" {\n           \
    \ stack.push(operand[i] + operand[i + 1]);\n        } else if op == \"-\" {\n\
    \            stack.push(operand[i] - operand[i + 1]);\n        } else if op ==\
    \ \"*\" {\n            stack.push(operand[i] * operand[i + 1]);\n        } else\
    \ if op == \"//\" {\n            stack.push(operand[i] / operand[i + 1]);\n  \
    \      } else if op == \"**\" {\n            stack.push(operand[i].pow(operand[i\
    \ + 1] as u32));\n        } else {\n            error = true;\n            break;\n\
    \        }\n    }\n    if error {\n        -1\n    } else {\n        stack.pop().unwrap()\n\
    \    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpdc9qzzd1.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (index, operand) in operand.iter().enumerate().skip(1)\
    \ {\n        if index >= operator.len() {\n            break;\n        }\n   \
    \     match operator[index].as_str() {\n            \"+\" => result += operand,\n\
    \            \"-\" => result -= operand,\n            \"*\" => result *= operand,\n\
    \            \"//\" => result /= operand,\n            \"**\" => result = result.pow(*operand\
    \ as u32),\n            _ => panic!(\"Unexpected operator '{}'\", operator[index]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `37`', /tmp/tmppd0wf7qi.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    for i in (0..operator.len()).rev() {\n        let\
    \ op = &operator[i];\n        let right = operand.pop().unwrap();\n        let\
    \ left = operand.pop().unwrap();\n        let result = match op.as_str() {\n \
    \           \"+\" => left + right,\n            \"-\" => left - right,\n     \
    \       \"*\" => left * right,\n            \"//\" => left / right,\n        \
    \    \"**\" => left.pow(right as u32),\n            _ => panic!(\"invalid operation:\
    \ {}\", op),\n        };\n        operand.push(result);\n    }\n    operand[0]\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134217728`,\n right: `37`', /tmp/tmpyjj71gbi.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result += op2,\n            \"-\" => result -= op2,\n            \"*\"\
    \ => result *= op2,\n            \"//\" => result /= op2,\n            \"**\"\
    \ => result = result.pow(op2 as u32),\n            _ => unreachable!(),\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmppdcs9uy_.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    return\
    \ eval_postfix(infix_to_postfix(operator, operand));\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `eval_postfix` in this scope\n  -->\
    \ /tmp/tmpa62yqdz5.rs:20:12\n   |\n20 |     return eval_postfix(infix_to_postfix(operator,\
    \ operand));\n   |            ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `infix_to_postfix` in this scope\n  --> /tmp/tmpa62yqdz5.rs:20:25\n\
    \   |\n20 |     return eval_postfix(infix_to_postfix(operator, operand));\n  \
    \ |                         ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut op = operator.into_iter();\n\
    \    let mut oper = operand.into_iter();\n    let first = oper.next().unwrap();\n\
    \    stack.push(first);\n    for v in oper {\n        let op = op.next().unwrap();\n\
    \        match op.as_str() {\n            \"+\" => stack.push(v),\n          \
    \  \"-\" => stack.push(-v),\n            \"*\" => stack.push(stack.pop().unwrap()\
    \ * v),\n            \"//\" => stack.push(stack.pop().unwrap() / v),\n       \
    \     \"**\" => stack.push(stack.pop().unwrap().pow(v as u32)),\n            _\
    \ => {\n                println!(\"Wrong operator: {}\", op);\n              \
    \  return 0;\n            }\n        }\n    }\n    stack.iter().sum()\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmphxg51otw.rs:30:31\n   |\n30 |             \"*\" => stack.push(stack.pop().unwrap()\
    \ * v),\n   |                    -----------^^^^^^^^^^^--------------\n   |  \
    \                  |     |    |\n   |                    |     |    second mutable\
    \ borrow occurs here\n   |                    |     first borrow later used by\
    \ call\n   |                    first mutable borrow occurs here\n   |\nhelp:\
    \ try adding a local storing this argument...\n  --> /tmp/tmphxg51otw.rs:30:31\n\
    \   |\n30 |             \"*\" => stack.push(stack.pop().unwrap() * v),\n   | \
    \                              ^^^^^^^^^^^\nhelp: ...and then using that local\
    \ as the argument to this call\n  --> /tmp/tmphxg51otw.rs:30:20\n   |\n30 |  \
    \           \"*\" => stack.push(stack.pop().unwrap() * v),\n   |             \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot borrow `stack`\
    \ as mutable more than once at a time\n  --> /tmp/tmphxg51otw.rs:31:32\n   |\n\
    31 |             \"//\" => stack.push(stack.pop().unwrap() / v),\n   |       \
    \              -----------^^^^^^^^^^^--------------\n   |                    \
    \ |     |    |\n   |                     |     |    second mutable borrow occurs\
    \ here\n   |                     |     first borrow later used by call\n   | \
    \                    first mutable borrow occurs here\n   |\nhelp: try adding\
    \ a local storing this argument...\n  --> /tmp/tmphxg51otw.rs:31:32\n   |\n31\
    \ |             \"//\" => stack.push(stack.pop().unwrap() / v),\n   |        \
    \                        ^^^^^^^^^^^\nhelp: ...and then using that local as the\
    \ argument to this call\n  --> /tmp/tmphxg51otw.rs:31:21\n   |\n31 |         \
    \    \"//\" => stack.push(stack.pop().unwrap() / v),\n   |                   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot borrow `stack`\
    \ as mutable more than once at a time\n  --> /tmp/tmphxg51otw.rs:32:32\n   |\n\
    32 |             \"**\" => stack.push(stack.pop().unwrap().pow(v as u32)),\n \
    \  |                     -----------^^^^^^^^^^^------------------------\n   |\
    \              "
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => continue,\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7utjqyeh.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => result = result\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa1elnw6o.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operator.iter().zip(operand.iter()).fold(operand[0],\
    \ |acc, (op, next)| match op.as_str() {\n        \"+\" => acc + next,\n      \
    \  \"-\" => acc - next,\n        \"*\" => acc * next,\n        \"//\" => acc /\
    \ next,\n        \"**\" => acc.pow(*next as u32),\n        _ => unreachable!(),\n\
    \    })\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `37`', /tmp/tmprwydgh4a.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Write\
    \ your code here\n    let mut it = operand.iter();\n    let mut res = *it.next().unwrap();\n\
    \    for i in operator {\n        let next = *it.next().unwrap();\n        res\
    \ = match i.as_str() {\n            \"+\" => res + next,\n            \"-\" =>\
    \ res - next,\n            \"*\" => res * next,\n            \"//\" => res / next,\n\
    \            \"**\" => res.pow(next as u32),\n            _ => 0,\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzl_m0srm.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut iter = operand.iter();\n    let mut result = *iter.next().unwrap();\n  \
    \  for (op, o) in operator.iter().zip(iter) {\n        result = match op.as_str()\
    \ {\n            \"+\" => result + o,\n            \"-\" => result - o,\n    \
    \        \"*\" => result * o,\n            \"//\" => result / o,\n           \
    \ \"**\" => result.pow(*o as u32),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpw06gh2z0.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa_2_9de0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut r: isize = operand[0];\n    for i in 0..operator.len() {\n        match\
    \ operator[i].as_str() {\n            \"+\" => r += operand[i + 1],\n        \
    \    \"-\" => r -= operand[i + 1],\n            \"*\" => r *= operand[i + 1],\n\
    \            \"//\" => r /= operand[i + 1],\n            \"**\" => r = r.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unrecognized operator: {}\", operator[i]),\n\
    \        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpx60lnqm0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Check\
    \ that operand vector has at least two operands.\n    if operand.len() < 2 {\n\
    \        panic!(\"Operand vector must have at least two operands!\");\n    }\n\
    \n    // Check that operator vector has at least one operator.\n    if operator.len()\
    \ < 1 {\n        panic!(\"Operator vector must have at least one operator!\");\n\
    \    }\n\n    // Check that the length of operator vector is equal to the length\
    \ of operand vector minus one.\n    if operator.len() != operand.len() - 1 {\n\
    \        panic!(\"Operator vector must have a length equal to operand vector length\
    \ minus one!\");\n    }\n\n    // Get reference to first operator.\n    let op\
    \ = &operator[0];\n\n    // Get first operand.\n    let a = operand[0];\n\n  \
    \  // Get second operand.\n    let b = operand[1];\n\n    // Get remaining operands\
    \ and operators.\n    let remaining_operand = &operand[2..];\n    let remaining_operator\
    \ = &operator[1..];\n\n    match op.as_str() {\n        \"+\" => return a + do_algebra(remaining_operator.to_vec(),\
    \ remaining_operand.to_vec()),\n        \"-\" => return a - do_algebra(remaining_operator.to_vec(),\
    \ remaining_operand.to_vec()),\n        \"*\" => return a * do_algebra(remaining_operator.to_vec(),\
    \ remaining_operand.to_vec()),\n        \"//\" => return a / do_algebra(remaining_operator.to_vec(),\
    \ remaining_operand.to_vec()),\n        \"**\" => return a.pow(do_algebra(remaining_operator.to_vec(),\
    \ remaining_operand.to_vec()) as u32),\n        _ => panic!(\"Invalid operator!\"\
    ),\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Operator vector must have a length equal
    to operand vector length minus one!'', /tmp/tmp1btj1zks.rs:32:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut value: isize = operand[0];\n    for (i, o) in operator.iter().enumerate()\
    \ {\n        match o.as_str() {\n            \"+\" => value += operand[i + 1],\n\
    \            \"-\" => value -= operand[i + 1],\n            \"*\" => value *=\
    \ operand[i + 1],\n            \"//\" => value /= operand[i + 1],\n          \
    \  \"**\" => value = value.pow(operand[i + 1] as u32),\n            _ => value\
    \ = 0,\n        }\n    }\n    value\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9dqe9x_b.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    for (i, op) in operator.iter().enumerate() {\n \
    \       let lhs = operand[i];\n        let rhs = operand[i + 1];\n        match\
    \ op.as_str() {\n            \"+\" => operand[i + 1] = lhs + rhs,\n          \
    \  \"-\" => operand[i + 1] = lhs - rhs,\n            \"*\" => operand[i + 1] =\
    \ lhs * rhs,\n            \"//\" => operand[i + 1] = lhs / rhs,\n            \"\
    **\" => operand[i + 1] = lhs.pow(rhs as u32),\n            _ => unreachable!(),\n\
    \        }\n    }\n    operand[operand.len() - 1]\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjp3xe_ph.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let mut\
    \ num = operand[i + 1];\n        match operator[i].as_str() {\n            \"\
    +\" => result += num,\n            \"-\" => result -= num,\n            \"*\"\
    \ => result *= num,\n            \"//\" => result /= num,\n            \"**\"\
    \ => result = result.pow(num as u32),\n            _ => panic!(\"unsupported operator\
    \ {}\", operator[i]),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwx8a9nyh.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, o) in operator.iter().enumerate() {\n\
    \        match o.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => {}\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9b9unny_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6xorodp5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut answer = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => answer += operand[i + 1],\n            \"-\" => answer\
    \ -= operand[i + 1],\n            \"*\" => answer *= operand[i + 1],\n       \
    \     \"//\" => answer /= operand[i + 1],\n            \"**\" => answer = answer.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unsupported operator: {}\", operator[i]),\n\
    \        }\n    }\n    answer\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwtjr1tqv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"unknown operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4ju9cv1s.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    for i in 1..operand.len() {\n     \
    \   match operator[i - 1].as_str() {\n            \"+\" => stack.push(stack.pop().unwrap()\
    \ + operand[i]),\n            \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \            \"*\" => stack.push(stack.pop().unwrap() * operand[i]),\n       \
    \     \"//\" => stack.push(stack.pop().unwrap() / operand[i]),\n            \"\
    **\" => stack.push(stack.pop().unwrap().pow(operand[i] as u32)),\n           \
    \ _ => panic!(\"operator not recognized\"),\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmp42j4dbdc.rs:23:31\n   |\n23 |             \"+\" => stack.push(stack.pop().unwrap()\
    \ + operand[i]),\n   |                    -----------^^^^^^^^^^^-----------------------\n\
    \   |                    |     |    |\n   |                    |     |    second\
    \ mutable borrow occurs here\n   |                    |     first borrow later\
    \ used by call\n   |                    first mutable borrow occurs here\n   |\n\
    help: try adding a local storing this argument...\n  --> /tmp/tmp42j4dbdc.rs:23:31\n\
    \   |\n23 |             \"+\" => stack.push(stack.pop().unwrap() + operand[i]),\n\
    \   |                               ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmp42j4dbdc.rs:23:20\n   |\n\
    23 |             \"+\" => stack.push(stack.pop().unwrap() + operand[i]),\n   |\
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmp42j4dbdc.rs:24:31\n\
    \   |\n24 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \   |                    -----------^^^^^^^^^^^-----------------------\n   | \
    \                   |     |    |\n   |                    |     |    second mutable\
    \ borrow occurs here\n   |                    |     first borrow later used by\
    \ call\n   |                    first mutable borrow occurs here\n   |\nhelp:\
    \ try adding a local storing this argument...\n  --> /tmp/tmp42j4dbdc.rs:24:31\n\
    \   |\n24 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \   |                               ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmp42j4dbdc.rs:24:20\n   |\n\
    24 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n   |\
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmp42j4dbdc.rs:25:31\n\
    \   |\n25 |             \"*\" => stack.push(stack.pop().unwrap() * operand[i]),\n\
    \   |        "
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    use\
    \ std::convert::TryInto;\n    let mut result = operand[0];\n    for (i, o) in\
    \ operator.iter().enumerate() {\n        match o.as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1].try_into().unwrap()),\n\
    \            _ => (),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpaftixhzm.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"unexpected operator\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0xaoweb5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpi8yrk_w1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    for (o, i) in operator.iter().zip(0..operator.len())\
    \ {\n        match o.as_str() {\n            \"+\" => operand[i+1] = operand[i]\
    \ + operand[i+1],\n            \"-\" => operand[i+1] = operand[i] - operand[i+1],\n\
    \            \"*\" => operand[i+1] = operand[i] * operand[i+1],\n            \"\
    //\" => operand[i+1] = operand[i] / operand[i+1],\n            \"**\" => operand[i+1]\
    \ = operand[i].pow(operand[i+1] as u32),\n            _ => (),\n        }\n  \
    \  }\n    operand[operand.len()-1]\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpna84a6zc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ == operand.len() - 1);\n    assert!(!operator.is_empty());\n    assert!(operand.len()\
    \ >= 2);\n\n    if operand.len() == 2 {\n        return match operator[0].as_str()\
    \ {\n            \"+\" => operand[0] + operand[1],\n            \"-\" => operand[0]\
    \ - operand[1],\n            \"*\" => operand[0] * operand[1],\n            \"\
    //\" => operand[0] / operand[1],\n            \"**\" => operand[0].pow(operand[1]\
    \ as u32),\n            _ => panic!(\"Invalid operator!\"),\n        };\n    }\n\
    \n    let mut res = operand[0];\n    for i in 0..operator.len() {\n        res\
    \ = match operator[i].as_str() {\n            \"+\" => res + operand[i + 1],\n\
    \            \"-\" => res - operand[i + 1],\n            \"*\" => res * operand[i\
    \ + 1],\n            \"//\" => res / operand[i + 1],\n            \"**\" => res.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator!\"),\n        };\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprgwrql0n.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpquu9l0lj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ == operand.len() - 1);\n    assert!(operator.len() >= 1);\n    assert!(operand.len()\
    \ >= 2);\n    for op in &operator {\n        assert!(op == \"+\" || op == \"-\"\
    \ || op == \"*\" || op == \"//\" || op == \"**\");\n    }\n    assert!(operand.iter().all(|&x|\
    \ x >= 0));\n    0\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpfk7xwprn.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    let mut i = 0;\n    while i < operator.len() {\n\
    \        if operator[i] == \"**\" {\n            operand[i] = operand[i].pow(operand[i\
    \ + 1] as u32);\n            operand.remove(i + 1);\n            operator.remove(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    let result = operand.iter().zip(operator.iter()).fold(operand[0],\
    \ |acc, (&operand, operator)| {\n        match operator.as_ref() {\n         \
    \   \"+\" => acc + operand,\n            \"-\" => acc - operand,\n           \
    \ \"*\" => acc * operand,\n            \"//\" => acc / operand,\n            _\
    \ => unreachable!()\n        }\n    });\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `operator` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpjgpa1li1.rs:26:13\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |               -------- help:\
    \ consider changing this to be mutable: `mut operator`\n...\n26 |            \
    \ operator.remove(i);\n   |             ^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // we\
    \ need to consider the order of operations, so we need to get the operations\n\
    \    // with the highest presidence first. then we can evaluate from left to right.\n\
    \    // we need to:\n    // 1. process all multiplications and divisions.\n  \
    \  // 2. process all additions and subtractions.\n    // we do this in reverse\
    \ order so we only have to loop through the list once\n    // so that we don't\
    \ need to search for all of them at once.\n    // we will also remove them from\
    \ the list.\n    let mut operands = operand;\n    let mut operators = operator;\n\
    \    loop {\n        // get last element.\n        let op = operators.pop();\n\
    \        match op {\n            Some(e) => {\n                let right = operands.pop().unwrap();\n\
    \                let left = operands.pop().unwrap();\n                operands.push(do_calculation(left,\
    \ e, right));\n            }\n            None => {\n                break;\n\
    \            }\n        }\n    }\n    return operands[0];\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_calculation` in this scope\n  -->\
    \ /tmp/tmpivb4zvrh.rs:37:31\n   |\n37 |                 operands.push(do_calculation(left,\
    \ e, right));\n   |                               ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut ans = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            ans += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            ans -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            ans *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            ans /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            ans = ans.pow(operand[i + 1] as u32);\n        }\n\
    \    }\n    ans\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_jz_rpc5.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op = operator;\n    let mut od = operand;\n    let mut res = od.remove(0);\n\
    \    while let Some(opr) = op.pop() {\n        let operand = od.pop().unwrap();\n\
    \        res = match opr.as_str() {\n            \"+\" => res + operand,\n   \
    \         \"-\" => res - operand,\n            \"*\" => res * operand,\n     \
    \       \"//\" => res / operand,\n            \"**\" => res.pow(operand as u32),\n\
    \            _ => res\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21952`,\n right: `37`', /tmp/tmpxwik59xt.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            result = result.pow(operand[i + 1] as u32);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprqc6o02h.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut iter = operand.iter();\n    let mut acc = *iter.next().unwrap();\n    for\
    \ op in operator {\n        let v = *iter.next().unwrap();\n        acc = match\
    \ op.as_str() {\n            \"+\" => acc + v,\n            \"-\" => acc - v,\n\
    \            \"*\" => acc * v,\n            \"//\" => acc / v,\n            \"\
    **\" => acc.pow(v as u32),\n            _ => unreachable!(),\n        };\n   \
    \ }\n    acc\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1x6pmwjr.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut iteration = 0;\n    let mut operand_iter = operand.iter();\n    let mut\
    \ acc = *operand_iter.next().unwrap();\n    for iter in operator.iter() {\n  \
    \      iteration += 1;\n        let b = *operand_iter.next().unwrap();\n     \
    \   match iter.as_str() {\n            \"+\" => acc += b,\n            \"-\" =>\
    \ acc -= b,\n            \"*\" => acc *= b,\n            \"//\" => acc /= b,\n\
    \            \"**\" => acc = acc.pow(b as u32),\n            _ => panic!(\"invalid\
    \ symbol. only + - * // ** are supported\"),\n        }\n    }\n    acc\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_vqibnqf.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut ops = operator.iter().peekable();\n    let mut opd = operand.iter().peekable();\n\
    \    let mut result = *opd.next().unwrap();\n    while let Some(op) = ops.next()\
    \ {\n        let rhs = *opd.next().unwrap();\n        result = match op.as_str()\
    \ {\n            \"+\" => result + rhs,\n            \"-\" => result - rhs,\n\
    \            \"*\" => result * rhs,\n            \"//\" => result / rhs,\n   \
    \         \"**\" => result.pow(rhs as u32),\n            _ => result,\n      \
    \  };\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvi64i40p.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  operator.iter().fold(operand[0],\
    \ |result, &op| {\n    match op.as_str() {\n      \"+\" => result + operand[1],\n\
    \      \"-\" => result - operand[1],\n      \"*\" => result * operand[1],\n  \
    \    \"//\" => result / operand[1],\n      \"**\" => result.pow(operand[1] as\
    \ u32),\n      _ => 0\n    }\n  })\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of a shared reference\n  --> /tmp/tmpk2bq0cuo.rs:20:45\n\
    \   |\n20 |   operator.iter().fold(operand[0], |result, &op| {\n   |         \
    \                                    ^--\n   |                               \
    \              ||\n   |                                             |data moved\
    \ here\n   |                                             |move occurs because\
    \ `op` has type `String`, which does not implement the `Copy` trait\n   |    \
    \                                         help: consider removing the `&`: `op`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0507`.\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand\n\
    \        .iter()\n        .zip(operator.iter())\n        .scan(0, |acc, (x, op)|\
    \ {\n            match op.as_str() {\n                \"+\" => Some(*acc += x),\n\
    \                \"-\" => Some(*acc -= x),\n                \"*\" => Some(*acc\
    \ *= x),\n                \"//\" => Some(*acc /= x),\n                \"**\" =>\
    \ Some(*acc = x.pow(*acc as u32)),\n                _ => None,\n            }\n\
    \        })\n        .last()\n        .unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnejok8ik.rs:20:5\n   |\n\
    19 |   fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n\
    \   |                                                                ----- expected\
    \ `isize` because of return type\n20 | /     operand\n21 | |         .iter()\n\
    22 | |         .zip(operator.iter())\n23 | |         .scan(0, |acc, (x, op)| {\n\
    ...  |\n33 | |         .last()\n34 | |         .unwrap()\n   | |_________________^\
    \ expected `isize`, found `()`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            result = result.pow(operand[i + 1] as u32);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprqc6o02h.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => println!(\"invalid operator\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphn2bqau4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = vec![];\n    let mut operator_iter = operator.iter();\n\
    \    let mut operand_iter = operand.iter();\n    let mut operand = operand_iter.next().unwrap();\n\
    \    while let Some(opt) = operator_iter.next() {\n        match opt.as_str()\
    \ {\n            \"+\" => {\n                stack.push(*operand);\n         \
    \       operand = operand_iter.next().unwrap();\n            }\n            \"\
    -\" => {\n                let x = *operand;\n                operand = operand_iter.next().unwrap();\n\
    \                stack.push(x - *operand);\n                operand = operand_iter.next().unwrap();\n\
    \            }\n            \"*\" => {\n                let x = *operand;\n  \
    \              operand = operand_iter.next().unwrap();\n                stack.push(x\
    \ * *operand);\n                operand = operand_iter.next().unwrap();\n    \
    \        }\n            \"/\" => {\n                let x = *operand;\n      \
    \          operand = operand_iter.next().unwrap();\n                stack.push(x\
    \ / *operand);\n                operand = operand_iter.next().unwrap();\n    \
    \        }\n            \"^\" => {\n                let x = *operand;\n      \
    \          operand = operand_iter.next().unwrap();\n                stack.push(x.pow(*operand\
    \ as u32));\n                operand = operand_iter.next().unwrap();\n       \
    \     }\n            _ => {}\n        }\n    }\n    stack.push(*operand);\n  \
    \  stack.iter().sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n   \
    \ assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `37`', /tmp/tmpcovi9scz.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = vec![];\n    stack.push(operand[0]);\n    for i in 1..operand.len()\
    \ {\n        let mut value = operand[i];\n        match &operator[i - 1][..] {\n\
    \            \"+\" => value = stack.pop().unwrap() + value,\n            \"-\"\
    \ => value = stack.pop().unwrap() - value,\n            \"*\" => value = stack.pop().unwrap()\
    \ * value,\n            \"//\" => value = stack.pop().unwrap() / value,\n    \
    \        \"**\" => value = stack.pop().unwrap().pow(value as u32),\n         \
    \   _ => println!(\"Error!\"),\n        }\n        stack.push(value);\n    }\n\
    \    stack.pop().unwrap()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpldb8v1qb.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ > 0 && operand.len() > 1);\n    assert!(operator.len() == operand.len() - 1);\n\
    \    let mut result = operand[0];\n    for (op, num) in operator.iter().zip(operand.iter().skip(1))\
    \ {\n        result = match op.as_str() {\n            \"+\" => result + num,\n\
    \            \"-\" => result - num,\n            \"*\" => result * num,\n    \
    \        \"//\" => result / num,\n            \"**\" => result.pow(*num as u32),\n\
    \            _ => panic!(\"Unrecognized operator: {}\", op),\n        };\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpazaj0p2s.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => println!(\"no match\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjwwqetji.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => println!(\"operator not known\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvhj1u0nq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut acc = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n  \
    \      let a = operand[i];\n        let b = operand[i + 1];\n        acc = match\
    \ op.as_str() {\n            \"+\" => a + b,\n            \"-\" => a - b,\n  \
    \          \"*\" => a * b,\n            \"//\" => a / b,\n            \"**\" =>\
    \ a.pow(b as u32),\n            _ => 0,\n        };\n    }\n    acc\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpgjdf0plm.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6xorodp5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operand.len() - 1 {\n        match\
    \ operator[i].as_str() {\n            \"+\" => result += operand[i + 1],\n   \
    \         \"-\" => result -= operand[i + 1],\n            \"*\" => result *= operand[i\
    \ + 1],\n            \"//\" => result /= operand[i + 1],\n            \"**\" =>\
    \ result = result.pow(operand[i + 1] as u32),\n            _ => {}\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_582xz0l.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut op = String::new();\n    let mut index = 0;\n \
    \   let mut calc = |op: &str, first: isize, second: isize| {\n        match op\
    \ {\n            \"+\" => first + second,\n            \"-\" => first - second,\n\
    \            \"*\" => first * second,\n            \"//\" => first / second,\n\
    \            \"**\" => first.pow(second as u32),\n            _ => unimplemented!(),\n\
    \        }\n    };\n    for i in 0..operand.len() - 1 {\n        if op == \"\"\
    \ {\n            result = operand[index];\n            index += 1;\n         \
    \   op = operator[i].clone();\n        } else {\n            result = calc(&op,\
    \ result, operand[index]);\n            index += 1;\n            op = operator[i].clone();\n\
    \        }\n    }\n    calc(&op, result, operand[index])\n}\n\nfn main() {\n \
    \   let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpx115ey8u.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut value = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => value += operand[i + 1],\n            \"-\" => value\
    \ -= operand[i + 1],\n            \"*\" => value *= operand[i + 1],\n        \
    \    \"//\" => value /= operand[i + 1],\n            \"**\" => value = value.pow(operand[i\
    \ + 1] as u32),\n            _ => {\n                panic!(\"Unknown operator:\
    \ {}\", operator[i]);\n            }\n        }\n    }\n    value\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmph4xwiz3f.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let mut\
    \ result = operand[0];\n  for i in 0..operator.len() {\n    match operator[i].as_str()\
    \ {\n      \"+\" => result += operand[i + 1],\n      \"-\" => result -= operand[i\
    \ + 1],\n      \"*\" => result *= operand[i + 1],\n      \"//\" => result /= operand[i\
    \ + 1],\n      \"**\" => result = result.pow(operand[i + 1] as u32),\n      _\
    \ => result += operand[i + 1],\n    }\n  }\n  result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmplgz7pnfk.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: -1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    //\n\
    \    let mut stack: Vec<isize> = vec![];\n    let mut i = 0;\n    let mut j =\
    \ 0;\n    while i < operand.len() && j < operator.len() {\n        match operator[j].as_str()\
    \ {\n            \"+\" => {\n                stack.push(operand[i]);\n       \
    \         i += 1;\n                j += 1;\n            }\n            \"-\" =>\
    \ {\n                stack.push(operand[i]);\n                i += 1;\n      \
    \          j += 1;\n            }\n            \"*\" => {\n                let\
    \ tmp = stack.pop().unwrap();\n                stack.push(tmp * operand[i]);\n\
    \                i += 1;\n                j += 1;\n            }\n           \
    \ \"/\" => {\n                let tmp = stack.pop().unwrap();\n              \
    \  stack.push(tmp / operand[i]);\n                i += 1;\n                j +=\
    \ 1;\n            }\n            \"^\" => {\n                let tmp = stack.pop().unwrap();\n\
    \                stack.push(tmp.pow(operand[i] as u32));\n                i +=\
    \ 1;\n                j += 1;\n            }\n            _ => {}\n        }\n\
    \    }\n    let mut val = stack.pop().unwrap();\n    for i in stack {\n      \
    \  val += i;\n    }\n    val\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977843
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ n = operand.len();\n    let mut res = operand[0];\n    for i in 1..n {\n   \
    \     res = match operator[i - 1].as_str() {\n            \"+\" => res + operand[i],\n\
    \            \"-\" => res - operand[i],\n            \"*\" => res * operand[i],\n\
    \            \"//\" => res / operand[i],\n            \"**\" => res.pow(operand[i]\
    \ as u32),\n            _ => panic!(\"unknown operator {:?}\", operator[i - 1]),\n\
    \        };\n    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpk2n4d3c9.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand.iter().fold1(|a,\
    \ b| calc(b, a, operator.pop().unwrap())).unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `calc` in this scope\n  --> /tmp/tmppubfs__f.rs:20:33\n\
    \   |\n20 |     operand.iter().fold1(|a, b| calc(b, a, operator.pop().unwrap())).unwrap()\n\
    \   |                                 ^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `fold1` found for struct `std::slice::Iter` in the current scope\n\
    \  --> /tmp/tmppubfs__f.rs:20:20\n   |\n20 |     operand.iter().fold1(|a, b| calc(b,\
    \ a, operator.pop().unwrap())).unwrap()\n   |                    ^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa_2_9de0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpfge3oakw.rs:20:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut op = 0;\n    let mut num =\
    \ operand[0];\n    while op < operator.len() {\n        let op_ch = operator[op].chars().next().unwrap();\n\
    \        match op_ch {\n            '+' => num += operand[op + 1],\n         \
    \   '-' => num -= operand[op + 1],\n            '*' => num *= operand[op + 1],\n\
    \            '/' => num /= operand[op + 1],\n            '^' => num = num.pow(operand[op\
    \ + 1] as u32),\n            _ => panic!(\"Unsupported operation.\"),\n      \
    \  }\n        op += 1;\n    }\n    num\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `37`', /tmp/tmps3ajn8nr.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6xorodp5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand.iter().rev().fold(0,\
    \ |acc, x| {\n        let op = operator.pop().unwrap();\n        if op == \"+\"\
    \ {\n            x + acc\n        } else if op == \"-\" {\n            x - acc\n\
    \        } else if op == \"*\" {\n            x * acc\n        } else if op ==\
    \ \"//\" {\n            x / acc\n        } else if op == \"**\" {\n          \
    \  x.pow(acc as u32)\n        } else {\n            0\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `operator` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp11hywghv.rs:21:18\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |               -------- help:\
    \ consider changing this to be mutable: `mut operator`\n20 |     operand.iter().rev().fold(0,\
    \ |acc, x| {\n21 |         let op = operator.pop().unwrap();\n   |           \
    \       ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut expression = operand[0].to_string();\n    for i in 0..operator.len() {\n\
    \        expression += &operator[i];\n        expression += &operand[i + 1].to_string();\n\
    \    }\n    let result = expression.parse::<isize>().unwrap();\n    result\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpj9tz3bnj.rs:25:46

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            result = result.pow(operand[i + 1] as u32);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprqc6o02h.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            result = result.pow(operand[i + 1] as u32);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprqc6o02h.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut exp = \"\".to_string();\n    for i in 0..operator.len() {\n        exp.push_str(&format!(\"\
    {} {}\", operand[i], operator[i]));\n    }\n    exp.push_str(&format!(\"{}\",\
    \ operand[operand.len() - 1]));\n    match exp.parse::<isize>() {\n        Ok(n)\
    \ => n,\n        Err(_) => 0,\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmptvnu0pkz.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n  \
    \      match op.as_str() {\n            \"+\" => res += operand[i + 1],\n    \
    \        \"-\" => res -= operand[i + 1],\n            \"*\" => res *= operand[i\
    \ + 1],\n            \"//\" => res /= operand[i + 1],\n            \"**\" => res\
    \ = res.pow(operand[i + 1] as u32),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0vmacmhc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (op, n) in operator.iter().zip(operand.iter().skip(1))\
    \ {\n        match op.as_str() {\n            \"+\" => result += n,\n        \
    \    \"-\" => result -= n,\n            \"*\" => result *= n,\n            \"\
    //\" => result /= n,\n            \"**\" => result = result.pow(*n as u32),\n\
    \            _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5x06nttg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // println!(\"\
    operator = {:?}\", operator);\n    // println!(\"operand = {:?}\", operand);\n\
    \    let mut result = operand[0];\n    let mut op_iter = operator.iter();\n  \
    \  for op in operand.iter().skip(1) {\n        let oper = op_iter.next().unwrap();\n\
    \        match oper.as_str() {\n            \"+\" => result += op,\n         \
    \   \"-\" => result -= op,\n            \"*\" => result *= op,\n            \"\
    //\" => result /= op,\n            \"**\" => result = result.pow(*op as u32),\n\
    \            _ => unreachable!(),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpp02pojnh.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            result = result.pow(operand[i + 1] as u32);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprqc6o02h.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => {}\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpo9uzi535.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpfge3oakw.rs:20:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9ziggkna.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut o = operand.clone();\n    for s in operator {\n        match s.as_str()\
    \ {\n            \"+\" => {\n                let a = o.remove(0);\n          \
    \      let b = o.remove(0);\n                o.insert(0, a + b);\n           \
    \ }\n            \"-\" => {\n                let a = o.remove(0);\n          \
    \      let b = o.remove(0);\n                o.insert(0, a - b);\n           \
    \ }\n            \"*\" => {\n                let a = o.remove(0);\n          \
    \      let b = o.remove(0);\n                o.insert(0, a * b);\n           \
    \ }\n            \"//\" => {\n                let a = o.remove(0);\n         \
    \       let b = o.remove(0);\n                o.insert(0, a / b);\n          \
    \  }\n            \"**\" => {\n                let a = o.remove(0);\n        \
    \        let b = o.remove(0);\n                o.insert(0, a.pow(b as u32));\n\
    \            }\n            _ => unreachable!(),\n        }\n    }\n    o[0]\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqo2s9958.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut prev = operand[0];\n    for i in 1..operand.len() {\n        let op = operator[i\
    \ - 1].as_ref();\n        match op {\n            \"+\" => prev += operand[i],\n\
    \            \"-\" => prev -= operand[i],\n            \"*\" => prev *= operand[i],\n\
    \            \"//\" => prev /= operand[i],\n            \"**\" => prev = prev.pow(operand[i]\
    \ as u32),\n            _ => panic!(\"Invalid operator {}\", op),\n        }\n\
    \    }\n    prev\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5zsn4pbz.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    use\
    \ self::Op::*;\n    let mut result = operand[0];\n    for i in 1..operand.len()\
    \ {\n        result = match operator[i - 1].as_str() {\n            \"+\" => result\
    \ + operand[i],\n            \"-\" => result - operand[i],\n            \"*\"\
    \ => result * operand[i],\n            \"//\" => result / operand[i],\n      \
    \      \"**\" => result.pow(operand[i] as u32),\n            _ => panic!(\"unknown\
    \ operator\"),\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `self::Op`\n  --> /tmp/tmp8cc6n437.rs:20:15\n\
    \   |\n20 |     use self::Op::*;\n   |               ^^ maybe a missing crate\
    \ `Op`?\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, x) in operand.iter().enumerate().skip(1)\
    \ {\n        match operator[i - 1].as_str() {\n            \"+\" => result +=\
    \ x,\n            \"-\" => result -= x,\n            \"*\" => result *= x,\n \
    \           \"//\" => result /= x,\n            \"**\" => result = result.pow(*x\
    \ as u32),\n            _ => continue,\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmppp8z_7gh.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    //Initialize\
    \ the result from the first operand.\n    let mut result = operand[0];\n    for\
    \ i in 0..operator.len() {\n        //Get the next operand and the operation.\n\
    \        let operand = operand[i + 1];\n        let operation = &operator[i];\n\
    \        //Perform the operation.\n        match operation.as_str() {\n      \
    \      \"+\" => result += operand,\n            \"-\" => result -= operand,\n\
    \            \"*\" => result *= operand,\n            \"//\" => result /= operand,\n\
    \            \"**\" => result = result.pow(operand as u32),\n            _ =>\
    \ panic!(\"Unknown operation!\"),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdgun13wg.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ (mut operand, mut result) = (operand.into_iter(), operand[0]);\n    for (i,\
    \ op) in operator.into_iter().enumerate() {\n        result = match op.as_str()\
    \ {\n            \"+\" => result + operand.next().unwrap(),\n            \"-\"\
    \ => result - operand.next().unwrap(),\n            \"*\" => result * operand.next().unwrap(),\n\
    \            \"//\" => result / operand.next().unwrap(),\n            \"**\" =>\
    \ result.pow(operand.next().unwrap() as u32),\n            _ => panic!(\"Unknown\
    \ operator: {}\", op),\n        };\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmphnuvu4q3.rs:21:10\n   |\n\
    21 |     for (i, op) in operator.into_iter().enumerate() {\n   |          ^ help:\
    \ if this is intentional, prefix it with an underscore: `_i`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0382]: borrow of moved value:\
    \ `operand`\n   --> /tmp/tmphnuvu4q3.rs:20:59\n    |\n19  | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n    |                        \
    \              ------- move occurs because `operand` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n20  |     let (mut operand, mut result)\
    \ = (operand.into_iter(), operand[0]);\n    |                                \
    \              -----------  ^^^^^^^ value borrowed here after move\n    |    \
    \                                          |\n    |                          \
    \                    `operand` moved due to this method call\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `operand`\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = vec![];\n    for (i, val) in operand.iter().enumerate()\
    \ {\n        stack.push(*val);\n        if i < operator.len() {\n            match\
    \ operator[i].as_str() {\n                \"+\" => {\n                    let\
    \ operand2 = stack.pop().unwrap();\n                    let operand1 = stack.pop().unwrap();\n\
    \                    stack.push(operand1 + operand2);\n                }\n   \
    \             \"-\" => {\n                    let operand2 = stack.pop().unwrap();\n\
    \                    let operand1 = stack.pop().unwrap();\n                  \
    \  stack.push(operand1 - operand2);\n                }\n                \"*\"\
    \ => {\n                    let operand2 = stack.pop().unwrap();\n           \
    \         let operand1 = stack.pop().unwrap();\n                    stack.push(operand1\
    \ * operand2);\n                }\n                \"//\" => {\n             \
    \       let operand2 = stack.pop().unwrap();\n                    let operand1\
    \ = stack.pop().unwrap();\n                    stack.push(operand1 / operand2);\n\
    \                }\n                \"**\" => {\n                    let operand2\
    \ = stack.pop().unwrap();\n                    let operand1 = stack.pop().unwrap();\n\
    \                    stack.push(operand1.pow(operand2 as u32));\n            \
    \    }\n                _ => {}\n            }\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp1wp32805.rs:47:48

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => result,\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp8_3tf09z.rs:28:18\n\
    \   |\n22 | /         match operator[i].as_str() {\n23 | |             \"+\" =>\
    \ result += operand[i + 1],\n24 | |             \"-\" => result -= operand[i +\
    \ 1],\n25 | |             \"*\" => result *= operand[i + 1],\n26 | |         \
    \    \"//\" => result /= operand[i + 1],\n27 | |             \"**\" => result\
    \ = result.pow(operand[i + 1] as u32),\n   | |                     ------------------------------------------\
    \ this and all prior arms are found to be of type `()`\n28 | |             _ =>\
    \ result,\n   | |                  ^^^^^^ expected `()`, found `isize`\n29 | |\
    \         }\n   | |_________- `match` arms have incompatible types\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (o, p) in operator.iter().zip(operand.iter().skip(1))\
    \ {\n        result = match o.as_str() {\n            \"+\" => result + p,\n \
    \           \"-\" => result - p,\n            \"*\" => result * p,\n         \
    \   \"//\" => result / p,\n            \"**\" => result.pow(*p as u32),\n    \
    \        _ => 0,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpyvb9p_ex.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (op_idx, op) in operator.iter().enumerate()\
    \ {\n        let next_operand = operand[op_idx + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += next_operand,\n            \"-\" => result\
    \ -= next_operand,\n            \"*\" => result *= next_operand,\n           \
    \ \"//\" => result /= next_operand,\n            \"**\" => result = result.pow(next_operand\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpbyfgopef.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpfge3oakw.rs:20:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result += op2,\n            \"-\" => result -= op2,\n            \"*\"\
    \ => result *= op2,\n            \"//\" => result /= op2,\n            \"**\"\
    \ => result = result.pow(op2 as u32),\n            _ => panic!(\"Invalid operator\"\
    ),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1hlya_h9.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => unreachable!(),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpl49b475_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    (1..operator.len()).fold(operand[0],\
    \ |prev, i| {\n        match operator[i - 1].as_str() {\n            \"+\" =>\
    \ prev + operand[i],\n            \"-\" => prev - operand[i],\n            \"\
    *\" => prev * operand[i],\n            \"//\" => prev / operand[i],\n        \
    \    \"**\" => prev.pow(operand[i] as u32),\n            _ => prev,\n        }\n\
    \    })\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `32`,\n right: `37`', /tmp/tmpx2tkwvpv.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut idx = 0;\n    let mut result = operand[idx];\n    while idx < operator.len()\
    \ {\n        idx += 1;\n        match operator[idx - 1].as_str() {\n         \
    \   \"+\" => result += operand[idx],\n            \"-\" => result -= operand[idx],\n\
    \            \"*\" => result *= operand[idx],\n            \"//\" => result /=\
    \ operand[idx],\n            \"**\" => result = result.pow(operand[idx] as u32),\n\
    \            _ => panic!(\"invalid operation: {}\", operator[idx - 1]),\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpi55ajdfu.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  operand.iter().zip(operator.iter()).fold(None,\
    \ |acc, (b, op)| {\n    match acc {\n      Some(a) => {\n        match op.as_str()\
    \ {\n          \"+\" => Some(a + b),\n          \"-\" => Some(a - b),\n      \
    \    \"*\" => Some(a * b),\n          \"//\" => Some(a / b),\n          \"**\"\
    \ => Some(a.pow(*b as u32)),\n          _ => None,\n        }\n      }\n     \
    \ None => Some(*b),\n    }\n  }).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `Option<T>`\n  --> /tmp/tmpudzykyu9.rs:20:51\n\
    \   |\n20 |   operand.iter().zip(operator.iter()).fold(None, |acc, (b, op)| {\n\
    \   |                                                   ^^^ consider giving this\
    \ closure parameter the explicit type `Option<T>`, with the type parameters specified\n\
    \   |\n   = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operators = operator.into_iter();\n    let mut operands = operand.into_iter();\n\
    \    let init = operands.next().unwrap();\n    return operators.fold(init, |acc,\
    \ item| {\n        let op2 = operands.next().unwrap();\n        match item.as_str()\
    \ {\n            \"+\" => acc + op2,\n            \"-\" => acc - op2,\n      \
    \      \"*\" => acc * op2,\n            \"//\" => acc / op2,\n            \"**\"\
    \ => acc.pow(op2 as u32),\n            _ => panic!(\"Not operator: {}\", item),\n\
    \        }\n    });\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6u_ctkma.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op_eval = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => op_eval += operand[i + 1],\n            \"-\" => op_eval\
    \ -= operand[i + 1],\n            \"*\" => op_eval *= operand[i + 1],\n      \
    \      \"//\" => op_eval /= operand[i + 1],\n            \"**\" => op_eval = op_eval.pow(operand[i\
    \ + 1] as u32),\n            _ => return -1,\n        }\n    }\n    op_eval\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmply21p_wb.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operand.len()\
    \ < 2 {\n        return 0;\n    }\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpx0e9jmq8.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    let mut result = operand.remove(0);\n    for (ref\
    \ op, val) in operator.iter().zip(operand) {\n        match op.as_ref() {\n  \
    \          \"+\" => result += val,\n            \"-\" => result -= val,\n    \
    \        \"*\" => result *= val,\n            \"/\" => result /= val,\n      \
    \      \"^\" => result = result.pow(val as u32),\n            _ => panic!(\"Unknown\
    \ operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unknown operator'', /tmp/tmp8yp9ry7c.rs:29:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ result = operand[0];\n    for (idx, op) in operator.iter().enumerate() {\n \
    \       let left = operand[idx];\n        let right = operand[idx + 1];\n    \
    \    match op.as_str() {\n            \"+\" => operand[idx + 1] = left + right,\n\
    \            \"-\" => operand[idx + 1] = left - right,\n            \"*\" => operand[idx\
    \ + 1] = left * right,\n            \"//\" => operand[idx + 1] = left / right,\n\
    \            \"**\" => operand[idx + 1] = left.pow(right as u32),\n          \
    \  _ => {}\n        }\n    }\n    operand[operand.len() - 1]\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `result`\n  --> /tmp/tmpk44of0g4.rs:20:9\n  \
    \ |\n20 |     let result = operand[0];\n   |         ^^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_result`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `operand` as mutable, as it is\
    \ not declared as mutable\n  --> /tmp/tmpk44of0g4.rs:25:20\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \             ------- help: consider changing this to be mutable: `mut operand`\n\
    ...\n25 |             \"+\" => operand[idx + 1] = left + right,\n   |        \
    \            ^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `operand`\
    \ as mutable, as it is not declared as mutable\n  --> /tmp/tmpk44of0g4.rs:26:20\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                      ------- help: consider changing\
    \ this to be mutable: `mut operand`\n...\n26 |             \"-\" => operand[idx\
    \ + 1] = left - right,\n   |                    ^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `operand` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpk44of0g4.rs:27:20\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      -------\
    \ help: consider changing this to be mutable: `mut operand`\n...\n27 |       \
    \      \"*\" => operand[idx + 1] = left * right,\n   |                    ^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `operand` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmpk44of0g4.rs:28:21\n   |\n19\
    \ | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |\
    \                                      ------- help: consider changing this to\
    \ be mutable: `mut operand`\n...\n28 |             \"//\" => operand[idx + 1]\
    \ = left / right,\n   |                     ^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `operand` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpk44of0g4.rs"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    use\
    \ std::collections::HashMap;\n    let ops = {\n        let mut hm = HashMap::new();\n\
    \        hm.insert(\"+\", |x, y| x + y);\n        hm.insert(\"-\", |x, y| x -\
    \ y);\n        hm.insert(\"*\", |x, y| x * y);\n        hm.insert(\"//\", |x,\
    \ y| x / y);\n        hm.insert(\"**\", |x, y| x.pow(y as u32));\n        hm\n\
    \    };\n    let mut it = operand.iter();\n    let mut result = *it.next().unwrap();\n\
    \    for op in operator {\n        let operand = *it.next().unwrap();\n      \
    \  result = ops[&op](result, operand);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpatj1ij4t.rs:24:24\n   |\n\
    23 |         hm.insert(\"+\", |x, y| x + y);\n   |                        ------------\
    \ the expected closure\n24 |         hm.insert(\"-\", |x, y| x - y);\n   |   \
    \                     ^^^^^^^^^^^^ expected closure, found a different closure\n\
    \   |\n   = note: expected closure `[closure@/tmp/tmpatj1ij4t.rs:23:24: 23:36]`\n\
    \              found closure `[closure@/tmp/tmpatj1ij4t.rs:24:24: 24:36]`\n  \
    \ = note: no two closures, even if identical, have the same type\n   = help: consider\
    \ boxing your closure and/or using it as a trait object\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpatj1ij4t.rs:25:24\n   |\n23 |         hm.insert(\"+\",\
    \ |x, y| x + y);\n   |                        ------------ the expected closure\n\
    24 |         hm.insert(\"-\", |x, y| x - y);\n25 |         hm.insert(\"*\", |x,\
    \ y| x * y);\n   |                        ^^^^^^^^^^^^ expected closure, found\
    \ a different closure\n   |\n   = note: expected closure `[closure@/tmp/tmpatj1ij4t.rs:23:24:\
    \ 23:36]`\n              found closure `[closure@/tmp/tmpatj1ij4t.rs:25:24: 25:36]`\n\
    \   = note: no two closures, even if identical, have the same type\n   = help:\
    \ consider boxing your closure and/or using it as a trait object\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpatj1ij4t.rs:26:25\n   |\n23 |         hm.insert(\"\
    +\", |x, y| x + y);\n   |                        ------------ the expected closure\n\
    ...\n26 |         hm.insert(\"//\", |x, y| x / y);\n   |                     \
    \    ^^^^^^^^^^^^ expected closure, found a different closure\n   |\n   = note:\
    \ expected closure `[closure@/tmp/tmpatj1ij4t.rs:23:24: 23:36]`\n            \
    \  found closure `[closure@/tmp/tmpatj1ij4t.rs:26:25: 26:37]`\n   = note: no two\
    \ closures, even if identical, have the same type\n   = help: consider boxing\
    \ your closure and/or using it as a trait object\n\nerror[E0277]: the trait bound\
    \ `&str: Borrow<String>` is not satisfied\n  --> /tmp/tmpatj1ij4t.rs:34:18\n \
    \  |\n34 |         result = ops[&op](result, operand);\n   |                 \
    \ ^^^^^^^^ the trait `Borrow<String>` is not"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO:\
    \ implement this function\n    // unimplemented!();\n    let mut new_operand:\
    \ Vec<isize> = Vec::new();\n    let mut result: isize = 0;\n    let mut i: usize\
    \ = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    //print!(\"\
    operator: {:?} \\n\", operator);\n    //print!(\"operand: {:?} \\n\", operand);\n\
    \    for i in 0..operator.len() {\n        //println!(\"operator: {:?} \\n\",\
    \ operator[i]);\n        //println!(\"operand: {:?} and {:?} \\n\", operand[j],\
    \ operand[j+1]);\n        match operator[i].as_ref() {\n            \"+\" => {\n\
    \                result = operand[j] + operand[j+1];\n                j += 1;\n\
    \            },\n            \"-\" => {\n                result = operand[j] -\
    \ operand[j+1];\n                j += 1;\n            },\n            \"*\" =>\
    \ {\n                result = operand[j] * operand[j+1];\n                j +=\
    \ 1;\n            },\n            \"//\" => {\n                result = operand[j]\
    \ / operand[j+1];\n                j += 1;\n            },\n            \"**\"\
    \ => {\n                result = operand[j].pow(operand[j+1] as u32);\n      \
    \          j += 1;\n            },\n            _ => panic!(\"error\")\n     \
    \   }\n        new_operand.push(result);\n        //println!(\"new_operand: {:?}\
    \ \\n\", new_operand);\n    }\n    while k < new_operand.len() {\n        result\
    \ = new_operand[k];\n        k += 1;\n    }\n    //println!(\"result: {:?} \\\
    n\", result);\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpptbi5pt8.rs:68:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operator.iter().rev().fold(operand.last().unwrap().clone(),\
    \ |acc, op| {\n        match op.as_str() {\n            \"+\" => acc + operand[operand.len()\
    \ - 2],\n            \"-\" => acc - operand[operand.len() - 2],\n            \"\
    *\" => acc * operand[operand.len() - 2],\n            \"//\" => acc / operand[operand.len()\
    \ - 2],\n            \"**\" => acc.pow(operand[operand.len() - 2] as u32),\n \
    \           _ => acc,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1679616`,\n right: `37`', /tmp/tmp2kffl42r.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op = operator.iter();\n    let mut result = operand[0];\n    for i in 1..operand.len()\
    \ {\n        let op = op.next().unwrap();\n        match op.as_str() {\n     \
    \       \"+\" => result += operand[i],\n            \"-\" => result -= operand[i],\n\
    \            \"*\" => result *= operand[i],\n            \"//\" => result /= operand[i],\n\
    \            \"**\" => result = result.pow(operand[i] as u32),\n            _\
    \ => (),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvbr92518.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => unreachable!(),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpl49b475_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    while i < operand.len() {\n        if operator[j] == \"+\" {\n          \
    \  stack.push(operand[i] + operand[i + 1]);\n        } else if operator[j] ==\
    \ \"-\" {\n            stack.push(operand[i] - operand[i + 1]);\n        } else\
    \ if operator[j] == \"*\" {\n            stack.push(operand[i] * operand[i + 1]);\n\
    \        } else if operator[j] == \"//\" {\n            stack.push(operand[i]\
    \ / operand[i + 1]);\n        } else if operator[j] == \"**\" {\n            stack.push(operand[i].pow(operand[i\
    \ + 1] as u32));\n        } else {\n            return -1;\n        }\n      \
    \  i += 1;\n        j += 1;\n    }\n    let mut result = stack[0];\n    for i\
    \ in 1..stack.len() {\n        result = result.checked_add(stack[i]).unwrap();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmpegc_24r6.rs:24:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut operand_iter = operand.iter();\n\
    \    let mut operator_iter = operator.iter();\n    stack.push(*operand_iter.next().unwrap());\n\
    \    while let Some(v) = operand_iter.next() {\n        let op = operator_iter.next().unwrap();\n\
    \        match op.as_str() {\n            \"+\" => stack.push(*v),\n         \
    \   \"-\" => stack.push(-*v),\n            \"*\" => stack.push(stack.pop().unwrap()\
    \ * *v),\n            \"//\" => stack.push(stack.pop().unwrap() / *v),\n     \
    \       \"**\" => stack.push(stack.pop().unwrap().pow(*v as u32)),\n         \
    \   _ => {}\n        }\n    }\n    stack.iter().sum()\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmp2j_a_f_p.rs:29:31\n   |\n29 |             \"*\" => stack.push(stack.pop().unwrap()\
    \ * *v),\n   |                    -----------^^^^^^^^^^^---------------\n   |\
    \                    |     |    |\n   |                    |     |    second mutable\
    \ borrow occurs here\n   |                    |     first borrow later used by\
    \ call\n   |                    first mutable borrow occurs here\n   |\nhelp:\
    \ try adding a local storing this argument...\n  --> /tmp/tmp2j_a_f_p.rs:29:31\n\
    \   |\n29 |             \"*\" => stack.push(stack.pop().unwrap() * *v),\n   |\
    \                               ^^^^^^^^^^^\nhelp: ...and then using that local\
    \ as the argument to this call\n  --> /tmp/tmp2j_a_f_p.rs:29:20\n   |\n29 |  \
    \           \"*\" => stack.push(stack.pop().unwrap() * *v),\n   |            \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot borrow\
    \ `stack` as mutable more than once at a time\n  --> /tmp/tmp2j_a_f_p.rs:30:32\n\
    \   |\n30 |             \"//\" => stack.push(stack.pop().unwrap() / *v),\n   |\
    \                     -----------^^^^^^^^^^^---------------\n   |            \
    \         |     |    |\n   |                     |     |    second mutable borrow\
    \ occurs here\n   |                     |     first borrow later used by call\n\
    \   |                     first mutable borrow occurs here\n   |\nhelp: try adding\
    \ a local storing this argument...\n  --> /tmp/tmp2j_a_f_p.rs:30:32\n   |\n30\
    \ |             \"//\" => stack.push(stack.pop().unwrap() / *v),\n   |       \
    \                         ^^^^^^^^^^^\nhelp: ...and then using that local as the\
    \ argument to this call\n  --> /tmp/tmp2j_a_f_p.rs:30:21\n   |\n30 |         \
    \    \"//\" => stack.push(stack.pop().unwrap() / *v),\n   |                  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot borrow `stack`\
    \ as mutable more than once at a time\n  --> /tmp/tmp2j_a_f_p.rs:31:32\n   |\n\
    31 |             \"**\" => stack.push(stack.pop().unwrap().pow(*v as u32)),\n\
    \   |                     -----------^^^^^^^^^^^-------------------------\n  \
    \ |  "
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op = operand;\n    for (i, o) in operator.iter().enumerate() {\n       \
    \ let l = op[i];\n        let r = op[i + 1];\n        op[i + 1] = match o.as_str()\
    \ {\n            \"+\" => l + r,\n            \"-\" => l - r,\n            \"\
    *\" => l * r,\n            \"//\" => l / r,\n            \"**\" => l.pow(r as\
    \ u32),\n            _ => panic!(\"Unknown operation: {}\", o),\n        };\n\
    \    }\n    op[op.len() - 1]\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpi8wr66qq.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op1\
    \ = result;\n        let op2 = operand[i + 1];\n        result = match operator[i].as_str()\
    \ {\n            \"+\" => op1 + op2,\n            \"-\" => op1 - op2,\n      \
    \      \"*\" => op1 * op2,\n            \"//\" => op1 / op2,\n            \"**\"\
    \ => op1.pow(op2 as u32),\n            _ => 0,\n        };\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvvtf62xw.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op_iter = operator.iter();\n    let mut operand_iter = operand.iter();\n\
    \    let left = *operand_iter.next().unwrap();\n    let mut result = left;\n \
    \   for operand in operand_iter {\n        let op = op_iter.next().unwrap();\n\
    \        match op.as_str() {\n            \"+\" => result += operand,\n      \
    \      \"-\" => result -= operand,\n            \"*\" => result *= operand,\n\
    \            \"//\" => result /= operand,\n            \"**\" => result = result.pow(*operand\
    \ as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpxa97_4f8.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand_iter = operand.iter();\n    let mut current_number = *operand_iter.next().unwrap();\n\
    \    for (i, operator) in operator.iter().enumerate() {\n        match operator.as_str()\
    \ {\n            \"+\" => current_number += operand_iter.next().unwrap(),\n  \
    \          \"-\" => current_number -= operand_iter.next().unwrap(),\n        \
    \    \"*\" => current_number *= operand_iter.next().unwrap(),\n            \"\
    //\" => current_number /= operand_iter.next().unwrap(),\n            \"**\" =>\
    \ current_number = num::pow(current_number, *operand_iter.next().unwrap()),\n\
    \            _ => panic!(\"Unknown operator\"),\n        }\n    }\n    current_number\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `num`\n\
    \  --> /tmp/tmpfaytt849.rs:28:38\n   |\n28 |             \"**\" => current_number\
    \ = num::pow(current_number, *operand_iter.next().unwrap()),\n   |           \
    \                           ^^^ use of undeclared crate or module `num`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut ops: Vec<fn(isize, isize) -> isize> = Vec::new();\n    for op in operator\
    \ {\n        match op.as_str() {\n            \"+\" => ops.push(add),\n      \
    \      \"-\" => ops.push(sub),\n            \"*\" => ops.push(mul),\n        \
    \    \"//\" => ops.push(div),\n            \"**\" => ops.push(pow),\n        \
    \    _ => (),\n        }\n    }\n    rpn(operand, ops)\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `add` in this scope\n  --> /tmp/tmpf3nlnyp7.rs:23:29\n\
    \   |\n23 |             \"+\" => ops.push(add),\n   |                        \
    \     ^^^ not found in this scope\n\nerror[E0425]: cannot find value `sub` in\
    \ this scope\n  --> /tmp/tmpf3nlnyp7.rs:24:29\n   |\n24 |             \"-\" =>\
    \ ops.push(sub),\n   |                             ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `mul` in this scope\n  --> /tmp/tmpf3nlnyp7.rs:25:29\n\
    \   |\n25 |             \"*\" => ops.push(mul),\n   |                        \
    \     ^^^ not found in this scope\n\nerror[E0425]: cannot find value `div` in\
    \ this scope\n  --> /tmp/tmpf3nlnyp7.rs:26:30\n   |\n26 |             \"//\" =>\
    \ ops.push(div),\n   |                              ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `pow` in this scope\n  --> /tmp/tmpf3nlnyp7.rs:27:30\n\
    \   |\n27 |             \"**\" => ops.push(pow),\n   |                       \
    \       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `rpn`\
    \ in this scope\n  --> /tmp/tmpf3nlnyp7.rs:31:5\n   |\n31 |     rpn(operand, ops)\n\
    \   |     ^^^ not found in this scope\n\nerror: aborting due to 6 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, oper) in operator.iter().enumerate() {\n\
    \        let op2 = operand[i + 1];\n        match oper.as_str() {\n          \
    \  \"+\" => result += op2,\n            \"-\" => result -= op2,\n            \"\
    *\" => result *= op2,\n            \"//\" => result /= op2,\n            \"**\"\
    \ => result = result.pow(op2 as u32),\n            _ => result = 0,\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpokedfgdw.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = operand[0];\n    for i in 0..operand.len() - 1 {\n        match operator[i].as_str()\
    \ {\n            \"+\" => res += operand[i + 1],\n            \"-\" => res -=\
    \ operand[i + 1],\n            \"*\" => res *= operand[i + 1],\n            \"\
    //\" => res /= operand[i + 1],\n            \"**\" => res = res.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unrecognized operator: {}\", operator[i]),\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp50rfg8h6.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operand.len()-1 {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i+1],\n            \"-\" => result\
    \ -= operand[i+1],\n            \"*\" => result *= operand[i+1],\n           \
    \ \"//\" => result /= operand[i+1],\n            \"**\" => result = result.pow(operand[i+1]\
    \ as u32),\n            _ => println!(\"unsupported operator!\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmph5hn_i1f.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand.iter().fold1(|a,\
    \ b| match operator.remove(0).as_str() {\n        \"+\" => a + b,\n        \"\
    -\" => a - b,\n        \"*\" => a * b,\n        \"//\" => a / b,\n        \"**\"\
    \ => a.pow(*b as u32),\n        _ => panic!(\"Not a valid operator\"),\n    })\n\
    \    .unwrap()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `fold1` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp4mgczz7j.rs:20:20\n   |\n20 |     operand.iter().fold1(|a,\
    \ b| match operator.remove(0).as_str() {\n   |                    ^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut ret = operand[0];\n    for (k, i) in operator.iter().enumerate() {\n   \
    \     let a = ret;\n        let b = operand[k + 1];\n        ret = match i.as_str()\
    \ {\n            \"+\" => a + b,\n            \"-\" => a - b,\n            \"\
    *\" => a * b,\n            \"//\" => a / b,\n            \"**\" => a.pow(b as\
    \ u32),\n            _ => unreachable!(),\n        };\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp85z3f91s.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut operand_iter = operand.iter();\n\
    \    for op in operator {\n        let left = *operand_iter.next().unwrap();\n\
    \        let right = *operand_iter.next().unwrap();\n        match op.as_str()\
    \ {\n            \"+\" => stack.push(left + right),\n            \"-\" => stack.push(left\
    \ - right),\n            \"*\" => stack.push(left * right),\n            \"//\"\
    \ => stack.push(left / right),\n            \"**\" => stack.push(left.pow(right\
    \ as u32)),\n            _ => unreachable!(),\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpk8pe5r6c.rs:23:41

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  // Write\
    \ your code here\n  let mut res = operand[0];\n  for i in 0..operator.len() {\n\
    \    match operator[i].as_str() {\n      \"+\" => res += operand[i + 1],\n   \
    \   \"-\" => res -= operand[i + 1],\n      \"*\" => res *= operand[i + 1],\n \
    \     \"//\" => res /= operand[i + 1],\n      \"**\" => res = res.pow(operand[i\
    \ + 1] as u32),\n      _ => (),\n    }\n  }\n  res\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpd564_h7t.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    (2..operand.len()).fold(operand[0],\
    \ |acc, i| {\n        acc.algebra(&operator[i - 1], operand[i])\n    })\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `algebra` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpgleq4mpp.rs:21:13\n   |\n21 |         acc.algebra(&operator[i\
    \ - 1], operand[i])\n   |             ^^^^^^^ method not found in `isize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let mut\
    \ ret = 0;\n  let mut opr = 0;\n  let mut opr2 = 0;\n  let mut opr3 = 0;\n  let\
    \ mut opr4 = 0;\n  let mut opr5 = 0;\n  let mut opr6 = 0;\n  let mut opr7 = 0;\n\
    \  let mut opr8 = 0;\n  let mut opr9 = 0;\n  let mut opr10 = 0;\n  let mut opr11\
    \ = 0;\n  let mut opr12 = 0;\n  let mut opr13 = 0;\n  let mut opr14 = 0;\n  let\
    \ mut opr15 = 0;\n  let mut opr16 = 0;\n  let mut opr17 = 0;\n  let mut opr18\
    \ = 0;\n  let mut opr19 = 0;\n  let mut opr20 = 0;\n  let mut opr21 = 0;\n  let\
    \ mut opr22 = 0;\n  let mut opr23 = 0;\n  let mut opr24 = 0;\n  let mut opr25\
    \ = 0;\n  let mut opr26 = 0;\n  let mut opr27 = 0;\n  let mut opr28 = 0;\n  let\
    \ mut opr29 = 0;\n  let mut opr30 = 0;\n  let mut opr31 = 0;\n  let mut opr32\
    \ = 0;\n  let mut opr33 = 0;\n  let mut opr34 = 0;\n  let mut opr35 = 0;\n  let\
    \ mut opr36 = 0;\n  let mut opr37 = 0;\n  let mut opr38 = 0;\n  let mut opr39\
    \ = 0;\n  let mut opr40 = 0;\n  let mut opr41 = 0;\n  let mut opr42 = 0;\n  let\
    \ mut opr43 = 0;\n  let mut opr44 = 0;\n  let mut opr45 = 0;\n  let mut opr46\
    \ = 0;\n  let mut opr47 = 0;\n  let mut opr48 = 0;\n  let mut opr49 = 0;\n  let\
    \ mut opr50 = 0;\n  let mut op\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpm234blsl.rs:71:13\n   |\n\
    71 |   let mut op\n   |             ^ help: add `;` here\n72 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm234blsl.rs:19:62\n \
    \  |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa_2_9de0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => result\
    \ = 0,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpei9pld52.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut iter_operand = operand.iter();\n    iter_operand.next().unwrap().clone()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `37`', /tmp/tmpdlghtr0f.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    let mut result = operand.remove(0);\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        match op.as_str() {\n        \
    \    \"+\" => result += operand[i],\n            \"-\" => result -= operand[i],\n\
    \            \"*\" => result *= operand[i],\n            \"//\" => result /= operand[i],\n\
    \            \"**\" => result = result.pow(operand[i] as u32),\n            _\
    \ => panic!(\"can not find op: {}\", op),\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqpt_ft4h.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    for i in 0..operand.len() - 1 {\n \
    \       let op = operator[i].as_str();\n        match op {\n            \"+\"\
    \ => {\n                let val = operand[i] + operand[i + 1];\n             \
    \   stack.push(val);\n            }\n            \"-\" => {\n                let\
    \ val = operand[i] - operand[i + 1];\n                stack.push(val);\n     \
    \       }\n            \"*\" => {\n                let val = operand[i] * operand[i\
    \ + 1];\n                stack.push(val);\n            }\n            \"//\" =>\
    \ {\n                let val = operand[i] / operand[i + 1];\n                stack.push(val);\n\
    \            }\n            \"**\" => {\n                let val = operand[i].pow(operand[i\
    \ + 1] as u32);\n                stack.push(val);\n            }\n           \
    \ _ => {\n                break;\n            }\n        }\n    }\n    let mut\
    \ sum = 0;\n    for i in 0..stack.len() {\n        sum += stack[i];\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `37`', /tmp/tmpynrvtir2.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"The length of operator vector is equal\
    \ to the length of operand vector minus one\");\n    }\n    if operator.len()\
    \ == 0 {\n        panic!(\"Operator vector has at least one operator\");\n   \
    \ }\n    if operand.len() < 2 {\n        panic!(\"Operand vector has at least\
    \ two operands\");\n    }\n    let mut result = operand[0];\n    for (i, op) in\
    \ operator.iter().enumerate() {\n        if op == \"+\" {\n            result\
    \ += operand[i + 1];\n        } else if op == \"-\" {\n            result -= operand[i\
    \ + 1];\n        } else if op == \"*\" {\n            result *= operand[i + 1];\n\
    \        } else if op == \"//\" {\n            result /= operand[i + 1];\n   \
    \     } else if op == \"**\" {\n            result = result.pow(operand[i + 1]\
    \ as u32);\n        } else {\n            panic!(\"Unknown operation {:?}\", op);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphq2gapvs.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ ops = operator.iter().map(|s| match s.as_str() {\n        \"+\" => Operation::Add,\n\
    \        \"-\" => Operation::Sub,\n        \"*\" => Operation::Mul,\n        \"\
    /\" => Operation::Div,\n        \"^\" => Operation::Pow,\n        _ => unreachable!()\n\
    \    }).collect::<Vec<_>>();\n    (0..operand.len() - 1).fold(operand[0], |acc,\
    \ i| {\n        let op = ops[i];\n        let b = operand[i + 1];\n        match\
    \ op {\n            Operation::Add => acc + b,\n            Operation::Sub =>\
    \ acc - b,\n            Operation::Mul => acc * b,\n            Operation::Div\
    \ => acc / b,\n            Operation::Pow => acc.pow(b as u32),\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp_paey_1w.rs:21:16\n   |\n21 |         \"+\" => Operation::Add,\n\
    \   |                ^^^^^^^^^ use of undeclared type `Operation`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp_paey_1w.rs:22:16\n\
    \   |\n22 |         \"-\" => Operation::Sub,\n   |                ^^^^^^^^^ use\
    \ of undeclared type `Operation`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Operation`\n  --> /tmp/tmp_paey_1w.rs:23:16\n   |\n23 |         \"*\"\
    \ => Operation::Mul,\n   |                ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp_paey_1w.rs:24:16\n\
    \   |\n24 |         \"/\" => Operation::Div,\n   |                ^^^^^^^^^ use\
    \ of undeclared type `Operation`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Operation`\n  --> /tmp/tmp_paey_1w.rs:25:16\n   |\n25 |         \"^\"\
    \ => Operation::Pow,\n   |                ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp_paey_1w.rs:32:13\n\
    \   |\n32 |             Operation::Add => acc + b,\n   |             ^^^^^^^^^\
    \ use of undeclared type `Operation`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operation`\n  --> /tmp/tmp_paey_1w.rs:33:13\n   |\n33 |   \
    \          Operation::Sub => acc - b,\n   |             ^^^^^^^^^ use of undeclared\
    \ type `Operation`\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `Operation`\n  --> /tmp/tmp_paey_1w.rs:34:13\n   |\n34 |             Operation::Mul\
    \ => acc * b,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp_paey_1w.rs:35:13\n\
    \   |\n35 |             Operation::Div => acc / b,\n   |             ^^^^^^^^^\
    \ use of undeclared type `Operation`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operation`\n  --> /tmp/tmp_paey_1w.rs:36:13\n   |\n36 |   \
    \          Operation::Pow => acc.pow(b as u32),\n   |  "
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        return 0;\n    }\n    let mut n: isize = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => n += operand[i + 1],\n            \"-\" => n -= operand[i +\
    \ 1],\n            \"*\" => n *= operand[i + 1],\n            \"//\" => n /= operand[i\
    \ + 1],\n            \"**\" => n = n.pow(operand[i + 1] as u32),\n           \
    \ _ => return 0,\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpi00eutaq.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            result = result.pow(operand[i + 1] as u32);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprqc6o02h.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand = operand;\n    let mut result = operand.remove(0);\n    for (a,\
    \ b) in operator.iter().zip(operand.iter()) {\n        result = match a.as_str()\
    \ {\n            \"+\" => result + b,\n            \"-\" => result - b,\n    \
    \        \"*\" => result * b,\n            \"//\" => result / b,\n           \
    \ \"**\" => result.pow(*b as u32),\n            _ => 0,\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6ewdpjoy.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand.iter().fold(0,\
    \ |acc, x| {\n        acc.checked_add(x).and_then(|res| {\n            let op\
    \ = operator.pop().unwrap();\n            if op == \"+\" {\n                Some(res)\n\
    \            } else if op == \"-\" {\n                Some(-res)\n           \
    \ } else if op == \"*\" {\n                Some(res * operand.pop().unwrap())\n\
    \            } else if op == \"//\" {\n                Some(res / operand.pop().unwrap())\n\
    \            } else if op == \"**\" {\n                Some(res.pow(operand.pop().unwrap()\
    \ as u32))\n            } else {\n                None\n            }\n      \
    \  }).unwrap()\n    })\n}\n\nfn main() {\n    let candidate = do_algebra;\n  \
    \  assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4kd9xxq.rs:21:25\n   |\n\
    21 |         acc.checked_add(x).and_then(|res| {\n   |                       \
    \  ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n21 |         acc.checked_add(*x).and_then(|res| {\n   |      \
    \                   +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand.into_iter().zip(operator.into_iter()).fold(0,\
    \ |acc, (a, b)| {\n        match b.as_str() {\n            \"+\" => acc + a,\n\
    \            \"-\" => acc - a,\n            \"*\" => acc * a,\n            \"\
    //\" => acc / a,\n            \"**\" => acc.pow(a as u32),\n            _ => acc,\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `37`', /tmp/tmpyhpcz6zw.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < operand.len()\
    \ {\n        match &operator[i] as &str {\n            \"+\" => {\n          \
    \      let op1 = stack.pop().unwrap();\n                let op2 = operand[i +\
    \ 1];\n                stack.push(op1 + op2);\n            }\n            \"-\"\
    \ => {\n                let op1 = stack.pop().unwrap();\n                let op2\
    \ = operand[i + 1];\n                stack.push(op1 - op2);\n            }\n \
    \           \"*\" => {\n                let op1 = stack.pop().unwrap();\n    \
    \            let op2 = operand[i + 1];\n                stack.push(op1 * op2);\n\
    \            }\n            \"//\" => {\n                let op1 = stack.pop().unwrap();\n\
    \                let op2 = operand[i + 1];\n                stack.push(op1 / op2);\n\
    \            }\n            \"**\" => {\n                let op1 = stack.pop().unwrap();\n\
    \                let op2 = operand[i + 1];\n                stack.push(op1.pow(op2\
    \ as u32));\n            }\n            _ => panic!(\"Unknown operator\"),\n \
    \       }\n        i += 1;\n    }\n    stack.pop().unwrap()\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpd00w0fcd.rs:45:39

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let op2 = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += op2,\n            \"-\" => result -= op2,\n\
    \            \"*\" => result *= op2,\n            \"//\" => result /= op2,\n \
    \           \"**\" => result = result.pow(op2 as u32),\n            _ => continue,\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfp7z9zv6.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    return\
    \ 0;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpeif6eico.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpfge3oakw.rs:20:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut postfix: Vec<String> = Vec::new();\n    let mut op_stack: Vec<String> =\
    \ Vec::new();\n    let mut num_stack: Vec<isize> = Vec::new();\n    let mut result:\
    \ isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut\
    \ peek: String = String::new();\n    let mut temp: String = String::new();\n \
    \   let mut temp_num: isize = 0;\n    let mut temp_op: String = String::new();\n\
    \    let precedence: HashMap<String, u8> = [(\"+\".to_string(), 1), (\"-\".to_string(),\
    \ 1), (\"*\".to_string(), 2), (\"/\".to_string(), 2), (\"%\".to_string(), 2),\
    \ (\"^\".to_string(), 3)].iter().cloned().collect();\n    while i < operator.len()\
    \ {\n        if operator[i] == \"(\" {\n            op_stack.push(operator[i].clone());\n\
    \        } else if operator[i] == \")\" {\n            while !op_stack.is_empty()\
    \ {\n                peek = op_stack.pop().unwrap();\n                if peek\
    \ == \"(\" {\n                    break;\n                }\n                postfix.push(peek.clone());\n\
    \            }\n        } else {\n            while !op_stack.is_empty() {\n \
    \               peek = op_stack.pop().unwrap();\n                if precedence[&peek]\
    \ > precedence[&operator[i]] {\n                    op_stack.push(peek.clone());\n\
    \                    break;\n                }\n                postfix.push(peek.clone());\n\
    \            }\n            op_stack.push(operator[i].clone());\n        }\n \
    \       i += 1;\n    }\n    while !op_stack.is_empty() {\n        peek = op_stack.pop().unwrap();\n\
    \        postfix.push(peek.clone());\n    }\n    while j < postfix.len() {\n \
    \       if postfix[j] == \"+\" {\n            num_stack.push(num_stack.pop().unwrap()\
    \ + num_stack.pop\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpn0l55jne.rs:69:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n...\n59 |     while j < postfix.len() {\n   |          \
    \                   - unclosed delimiter\n60 |         if postfix[j] == \"+\"\
    \ {\n   |                              - this delimiter might not be properly\
    \ closed...\n61 |             num_stack.push(num_stack.pop().unwrap() + num_stack.pop\n\
    62 | }\n   | - ...as it matches this but it has different indentation\n...\n69\
    \ | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpn0l55jne.rs:61:27\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ closing delimiter possibly meant for this\n...\n61 |             num_stack.push(num_stack.pop().unwrap()\
    \ + num_stack.pop\n   |                           ^ unclosed delimiter\n62 | }\n\
    \   | ^ mismatched closing delimiter\n\nerror[E0412]: cannot find type `HashMap`\
    \ in this scope\n  --> /tmp/tmpn0l55jne.rs:30:21\n   |\n30 |     let precedence:\
    \ HashMap<String, u8> = [(\"+\".to_string(), 1), (\"-\".to_string(), 1), (\"*\"\
    .to_string(), 2), (\"/\".to_string(), 2), (\"%\".t...\n   |                  \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0615]: attempted to\
    \ take value of method `pop` on type `Vec<isize>`\n  --> /tmp/tmpn0l55jne.rs:61:65\n\
    \   |\n61 |             num_stack.push(num_stack.pop().unwrap() + num_stack.pop\n\
    \   |                                                                 ^^^ method,\
    \ not a field\n   |\nhelp: use parentheses to call the method\n   |\n61 |    \
    \         num_stack.push(num_stack.pop().unwrap() + num_stack.pop()\n   |    \
    \                                                                ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn0l55jne.rs:59:5\n   |\n19 |   fn do_algebra(operator:\
    \ Vec<String>, operan"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"Invalid operand and operator\");\n\
    \    }\n    let mut counter = 0;\n    let mut result = operand[counter];\n   \
    \ while counter < operator.len() {\n        counter += 1;\n        match operator[counter\
    \ - 1].as_str() {\n            \"+\" => result += operand[counter],\n        \
    \    \"-\" => result -= operand[counter],\n            \"*\" => result *= operand[counter],\n\
    \            \"//\" => result /= operand[counter],\n            \"**\" => result\
    \ = result.pow(operand[counter] as u32),\n            _ => panic!(\"Invalid operator:\
    \ {}\", operator[counter - 1]),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa1mle8bh.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = operand[0];\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == \"+\" {\n            res += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            res -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            res *= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            res /= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            res = res.pow(operand[i + 1] as u32);\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqbei9c2y.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack: Vec<isize> = Vec::new();\n    let mut result: isize = 0;\n    let\
    \ op_list: Vec<String> = vec![\"+\".to_string(), \"-\".to_string(), \"*\".to_string(),\
    \ \"//\".to_string(), \"**\".to_string()];\n    let operations: HashMap<&String,\
    \ &Fn(isize, isize) -> isize> = hashmap! {\n        \"+\" => &|first, second|\
    \ first + second,\n        \"-\" => &|first, second| first - second,\n       \
    \ \"*\" => &|first, second| first * second,\n        \"//\" => &|first, second|\
    \ first / second,\n        \"**\" => &|first, second| first.pow(second as u32)\n\
    \    };\n    stack.push(operand[0]);\n    for (i, v) in operator.iter().enumerate()\
    \ {\n        if !op_list.contains(v) {\n            continue;\n        }\n   \
    \     if stack.len() < 2 {\n            stack.push(operand[i+1]);\n          \
    \  continue;\n        }\n        let (first, second) = (stack.pop().unwrap(),\
    \ stack.pop().unwrap());\n        stack.push(operations[v](first, second));\n\
    \        stack.push(operand[i+1]);\n    }\n    while stack.len() > 1 {\n     \
    \   let (first, second) = (stack.pop().unwrap(), stack.pop().unwrap());\n    \
    \    stack.push(operations[\"+\"](first, second));\n    }\n    result = stack.pop().unwrap();\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `hashmap` in this scope\n  --> /tmp/tmpw1h19vau.rs:23:68\n\
    \   |\n23 |     let operations: HashMap<&String, &Fn(isize, isize) -> isize> =\
    \ hashmap! {\n   |                                                           \
    \         ^^^^^^^\n\nerror[E0412]: cannot find type `HashMap` in this scope\n\
    \  --> /tmp/tmpw1h19vau.rs:23:21\n   |\n23 |     let operations: HashMap<&String,\
    \ &Fn(isize, isize) -> isize> = hashmap! {\n   |                     ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashMap;\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut r = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => r += operand[i + 1],\n            \"-\" => r -= operand[i\
    \ + 1],\n            \"*\" => r *= operand[i + 1],\n            \"//\" => r /=\
    \ operand[i + 1],\n            \"**\" => r = r.pow(operand[i + 1] as u32),\n \
    \           _ => (),\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpduoj5yg0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977839
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        if op == \"+\" {\n            result += operand[i + 1];\n\
    \        } else if op == \"-\" {\n            result -= operand[i + 1];\n    \
    \    } else if op == \"*\" {\n            result *= operand[i + 1];\n        }\
    \ else if op == \"//\" {\n            result /= operand[i + 1];\n        } else\
    \ if op == \"**\" {\n            result = result.pow(operand[i + 1] as u32);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdmi66i44.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977839
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Build\
    \ the algebra expression in reverse polish notation\n    let mut expression =\
    \ Vec::with_capacity(operand.len() + operator.len());\n    for (i, _) in operand.iter().enumerate()\
    \ {\n        expression.push(operand[i]);\n        if i > 0 {\n            expression.push(match\
    \ operator[i - 1].as_str() {\n                \"+\" => Operator::Add,\n      \
    \          \"-\" => Operator::Sub,\n                \"*\" => Operator::Mul,\n\
    \                \"/\" => Operator::Div,\n                \"^\" => Operator::Pow,\n\
    \                _ => panic!(\"Wrong operator!\"),\n            });\n        }\n\
    \    }\n    // Evaluate the expression\n    expression.reverse();\n    let mut\
    \ stack = Vec::new();\n    for x in expression {\n        match x {\n        \
    \    Operator::Add => {\n                let v2 = stack.pop().unwrap();\n    \
    \            let v1 = stack.pop().unwrap();\n                stack.push(v1 + v2);\n\
    \            }\n            Operator::Sub => {\n                let v2 = stack.pop().unwrap();\n\
    \                let v1 = stack.pop().unwrap();\n                stack.push(v1\
    \ - v2);\n            }\n            Operator::Mul => {\n                let v2\
    \ = stack.pop().unwrap();\n                let v1 = stack.pop().unwrap();\n  \
    \              stack.push(v1 * v2);\n            }\n            Operator::Div\
    \ => {\n                let v2 = stack.pop().unwrap();\n                let v1\
    \ = stack.pop().unwrap();\n                stack.push(v1 / v2);\n            }\n\
    \            Operator::Pow => {\n                let v2 = stack.pop().unwrap();\n\
    \                let v1 = stack.pop().unwrap();\n                stack.push(v1.pow(v2\
    \ as u32));\n            }\n            Operand(x) => stack.push(x),\n       \
    \ }\n    }\n    stack.pop().unwrap()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operator`\n  -->\
    \ /tmp/tmpjtvada0o.rs:26:24\n   |\n26 |                 \"+\" => Operator::Add,\n\
    \   |                        ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpjtvada0o.rs:27:24\n\
    \   |\n27 |                 \"-\" => Operator::Sub,\n   |                    \
    \    ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Operator`\n  --> /tmp/tmpjtvada0o.rs:28:24\n   |\n28\
    \ |                 \"*\" => Operator::Mul,\n   |                        ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpjtvada0o.rs:29:24\n   |\n29 |    \
    \             \"/\" => Operator::Div,\n   |                        ^^^^^^^^ use\
    \ of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Operator`\n  --> /tmp/tmpjtvada0o.rs:30:24\n   |\n30 |               \
    \  \"^\" => Operator::Pow,\n   |                        ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpjtvada0o.rs:40:13\n   |\n40 |             Operator::Add => {\n\
    \   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpjtvada0o.rs:45:13\n\
    \   |\n45 |             Operator::Sub => {\n   |             ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpjtvada0o.rs:50:13\n   |\n50 |             Operator::Mul => {\n\
    \   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpjtvada0o.rs:55:13\n\
    \   |\n55 |             Operator::Div => {\n   |             ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpjtvada0o.rs:60:13\n   |\n60 |             Operator::Pow => {\n\
    \   |     "
  stdout: ''
  timestamp: 1659977838
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let op2 = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += op2,\n            \"-\" => result -= op2,\n\
    \            \"*\" => result *= op2,\n            \"//\" => result /= op2,\n \
    \           \"**\" => result = result.pow(op2 as u32),\n            _ => panic!(\"\
    invalid operator '{}'\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp47f0tty7.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977839
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpi8yrk_w1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977837
