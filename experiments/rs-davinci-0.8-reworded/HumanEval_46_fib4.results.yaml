language: rs
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut vec\
    \ = vec![0; 4];\n    vec[0] = 0;\n    vec[1] = 0;\n    vec[2] = 2;\n    vec[3]\
    \ = 0;\n    let mut i = 4;\n    while i <= n {\n        vec[i % 4] = vec[(i -\
    \ 1) % 4] + vec[(i - 2) % 4] + vec[(i - 3) % 4] + vec[(i - 4) % 4];\n        i\
    \ += 1;\n    }\n    vec[n % 4]\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpuw0m7mpf.rs:22:9\n   |\n22 |         vec[i % 4] = vec[(i - 1) % 4] +\
    \ vec[(i - 2) % 4] + vec[(i - 3) % 4] + vec[(i - 4) % 4];\n   |         ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpuw0m7mpf.rs:22:22\n\
    \   |\n22 |         vec[i % 4] = vec[(i - 1) % 4] + vec[(i - 2) % 4] + vec[(i\
    \ - 3) % 4] + vec[(i - 4) % 4];\n   |                      ^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpuw0m7mpf.rs:22:41\n\
    \   |\n22 |         vec[i % 4] = vec[(i - 1) % 4] + vec[(i - 2) % 4] + vec[(i\
    \ - 3) % 4] + vec[(i - 4) % 4];\n   |                                        \
    \ ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpuw0m7mpf.rs:22:60\n   |\n22 |         vec[i % 4] =\
    \ vec[(i - 1) % 4] + vec[(i - 2) % 4] + vec[(i - 3) % 4] + vec[(i - 4) % 4];\n\
    \   |                                                            ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->"
  stdout: ''
  timestamp: 1659822467
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0..=1 => 0,\n        2 => 2,\n        3 => 0,\n        _ => fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    0\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpgkkstm13.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1nu1mexa.rs:15:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822467
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut sequence\
    \ = vec![0, 0, 2, 0];\n    for i in 4..n {\n        let mut total = 0;\n     \
    \   for &x in sequence.iter() {\n            total += x;\n        }\n        sequence.remove(0);\n\
    \        sequence.push(total);\n    }\n    sequence.iter().fold(0, |acc, &x| acc\
    \ + x)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize =\
    \ 2;\n    let mut d: isize = 0;\n    for _ in 4..n + 1 {\n        let f: isize\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = f;\n    }\n    return d;\n}\n\nfn main() {\n    let candidate = fib4;\n  \
    \  assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 { return\
    \ n * 2; }\n    let mut i = 3;\n    let mut f1 = 0;\n    let mut f2 = 0;\n   \
    \ let mut f3 = 2;\n    let mut f4 = 0;\n    let mut t  = 0;\n    while i <= n\
    \ {\n        t = f1 + f2 + f3 + f4;\n        f1 = f2;\n        f2 = f3;\n    \
    \    f3 = f4;\n        f4 = t;\n        i += 1;\n    }\n    t\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpr42eqq5o.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let n = n as\
    \ usize;\n    let mut dp = [0; 4];\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2]\
    \ = 2;\n    dp[3] = 0;\n    if n <= 3 {\n        return dp[n];\n    }\n    for\
    \ i in 4..n+1 {\n        dp[i%4] = dp[(i-1)%4] + dp[(i-2)%4] + dp[(i-3)%4] + dp[(i-4)%4];\n\
    \    }\n    dp[n%4]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in\
    \ 4..n + 1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n       \
    \ c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpj98ehw1w.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    0\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpgkkstm13.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4(n) requires n to be a non-negative integer\");\n    }\n\
    \    let mut n0 = 0;\n    let mut n1 = 0;\n    let mut n2 = 2;\n    let mut n3\
    \ = 0;\n    let mut n4 = 0;\n    for _ in 4..=n {\n        n4 = n0 + n1 + n2 +\
    \ n3;\n        n0 = n1;\n        n1 = n2;\n        n2 = n3;\n        n3 = n4;\n\
    \    }\n    n4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        return n * 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n   \
    \ let mut fib4_1 = 0;\n    let mut fib4_2 = 0;\n    let mut fib4_3 = 2;\n    let\
    \ mut fib4_4 = 2;\n    let mut fib4_n = 8;\n    for _ in 4..n {\n        fib4_1\
    \ = fib4_2;\n        fib4_2 = fib4_3;\n        fib4_3 = fib4_4;\n        fib4_4\
    \ = fib4_n;\n        fib4_n = fib4_1 + fib4_2 + fib4_3 + fib4_4;\n    }\n    fib4_n\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmp1ofjq5j_.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ vec![0, 0, 2, 0];\n    let mut sum = 2;\n    for _ in 3..n {\n        sum +=\
    \ a[0];\n        a.insert(3, sum);\n        a.remove(0);\n    }\n    a[3]\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp5aosjoqs.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => {\n            let mut a = 0;\n            let mut b = 0;\n            let\
    \ mut c = 2;\n            let mut d = 0;\n            for _ in 4..n {\n      \
    \          let t = a + b + c + d;\n                a = b;\n                b =\
    \ c;\n                c = d;\n                d = t;\n            }\n        \
    \    a + b + c + d\n        }\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n  if n < 0 {\n \
    \   return 0;\n  }\n  if n == 0 {\n    return 0;\n  }\n  if n == 1 {\n    return\
    \ 0;\n  }\n  if n == 2 {\n    return 2;\n  }\n  if n == 3 {\n    return 0;\n \
    \ }\n  let mut prev = 0;\n  let mut current = 0;\n  let mut fib = 0;\n  let mut\
    \ pp = 0;\n  let mut p = 0;\n  let mut pp2 = 0;\n  let mut p2 = 0;\n  let mut\
    \ n2 = 0;\n  let mut n3 = 0;\n  let mut n4 = 0;\n  for i in 4..(n + 1) {\n   \
    \ n2 = n2 + prev;\n    n3 = n3 + p;\n    n4 = n4 + fib;\n    prev = current;\n\
    \    current = fib;\n    fib = n2 + n3 + n4;\n    p = pp;\n    pp = pp2;\n   \
    \ pp2 = fib;\n  }\n  fib\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpnhj7t7dy.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be non-negative.\");\n    }\n    if n < 2 {\n       \
    \ return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n\
    \        return 0;\n    }\n    let mut a: isize = 0;\n    let mut b: isize = 0;\n\
    \    let mut c: isize = 2;\n    let mut d: isize = 0;\n    for _ in 4..n + 1 {\n\
    \        let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return d;\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // TODO\n  \
    \  return 0;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmph70fxxun.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n  let mut a = 0;\n\
    \  let mut b = 0;\n  let mut c = 2;\n  let mut d = 0;\n  for _ in 3..n {\n   \
    \ d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  a + b + c + d\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpwitkur7u.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut pp = 0;\n    let mut p = 0;\n    let mut pp2 = 2;\n    let mut p2\
    \ = 0;\n    let mut result = 0;\n    for _ in 4..n + 1 {\n        result = pp\
    \ + p + pp2 + p2;\n        pp = p;\n        p = pp2;\n        pp2 = p2;\n    \
    \    p2 = result;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
