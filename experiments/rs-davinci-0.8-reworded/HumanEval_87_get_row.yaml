name: HumanEval_87_get_row
language: rs
prompt: "/// You are given a 2 dimensional data, as a nested vectors,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the vector,\n\
  /// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1, 2, 3, 4, 5,\
  \ 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0, 0), (1,\
  \ 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// vec![]\n/// >>> get_row(vec![vec![],\
  \ vec![1], vec![1, 2, 3]], 3)\n/// vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>,\
  \ x: isize) -> Vec<(isize, isize)> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1,\
  \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0,\
  \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2,\
  \ 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4,\
  \ 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1),\
  \ (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3,\
  \ 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5,\
  \ 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1),\
  \ vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5,\
  \ 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1),\
  \ Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize,\
  \ isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]],\
  \ 3), vec![(2, 2)]);\n}\n"
completions: ["    let mut res: Vec<(isize, isize)> = vec![];\n    for (y, row) in\
    \ lst.iter().enumerate() {\n        let mut cur_x = 0;\n        for (x1, &item)\
    \ in row.iter().enumerate() {\n            if item == x {\n                res.push((y\
    \ as isize, x1 as isize));\n                cur_x = x1 as isize;\n           \
    \ }\n        }\n        if cur_x != 0 {\n            res.push((y as isize, 0));\n\
    \        }\n    }\n    res.sort_by(|&(a, b), &(c, d)| match a.cmp(&c) {\n    \
    \    Ordering::Less => Ordering::Less,\n        Ordering::Greater => Ordering::Greater,\n\
    \        Ordering::Equal => d.cmp(&b),\n    });\n    res", "    lst.iter()\n \
    \       .enumerate()\n        .flat_map(|(i, row)| {\n            row.iter()\n\
    \                .enumerate()\n                .filter(|&(_, y)| x == *y)\n  \
    \              .map(move |(j, _)| (i as isize, j as isize))\n        })\n    \
    \    .sorted_by(|&(i1, j1), &(i2, j2)| if i1 != i2 {\n            i1.cmp(&i2)\n\
    \        } else {\n            j2.cmp(&j1)\n        })\n        .collect()", " \
    \   let mut coordinates = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, x) in row.iter().enumerate() {\n            if *x == x {\n\
    \                coordinates.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    coordinates.sort_by(|(x, y), (x1, y1)| x.cmp(x1).then(y1.cmp(y)));\n\
    \    coordinates", "    let mut res: Vec<(isize, isize)> = vec![];\n    let len\
    \ = lst.len();\n    for i in 0..len {\n        let lst_len = lst[i].len();\n \
    \       for j in 0..lst_len {\n            if lst[i][j] == x {\n             \
    \   res.push((i as isize, j as isize));\n            }\n        }\n    }\n   \
    \ res.sort_by(|a, b| {\n        if a.0 == b.0 {\n            return b.1.cmp(&a.1);\n\
    \        }\n        a.0.cmp(&b.0)\n    });\n    res", "    let mut result: Vec<(isize,\
    \ isize)> = vec![];\n    for (y, row) in lst.iter().enumerate() {\n        for\
    \ (x, i) in row.iter().enumerate() {\n            if *i == x {\n             \
    \   result.push((y as isize, x as isize));\n            }\n        }\n    }\n\
    \    result.sort_by(|a, b| {\n        let row_cmp = a.0.cmp(&b.0);\n        if\
    \ row_cmp == Ordering::Equal {\n            return b.1.cmp(&a.1);\n        }\n\
    \        row_cmp\n    });\n    result", "    if lst.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut rows: Vec<(isize, isize)> = vec![];\n    for (r,\
    \ row) in lst.iter().enumerate() {\n        if row.contains(&x) {\n          \
    \  let c = row.iter().position(|&x_| x_ == x).unwrap() as isize;\n           \
    \ rows.push((r as isize, c));\n        }\n    }\n    rows.sort_by(|a, b| {\n \
    \       if a.0 < b.0 {\n            Ordering::Less\n        } else if a.0 > b.0\
    \ {\n            Ordering::Greater\n        } else {\n            b.1.cmp(&a.1)\n\
    \        }\n    });\n    rows", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, elem) in row.iter().enumerate()\
    \ {\n            if *elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|(r1, c1), (r2, c2)| {\n   \
    \     match r1.cmp(r2) {\n            Ordering::Equal => c2.cmp(c1),\n       \
    \     _ => r1.cmp(r2),\n        }\n    });\n    res", "    let mut result: Vec<(isize,\
    \ isize)> = vec![];\n    let mut temp_row = 0;\n    for row in lst {\n       \
    \ let mut temp_col = -1;\n        for col in row {\n            if col == x {\n\
    \                temp_col += 1;\n                result.push((temp_row, temp_col));\n\
    \            }\n        }\n        temp_row += 1;\n    }\n    result.sort_by(|a,\
    \ b| {\n        match a.0.cmp(&b.0) {\n            Ordering::Equal => a.1.cmp(&b.1),\n\
    \            other => other,\n        }\n    });\n    result", "    if lst.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut lst: Vec<(isize, isize)> = lst\n\
    \        .iter()\n        .enumerate()\n        .flat_map(|(i, x)| {\n       \
    \     x.iter()\n                .enumerate()\n                .filter(|(_, &x)|\
    \ x == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n    \
    \    })\n        .collect();\n    lst.sort_by(|(row1, _), (row2, _)| row1.cmp(row2));\n\
    \    lst.sort_by(|(row1, _), (row2, _)| row1.cmp(row2));\n    lst", "    // Your\
    \ code here!\n    let mut to_ret = Vec::new();\n    for (y, xs) in lst.iter().enumerate()\
    \ {\n        for (x, x) in xs.iter().enumerate() {\n            if *x == x {\n\
    \                to_ret.push((y as isize, x as isize));\n            }\n     \
    \   }\n    }\n    to_ret.sort_by(|a, b| {\n        if a.0 != b.0 {\n         \
    \   a.0.cmp(&b.0)\n        } else {\n            b.1.cmp(&a.1)\n        }\n  \
    \  });\n    to_ret", "    let mut res: Vec<(isize, isize)> = vec![];\n    for\
    \ (row, i) in lst.iter().enumerate() {\n        for (col, val) in i.iter().enumerate()\
    \ {\n            if val == &x {\n                res.push((row as isize, col as\
    \ isize));\n            }\n        }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    if lst.is_empty() {\n        return vec![];\n    }\n    let mut\
    \ result: Vec<(isize, isize)> = Vec::new();\n    for i in 0..lst.len() {\n   \
    \     for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n          \
    \      result.push((i as isize, j as isize));\n            }\n        }\n    }\n\
    \    result.sort_by(|a, b| (a.0, b.1).cmp(&(b.0, a.1)));\n    result", "    let\
    \ mut v = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len()\
    \ {\n            if lst[i][j] == x {\n                v.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    v.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    v", "    let mut v = Vec::new();\n    for (i, elem) in lst.iter().enumerate()\
    \ {\n        for (j, num) in elem.iter().enumerate() {\n            if *num ==\
    \ x {\n                v.push((i as isize, j as isize));\n            }\n    \
    \    }\n    }\n    v.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n    v.sort_by(|&(_,\
    \ a), &(_, b)| b.cmp(&a));\n    v", "    lst.iter()\n        .enumerate()\n  \
    \      .map(|(i, row)| {\n            row.iter()\n                .enumerate()\n\
    \                .filter(|(_, &e)| e == x)\n                .map(|(j, _)| (i as\
    \ isize, j as isize))\n        })\n        .flatten()\n        .collect::<Vec<(isize,\
    \ isize)>>()", "    lst.iter()\n        .enumerate()\n        .flat_map(|(y, row)|\
    \ {\n            row.iter()\n                .enumerate()\n                .filter(|&(_,\
    \ n)| n == &x)\n                .map(move |(x, _)| (y as isize, x as isize))\n\
    \        })\n        .sorted_by(|&(y1, x1), &(y2, x2)| (y1, -x1).cmp(&(y2, -x2)))\n\
    \        .collect()", "    let mut result: Vec<(isize, isize)> = vec![];\n   \
    \ for (i, row) in lst.iter().enumerate() {\n        for (j, v) in row.iter().enumerate()\
    \ {\n            if *v == x {\n                result.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| (a.0, -a.1).cmp(&(b.0,\
    \ -b.1)));\n    result", "    let mut result: Vec<(isize, isize)> = vec![];\n\
    \    for (y, sub) in lst.iter().enumerate() {\n        for (x, &item) in sub.iter().enumerate()\
    \ {\n            if item == x {\n                result.push((y as isize, x as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| match a.0.cmp(&b.0)\
    \ {\n        Ordering::Equal => b.1.cmp(&a.1),\n        x => x,\n    });\n   \
    \ result", "    // TODO: implement function\n    let mut result = Vec::new();\n\
    \    if lst.len() == 0 {\n        return result;\n    }\n    for (y, line) in\
    \ lst.iter().enumerate() {\n        for (x1, item) in line.iter().enumerate()\
    \ {\n            if *item == x {\n                result.push((y as isize, x1\
    \ as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n\
    \        let row_cmp = a.0.cmp(&b.0);\n        match row_cmp {\n            Ordering::Equal\
    \ => b.1.cmp(&a.1),\n            _ => row_cmp,\n        }\n    });\n    result",
  "    let mut tups: Vec<(isize, isize)> = Vec::new();\n    for (row, inner) in lst.iter().enumerate()\
    \ {\n        for (col, num) in inner.iter().enumerate() {\n            if *num\
    \ == x {\n                tups.push((row as isize, col as isize));\n         \
    \   }\n        }\n    }\n    tups.sort_by(|a, b| if a.0 < b.0 { Ordering::Less\
    \ } else { Ordering::Greater });\n    tups.sort_by(|a, b| if a.0 == b.0 { b.1.cmp(&a.1)\
    \ } else { Ordering::Equal });\n    tups", "    let mut res: Vec<(isize, isize)>\
    \ = vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for (j, cell)\
    \ in row.iter().enumerate() {\n            if cell == &x {\n                res.push((i\
    \ as isize, j as isize));\n            }\n        }\n    }\n    res.sort_by(|a,\
    \ b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    res", "    lst.iter()\n        .enumerate()\n\
    \        .flat_map(|(row, l)| {\n            l.iter()\n                .enumerate()\n\
    \                .filter(|(_, &c)| c == x)\n                .map(move |(col, _)|\
    \ (row as isize, col as isize))\n        })\n        .sorted_by(|&(row1, col1),\
    \ &(row2, col2)| {\n            if row1 == row2 {\n                col2.cmp(&col1)\n\
    \            } else {\n                row1.cmp(&row2)\n            }\n      \
    \  })\n        .collect()", "    let mut map: HashMap<usize, Vec<usize>> = HashMap::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, elem) in row.iter().enumerate()\
    \ {\n            if *elem == x {\n                if map.contains_key(&i) {\n\
    \                    map.get_mut(&i).unwrap().push(j);\n                } else\
    \ {\n                    map.insert(i, vec![j]);\n                }\n        \
    \    }\n        }\n    }\n    let mut keys: Vec<usize> = map.keys().cloned().collect();\n\
    \    keys.sort();\n    let mut res: Vec<(isize, isize)> = Vec::new();\n    for\
    \ key in keys {\n        let mut vals = map.get(&key).unwrap().clone();\n    \
    \    vals.sort();\n        vals.reverse();\n        for val in vals {\n      \
    \      res.push((key as isize, val as isize));\n        }\n    }\n    res", " \
    \   let mut result: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, &item) in row.iter().enumerate() {\n            if item ==\
    \ x {\n                result.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| if a.0 == b.0 { b.1.cmp(&a.1) } else\
    \ { a.0.cmp(&b.0) });\n    result", '    unimplemented!()', "    let mut res:\
    \ Vec<(isize, isize)> = vec![];\n    for (i, row) in lst.iter().enumerate() {\n\
    \        for (j, elem) in row.iter().enumerate() {\n            if *elem == x\
    \ {\n                res.push((i as isize, j as isize));\n            }\n    \
    \    }\n    }\n    let mut sorted_res = res.clone();\n    sorted_res.sort_by(|a,\
    \ b| (a.0, -a.1).cmp(&(b.0, -b.1)));\n    sorted_res", '    unimplemented!()',
  "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, row)| {\n        \
    \    row.iter()\n                .enumerate()\n                .filter(|&(_, &y)|\
    \ y == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n    \
    \    })\n        .sorted_by(|a, b| b.cmp(a))\n        .collect()", "    let mut\
    \ res: Vec<(isize, isize)> = vec![];\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x_, &x_val) in row.iter().enumerate() {\n            if x_val\
    \ == x {\n                res.push((y as isize, x_ as isize));\n            }\n\
    \        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 == b.0 {\n       \
    \     b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n\
    \    });\n    res", "    if lst.is_empty() {\n        return vec![];\n    }\n\
    \    let mut out = vec![];\n    for (y, row) in lst.iter().enumerate() {\n   \
    \     for (x, col) in row.iter().enumerate() {\n            if *col == x {\n \
    \               out.push((y as isize, x as isize));\n            }\n        }\n\
    \    }\n    out.sort_by(|a, b| {\n        let row_a = a.0;\n        let row_b\
    \ = b.0;\n        if row_a != row_b {\n            row_a.cmp(&row_b)\n       \
    \ } else {\n            b.1.cmp(&a.1)\n        }\n    });\n    out", "    // TODO\n\
    \    vec![]", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, v)|\
    \ {\n            v.iter()\n                .enumerate()\n                .filter(|&(_,\
    \ &n)| n == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n\
    \        })\n        .sorted_by(|&(i1, j1), &(i2, j2)| {\n            match i1.cmp(&i2)\
    \ {\n                std::cmp::Ordering::Equal => std::cmp::Ordering::Equal,\n\
    \                std::cmp::Ordering::Less => std::cmp::Ordering::Less,\n     \
    \           std::cmp::Ordering::Greater => std::cmp::Ordering::Greater,\n    \
    \        }\n        })\n        .collect()", "    let mut result: Vec<(isize,\
    \ isize)> = Vec::new();\n    for y in 0..lst.len() {\n        for x in 0..lst[y].len()\
    \ {\n            if lst[y][x] == x {\n                result.push((y as isize,\
    \ x as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n\
    \        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n      \
    \      a.0.cmp(&b.0)\n        }\n    });\n    result", "    let mut v: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, v_i) in lst.iter().enumerate() {\n      \
    \  for (j, v_j) in v_i.iter().enumerate() {\n            if x == *v_j {\n    \
    \            v.push((i as isize, j as isize));\n            }\n        }\n   \
    \ }\n    v.sort_by(|a, b| (a.0, -a.1).cmp(&(b.0, -b.1)));\n    v", "    if lst.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut v: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        if row.is_empty() {\n \
    \           continue;\n        }\n        for (j, e) in row.iter().enumerate()\
    \ {\n            if *e == x {\n                v.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    // sort by rows\n    v.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    // sort by column\n    v.sort_by(|a, b| b.1.cmp(&a.1));\n    v", "    let\
    \ mut result: Vec<(isize, isize)> = Vec::new();\n    for i in 0..lst.len() {\n\
    \        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n       \
    \         result.push((i as isize, j as isize));\n            }\n        }\n \
    \   }\n    result.sort_by(|a, b| {\n        if a.0 < b.0 {\n            Ordering::Less\n\
    \        } else if a.0 > b.0 {\n            Ordering::Greater\n        } else\
    \ {\n            b.1.cmp(&a.1)\n        }\n    });\n    result", "    let mut\
    \ res: Vec<(isize, isize)> = Vec::new();\n    for i in 0..lst.len() {\n      \
    \  for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n             \
    \   res.push((i as isize, j as isize));\n            }\n        }\n    }\n   \
    \ res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    res", "    let mut\
    \ result: Vec<(isize, isize)> = vec![];\n    for y in 0..lst.len() {\n       \
    \ for x in 0..lst[y].len() {\n            if lst[y][x] == x {\n              \
    \  result.push((y as isize, x as isize));\n            }\n        }\n    }\n \
    \   result.sort_by(|a, b| match a.0.cmp(&b.0) {\n        Ordering::Equal => b.1.cmp(&a.1),\n\
    \        Ordering::Less => Ordering::Less,\n        Ordering::Greater => Ordering::Greater,\n\
    \    });\n    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row = 0;\n    for r in lst {\n        let mut col = r.len() as isize\
    \ - 1;\n        for c in r {\n            if c == x {\n                result.push((row,\
    \ col));\n            }\n            col -= 1;\n        }\n        row += 1;\n\
    \    }\n    result.sort();\n    result", "    lst.iter()\n        .enumerate()\n\
    \        .filter_map(|(i, row)| {\n            row.iter()\n                .enumerate()\n\
    \                .filter_map(|(j, &y)| if y == x { Some((i as isize, j as isize))\
    \ } else { None })\n                .collect::<Vec<_>>()\n        })\n       \
    \ .flatten()\n        .collect::<Vec<_>>()", "    let mut result: Vec<(isize,\
    \ isize)> = vec![];\n    for (row, l) in lst.iter().enumerate() {\n        for\
    \ (col, el) in l.iter().enumerate() {\n            if *el == x {\n           \
    \     result.push((row as isize, col as isize));\n            }\n        }\n \
    \   }\n    result.sort_by(|a, b| {\n        if a.0 < b.0 {\n            Ordering::Less\n\
    \        } else if a.0 > b.0 {\n            Ordering::Greater\n        } else\
    \ {\n            b.1.cmp(&a.1)\n        }\n    });\n    result", "    let mut\
    \ result: Vec<(isize, isize)> = Vec::new();\n    let mut row_counter = 0;\n  \
    \  for row in lst {\n        let mut column_counter = 0;\n        for column in\
    \ row {\n            if column == x {\n                result.push((row_counter,\
    \ column_counter));\n            }\n            column_counter += 1;\n       \
    \ }\n        row_counter += 1;\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result", "    let mut result:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut y_coord: isize = 0;\n    for\
    \ row in lst {\n        let mut x_coord: isize = 0;\n        for item in row {\n\
    \            if item == x {\n                result.push((y_coord, x_coord));\n\
    \            }\n            x_coord += 1;\n        }\n        y_coord += 1;\n\
    \    }\n    // Now sort the results vector\n    result.sort_by(|a, b| {\n    \
    \    let a_sort = (*a).0;\n        let b_sort = (*b).0;\n        a_sort.cmp(&b_sort)\n\
    \    });\n    let mut last_found: isize = -1;\n    let mut index: usize = 0;\n\
    \    while index < result.len() {\n        if result[index].0 != last_found {\n\
    \            last_found = result[index].0;\n            result[index..].sort_by(|a,\
    \ b| {\n                let a_sort = (*a).1;\n                let b_sort = (*b).1;\n\
    \                b_sort.cmp(&a_sort)\n            });\n        }\n        index\
    \ += 1;\n    }\n    result", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|&(_, val)| *val == x)\n                .map(move |(j, _)| (i as\
    \ isize, j as isize))\n        })\n        .sorted_by(|&(i, j), &(k, l)| (i, -j).cmp(&(k,\
    \ -l)))\n        .collect()", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &ele) in row.iter().enumerate()\
    \ {\n            if ele == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        match a.0.cmp(&b.0)\
    \ {\n            Ordering::Equal => b.1.cmp(&a.1),\n            Ordering::Less\
    \ => Ordering::Less,\n            Ordering::Greater => Ordering::Greater,\n  \
    \      }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (r, v) in lst.iter().enumerate() {\n        for (c, val) in v.iter().enumerate()\
    \ {\n            if *val == x {\n                res.push((r as isize, c as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, row)|\
    \ {\n            row.iter()\n                .enumerate()\n                .filter(|(_,\
    \ &a)| a == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n\
    \        })\n        .sorted_by(|a, b| {\n            let c = a.0.cmp(&b.0);\n\
    \            if c == std::cmp::Ordering::Equal {\n                return b.1.cmp(&a.1);\n\
    \            }\n            c\n        })\n        .collect()", "    lst.iter()\n\
    \        .enumerate()\n        .map(|(i, row)| row.iter().enumerate().filter(|&(_,\
    \ j)| **j == x))\n        .flatten()\n        .map(|(j, _)| (i as isize, j as\
    \ isize))\n        .collect()", "    lst.iter()\n        .enumerate()\n      \
    \  .map(|(y, xs)| xs.iter().map(move |&x2| (y as isize, x2)))\n        .flatten()\n\
    \        .filter(|&(_, x2)| x2 == x)\n        .sorted_by(|&(a, _), &(b, _)| a.cmp(&b))\n\
    \        .sorted_by(|&(_, a), &(_, b)| b.cmp(&a))\n        .collect()", "    let\
    \ mut v = vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for (j,\
    \ &item) in row.iter().enumerate() {\n            if item == x {\n           \
    \     v.push((i as isize, j as isize));\n            }\n        }\n    }\n   \
    \ v.sort_by(|a, b| a.1.cmp(&b.1).reverse().then(a.0.cmp(&b.0)));\n    v", "  \
    \  let mut result: Vec<(isize, isize)> = Vec::new();\n    for i in 0..lst.len()\
    \ {\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n   \
    \             result.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    result",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        for (j, num) in v.iter().enumerate() {\n            if num == &x\
    \ {\n                result.push((i as isize, j as isize));\n            }\n \
    \       }\n    }\n    // Sort rows ascending and columns descending\n    result.sort_by(|a,\
    \ b| {\n        if a.0 < b.0 {\n            Less\n        } else if a.0 > b.0\
    \ {\n            Greater\n        } else {\n            if a.1 > b.1 {\n     \
    \           Less\n            } else if a.1 < b.1 {\n                Greater\n\
    \            } else {\n                Equal\n            }\n        }\n    });\n\
    \    result", "    let mut ret = Vec::new();\n    for (r, row) in lst.iter().enumerate()\
    \ {\n        for (c, v) in row.iter().enumerate() {\n            if *v == x {\n\
    \                ret.push((r as isize, c as isize));\n            }\n        }\n\
    \    }\n    ret.sort_by(|a, b| {\n        a.1.cmp(&b.1).then(b.0.cmp(&a.0))\n\
    \    });\n    ret", "    let mut result: Vec<(isize, isize)> = Vec::new();\n \
    \   for (row, l) in lst.iter().enumerate() {\n        for (column, &i) in l.iter().enumerate()\
    \ {\n            if i == x {\n                result.push((row as isize, column\
    \ as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (i, row) in lst.iter().enumerate() {\n        for (j, element) in row.iter().enumerate()\
    \ {\n            if *element == x {\n                result.push((i as isize,\
    \ j as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    result", "    if lst.is_empty() {\n        return vec![];\n    }\n    lst.iter()\n\
    \        .enumerate()\n        .flat_map(|(i, row)| {\n            row.iter()\n\
    \                .enumerate()\n                .filter(|(_, &y)| y == x)\n   \
    \             .map(move |(j, _)| (i as isize, j as isize))\n        })\n     \
    \   .collect()", "    // 0. Check conditions.\n    if lst.is_empty() {\n     \
    \   return vec![];\n    }\n\n    // 1. Loop over.\n    let mut res: Vec<(isize,\
    \ isize)> = vec![];\n    for (row, row_vec) in lst.iter().enumerate() {\n    \
    \    let mut col = 0;\n        while let Some(index) = row_vec.iter().position(|&v|\
    \ v == x) {\n            res.push((row as isize, index as isize - col));\n   \
    \         col += index + 1;\n        }\n    }\n\n    // 2. Return.\n    res",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x, item) in row.iter().enumerate() {\n            if *item ==\
    \ x {\n                result.push((y as isize, x as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 < b.0 {\n     \
    \       Ordering::Less\n        } else if a.0 > b.0 {\n            Ordering::Greater\n\
    \        } else {\n            if a.1 > b.1 {\n                Ordering::Less\n\
    \            } else if a.1 < b.1 {\n                Ordering::Greater\n      \
    \      } else {\n                Ordering::Equal\n            }\n        }\n \
    \   });\n    result", "    // Write code here\n    lst.iter()\n        .enumerate()\n\
    \        .flat_map(|(i, v)| {\n            v.iter()\n                .enumerate()\n\
    \                .filter(|(_, &v)| v == x)\n                .map(move |(j, _)|\
    \ (i as isize, j as isize))\n        })\n        .collect()", "    let mut ret\
    \ = Vec::new();\n    for (i, sublist) in lst.iter().enumerate() {\n        for\
    \ (j, val) in sublist.iter().enumerate() {\n            if *val == x {\n     \
    \           ret.push((i as isize, j as isize));\n            }\n        }\n  \
    \  }\n    ret.sort_by(|a, b| a.1.cmp(&b.1).reverse().then(a.0.cmp(&b.0)));\n \
    \   ret", "    if lst.is_empty() {\n        return vec![];\n    }\n    let mut\
    \ res: Vec<(isize, isize)> = vec![];\n    let mut row = 0;\n    for i in lst {\n\
    \        for j in 0..i.len() {\n            if i[j] == x {\n                res.push((row,\
    \ j as isize));\n            }\n        }\n        row += 1;\n    }\n    res.sort_by(|&a,\
    \ &b| {\n        if a.0 != b.0 {\n            a.0.cmp(&b.0)\n        } else {\n\
    \            b.1.cmp(&a.1)\n        }\n    });\n    res", '    unimplemented!()',
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x1, &x2) in row.iter().enumerate() {\n            if x2 == x\
    \ {\n                result.push((y as isize, x1 as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n    \
    \        b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n\
    \    });\n    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (row, v) in lst.iter().enumerate() {\n        for (col, e) in v.iter().enumerate()\
    \ {\n            if *e == x {\n                result.push((row as isize, col\
    \ as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n\
    \        let t = a.0.cmp(&b.0);\n        if t == Ordering::Equal {\n         \
    \   return b.1.cmp(&a.1);\n        }\n        t\n    });\n    result", "    lst.iter()\n\
    \        .enumerate()\n        .map(|(i, v)| {\n            v.iter()\n       \
    \         .enumerate()\n                .filter(|&(_, &y)| y == x)\n         \
    \       .map(|(j, _)| (i as isize, j as isize))\n        })\n        .flatten()\n\
    \        .collect::<Vec<_>>()", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n           \
    \ if lst[i][j] == x {\n                res.push((i as isize, j as isize));\n \
    \           }\n        }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    let mut coord = Vec::new();\n    for (index, row) in lst.iter().enumerate()\
    \ {\n        for (index2, item) in row.iter().enumerate() {\n            if *item\
    \ == x {\n                coord.push((index as isize, index2 as isize));\n   \
    \         }\n        }\n    }\n    coord.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    coord", "    let len = lst.len();\n    let mut a: Vec<(isize, isize)> = Vec::new();\n\
    \    for i in 0..len {\n        let len2 = lst[i].len();\n        for j in 0..len2\
    \ {\n            if lst[i][j] == x {\n                a.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    a.sort_by(|a, b| (a.0, b.1).cmp(&(b.0,\
    \ a.1)));\n    a", "    let (mut res, mut i) = (vec![], 0);\n    for row in lst\
    \ {\n        let mut j = 0;\n        for &x2 in row {\n            if x2 == x\
    \ {\n                res.push((i, j));\n            }\n            j += 1;\n \
    \       }\n        i += 1;\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    let mut out = vec![];\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, &item) in row.iter().enumerate() {\n            if item ==\
    \ x {\n                out.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    out.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    out", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for i in\
    \ 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j]\
    \ == x {\n                result.push((i as isize, j as isize));\n           \
    \ }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n\
    \            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n    \
    \    }\n    });\n    result", "    let mut v: Vec<(isize, isize)> = vec![];\n\
    \    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n           \
    \ if lst[i][j] == x {\n                v.push((i as isize, j as isize));\n   \
    \         }\n        }\n    }\n    v.sort_by(|a, b| if a.0 == b.0 { a.1.cmp(&b.1)\
    \ } else { a.0.cmp(&b.0) });\n    v.reverse();\n    v", "    let mut result: Vec<(isize,\
    \ isize)> = vec![];\n    for row in 0..lst.len() {\n        for col in 0..lst[row].len()\
    \ {\n            if lst[row][col] == x {\n                result.push((row as\
    \ isize, col as isize));\n            }\n        }\n    }\n    result.sort_by(|a,\
    \ b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    result", "    let mut lst = lst.into_iter().enumerate().collect::<Vec<_>>();\n\
    \    lst.sort_by_key(|x| x.1.len());\n    lst.into_iter()\n        .rev()\n  \
    \      .flat_map(|(i, y)| {\n            y.into_iter()\n                .enumerate()\n\
    \                .filter(|&(_, z)| z == x)\n                .map(move |(j, _)|\
    \ (i as isize, j as isize))\n        })\n        .collect()", "    lst.iter()\n\
    \        .enumerate()\n        .map(|(i, row)| {\n            row.iter()\n   \
    \             .enumerate()\n                .filter(|&(_, y)| *y == x)\n     \
    \           .map(|(j, _)| (i as isize, j as isize))\n        })\n        .flatten()\n\
    \        .collect::<Vec<(isize, isize)>>()", "    let mut result: Vec<(isize,\
    \ isize)> = vec![];\n    if lst.len() == 0 {\n        return result;\n    }\n\
    \    for (index_lst, lst_val) in lst.iter().enumerate() {\n        for (index_val,\
    \ val) in lst_val.iter().enumerate() {\n            if x == *val {\n         \
    \       result.push((index_lst as isize, index_val as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| a.1.cmp(&b.1));\n    result.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    result", '    unimplemented!()', "    let mut vec: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (index, row) in lst.iter().enumerate() {\n  \
    \      for (column, elem) in row.iter().enumerate() {\n            if *elem ==\
    \ x {\n                vec.push((index as isize, column as isize));\n        \
    \    }\n        }\n    }\n    vec.sort_by(|a, b| a.1.cmp(&b.1));\n    vec.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    vec", "    let mut lst_tuples: Vec<(isize, isize)> =\
    \ Vec::new();\n    let mut row_counter = 0;\n    for row in lst {\n        let\
    \ mut col_counter = 0;\n        for col in row {\n            if col == x {\n\
    \                lst_tuples.push((row_counter, col_counter));\n            }\n\
    \            col_counter += 1;\n        }\n        row_counter += 1;\n    }\n\
    \    lst_tuples.sort_by(|a, b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    lst_tuples",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (index, row) in\
    \ lst.iter().enumerate() {\n        for (pos, value) in row.iter().enumerate()\
    \ {\n            if *value == x {\n                result.push((index as isize,\
    \ pos as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b|\
    \ if a.0 == b.0 {\n        b.1.cmp(&a.1)\n    } else {\n        a.0.cmp(&b.0)\n\
    \    });\n    result", "    let mut res: Vec<(isize, isize)> = vec![];\n    for\
    \ (y, row) in lst.iter().enumerate() {\n        for (x1, &x2) in row.iter().enumerate()\
    \ {\n            if x2 == x {\n                res.push((y as isize, x1 as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    let mut y = vec![];\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        for (j, d) in v.iter().enumerate() {\n            if *d == x {\n\
    \                y.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    y.sort_by(|(x, _), (y, _)| x.cmp(y));\n    for i in y.iter_mut() {\n\
    \        for j in i.1..i.1 + 1 {\n            i.1 = lst[i.0 as usize].len() as\
    \ isize - j - 1;\n        }\n    }\n    y", "    let mut res: Vec<(isize, isize)>\
    \ = vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for (j, &elem)\
    \ in row.iter().enumerate() {\n            if elem == x {\n                res.push((i\
    \ as isize, j as isize));\n            }\n        }\n    }\n    res.sort_by(|a,\
    \ b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n\
    \            a.0.cmp(&b.0)\n        }\n    });\n    res", "    // TODO: your code\
    \ here\n    let mut result = Vec::new();\n    for (ind,x1) in lst.iter().enumerate()\
    \ {\n        for (ind2,x2) in x1.iter().enumerate() {\n            if *x2 == x\
    \ {\n                result.push((ind as isize,ind2 as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a,b| {\n        if a.0 < b.0 {\n      \
    \      std::cmp::Ordering::Less\n        }\n        else if a.0 > b.0 {\n    \
    \        std::cmp::Ordering::Greater\n        }\n        else if a.1 < b.1 {\n\
    \            std::cmp::Ordering::Greater\n        }\n        else if a.1 > b.1\
    \ {\n            std::cmp::Ordering::Less\n        }\n        else {\n       \
    \     std::cmp::Ordering::Equal\n        }\n    });\n    result", "    let mut\
    \ vec = Vec::new();\n    for (i, xs) in lst.iter().enumerate() {\n        for\
    \ (j, &x) in xs.iter().enumerate() {\n            if x == x {\n              \
    \  vec.push((i as isize, j as isize));\n            }\n        }\n    }\n    vec.sort_by(|a,\
    \ b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n\
    \            a.0.cmp(&b.0)\n        }\n    });\n    vec", "    let mut result:\
    \ Vec<(isize, isize)> = Vec::new();\n    for (row, sub_lst) in lst.iter().enumerate()\
    \ {\n        for (col, elem) in sub_lst.iter().enumerate() {\n            if x\
    \ == *elem {\n                result.push((row as isize, col as isize));\n   \
    \         }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            return b.1.cmp(&a.1);\n        }\n        a.0.cmp(&b.0)\n\
    \    });\n    result", "    lst.iter()\n        .enumerate()\n        .map(|(y,\
    \ row)| row.iter().enumerate().filter(|&(_, a)| a == &x))\n        .flatten()\n\
    \        .map(|(x, _)| (x as isize, y as isize))\n        .collect::<Vec<(isize,\
    \ isize)>>()", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        for (j, vv) in v.iter().enumerate()\
    \ {\n            if *vv == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n   \
    \     if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n         \
    \   a.0.cmp(&b.0)\n        }\n    });\n    result", "    // create a vector of\
    \ tuples\n    let mut result: Vec<(isize, isize)> = Vec::new();\n    for i in\
    \ 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j]\
    \ == x {\n                result.push((i as isize, j as isize));\n           \
    \ }\n        }\n    }\n    // sort initialy by rows\n    result.sort_by(|a, b|\
    \ a.0.cmp(&b.0));\n    // sort by columns\n    for i in 0..result.len() - 1 {\n\
    \        if result[i].0 == result[i + 1].0 {\n            if result[i].1 < result[i\
    \ + 1].1 {\n                let tmp = result[i];\n                result[i] =\
    \ result[i + 1];\n                result[i + 1] = tmp;\n            }\n      \
    \  }\n    }\n    result", "    if lst.is_empty() {\n        return vec![];\n \
    \   }\n    let mut result: Vec<(isize, isize)> = vec![];\n    for (y, row) in\
    \ lst.iter().enumerate() {\n        if row.contains(&x) {\n            let mut\
    \ x_coordinates: Vec<isize> = vec![];\n            for (x_index, value) in row.iter().enumerate()\
    \ {\n                if value == &x {\n                    x_coordinates.push(x_index\
    \ as isize);\n                }\n            }\n            for x_coordinate in\
    \ x_coordinates {\n                result.push((y as isize, x_coordinate));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0\
    \ == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    result", "    lst.iter()\n        .enumerate()\n    \
    \    .flat_map(|(y, v)| {\n            v.iter()\n                .enumerate()\n\
    \                .filter(|(_, val)| **val == x)\n                .map(move |(x,\
    \ _)| (y as isize, x as isize))\n        })\n        .sorted_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)))\n\
    \        .collect()", "    lst.iter()\n        .enumerate()\n        .flat_map(|(y,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|&(_, &v)| v == x)\n                .map(move |(x, _)| (y as isize,\
    \ x as isize))\n        })\n        .sorted_by(|&(a, b), &(c, d)| (a, d).cmp(&(c,\
    \ b)).reverse())\n        .collect()", "    let mut result: Vec<(isize, isize)>\
    \ = vec![];\n    for (row, vec) in lst.iter().enumerate() {\n        for (col,\
    \ elem) in vec.iter().enumerate() {\n            if *elem == x {\n           \
    \     result.push((row as isize, col as isize));\n            }\n        }\n \
    \   }\n    result.sort_by(|a, b| {\n        if a.0 != b.0 {\n            a.0.cmp(&b.0)\n\
    \        } else {\n            b.1.cmp(&a.1)\n        }\n    });\n    result",
  "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, row)| {\n        \
    \    row.iter()\n                .enumerate()\n                .filter(|(_, &y)|\
    \ y == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n    \
    \    })\n        .sorted_by(|(i1, j1), (i2, j2)| i1.cmp(i2).then(j2.cmp(j1)))\n\
    \        .collect()", "    lst.iter()\n        .enumerate()\n        .map(|(y,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|&(_, e)| *e == x)\n                .map(|(x, _)| (y as isize, x\
    \ as isize))\n        })\n        .flatten()\n        .collect::<Vec<(isize, isize)>>()",
  "    let mut result: Vec<(isize, isize)> = vec![];\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x1, item) in row.iter().enumerate() {\n            if item ==\
    \ &x {\n                result.push((y as isize, x1 as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| match a.0.cmp(&b.0) {\n        Ordering::Less\
    \ => Ordering::Less,\n        Ordering::Greater => Ordering::Greater,\n      \
    \  Ordering::Equal => b.1.cmp(&a.1),\n    });\n    result", "    let mut res:\
    \ Vec<(isize, isize)> = vec![];\n    for (row, inner) in lst.iter().enumerate()\
    \ {\n        for (col, val) in inner.iter().enumerate() {\n            if *val\
    \ == x {\n                res.push((row as isize, col as isize));\n          \
    \  }\n        }\n    }\n    res.sort_by(|(a, b), (c, d)| if a < c {\n        Ordering::Less\n\
    \    } else if a > c {\n        Ordering::Greater\n    } else {\n        if b\
    \ > d {\n            Ordering::Less\n        } else if b < d {\n            Ordering::Greater\n\
    \        } else {\n            Ordering::Equal\n        }\n    });\n    res",
  "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, item) in row.iter().enumerate() {\n            if *item ==\
    \ x {\n                res.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    res.sort_by(|a, b| {\n        let mut s = a.0.cmp(&b.0);\n\
    \        if s == std::cmp::Ordering::Equal {\n            s = b.1.cmp(&a.1);\n\
    \        }\n        s\n    });\n    res", "    let mut res: Vec<(isize, isize)>\
    \ = Vec::new();\n    for (i, v) in lst.iter().enumerate() {\n        for (j, val)\
    \ in v.iter().enumerate() {\n            if *val == x {\n                res.push((i\
    \ as isize, j as isize));\n            }\n        }\n    }\n    res.sort_by(|x,\
    \ y| x.0.cmp(&y.0).then(y.1.cmp(&x.1)));\n    res", "    let mut result: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, cell) in row.iter().enumerate() {\n            if *cell == x {\n  \
    \              result.push((i as isize, j as isize));\n            }\n       \
    \ }\n    }\n    result.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(a.1.cmp(&b.1))\n\
    \    });\n    result", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i,\
    \ v)| {\n            v.iter()\n                .enumerate()\n                .filter(|(_,\
    \ j)| **j == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n\
    \        })\n        .sorted_by(|a, b| match a.0.cmp(&b.0) {\n            Ordering::Equal\
    \ => b.1.cmp(&a.1),\n            Ordering::Less => Ordering::Less,\n         \
    \   Ordering::Greater => Ordering::Greater,\n        })\n        .collect()",
  "    // implement me\n    lst.iter()\n        .enumerate()\n        .map(|(i, v)|\n\
    \            v.iter()\n                .enumerate()\n                .filter(|&(_,\
    \ v)| *v == &x)\n                .map(|(j, _)| (i as isize, j as isize)))\n  \
    \      .flatten()\n        .collect::<Vec<(isize, isize)>>()", "    let mut result:\
    \ Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, val) in row.iter().enumerate() {\n            if *val ==\
    \ x {\n                result.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n    \
    \        b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n\
    \    });\n    result", "    let mut result: Vec<(isize, isize)> = vec![];\n  \
    \  for (i, row) in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    result", "    let mut output = Vec::new();\n    for (i, e) in lst.iter().enumerate()\
    \ {\n        for (j, e2) in e.iter().enumerate() {\n            if e2 == &x {\n\
    \                output.push((i as isize, j as isize));\n            }\n     \
    \   }\n    }\n    output.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    output", "    let mut vec = vec![];\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, col) in row.iter().enumerate() {\n            if *col ==\
    \ x {\n                vec.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    vec.sort_by(|a, b| {\n        if a.0 == b.0 {\n         \
    \   b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n  \
    \  });\n    vec", "    let mut result: Vec<(isize, isize)> = Vec::new();\n   \
    \ for (row, row_items) in lst.iter().enumerate() {\n        for (col, item) in\
    \ row_items.iter().enumerate() {\n            if *item == x {\n              \
    \  result.push((row as isize, col as isize));\n            }\n        }\n    }\n\
    \    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    result",
  "    let mut coordinates = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, col) in row.iter().enumerate() {\n            if *col ==\
    \ x {\n                coordinates.push((i as isize, j as isize));\n         \
    \   }\n        }\n    }\n    coordinates.sort_by(|a, b| {\n        if a.0 == b.0\
    \ {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    coordinates", "    let mut result: Vec<(isize, isize)>\
    \ = Vec::new();\n    for (index, sub_vector) in lst.iter().enumerate() {\n   \
    \     for (y, number) in sub_vector.iter().enumerate() {\n            if *number\
    \ == x {\n                result.push((index as isize, y as isize));\n       \
    \     }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    result", "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for (i,\
    \ row) in lst.iter().enumerate() {\n        for (j, elem) in row.iter().enumerate()\
    \ {\n            if *elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 < b.0\
    \ {\n            Ordering::Less\n        } else if a.0 > b.0 {\n            Ordering::Greater\n\
    \        } else {\n            if a.1 > b.1 {\n                Ordering::Less\n\
    \            } else if a.1 < b.1 {\n                Ordering::Greater\n      \
    \      } else {\n                Ordering::Equal\n            }\n        }\n \
    \   });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (row, row_val) in lst.iter().enumerate() {\n        for (col, col_val) in row_val.iter().enumerate()\
    \ {\n            if *col_val == x {\n                res.push((row as isize, col\
    \ as isize));\n            }\n        }\n    }\n    res.sort_by(|a, b| (a.0).cmp(&b.0).then((b.1).cmp(&a.1)));\n\
    \    res", "    let mut index: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ k = 0;\n    for i in lst {\n        let mut j = 0;\n        for m in i {\n \
    \           if m == x {\n                index.push((k, j));\n            }\n\
    \            j += 1;\n        }\n        k += 1;\n    }\n    index.sort();\n \
    \   index", "    // TODO:\n    let mut out: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, el) in row.iter().enumerate()\
    \ {\n            if *el == x {\n                out.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    out.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    out", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (idx, v) in lst.iter().enumerate() {\n        let filter_vec: Vec<isize>\
    \ = v.iter().filter(|&y| *y == x).cloned().collect();\n        if filter_vec.len()\
    \ > 0 {\n            result.extend(filter_vec.iter().map(|&y| (idx as isize, y)));\n\
    \        }\n    }\n    result.sort_by(|a, b| if a.0 < b.0 { std::cmp::Ordering::Less\
    \ } else { std::cmp::Ordering::Greater });\n    result.sort_by(|a, b| if a.1 <\
    \ b.1 { std::cmp::Ordering::Less } else { std::cmp::Ordering::Greater });\n  \
    \  result", "    let mut res: Vec<(isize, isize)> = vec![];\n    for (i, row)\
    \ in lst.iter().enumerate() {\n        for (j, elem) in row.iter().enumerate()\
    \ {\n            if *elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|&(x, y), &(x1, y1)| {\n   \
    \     x.cmp(&x1).then(y1.cmp(&y))\n    });\n    res", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut i = 0;\n    for row in lst {\n        let\
    \ mut j = 0;\n        for element in row {\n            if element == x {\n  \
    \              res.push((i, j));\n            }\n            j += 1;\n       \
    \ }\n        i += 1;\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    fn inner(\n        lst: &Vec<Vec<isize>>,\n        x: isize,\n\
    \        res: &mut Vec<(isize, isize)>,\n        row: usize,\n        col: usize,\n\
    \    ) {\n        let mut buf = Vec::new();\n        for (i, j) in lst[row].iter().enumerate()\
    \ {\n            if *j == x {\n                buf.push((row, i as isize));\n\
    \            }\n        }\n        buf.sort_by(|(a, b), (c, d)| {\n          \
    \  match a.cmp(c) {\n                Ordering::Equal => b.cmp(d),\n          \
    \      other => other,\n            }\n        });\n        res.append(&mut buf);\n\
    \        if row + 1 < lst.len() {\n            inner(lst, x, res, row + 1, col\
    \ + 1);\n        }\n    }\n    let mut res = Vec::new();\n    if lst.len() > 0\
    \ {\n        inner(&lst, x, &mut res, 0, 0);\n    }\n    res", "    lst.iter()\n\
    \        .enumerate()\n        .map(|(i, row)| row.iter().enumerate().filter(|(_,\
    \ cell)| **cell == x))\n        .flatten()\n        .flat_map(|(j, _)| vec![(i,\
    \ j), (i, j)])\n        .collect()", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        let mut col = 0;\n    \
    \    for item in row {\n            if *item == x {\n                res.push((i\
    \ as isize, col));\n            }\n            col += 1;\n        }\n    }\n \
    \   res.sort_by(|(x1, y1), (x2, y2)| {\n        match x1.cmp(x2) {\n         \
    \   Ordering::Equal => y2.cmp(y1),\n            Ordering::Less => Ordering::Less,\n\
    \            Ordering::Greater => Ordering::Greater,\n        }\n    });\n   \
    \ res", "    let mut result: Vec<(isize, isize)> = vec![];\n    for (y, row) in\
    \ lst.iter().enumerate() {\n        for (x, &value) in row.iter().enumerate()\
    \ {\n            if value == x {\n                result.push((y as isize, x as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|&(x1, y1), &(x2,\
    \ y2)| if x1 == x2 { y2.cmp(&y1) } else { x1.cmp(&x2) });\n    result", "    let\
    \ mut ret = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len()\
    \ {\n            if lst[i][j] == x {\n                ret.push((i as isize, j\
    \ as isize));\n            }\n        }\n    }\n    ret.sort_by(|a, b| {\n   \
    \     match a.0.cmp(&b.0) {\n            Ordering::Less => Ordering::Less,\n \
    \           Ordering::Greater => Ordering::Greater,\n            Ordering::Equal\
    \ => {\n                match b.1.cmp(&a.1) {\n                    Ordering::Less\
    \ => Ordering::Greater,\n                    Ordering::Greater => Ordering::Less,\n\
    \                    Ordering::Equal => Ordering::Equal,\n                }\n\
    \            }\n        }\n    });\n    ret", "    // getting the list of tuples\
    \ of size 2,\n    // where the first element is the index of row,\n    // and\
    \ the second is the index of the element\n    let mut coordinates: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, &item) in row.iter().enumerate() {\n            if item == x {\n  \
    \              coordinates.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    // sorting by the row in ascending order,\n    // and within\
    \ each row, by column in descending order\n    coordinates.sort_by(|a, b| {\n\
    \        if a.0 != b.0 {\n            a.0.cmp(&b.0)\n        } else {\n      \
    \      b.1.cmp(&a.1)\n        }\n    });\n    coordinates", "    let mut res:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row = 0;\n    for v in lst {\n\
    \        let mut col = 0;\n        for e in v {\n            if e == x {\n   \
    \             res.push((row, col));\n            }\n            col += 1;\n  \
    \      }\n        row += 1;\n    }\n    res.sort_by(|&a, &b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    // your code goes here\n    let mut out = vec![];\n    for (i,\
    \ v) in lst.iter().enumerate() {\n        for (j, &val) in v.iter().enumerate()\
    \ {\n            if val == x {\n                out.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    out.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            a.1.cmp(&b.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    out", "    let mut result: Vec<(isize, isize)> = vec![];\n\
    \    let mut row = 0;\n    for row_v in lst {\n        let mut col = 0;\n    \
    \    for item in row_v {\n            if item == x {\n                result.push((row,\
    \ col));\n            }\n            col += 1;\n        }\n        row += 1;\n\
    \    }\n    result.sort_by(|a, b| {\n        let (a_row, a_col) = a;\n       \
    \ let (b_row, b_col) = b;\n        if a_row < b_row {\n            Ordering::Less\n\
    \        } else if a_row > b_row {\n            Ordering::Greater\n        } else\
    \ {\n            b_col.cmp(&a_col)\n        }\n    });\n    result", "    lst.iter()\n\
    \        .enumerate()\n        .flat_map(|(i, sub)| {\n            sub.iter()\n\
    \                .enumerate()\n                .filter(|&(_, el)| *el == x)\n\
    \                .map(move |(j, _)| (i as isize, j as isize))\n        })\n  \
    \      .sorted_by(|(row1, _), (row2, _)| row1.cmp(row2))\n        .sorted_by(|(_,\
    \ col1), (_, col2)| col2.cmp(col1))\n        .collect()", "    let mut result:\
    \ Vec<(isize, isize)> = vec![];\n    for (y, row) in lst.iter().enumerate() {\n\
    \        for (x, value) in row.iter().enumerate() {\n            if *value ==\
    \ x {\n                result.push((y as isize, x as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|(a, b), (c, d)| {\n        a.cmp(c).then(b.cmp(d).reverse())\n\
    \    });\n    result", "    let mut res: Vec<(isize, isize)> = Vec::new();\n \
    \   for (y, row) in lst.iter().enumerate() {\n        for (x_, x_val) in row.iter().enumerate()\
    \ {\n            if *x_val == x {\n                res.push((y as isize, x_ as\
    \ isize));\n            }\n        }\n    }\n    res.sort_by(|&(y1, x1), &(y2,\
    \ x2)| {\n        if y1 == y2 {\n            x2.cmp(&x1)\n        } else {\n \
    \           y1.cmp(&y2)\n        }\n    });\n    res", "    let mut out: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, item) in row.iter().enumerate() {\n            if item == &x {\n  \
    \              out.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    out.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    out",
  "    let mut result: Vec<(isize, isize)> = vec![];\n    for i in 0..lst.len() {\n\
    \        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n       \
    \         result.push((i as isize, j as isize));\n            }\n        }\n \
    \   }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    result",
  "    // let mut res: Vec<(isize, isize)> = Vec::new();\n    // for (i, row) in lst.iter().enumerate()\
    \ {\n    //     for (j, num) in row.iter().enumerate() {\n    //         if *num\
    \ == x {\n    //             res.push((i as isize, j as isize));\n    //     \
    \    }\n    //     }\n    // }\n    // return res;\n    let mut res: Vec<(isize,\
    \ isize)> = lst\n        .iter()\n        .enumerate()\n        .flat_map(|(i,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|(_, num)| **num == x)\n                .map(move |(j, _)| (i as\
    \ isize, j as isize))\n        })\n        .collect();\n    res.sort_by(|(x1,\
    \ y1), (x2, y2)| {\n        match x1.cmp(x2) {\n            Ordering::Equal =>\
    \ y2.cmp(y1),\n            x => x,\n        }\n    });\n    res", "    let mut\
    \ res: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, item) in row.iter().enumerate() {\n            if *item ==\
    \ x {\n                res.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    res.sort_by(|a, b| {\n        if a.0 < b.0 {\n          \
    \  Ordering::Less\n        } else if a.0 > b.0 {\n            Ordering::Greater\n\
    \        } else {\n            if a.1 > b.1 {\n                Ordering::Less\n\
    \            } else if a.1 < b.1 {\n                Ordering::Greater\n      \
    \      } else {\n                Ordering::Equal\n            }\n        }\n \
    \   });\n    res", "    let mut row_col: Vec<(isize, isize)> = Vec::new();\n \
    \   for (row, row_vec) in lst.iter().enumerate() {\n        for (col, item) in\
    \ row_vec.iter().enumerate() {\n            if *item == x {\n                row_col.push((row\
    \ as isize, col as isize));\n            }\n        }\n    }\n    row_col.sort_by(|a,\
    \ b| (a.0, b.1).cmp(&(b.0, a.1)));\n    row_col", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut i = 0;\n    for row in lst {\n        let\
    \ mut j = 0;\n        for col in row {\n            if col == x {\n          \
    \      res.push((i, j));\n            }\n            j += 1;\n        }\n    \
    \    i += 1;\n    }\n    res.sort_by(|a, b| b.1.cmp(&a.1));\n    res.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    res", "    let mut coordinates = vec![];\n    let mut\
    \ i = 0;\n    for row in lst {\n        let mut j = 0;\n        for col in row\
    \ {\n            if col == x {\n                coordinates.push((i, j));\n  \
    \          }\n            j += 1;\n        }\n        i += 1;\n    }\n    coordinates.sort_by(|(a1,\
    \ a2), (b1, b2)| {\n        if a1 == b1 {\n            a2.cmp(b2)\n        } else\
    \ {\n            a1.cmp(b1)\n        }\n    });\n    coordinates", "    let mut\
    \ coordinates = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n  \
    \      for (j, e) in row.iter().enumerate() {\n            if *e == x {\n    \
    \            coordinates.push((i as isize, j as isize));\n            }\n    \
    \    }\n    }\n    coordinates.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n\
    \    });\n    coordinates", '    unimplemented!()', "    let mut ans: Vec<(isize,\
    \ isize)> = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len()\
    \ {\n            if lst[i][j] == x {\n                ans.push((i as isize, j\
    \ as isize));\n            }\n        }\n    }\n    ans.sort_by(|a, b| {\n   \
    \     let a0 = a.0;\n        let b0 = b.0;\n        if a0 == b0 {\n          \
    \  let a1 = a.1;\n            let b1 = b.1;\n            b1.cmp(&a1)\n       \
    \ } else {\n            a0.cmp(&b0)\n        }\n    });\n    ans", "    // Collect\
    \ results\n    let mut res: Vec<(isize, isize)> = Vec::new();\n    // Get x coordinates\
    \ and y coordinates\n    for (x1, row) in lst.iter().enumerate() {\n        for\
    \ (y1, item) in row.iter().enumerate() {\n            if *item == x {\n      \
    \          res.push((x1 as isize, y1 as isize));\n            }\n        }\n \
    \   }\n    // Sort results\n    res.sort_by(|a, b| {\n        // Sort first by\
    \ row\n        if a.0 < b.0 {\n            Ordering::Less\n        } else if a.0\
    \ > b.0 {\n            Ordering::Greater\n        } else {\n            // If\
    \ equal, then sort by column\n            if a.1 > b.1 {\n                Ordering::Less\n\
    \            } else if a.1 < b.1 {\n                Ordering::Greater\n      \
    \      } else {\n                Ordering::Equal\n            }\n        }\n \
    \   });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (i, row) in lst.iter().enumerate() {\n        for (j, num) in row.iter().enumerate()\
    \ {\n            if *num == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        let (a_row,\
    \ a_col) = *a;\n        let (b_row, b_col) = *b;\n        a_row.cmp(&b_row).then(b_col.cmp(&a_col))\n\
    \    });\n    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n \
    \   for (row, val) in lst.iter().enumerate() {\n        for (column, sub_val)\
    \ in val.iter().enumerate() {\n            if *sub_val == x {\n              \
    \  result.push((row as isize, column as isize));\n            }\n        }\n \
    \   }\n    result.sort_by(|a, b| (a.0, -a.1).cmp(&(b.0, -b.1)));\n    result",
  "    let mut v: Vec<(isize, isize)> = Vec::new();\n    for i in 0..lst.len() {\n\
    \        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n       \
    \         v.push((i as isize, j as isize));\n            }\n        }\n    }\n\
    \    v.sort_by(|a, b| (a.0, b.1).cmp(&(b.0, a.1)));\n    v", "    let mut row\
    \ = vec![];\n    for (y, item) in lst.iter().enumerate() {\n        for (x, it)\
    \ in item.iter().enumerate() {\n            if *it == x {\n                row.push((y\
    \ as isize, x as isize));\n            }\n        }\n    }\n    return row;",
  "    let mut results = Vec::new();\n    for (row, line) in lst.iter().enumerate()\
    \ {\n        let mut col = 0;\n        for item in line {\n            if *item\
    \ == x {\n                results.push((row as isize, col));\n            }\n\
    \            col += 1;\n        }\n    }\n    results.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    results", "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for i\
    \ in 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j]\
    \ == x {\n                res.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    res.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n\
    \    });\n    res", "    let mut v1: Vec<(isize, isize)> = vec![];\n    for i\
    \ in 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j]\
    \ == x {\n                v1.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    v1.sort_by(|a, b| {\n        let d = a.0.cmp(&b.0);\n \
    \       if d == Ordering::Equal {\n            return b.1.cmp(&a.1);\n       \
    \ }\n        d\n    });\n    v1", "    let mut vector: Vec<(isize, isize)> = Vec::new();\n\
    \    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n           \
    \ if lst[i][j] == x {\n                vector.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    vector.sort_by(|a, b| (a.0, b.1).cmp(&(b.0,\
    \ a.1)));\n    vector", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut i = 0;\n    for row in lst {\n        let mut j = 0;\n        for\
    \ elem in row {\n            if elem == x {\n                res.push((i, j));\n\
    \            }\n            j += 1;\n        }\n        i += 1;\n    }\n    res.sort_by(|a,\
    \ b| {\n        let row_sort = a.0.cmp(&b.0);\n        if row_sort == Ordering::Equal\
    \ {\n            return b.1.cmp(&a.1);\n        }\n        row_sort\n    });\n\
    \    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (index,\
    \ row) in lst.iter().enumerate() {\n        for (pos, value) in row.iter().enumerate()\
    \ {\n            if *value == x {\n                result.push((index as isize,\
    \ pos as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b|\
    \ {\n        let compare = a.0.cmp(&b.0);\n        if compare == std::cmp::Ordering::Equal\
    \ {\n            return b.1.cmp(&a.1);\n        }\n        compare\n    });\n\
    \    result", "    let mut rv = vec![];\n    let n = lst.len();\n    for i in\
    \ 0..n {\n        let v = &lst[i];\n        let m = v.len();\n        for j in\
    \ 0..m {\n            if v[j] == x {\n                rv.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    rv.sort_by(|a, b| {\n       \
    \ a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n    });\n    rv", "    let mut res: Vec<(isize,\
    \ isize)> = vec![];\n    if lst.len() == 0 {\n        return res;\n    }\n   \
    \ for (i, v) in lst.iter().enumerate() {\n        for (j, _) in v.iter().enumerate()\
    \ {\n            if lst[i][j] == x {\n                res.push((i as isize, j\
    \ as isize));\n            }\n        }\n    }\n    res.sort_by(|a, b| {\n   \
    \     if a.0 != b.0 {\n            a.0.cmp(&b.0)\n        } else {\n         \
    \   b.1.cmp(&a.1)\n        }\n    });\n    res", "    let mut new_lst: Vec<(isize,\
    \ isize)> = vec![];\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len()\
    \ {\n            if lst[i][j] == x {\n                new_lst.push((i as isize,\
    \ j as isize));\n            }\n        }\n    }\n    new_lst.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    new_lst", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (i, row) in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..result.len() {\n        for j in i..result.len() {\n        \
    \    if result[i].0 == result[j].0 {\n                if result[i].1 < result[j].1\
    \ {\n                    result.swap(i, j);\n                }\n            }\n\
    \        }\n    }\n    result", "    if lst.is_empty() {\n        return vec![];\n\
    \    }\n    let mut res: Vec<(isize, isize)> = vec![];\n    let mut row_ind: usize\
    \ = 0;\n    for row in lst {\n        let mut col_ind: usize = 0;\n        for\
    \ col in row {\n            if col == x {\n                res.push((row_ind as\
    \ isize, col_ind as isize));\n            }\n            col_ind += 1;\n     \
    \   }\n        row_ind += 1;\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    for i in 0..res.len() {\n        res[i].0 = i as isize;\n    }\n    res.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    res", "    // TODO\n    vec![]", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, item) in row.iter().enumerate() {\n            if *item == x {\n  \
    \              res.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    res.sort_by(|a, b| if a.0 == b.0 { b.1.cmp(&a.1) } else { a.0.cmp(&b.0)\
    \ });\n    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (i, row) in lst.iter().enumerate() {\n        for (j, &y) in row.iter().enumerate()\
    \ {\n            if y == x {\n                result.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| (a.0, -a.1).cmp(&(b.0,\
    \ -b.1)));\n    result", "    let mut result: Vec<(isize, isize)> = vec![];\n\
    \    for row in 0..lst.len() {\n        for col in 0..lst[row].len() {\n     \
    \       if lst[row][col] == x {\n                result.push((row as isize, col\
    \ as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n\
    \        let a0 = a.0;\n        let b0 = b.0;\n        if a0 != b0 {\n       \
    \     a0.cmp(&b0)\n        } else {\n            a.1.cmp(&b.1).reverse()\n   \
    \     }\n    });\n    result", "    if lst.is_empty() {\n        return vec![];\n\
    \    }\n    let mut res: Vec<(isize, isize)> = vec![];\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if v.is_empty() {\n            continue;\n        }\n        for\
    \ (j, &item) in v.iter().enumerate() {\n            if item == x {\n         \
    \       res.push((i as isize, j as isize));\n            }\n        }\n    }\n\
    \    res.sort_by(|(a, b), (c, d)| a.cmp(c).then(d.cmp(b)));\n    res", "    let\
    \ mut result: Vec<(isize, isize)> = vec![];\n    for (index_row, row) in lst.iter().enumerate()\
    \ {\n        for (index_column, &number) in row.iter().enumerate() {\n       \
    \     if number == x {\n                result.push((index_row as isize, index_column\
    \ as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| if a.0\
    \ == b.0 {\n        a.1.cmp(&b.1)\n    } else {\n        a.0.cmp(&b.0)\n    });\n\
    \    result.reverse();\n    result", "    let mut result: Vec<(isize, isize)>\
    \ = vec![];\n    let mut counter = 0;\n    for i in lst {\n        for j in 0..i.len()\
    \ {\n            if i[j] == x {\n                result.push((counter, j as isize));\n\
    \            }\n        }\n        counter += 1;\n    }\n    result.sort_by(|&(a,\
    \ _), &(b, _)| a.cmp(&b));\n    result.sort_by(|&(_, a), &(_, b)| b.cmp(&a));\n\
    \    result", "    // your code here\n    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, v) in lst.iter().enumerate() {\n        for (j, vv) in v.iter().enumerate()\
    \ {\n            if *vv == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| match a.0.cmp(&b.0) {\n\
    \        std::cmp::Ordering::Equal => a.1.cmp(&b.1).reverse(),\n        std::cmp::Ordering::Less\
    \ => std::cmp::Ordering::Less,\n        std::cmp::Ordering::Greater => std::cmp::Ordering::Greater,\n\
    \    });\n    res", "    let mut result: Vec<(isize, isize)> = vec![];\n    for\
    \ (row, row_vec) in lst.iter().enumerate() {\n        for (col, val) in row_vec.iter().enumerate()\
    \ {\n            if *val == x {\n                result.push((row as isize, col\
    \ as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    result", "    let mut coords: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (row, sub_vec) in lst.iter().enumerate() {\n        for (col, val) in sub_vec.iter().enumerate()\
    \ {\n            if *val == x {\n                coords.push((row as isize, col\
    \ as isize));\n            }\n        }\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    coords", "    let mut coord = Vec::new();\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        for (j, k) in v.iter().enumerate() {\n            if *k == x {\n\
    \                coord.push((i as isize, j as isize));\n            }\n      \
    \  }\n    }\n    coord.sort_by(|(a, b), (c, d)| a.cmp(c).then(b.cmp(d).reverse()));\n\
    \    coord", "    let mut coordinates = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, col) in row.iter().enumerate() {\n            if *col ==\
    \ x {\n                coordinates.push((i as isize, j as isize));\n         \
    \   }\n        }\n    }\n    coordinates.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    coordinates", "    let mut result: Vec<(isize, isize)> = vec![];\n    for\
    \ (y, row) in lst.iter().enumerate() {\n        for (x, el) in row.iter().enumerate()\
    \ {\n            if *el == x {\n                result.push((y as isize, x as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|&a, &b| {\n \
    \       a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n    });\n    result", "    if lst.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut v: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, num) in row.iter().enumerate()\
    \ {\n            if num == &x {\n                v.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    if v.is_empty() {\n        return vec![];\n\
    \    }\n    v.sort_by(|a, b| a.0.cmp(&b.0));\n    let (mut i, mut j) = (0, 0);\n\
    \    while i < v.len() {\n        j = i + 1;\n        while j < v.len() && v[i].0\
    \ == v[j].0 {\n            j += 1;\n        }\n        v[i..j].sort_by(|a, b|\
    \ b.1.cmp(&a.1));\n        i = j;\n    }\n    v", "    let mut vec = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, elem) in row.iter().enumerate()\
    \ {\n            if *elem == x {\n                vec.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    vec.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(a.1.cmp(&b.1).reverse())\n\
    \    });\n    vec", "    lst.iter()\n        .enumerate()\n        .map(|(i, row)|\
    \ row.iter().enumerate().filter(|(_, &n)| n == x))\n        .enumerate()\n   \
    \     .flat_map(|(i, elem)| elem.map(move |(j, _)| (i as isize, j as isize)))\n\
    \        .collect()", "    let mut res: Vec<(isize, isize)> = vec![];\n    for\
    \ (row, list) in lst.iter().enumerate() {\n        for (col, item) in list.iter().enumerate()\
    \ {\n            if *item == x {\n                res.push((row as isize, col\
    \ as isize));\n            }\n        }\n    }\n    res.sort_by(|a, b| if a.0\
    \ < b.0 {\n        Ordering::Less\n    } else if a.0 > b.0 {\n        Ordering::Greater\n\
    \    } else {\n        b.1.cmp(&a.1)\n    });\n    res", "    let mut res: Vec<(isize,\
    \ isize)> = vec![];\n    for (i, item) in lst.iter().enumerate() {\n        for\
    \ (j, item2) in item.iter().enumerate() {\n            if *item2 == x {\n    \
    \            res.push((i as isize, j as isize));\n            }\n        }\n \
    \   }\n    res.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n \
    \   });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n    let\
    \ mut len = lst.len();\n    let mut index: usize = 0;\n    while index < len {\n\
    \        let mut index_in_row = 0;\n        while index_in_row < lst[index].len()\
    \ {\n            if lst[index][index_in_row] == x {\n                res.push((index\
    \ as isize, index_in_row as isize));\n            }\n            index_in_row\
    \ += 1;\n        }\n        index += 1;\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    res.sort_by(|a, b| b.1.cmp(&a.1));\n    res", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len()\
    \ {\n            if lst[i][j] == x {\n                res.push((i as isize, j\
    \ as isize));\n            }\n        }\n    }\n    res.sort_by(|a, b| {\n   \
    \     a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n    });\n    res", "    let mut res:\
    \ Vec<(isize, isize)> = Vec::new();\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        let mut tmp: Vec<isize> = Vec::new();\n        for (x, item) in row.iter().enumerate()\
    \ {\n            if item == &x {\n                tmp.push(x as isize);\n    \
    \        }\n        }\n        let mut i = 0;\n        while i < tmp.len() {\n\
    \            res.push((y as isize, tmp[i]));\n            i += 1;\n        }\n\
    \    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    res",
  "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, r)| {\n          \
    \  r.iter()\n                .enumerate()\n                .filter(|(_, &j)| j\
    \ == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n      \
    \  })\n        .sorted_by(|(i, j), (i1, j1)| match i.cmp(i1) {\n            Ordering::Equal\
    \ => j1.cmp(j),\n            otherwise => otherwise,\n        })\n        .collect()",
  "    // your code here\n    let mut res = Vec::new();\n    for (x,y) in lst.iter().enumerate()\
    \ {\n        for (i,z) in y.iter().enumerate() {\n            if *z == x {\n \
    \               res.push((x as isize,i as isize));\n            }\n        }\n\
    \    }\n    res.sort_by(|a,b| (a.0).cmp(&b.0));\n    for x in res.iter_mut() {\n\
    \        x.1 = -x.1;\n    }\n    res.sort_by(|a,b| (a.1).cmp(&b.1));\n    for\
    \ x in res.iter_mut() {\n        x.1 = -x.1;\n    }\n    res", '    unimplemented!()',
  "    let mut result: Vec<(isize, isize)> = vec![];\n    for i in 0..lst.len() {\n\
    \        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n       \
    \         result.push((i as isize, j as isize));\n            }\n        }\n \
    \   }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    result",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, &el) in row.iter().enumerate() {\n            if el == x\
    \ {\n                result.push((i as isize, j as isize));\n            }\n \
    \       }\n    }\n    result.sort_by(|a, b| {\n        if a.0 < b.0 {\n      \
    \      std::cmp::Ordering::Less\n        } else if a.0 > b.0 {\n            std::cmp::Ordering::Greater\n\
    \        } else {\n            b.1.cmp(&a.1)\n        }\n    });\n    result",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (y, xs) in lst.iter().enumerate()\
    \ {\n        for (x2, &x3) in xs.iter().enumerate() {\n            if x3 == x\
    \ {\n                result.push((y as isize, x2 as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (y, row) in lst.iter().enumerate() {\n        for (x, item) in row.iter().enumerate()\
    \ {\n            if item == &x {\n                result.push((y as isize, x as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| (a.0, b.1).cmp(&(b.0,\
    \ a.1)));\n    result", "    if lst.is_empty() {\n        return vec![];\n   \
    \ }\n    lst.iter()\n        .enumerate()\n        .flat_map(|(i, row)| {\n  \
    \          row.iter()\n                .enumerate()\n                .filter(|(_,\
    \ &n)| n == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n\
    \        })\n        .collect()", '    unimplemented!();', "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, num) in row.iter().enumerate() {\n            if num == &x {\n    \
    \            res.push((i as isize, j as isize));\n            }\n        }\n \
    \   }\n    res.sort_by(|a, b| (a.0, -a.1).cmp(&(b.0, -b.1)));\n    res", "   \
    \ let mut lst_res: Vec<(isize, isize)> = Vec::new();\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x1, column) in row.iter().enumerate() {\n            if *column\
    \ == x {\n                lst_res.push((y as isize, x1 as isize));\n         \
    \   }\n        }\n    }\n    lst_res.sort_by(|a, b| b.1.cmp(&a.1));\n    lst_res.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    lst_res", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, v) in lst.iter().enumerate() {\n        for (j, &x2) in v.iter().enumerate()\
    \ {\n            if x2 == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|(a, b), (c, d)| {\n       \
    \ a.cmp(c).then(d.cmp(b))\n    });\n    res", "    let mut res: Vec<(isize, isize)>\
    \ = Vec::new();\n    for i in 0..lst.len() {\n        let mut counter = 0;\n \
    \       for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n        \
    \        res.push((i as isize, j as isize));\n                counter += 1;\n\
    \            }\n        }\n        res.sort_by(|a, b| b.1.cmp(&a.1));\n      \
    \  res.sort_by(|a, b| a.0.cmp(&b.0));\n    }\n    res", "    let mut row = Vec::new();\n\
    \    for (i, row_data) in lst.iter().enumerate() {\n        let mut column = Vec::new();\n\
    \        for (j, data) in row_data.iter().enumerate() {\n            if *data\
    \ == x {\n                column.push(j as isize);\n            }\n        }\n\
    \        column.sort_by(|a, b| b.cmp(a));\n        for c in column {\n       \
    \     row.push((i as isize, c));\n        }\n    }\n    row.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    row", "    // let y = vec![(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)];\n   \
    \ let mut y = Vec::new();\n    for (i, j) in lst.iter().enumerate() {\n      \
    \  for (k, m) in j.iter().enumerate() {\n            if *m == x {\n          \
    \      y.push((i as isize, k as isize));\n            }\n        }\n    }\n  \
    \  return y;", "    let mut lst = lst.iter()\n        .enumerate()\n        .map(|(i,\
    \ e)| {\n            let mut lst = e.iter()\n                .enumerate()\n  \
    \              .filter(|(_, e)| e == &x)\n                .map(|(j, _)| (i as\
    \ isize, j as isize))\n                .collect::<Vec<(isize, isize)>>();\n  \
    \          lst.sort_by(|a, b| b.1.cmp(&a.1));\n            lst\n        })\n \
    \       .flatten()\n        .collect::<Vec<(isize, isize)>>();\n    lst.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    lst", "    lst.iter()\n        .enumerate()\n      \
    \  .flat_map(|(row, col)| col.iter().enumerate().filter_map(move |(col, v)| {\n\
    \            if *v == x {\n                Some((row as isize, col as isize))\n\
    \            } else {\n                None\n            }\n        }))\n    \
    \    .sorted_by(|&(row, _), &(row2, _)| row.cmp(&row2))\n        .sorted_by(|&(_,\
    \ col), &(_, col2)| col2.cmp(&col))\n        .collect()", "    let mut out = Vec::new();\n\
    \    for (i, v) in lst.iter().enumerate() {\n        for (j, n) in v.iter().enumerate()\
    \ {\n            if *n == x {\n                out.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    out.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    out", "    lst.iter()\n        .enumerate()\n       \
    \ .map(|(i, r)| {\n            r.iter()\n                .enumerate()\n      \
    \          .filter(|(_, c)| x == **c)\n                .map(|(j, _)| (i as isize,\
    \ j as isize))\n                .collect::<Vec<(isize, isize)>>()\n        })\n\
    \        .flatten()\n        .collect::<Vec<(isize, isize)>>()", "    let mut\
    \ result: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, value) in row.iter().enumerate() {\n            if *value\
    \ == x {\n                result.push((i as isize, j as isize));\n           \
    \ }\n        }\n    }\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    result", "    let mut result: Vec<(isize, isize)> =\
    \ Vec::new();\n    if lst.len() == 0 {\n        return result;\n    }\n    for\
    \ (i, row) in lst.iter().enumerate() {\n        for (j, elem) in row.iter().enumerate()\
    \ {\n            if *elem == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|&(_, x), &(_,\
    \ y)| x.cmp(&y));\n    result.sort_by(|&(x, _), &(y, _)| x.cmp(&y));\n    result",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, column) in row.iter().enumerate() {\n            if *column\
    \ == x {\n                result.push((i as isize, j as isize));\n           \
    \ }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    result", "    let mut ret = vec![];\n    for (j, v) in lst.iter().enumerate()\
    \ {\n        for (i, v) in v.iter().enumerate() {\n            if *v == x {\n\
    \                ret.push((j as isize, i as isize));\n            }\n        }\n\
    \    }\n    ret.sort_by(|a, b| {\n        if a.0 == b.0 {\n            a.1.cmp(&b.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    ret", " \
    \   let mut ret = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n\
    \        for (j, &elem) in row.iter().enumerate() {\n            if elem == x\
    \ {\n                ret.push((i as isize, j as isize));\n            }\n    \
    \    }\n    }\n    ret.sort_by(|a, b| {\n        if a.0 < b.0 {\n            Ordering::Less\n\
    \        } else if a.0 > b.0 {\n            Ordering::Greater\n        } else\
    \ {\n            b.1.cmp(&a.1)\n        }\n    });\n    ret"]
stop_tokens:
- "\n}"
