name: HumanEval_110_exchange
language: rs
prompt: "/// In this problem, you will implement a function that takes two vectors\
  \ of numbers,\n/// and determines whether it is possible to perform an exchange\
  \ of elements\n/// between them to make lst1 a vector of only even numbers.\n///\
  \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
  /// If it is possible to exchange elements between the lst1 and lst2 to make\n///\
  \ all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return \"\
  NO\".\n/// For example:\n/// >>> exchange(vec![1, 2, 3, 4], vec![1, 2, 3, 4])\n\
  /// String::from(\"YES\")\n/// >>> exchange(vec![1, 2, 3, 4], vec![1, 5, 3, 4])\n\
  /// String::from(\"NO\")\n/// It is assumed that the input vectors will be non-empty.\n\
  fn exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = exchange;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4], vec![1, 2, 3, 4]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4], vec![1, 5, 3, 4]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4], vec![2, 1, 4, 3]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![5,\
  \ 7, 3], vec![2, 6, 4]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![5,\
  \ 7, 3], vec![2, 6, 3]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![3,\
  \ 2, 6, 1, 8, 9], vec![3, 5, 5, 1, 1, 1]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![100,\
  \ 200], vec![200, 200]), String::from(\"YES\"));\n}\n"
completions: ["    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut lst1_all_even\
    \ = false;\n    let mut lst2_all_even = false;\n    let mut res = String::from(\"\
    NO\");\n    // If all elements of lst1 is even, return \"YES\"\n    for v in lst1.iter()\
    \ {\n        if v % 2 == 0 {\n            lst1_all_even = true;\n        } else\
    \ {\n            lst1_all_even = false;\n            break;\n        }\n    }\n\
    \    if lst1_all_even {\n        return String::from(\"YES\");\n    }\n    //\
    \ If all elements of lst2 is even, return \"YES\"\n    for v in lst2.iter() {\n\
    \        if v % 2 == 0 {\n            lst2_all_even = true;\n        } else {\n\
    \            lst2_all_even = false;\n            break;\n        }\n    }\n  \
    \  if lst2_all_even {\n        return String::from(\"YES\");\n    }\n    // If\
    \ lst1 has one odd number, and lst2 has one even number, exchange them,\n    //\
    \ and then test all numbers in lst1 again, if all numbers in lst1 are even,\n\
    \    // return \"YES\", otherwise return \"NO\"\n    for (i, v) in lst1.iter().enumerate()\
    \ {\n        if v % 2 != 0 {\n            for (j, u) in lst2.iter().enumerate()\
    \ {\n                if u % 2 == 0 {\n                    lst1[i] = *u;\n    \
    \                lst2[j] = *v;\n                    for x in lst1.iter() {\n \
    \                       if x % 2 != 0 {\n                            lst1[i] =\
    \ *v;\n                            lst2[j] = *u;\n                           \
    \ break;\n                        }\n                    }\n                 \
    \   for x in lst1.iter() {\n                        if x % 2 != 0 {\n        \
    \                    break;\n                        }\n                     \
    \   res = String::from(\"YES\");\n                    }\n                }\n \
    \           }", "    if lst1.iter().any(|&x| x % 2 == 1) {\n        lst1.iter().any(|&x|\
    \ lst2.iter().any(|&y| y % 2 == 0 && x - y == 1))\n            || lst1.iter().any(|&x|\
    \ lst2.iter().any(|&y| y % 2 == 0 && y - x == 1))\n            || lst1.iter().any(|&x|\
    \ lst2.iter().any(|&y| y % 2 == 0 && x - y == 0))\n            || lst1.iter().any(|&x|\
    \ lst2.iter().any(|&y| y % 2 == 0 && y - x == 0))\n    } else {\n        true\n\
    \    }\n    .to_string()", "    if !lst1.iter().any(|x| x % 2 == 1) {\n      \
    \  return String::from(\"YES\");\n    }\n\n    let mut lst2_odds = lst2.iter().filter(|x|\
    \ x % 2 == 1).count();\n    let mut lst1_odds = lst1.iter().filter(|x| x % 2 ==\
    \ 1).count();\n\n    if lst2_odds > lst1_odds {\n        \"YES\".to_string()\n\
    \    } else {\n        \"NO\".to_string()\n    }", "    let mut res: Vec<&isize>\
    \ = vec![];\n    lst1.iter().enumerate().for_each(|(i, &v)| {\n        if v %\
    \ 2 != 0 {\n            res.push(&lst2[i]);\n        }\n    });\n    if res.iter().all(|&v|\
    \ v % 2 == 0) {\n        return String::from(\"YES\");\n    }\n    lst2.iter().enumerate().for_each(|(i,\
    \ &v)| {\n        if v % 2 != 0 {\n            res.push(&lst1[i]);\n        }\n\
    \    });\n    if res.iter().all(|&v| v % 2 == 0) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let mut even = Vec::new();\n \
    \   let mut odd = Vec::new();\n    for x in lst1 {\n        if x % 2 == 0 {\n\
    \            even.push(x);\n        } else {\n            odd.push(x);\n     \
    \   }\n    }\n    for x in lst2 {\n        if x % 2 == 0 {\n            even.push(x);\n\
    \        } else {\n            odd.push(x);\n        }\n    }\n    if odd.len()\
    \ == 0 {\n        return String::from(\"YES\");\n    }\n    if even.len() == 0\
    \ {\n        return String::from(\"NO\");\n    }\n    String::from(\"YES\")",
  "    if lst1.iter().any(|x| x % 2 != 0) {\n        if lst2.iter().any(|x| x % 2\
    \ == 0) {\n            return String::from(\"YES\");\n        }\n    }\n    String::from(\"\
    NO\")", "    let mut count = 0;\n    for i in 0..lst1.len() {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..lst2.len() {\n                if lst2[j]\
    \ % 2 == 0 {\n                    count += 1;\n                    break;\n  \
    \              }\n            }\n        }\n    }\n    if count == lst1.len()\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let mut odds_in_lst1 = lst1.iter().filter(|x| **x % 2 != 0).count();\n    let\
    \ odds_in_lst2 = lst2.iter().filter(|x| **x % 2 != 0).count();\n    let mut all_evens\
    \ = odds_in_lst1 == 0;\n    let mut output = String::from(\"YES\");\n    while\
    \ !all_evens {\n        if odds_in_lst2 == 0 {\n            break;\n        }\n\
    \        odds_in_lst1 -= 1;\n        odds_in_lst2 -= 1;\n        all_evens = odds_in_lst1\
    \ == 0;\n    }\n    if !all_evens {\n        output = String::from(\"NO\");\n\
    \    }\n    output", "    let mut t1 = lst1.clone();\n    let mut t2 = lst2.clone();\n\
    \    while t1.iter().any(|x| x % 2 != 0) {\n        let idx = t1.iter().position(|x|\
    \ x % 2 != 0).unwrap();\n        t1.remove(idx);\n        t2.remove(idx);\n  \
    \  }\n    if t1.iter().all(|x| x % 2 == 0) {\n        return String::from(\"YES\"\
    );\n    } else {\n        return String::from(\"NO\");\n    }", "    let mut res\
    \ = String::from(\"YES\");\n    for val in lst1 {\n        if val % 2 != 0 {\n\
    \            res = String::from(\"NO\");\n            break;\n        }\n    }\n\
    \    res", "    let lst1_even = lst1.iter().all(|&x| x % 2 == 0);\n    let lst2_even\
    \ = lst2.iter().all(|&x| x % 2 == 0);\n    if lst1_even {\n        if lst2_even\
    \ {\n            return String::from(\"YES\");\n        } else {\n           \
    \ return String::from(\"NO\");\n        }\n    } else {\n        if lst2_even\
    \ {\n            return String::from(\"NO\");\n        } else {\n            return\
    \ String::from(\"YES\");\n        }\n    }", "    if lst1.into_iter().any(|x|\
    \ x % 2 != 0) {\n        if lst2.into_iter().any(|x| x % 2 == 0) {\n         \
    \   return String::from(\"YES\");\n        }\n    }\n    String::from(\"NO\")",
  "    let mut even_lst1 = lst1.clone();\n    let mut even_lst2 = lst2.clone();\n\
    \    for i in 0..lst1.len() {\n        if even_lst1[i] % 2 != 0 {\n          \
    \  for j in 0..lst2.len() {\n                if even_lst2[j] % 2 == 0 {\n    \
    \                even_lst1[i] = even_lst2[j];\n                    even_lst2[j]\
    \ = lst1[i];\n                    break;\n                }\n            }\n \
    \       }\n    }\n    if even_lst1.iter().all(|x| x % 2 == 0) {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    if lst1.iter().any(|x|\
    \ x % 2 != 0) {\n        \"NO\".to_string()\n    } else {\n        \"YES\".to_string()\n\
    \    }", "    let odds1 = lst1.iter().filter(|x| x % 2 != 0).count();\n    let\
    \ odds2 = lst2.iter().filter(|x| x % 2 != 0).count();\n    if odds1 % 2 == odds2\
    \ % 2 {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\"\
    )", "    let mut evens = 0;\n    let mut odds = 0;\n    for num in lst1 {\n  \
    \      if num % 2 == 0 {\n            evens += 1;\n        } else {\n        \
    \    odds += 1;\n        }\n    }\n    for num in lst2 {\n        if num % 2 ==\
    \ 0 {\n            evens += 1;\n        } else {\n            odds += 1;\n   \
    \     }\n    }\n    if evens >= odds {\n        String::from(\"YES\")\n    } else\
    \ {\n        String::from(\"NO\")\n    }", "    let mut lst1 = lst1;\n    let\
    \ mut lst2 = lst2;\n    loop {\n        if lst1.iter().all(|x| x % 2 == 0) {\n\
    \            return String::from(\"YES\");\n        }\n        if lst1.iter().any(|x|\
    \ x % 2 != 0) && lst2.iter().all(|x| x % 2 != 0) {\n            return String::from(\"\
    NO\");\n        }\n        let last_elem = lst1.pop().unwrap();\n        let last_elem2\
    \ = lst2.pop().unwrap();\n        if last_elem % 2 == 0 {\n            lst1.push(last_elem);\n\
    \            lst2.push(last_elem2);\n        } else {\n            lst1.push(last_elem2);\n\
    \            lst2.push(last_elem);\n        }\n    }", "    let is_even = |n:\
    \ &isize| n % 2 == 0;\n    let lst1_has_odd_numbers = lst1.iter().any(|&n| !is_even(&n));\n\
    \    let lst2_has_even_numbers = lst2.iter().any(|&n| is_even(&n));\n    if lst1_has_odd_numbers\
    \ && lst2_has_even_numbers {\n        String::from(\"YES\")\n    } else {\n  \
    \      String::from(\"NO\")\n    }", "    if lst1.iter().any(|n| n % 2 != 0) {\n\
    \        for i in 0..lst1.len() {\n            for j in 0..lst2.len() {\n    \
    \            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n                    return\
    \ \"YES\".to_string();\n                }\n            }\n        }\n    }\n \
    \   \"NO\".to_string()", "    if lst1.iter().all(|&x| x % 2 == 0) {\n        String::from(\"\
    YES\")\n    } else if lst2.iter().all(|&x| x % 2 == 0) {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }"]
stop_tokens:
- "\n}"
