language: rs
name: HumanEval_85_add
results:
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in 1..lst.len()\
    \ {\n        if x % 2 == 1 {\n            sum += lst[x];\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpr0wc4hnd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    // Do not change this function\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if i % 2 == 1 && x % 2 == 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)|\
    \ i % 2 == 1).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpdodu5s9t.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp7vffi1mu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(idx,\
    \ x)| idx % 2 == 1 && x % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i,\
    \ num)| if i % 2 == 1 { acc + num } else { acc })\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpfr6av3j3.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (idx, item)\
    \ in lst.iter().enumerate() {\n        if idx % 2 == 1 && item % 2 == 0 {\n  \
    \          sum += item;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(idx,\
    \ _)| idx % 2 == 1).map(|(_, &num)| num).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpuupihpjw.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp7vffi1mu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823166
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)|\
    \ i % 2 == 1).map(|(_, x)| x % 2 == 0).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<bool>` is not satisfied\n -->\
    \ /tmp/tmpakxbzqnd.rs:6:81\n  |\n6 |     lst.iter().enumerate().filter(|(i, _)|\
    \ i % 2 == 1).map(|(_, x)| x % 2 == 0).sum()\n  |                            \
    \                                                     ^^^ the trait `Sum<bool>`\
    \ is not implemented for `isize`\n  |\n  = help: the following implementations\
    \ were found:\n            <isize as Sum<&'a isize>>\n            <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823165
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    for (i, item) in\
    \ lst.iter().enumerate() {\n        if i % 2 == 1 && item % 2 == 0 {\n       \
    \     res += item;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if (i & 1) == 1 && (x & 1) == 0 {\n            sum += x;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut s = 0;\n    for (i, &v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            s += v;\n        }\n \
    \   }\n    s\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvcynaxhk.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut result = 0;\n    for (idx, item)\
    \ in lst.iter().enumerate() {\n        if idx % 2 == 1 && item % 2 == 0 {\n  \
    \          result += item;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut n = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            n += v;\n        }\n \
    \   }\n    n\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut result = 0;\n    for (index, number)\
    \ in lst.iter().enumerate() {\n        if number % 2 == 0 && index % 2 != 0 {\n\
    \            result += number;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp_xw0eoti.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
