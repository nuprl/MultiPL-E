language: rs
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if !is_valid_triangle(a,\
    \ b, c) {\n        return -1.0;\n    }\n    let s = (a + b + c) as f64 / 2.0;\n\
    \    (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_valid_triangle` in this scope\n\
    \  --> /tmp/tmpt4u3visy.rs:12:9\n   |\n12 |     if !is_valid_triangle(a, b, c)\
    \ {\n   |         ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       return (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt();\n\
    \    } else {\n        return -1.0;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpb1fugx77.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = -1f64;\n    if a + b > c && a + c > b && b + c > a {\n        let p = (a +\
    \ b + c) as f64 / 2f64;\n        area = (p * (p - a as f64) * (p - b as f64) *\
    \ (p - c as f64)).sqrt();\n    }\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpolp4c0du.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp08x192lc.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        // https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \        let p = (a + b + c) as f64 / 2f64;\n        let area = (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt();\n        return area.round()\
    \ / 100f64;\n    }\n    -1f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.06`,\n right: `6.0`', /tmp/tmp331qkkds.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmps9khq2h_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] <= sides[2] {\n\
    \        return -1.0;\n    }\n    let s = (sides[0] + sides[1] + sides[2]) as\
    \ f64 / 2.0;\n    (s * (s - sides[0] as f64) * (s - sides[1] as f64) * (s - sides[2]\
    \ as f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmppt3f750k.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let [a, b, c] = sides;\n    let area\
    \ = (a as f64 + b as f64 + c as f64) / 2.0;\n    if area <= a as f64 || area <=\
    \ b as f64 || area <= c as f64 {\n        -1.0\n    } else {\n        area.sqrt()\
    \ * (area - a as f64).sqrt() * (area - b as f64).sqrt()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpiwbreyr3.rs:14:9\n\
    \   |\n14 |     let [a, b, c] = sides;\n   |         ^^^^^^^^^   ----- help: consider\
    \ slicing here: `sides[..]`\n   |         |\n   |         pattern cannot match\
    \ with input type `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0529`.\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpjhb_1o4s.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let side_a = sides[0] as f64;\n   \
    \ let side_b = sides[1] as f64;\n    let side_c = sides[2] as f64;\n    if side_a\
    \ + side_b > side_c {\n        let s = (side_a + side_b + side_c) / 2.0;\n   \
    \     let area = (s * (s - side_a) * (s - side_b) * (s - side_c)).sqrt();\n  \
    \      area.round() / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.06`,\n right: `6.0`', /tmp/tmph1w5t2gx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Your code\
    \ here\n    let p = (a + b + c) as f64 / 2.0;\n    let area = (p * (p - a as f64)\
    \ * (p - b as f64) * (p - c as f64)).sqrt();\n    if area.is_nan() {\n       \
    \ -1.0\n    } else {\n        area\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1zv_64wk.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = 0.5 * (a + b + c) as f64;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpg8qybccq.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let perim:\
    \ isize = a + b + c;\n    let s: f64 = perim as f64 / 2.0;\n    let area: f64\
    \ = (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt();\n    if a +\
    \ b > c && a + c > b && b + c > a {\n        return area;\n    }\n    return -1.0;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpo05u3ror.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let p = (a\
    \ as f64 + b as f64 + c as f64) / 2.0;\n    if a < b + c && b < a + c && c < a\
    \ + b {\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmppyganhrk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a < b +\
    \ c && b < a + c && c < a + b {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp4abj2zzw.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmps9khq2h_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxa5m2a35.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let p = (a\
    \ + b + c) as f64 / 2.0;\n    if a + b > c && a + c > b && b + c > a {\n     \
    \   ((p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt() * 100.0).round()\
    \ / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxa5m2a35.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut arr\
    \ = [a, b, c];\n    arr.sort();\n    if arr[0] + arr[1] > arr[2] {\n        return\
    \ (arr[0] + arr[1] + arr[2]) as f64 / 2.0;\n    }\n    -1.0\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.5`,\n right: `8.18`', /tmp/tmppeiqc5u0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       ((p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt() * 100.0).round()\
    \ / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a = a as\
    \ f64;\n    let b = b as f64;\n    let c = c as f64;\n    if a + b > c && a +\
    \ c > b && b + c > a {\n        (a + b + c) / 2.0\n    } else {\n        -1.0\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.5`,\n right: `8.18`', /tmp/tmpj4lga2xc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if is_valid_triangle(a,\
    \ b, c) {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64)\
    \ * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_valid_triangle` in this scope\n\
    \  --> /tmp/tmpm_bpf93k.rs:12:8\n   |\n12 |     if is_valid_triangle(a, b, c)\
    \ {\n   |        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ 0.25 * ((a + b + c) as f64 * (b + c - a) as f64 * (c + a - b) as f64 * (a +\
    \ b - c) as f64).sqrt();\n    if area.is_nan() {\n        -1.0\n    } else {\n\
    \        area\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp25kch_ow.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] <= sides[2] {\n\
    \        return -1.0;\n    }\n    let p = 0.5 * (a + b + c) as f64;\n    ((p *\
    \ (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt() * 100.0).round() /\
    \ 100.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let temp =\
    \ [a, b, c];\n    let mut max = a;\n    let mut aa = a;\n    let mut bb = b;\n\
    \    let mut cc = c;\n    for i in &temp {\n        if *i > max {\n          \
    \  max = *i;\n        }\n    }\n    if aa > max {\n        aa = b;\n        bb\
    \ = c;\n        cc = a;\n    }\n    if bb > max {\n        bb = a;\n        cc\
    \ = b;\n    }\n    let s = aa + bb;\n    if s > cc {\n        ((s + cc) * (s -\
    \ cc) * (s - aa) * (s - bb)) as f64\n    } else {\n        -1 as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `288.0`,\n right: `6.0`', /tmp/tmpb75edypr.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        ((p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.449489742783178`,\n right: `6.0`', /tmp/tmpfo_w6kx7.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <=\
    \ c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n\n    let s =\
    \ (a + b + c) as f64 / 2.0;\n    (s * (s - a as f64) * (s - b as f64) * (s - c\
    \ as f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpe_3dysp6.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut side_lengths\
    \ = [a, b, c];\n    side_lengths.sort();\n    let (a, b, c) = (side_lengths[0],\
    \ side_lengths[1], side_lengths[2]);\n    if c >= a + b {\n        return -1.0;\n\
    \    }\n\n    let s = (a + b + c) as f64 / 2.0;\n    ((s - a as f64) * (s - b\
    \ as f64) * (s - c as f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.449489742783178`,\n right: `6.0`', /tmp/tmpc916tuxd.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut side\
    \ = [a, b, c];\n    side.sort();\n    let [a, b, c] = side;\n    if a + b > c\
    \ {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) *\
    \ (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpy1ocggd4.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <=\
    \ c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n    let p = (a\
    \ + b + c) as f64 / 2.0;\n    (p * (p - a as f64) * (p - b as f64) * (p - c as\
    \ f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp8moml932.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let (a, b,\
    \ c) = (a as f64, b as f64, c as f64);\n    if a + b > c && a + c > b && b + c\
    \ > a {\n        let s = (a + b + c) / 2.0;\n        (s * (s - a) * (s - b) *\
    \ (s - c)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxtybzqiq.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] <= sides[2] {\n\
    \        return -1.0;\n    }\n\n    let p = (a + b + c) as f64 / 2.0;\n    (p\
    \ * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpeu9nl0a9.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpr8qplxtu.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  let mut sides\
    \ = [a, b, c];\n  sides.sort();\n  let s = sides[0] + sides[1];\n  if s > sides[2]\
    \ {\n    let x = (s * (s - sides[0]) * (s - sides[1]) * (s - sides[2]));\n   \
    \ (x as f64).sqrt() / 4f64\n  } else {\n    -1f64\n  }\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3.24037034920393`,\n right: `6.0`', /tmp/tmpxacaa8yo.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxa5m2a35.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmps9khq2h_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if is_valid_triangle(a,\
    \ b, c) {\n        area_of_triangle(a, b, c)\n    } else {\n        -1.0\n   \
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_valid_triangle` in this scope\n\
    \  --> /tmp/tmp3tilhc72.rs:12:8\n   |\n12 |     if is_valid_triangle(a, b, c)\
    \ {\n   |        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `area_of_triangle` in this scope\n  --> /tmp/tmp3tilhc72.rs:13:9\n\
    \   |\n13 |         area_of_triangle(a, b, c)\n   |         ^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\
    \    let side_a = a as f64;\n    let side_b = b as f64;\n    let side_c = c as\
    \ f64;\n    if (side_a + side_b) > side_c &&\n        (side_a + side_c) > side_b\
    \ &&\n        (side_b + side_c) > side_a {\n        let s = (side_a + side_b +\
    \ side_c) / 2.0;\n        let area = s * (s - side_a) * (s - side_b) * (s - side_c);\n\
    \        f64::sqrt(area)\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp0zefpy5d.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let (a, b,\
    \ c) = (a as f64, b as f64, c as f64);\n    let (a, b, c) = if a > b { (b, a,\
    \ c) } else { (a, b, c) };\n    let (a, b, c) = if a > c { (c, b, a) } else {\
    \ (a, b, c) };\n    if a + b <= c {\n        -1.0\n    } else {\n        let p\
    \ = (a + b + c) / 2.0;\n        (p * (p - a) * (p - b) * (p - c)).sqrt()\n   \
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp9xyuza0p.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let sides =\
    \ [a, b, c];\n    if sides.iter().any(|&x| x <= 0) {\n        return -1.0;\n \
    \   }\n    let (p, q, r) = (sides[0] as f64, sides[1] as f64, sides[2] as f64);\n\
    \    let s = (p + q + r) / 2.0;\n    let area = (s * (s - p) * (s - q) * (s -\
    \ r)).sqrt();\n    if area.is_nan() {\n        -1.0\n    } else {\n        area\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpsmtuq2g3.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Insert code\
    \ here\n    -1.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmp4ml8rpk6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        let s = (a + b + c) as f64 / 2.0;\n\
    \        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpvbdkcqog.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let sides =\
    \ [a, b, c];\n    let max_side = sides.iter().max().unwrap();\n    let sum_of_other_sides\
    \ = sides.iter().fold(0, |acc, x| acc + x) - max_side;\n    if sum_of_other_sides\
    \ > *max_side {\n        let perimeter = sides.iter().fold(0, |acc, x| acc + x)\
    \ as f64;\n        let semi_perimeter = perimeter / 2.0;\n        let area = semi_perimeter\
    \ * (semi_perimeter - a as f64) *\n            (semi_perimeter - b as f64) * (semi_perimeter\
    \ - c as f64);\n        return (area as f64).sqrt().round() / 100.0;\n    } else\
    \ {\n        return -1.0;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.06`,\n right: `6.0`', /tmp/tmpbx0czcs3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       ((p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt() * 100.0).round()\
    \ / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       return s.sqrt() * (s - a as f64) * (s - b as f64) * (s - c as f64);\n\
    \    }\n    -1.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14.696938456699067`,\n right: `6.0`', /tmp/tmpkmpqbyoq.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut v =\
    \ vec![a, b, c];\n    v.sort();\n    let (a, b, c) = (v[0], v[1], v[2]);\n   \
    \ if a + b <= c {\n        -1.0\n    } else {\n        let p = (a + b + c) as\
    \ f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmprn1pfeq9.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <=\
    \ c || a + c <= b || b + c <= a {\n        return -1f64;\n    }\n\n    let p =\
    \ (a + b + c) as f64 / 2f64;\n    let area = p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64);\n    (area.sqrt() * 100f64).round() / 100f64\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <=\
    \ c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n    let p = (a\
    \ + b + c) as f64 / 2.0;\n    let s = p * (p - a as f64) * (p - b as f64) * (p\
    \ - c as f64);\n    (s.sqrt() * 100.0).round() / 100.0\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut v =\
    \ vec![a, b, c];\n    v.sort();\n    let (a, b, c) = (v[0], v[1], v[2]);\n   \
    \ if a + b <= c {\n        -1.0\n    } else {\n        let p = (a + b + c) as\
    \ f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmprn1pfeq9.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmps9khq2h_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Try to make\
    \ a triangle\n    // If triangle is valid return area\n    // If invalid return\
    \ -1.0\n\n    // Check if sides make a valid triangle\n    if a + b > c && a +\
    \ c > b && b + c > a {\n        // No zeros allowed\n        if a == 0 || b ==\
    \ 0 || c == 0 {\n            return -1.0;\n        }\n        // Sides are valid\n\
    \        // Use Heron's formula to determine area\n        let s = (a + b + c)\
    \ as f64 / 2.0;\n        let area = (s * (s - a as f64) * (s - b as f64) * (s\
    \ - c as f64)).sqrt();\n        return area;\n    } else {\n        return -1.0;\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpqvmktlcr.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let d: f64\
    \ = (a + b + c) as f64 / 2.0;\n    let e: f64 = d * (d - a as f64) * (d - b as\
    \ f64) * (d - c as f64);\n    if e < 0.0 {\n        -1.0\n    } else {\n     \
    \   (e.sqrt() * 100.0).round() / 100.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `-1.0`', /tmp/tmpcwvdcvub.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let mut p = (a + b + c) as f64 / 2.0;\n\
    \        return (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt();\n\
    \    }\n    -1.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpdbiecizs.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ (a + b + c) as f64 / 2.0;\n    if area > 0.0 { area.sqrt() * 2.0 } else { -1.0\
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4.898979485566356`,\n right: `6.0`', /tmp/tmpsww5j5zh.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ (a + b + c) as f64 / 2.0;\n    let tri_area = s * (s - a as f64) * (s - b as\
    \ f64) * (s - c as f64);\n    if tri_area <= 0.0 {\n        -1.0\n    } else {\n\
    \        (tri_area.sqrt() * 100.0).round() / 100.0\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       ((s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.449489742783178`,\n right: `6.0`', /tmp/tmp44ek3z5g.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area:\
    \ f64 = -1.0;\n    if a < b + c && b < a + c && c < a + b {\n        let p = (a\
    \ + b + c) as f64 / 2.0;\n        area = p * (p - a as f64) * (p - b as f64) *\
    \ (p - c as f64);\n        area = area.sqrt();\n    }\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpv_kgx1g5.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpaynr2fxc.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpjhb_1o4s.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] <= sides[2] {\n\
    \        return -1.0;\n    }\n    let s = (sides[0] + sides[1] + sides[2]) as\
    \ f64 / 2.0;\n    (s * (s - sides[0] as f64) * (s - sides[1] as f64) * (s - sides[2]\
    \ as f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmppt3f750k.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut v =\
    \ vec![a, b, c];\n    v.sort();\n    if v[0] + v[1] > v[2] {\n        return (v[0]\
    \ + v[1] + v[2]) as f64 * 0.5 * (v[2] - v[0] + v[1] - v[0]) as f64;\n    }\n \
    \   -1.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18.0`,\n right: `6.0`', /tmp/tmpeudg6zz1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxa5m2a35.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        let s = (a + b + c) as f64 / 2.0;\n\
    \        ((s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt() * 100.0).round()\
    \ / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       ((s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt() * 100.0).round()\
    \ / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpr8qplxtu.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64;\n       \
    \ let half_p = p / 2.0;\n        (half_p * (half_p - a as f64) * (half_p - b as\
    \ f64) * (half_p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpothrmn75.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        // the biggest side is c\n        let\
    \ s = (a + b + c) as f64 / 2.0;\n        // Heron's formula\n        (s * (s -\
    \ a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpmsc7j5jq.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = 0.5\
    \ * (a + b + c) as f64;\n    let area = s * (s - a as f64) * (s - b as f64) *\
    \ (s - c as f64);\n    if area > 0.0 {\n        area.sqrt()\n    } else {\n  \
    \      -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpngmajo0b.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // TODO: Implementation\
    \ goes here\n    return -1.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmp60kitamy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // your code\
    \ here\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpboc7fbsl.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a <= 0 ||\
    \ b <= 0 || c <= 0 {\n        return -1.0;\n    }\n    let s = (a + b + c) as\
    \ f64 / 2.0;\n    let area = (s * (s - a as f64) * (s - b as f64) * (s - c as\
    \ f64)).sqrt();\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `NaN`,\n right: `-1.0`', /tmp/tmpk8ux48j6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxa5m2a35.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmps9khq2h_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let total =\
    \ a + b + c;\n    let semi_perimeter = total / 2;\n    let area = (semi_perimeter\
    \ * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c)) as f64;\n\
    \    if area > 0.0 {\n        return (area as f64).sqrt().round() / 100.0;\n \
    \   }\n    return -1.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.06`,\n right: `6.0`', /tmp/tmp0hfribhj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxa5m2a35.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // sort the\
    \ sides\n    let mut v = vec![a, b, c];\n    v.sort();\n    let a = v[0];\n  \
    \  let b = v[1];\n    let c = v[2];\n\n    // check if the triangle is valid\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        let s\
    \ = p * (p - a as f64) * (p - b as f64) * (p - c as f64);\n        return (s.sqrt()\
    \ * 100.0).round() / 100.0;\n    }\n    -1.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    let area = (s * (s - a as f64) * (s - b as f64)\
    \ * (s - c as f64)).sqrt();\n    if area.is_nan() {\n        -1.0\n    } else\
    \ {\n        area\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp7x1t49fy.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1]\
    \ as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n        let p = (a\
    \ + b + c) / 2.0;\n        (p * (p - a) * (p - b) * (p - c)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpwhovmzdb.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    if a < s && b < s && c < s {\n        s.powf(2.0)\
    \ - a as f64 * s + b as f64 * s - c as f64 * s\n    } else {\n        -1.0\n \
    \   }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppqw094sr.rs:13:12\n   |\n\
    13 |     if a < s && b < s && c < s {\n   |            ^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppqw094sr.rs:13:21\n \
    \  |\n13 |     if a < s && b < s && c < s {\n   |                     ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppqw094sr.rs:13:30\n\
    \   |\n13 |     if a < s && b < s && c < s {\n   |                           \
    \   ^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // TODO Complete\
    \ this function so that it returns the area of the triangle\n    // rounded to\
    \ 2 decimal points.\n    if a + b > c && a + c > b && b + c > a {\n        return\
    \ ((a + b + c) as f64 / 2.0).sqrt() * (0.5 * (a + b + c) as f64 / 2.0).sqrt();\n\
    \    }\n    -1.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4.242640687119285`,\n right: `6.0`', /tmp/tmpu72vvwfw.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let sides =\
    \ vec![a, b, c];\n    sides.iter().max().unwrap() >= &(a + b + c - sides.iter().max().unwrap())\
    \ as &isize\n        && sides.iter().min().unwrap() > &0\n        && a + b + c\
    \ > 0\n        && a.is_positive()\n        && b.is_positive()\n        && c.is_positive()\n\
    \    {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64)\
    \ * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `{`\n  --> /tmp/tmpk5yi7l7p.rs:18:27\n   |\n\
    18 |         && c.is_positive()\n   |                           ^ help: add `;`\
    \ here\n19 |     {\n   |     - unexpected token\n\nerror: expected expression,\
    \ found keyword `else`\n  --> /tmp/tmpk5yi7l7p.rs:22:7\n   |\n22 |     } else\
    \ {\n   |       ^^^^ expected expression\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpk5yi7l7p.rs:13:5\n   |\n13 | /     sides.iter().max().unwrap() >=\
    \ &(a + b + c - sides.iter().max().unwrap()) as &isize\n14 | |         && sides.iter().min().unwrap()\
    \ > &0\n15 | |         && a + b + c > 0\n16 | |         && a.is_positive()\n17\
    \ | |         && b.is_positive()\n18 | |         && c.is_positive()\n   | |  \
    \                        ^- help: consider using a semicolon here\n   | |__________________________|\n\
    \   |                            expected `()`, found `bool`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk5yi7l7p.rs:21:9\n   |\n21 |         (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found `f64`\n   |\nhelp: consider using a semicolon here\n  \
    \ |\n21 |         (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt();\n\
    \   |                                                                      +\n\
    help: you might have meant to return this value\n   |\n21 |         return (p\
    \ * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt();\n   |         ++++++\
    \                                                              +\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Check if\
    \ valid triangle\n    if a + b > c && a + c > b && b + c > a {\n        // Area\
    \ of a triangle = sqrt(s(s-a)(s-b)(s-c)) where s = perimeter/2\n        let s\
    \ = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) *\
    \ (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmppycmsjzb.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // TODO\n \
    \   if a + b <= c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n\
    \    let p = (a + b + c) as f64 / 2.0;\n    return (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt();\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpyuyy4z24.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // if triangle\
    \ is impossible, return -1\n    let max_side = a.max(b).max(c);\n    if a + b\
    \ + c - max_side <= max_side {\n        return -1.0;\n    }\n    // calculate\
    \ area\n    let s = (a + b + c) as f64 / 2.0;\n    (s * (s - a as f64) * (s -\
    \ b as f64) * (s - c as f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpu0s1urxk.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut arr\
    \ = [a, b, c];\n    arr.sort();\n    if arr[0] + arr[1] > arr[2] {\n        arr[0]\
    \ as f64 * arr[1] as f64 * f64::sin(f64::acos((arr[2] as f64 * arr[2] as f64 -\
    \ arr[0] as f64 * arr[0] as f64 - arr[1] as f64 * arr[1] as f64) / (2.0 * arr[0]\
    \ as f64 * arr[1] as f64))) / 2.0\n    } else {\n        -1.0\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpre8q27lt.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpaynr2fxc.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut output\
    \ = -1.0;\n    if a + b > c && a + c > b && b + c > a {\n        output = f64::from(a\
    \ * b) / 2f64;\n    }\n    output\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmpei99p87k.rs:14:18\n   |\n14 |         output = f64::from(a * b) / 2f64;\n\
    \   |                  ^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `f64`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <f32 as From<i16>>\n             <f32 as From<i8>>\n           \
    \  <f32 as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let sum = a\
    \ + b + c;\n    if a < 0 || b < 0 || c < 0 || sum <= 2 * (a.max(b).max(c)) {\n\
    \        -1.0\n    } else {\n        let p = (sum as f64) / 2.0;\n        (p *\
    \ (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpzkqn62hg.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut arr\
    \ = [a, b, c];\n    arr.sort();\n    let mut s = (arr[0] + arr[1] + arr[2]) as\
    \ f64 / 2.0;\n    if arr[0] + arr[1] > arr[2] {\n        s * (s - arr[0] as f64)\
    \ * (s - arr[1] as f64) * (s - arr[2] as f64)\n    } else {\n        -1.0\n  \
    \  }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36.0`,\n right: `6.0`', /tmp/tmpt45k_93f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = 0.5 * (a + b + c) as f64;\n \
    \       ((s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt() * 100.).round()\
    \ / 100.\n    } else {\n        -1.\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpaynr2fxc.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut side_vec\
    \ = vec![a, b, c];\n    side_vec.sort();\n    if side_vec[0] + side_vec[1] <=\
    \ side_vec[2] {\n        return -1f64;\n    }\n    let p = (a + b + c) as f64\
    \ / 2f64;\n    return (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt();\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpscwjo4v3.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxa5m2a35.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    //if a + b\
    \ > c && a + c > b && b + c > a {\n    //    let s = (a + b + c) as f64 / 2.0;\n\
    \    //    return (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n\
    \    //}\n    //-1.0\n    if a + b > c && a + c > b && b + c > a {\n        let\
    \ s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64)\
    \ * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp96xwe_pf.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b)\
    \ > c && (a + c) > b && (b + c) > a {\n        let s = (a + b + c) as f64 / 2f64;\n\
    \        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    }\
    \ else {\n        -1f64\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpakbhcz15.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpr8qplxtu.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Checks if\
    \ the triangle is valid\n    if is_valid_triangle(a, b, c) {\n        let p =\
    \ (a + b + c) as f64 / 2.0;\n        return p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64).sqrt();\n    }\n    // Return -1 if triangle is invalid\n \
    \   return -1.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_valid_triangle` in this scope\n\
    \  --> /tmp/tmp8334g31g.rs:13:8\n   |\n13 |     if is_valid_triangle(a, b, c)\
    \ {\n   |        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Your code\
    \ here\n    let mut arr = [a, b, c];\n    arr.sort();\n    if arr[0] + arr[1]\
    \ <= arr[2] {\n        return -1.0;\n    }\n    let p = (a + b + c) as f64;\n\
    \    let p2 = p / 2.0;\n    let area = (p2 * (p2 - a as f64) * (p2 - b as f64)\
    \ * (p2 - c as f64)).sqrt();\n    let round = area.round();\n    return round;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.0`,\n right: `8.18`', /tmp/tmpfds1480n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        return ((p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\
    \ * 100.0).round() / 100.0;\n    }\n    return -1.0;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        let s = (a + b + c) as f64 / 2.0;\n\
    \        ((s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt() * 100.0).round()\
    \ / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a <= 0 ||\
    \ b <= 0 || c <= 0 {\n        return -1.0;\n    }\n    if a + b > c && a + c >\
    \ b && b + c > a {\n        let s = (a + b + c) as f64;\n        let area = (s\
    \ * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt();\n        return\
    \ (area * 100.0).round() / 100.0;\n    }\n    return -1.0;\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `77.77`,\n right: `6.0`', /tmp/tmplxfw2ivr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Calculate\
    \ the largest side\n    let max = if a > b {\n        if a > c { a } else { c\
    \ }\n    } else {\n        if b > c { b } else { c }\n    };\n\n    // Only calculate\
    \ area if the sum of the other two sides is greater than\n    // the max\n   \
    \ if a + b + c - max > max {\n        let p = (a + b + c) as f64 / 2.0;\n    \
    \    (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpjtfe4aha.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpaynr2fxc.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut tmp\
    \ = [a, b, c];\n    tmp.sort();\n    if tmp[0] + tmp[1] <= tmp[2] {\n        return\
    \ -1.0;\n    }\n    let p = (a + b + c) as f64 / 2.0;\n    (p * (p - a as f64)\
    \ * (p - b as f64) * (p - c as f64)).sqrt()\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpt6vya96n.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        let p = (a + b + c) as f64 / 2f64;\n\
    \        let res = p * (p - a as f64) * (p - b as f64) * (p - c as f64);\n   \
    \     res.sqrt()\n    } else {\n        -1f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpw3j0jn3x.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area:\
    \ f64 = -1.0;\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n        let\
    \ s = (a + b + c) as f64 / 2.0;\n        area = (s * (s - a as f64) * (s - b as\
    \ f64) * (s - c as f64)).sqrt();\n    }\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1p9cqd8f.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a < 0 ||\
    \ b < 0 || c < 0 {\n        return -1.0;\n    }\n    let mut sides = [a, b, c];\n\
    \    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let s = (sides[0]\
    \ + sides[1] + sides[2]) as f64 / 2.0;\n        (s * (s - sides[0] as f64) * (s\
    \ - sides[1] as f64) * (s - sides[2] as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpm6q3ic1y.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a > 0)\
    \ && (b > 0) && (c > 0) && (a + b > c) && (a + c > b) && (b + c > a) {\n     \
    \   let s = (a + b + c) as f64 / 2.0;\n        let root = s * (s - a as f64) *\
    \ (s - b as f64) * (s - c as f64);\n        return root.sqrt();\n    } else {\n\
    \        return -1.0;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxvj4xzep.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  if a + b > c\
    \ && a + c > b && b + c > a {\n    ((a as f64) + (b as f64) + (c as f64)) / 2.0\n\
    \  } else {\n    -1.0\n  }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.5`,\n right: `8.18`', /tmp/tmp6ohfms90.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // check validity\
    \ of triangle\n    if a + b > c && a + c > b && b + c > a {\n        // calculate\
    \ area using Heron's formula\n        let s = (a + b + c) as f64 / 2.0;\n    \
    \    (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpo6r_avag.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp08x192lc.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a > 0 &&\
    \ b > 0 && c > 0 && a + b > c && a + c > b && b + c > a {\n        let p = (a\
    \ + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p -\
    \ c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpxh57t1qd.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        ((a as f64 + b as f64 + c as f64)\
    \ / 2.0).sqrt() * (((a as f64 + b as f64 + c as f64) / 2.0) - a as f64).sqrt()\
    \ * (((a as f64 + b as f64 + c as f64) / 2.0) - b as f64).sqrt()\n    } else {\n\
    \        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4.373213921133975`,\n right: `8.18`', /tmp/tmpihd_cwkd.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  if (a + b > c)\
    \ && (a + c > b) && (b + c > a) {\n    let p = (a + b + c) as f64 / 2.0;\n   \
    \ ((p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt() * 100.0).round()\
    \ / 100.0\n  } else {\n    -1.0\n  }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match (a, b,\
    \ c) {\n        (x, y, z) if x + y <= z => -1f64,\n        (x, y, z) if x + z\
    \ <= y => -1f64,\n        (x, y, z) if y + z <= x => -1f64,\n        (x, y, z)\
    \ => {\n            let s = (x + y + z) as f64 / 2f64;\n            (s * (s -\
    \ x as f64) * (s - y as f64) * (s - z as f64)).sqrt()\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpsun5mkrc.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b)\
    \ > c && (a + c) > b && (b + c) > a {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        ((p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt() * 100.0).round()\
    \ / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <=\
    \ c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n\n    let p =\
    \ (a + b + c) as f64 / 2.0;\n    (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpbfhjzfvk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpaynr2fxc.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut nums\
    \ = [a, b, c];\n    nums.sort();\n    if nums[0] + nums[1] <= nums[2] {\n    \
    \    return -1f64;\n    }\n    let s = (a + b + c) as f64 / 2f64;\n    (s * (s\
    \ - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp7i4x291h.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ |a: isize, b: isize, c: isize| {\n        let (a, b, c) = sort3(a, b, c);\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    };\n    match (a, b, c) {\n        (a,\
    \ b, c) if a + b > c => area(a, b, c),\n        _ => -1.0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort3` in this scope\n  --> /tmp/tmpkjdp6dvi.rs:13:25\n\
    \   |\n13 |         let (a, b, c) = sort3(a, b, c);\n   |                    \
    \     ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    let triangle_area = (s * (s - a as f64) * (s - b\
    \ as f64) * (s - c as f64)).sqrt();\n    if triangle_area.is_nan() {\n       \
    \ -1.0\n    } else {\n        triangle_area\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp6jlk0nuk.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    if a + b > c && a + c > b && b + c > a {\n     \
    \   ((s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt() * 100.0).round()\
    \ / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let s = (sides[0] + sides[1] + sides[2]) as f64 / 2.0;\n        ((s *\
    \ (s - sides[0] as f64) * (s - sides[1] as f64) * (s - sides[2] as f64)).sqrt()\
    \ * 100.0).round() / 100.0\n    } else {\n        -1.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <=\
    \ c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    (s * (s - a as f64) * (s - b as f64) * (s - c as\
    \ f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpv18bd2lq.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a <= 0 ||\
    \ b <= 0 || c <= 0 {\n        return -1.0;\n    }\n    let p = (a + b + c) as\
    \ f64 / 2.0;\n    let a = (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt();\n\
    \    a.round() / 100.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.06`,\n right: `6.0`', /tmp/tmp_67dsdu9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpjhb_1o4s.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    if s < a as f64 || s < b as f64 || s < c as f64\
    \ {\n        return -1.0;\n    }\n    s * (s - a as f64) * (s - b as f64) * (s\
    \ - c as f64)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36.0`,\n right: `6.0`', /tmp/tmp07o0krs6.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let [a, b, c] = sides;\n    if a +\
    \ b > c {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64)\
    \ * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpqn30h5wn.rs:14:9\n\
    \   |\n14 |     let [a, b, c] = sides;\n   |         ^^^^^^^^^   ----- help: consider\
    \ slicing here: `sides[..]`\n   |         |\n   |         pattern cannot match\
    \ with input type `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0529`.\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        let area = p * (p - a as f64)\
    \ * (p - b as f64) * (p - c as f64);\n        if area >= 0.0 {\n            (area.sqrt()\
    \ * 100.0).round() / 100.0\n        } else {\n            -1.0\n        }\n  \
    \  } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <=\
    \ c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    (s * (s - a as f64) * (s - b as f64) * (s - c as\
    \ f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpv18bd2lq.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       let root = s * (s - a as f64) * (s - b as f64) * (s - c as f64);\n   \
    \     return (root.sqrt() * 100.0).round() / 100.0;\n    }\n    -1.0\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  if a + b > c\
    \ && a + c > b && b + c > a {\n    let p = (a + b + c) as f64;\n    let s = p\
    \ / 2.0;\n    (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n\
    \  } else {\n    -1.0\n  }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpzoleusrr.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpjhb_1o4s.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let s = (sides[0] + sides[1] + sides[2]) as f64 / 2.0;\n        s * (s\
    \ - sides[0] as f64) * (s - sides[1] as f64) * (s - sides[2] as f64)\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36.0`,\n right: `6.0`', /tmp/tmpm2jc23p7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut v =\
    \ vec![a, b, c];\n    v.sort();\n    let a = v[0] as f64;\n    let b = v[1] as\
    \ f64;\n    let c = v[2] as f64;\n    if a + b > c {\n        let p = (a + b +\
    \ c) / 2.0;\n        (p * (p - a) * (p - b) * (p - c)).sqrt()\n    } else {\n\
    \        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpt0__u3w0.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let square\
    \ = |x: isize| -> f64 { x as f64 * x as f64 };\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s -\
    \ square(a)) * (s - square(b)) * (s - square(c))).sqrt()\n    } else {\n     \
    \   -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `NaN`,\n right: `6.0`', /tmp/tmp5y29vg57.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let p = 0.5\
    \ * (a + b + c) as f64;\n    (p * (p - a as f64) * (p - b as f64) * (p - c as\
    \ f64)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `NaN`,\n right: `-1.0`', /tmp/tmppxfiv0rg.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ ((a + b + c) as f64 / 2.0).sqrt();\n    if a + b > c && a + c > b && b + c >\
    \ a {\n        area * area\n    } else {\n        -1.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5.999999999999999`,\n right: `6.0`', /tmp/tmppm61fl3h.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut arr\
    \ = [a, b, c];\n    arr.sort();\n    if arr[0] + arr[1] > arr[2] {\n        ((arr[0]\
    \ + arr[1] + arr[2]) as f64 / 2.0 * (arr[0] + arr[1] + arr[2]) as f64 / 2.0\n\
    \            - arr[0] as f64 * arr[0] as f64\n            - arr[1] as f64 * arr[1]\
    \ as f64\n            - arr[2] as f64 * arr[2] as f64).sqrt()\n    } else {\n\
    \        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `NaN`,\n right: `6.0`', /tmp/tmpyru07spf.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpjhb_1o4s.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut triangle\
    \ = vec![a, b, c];\n    triangle.sort();\n    let a = triangle[0] as f64;\n  \
    \  let b = triangle[1] as f64;\n    let c = triangle[2] as f64;\n    if a + b\
    \ > c {\n        (a + b + c) / 2.0 * ((a + b + c) / 2.0 - a) * ((a + b + c) /\
    \ 2.0 - b) * ((a + b + c) / 2.0 - c)\n    } else {\n        -1.0\n    }.sqrt()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `NaN`,\n right: `-1.0`', /tmp/tmp7yap102z.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a > 0 &&\
    \ b > 0 && c > 0 && a + b > c && a + c > b && b + c > a {\n        let p = (a\
    \ + b + c) as f64 / 2f64;\n        ((p - a as f64) * (p - b as f64) * (p - c as\
    \ f64) * p).sqrt()\n    } else {\n        -1f64\n    }\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpki44g8bq.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = 0.5 * (a + b + c) as f64;\n \
    \       (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpg8qybccq.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmps9khq2h_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let res = (a\
    \ + b + c) as f64 / 2.0;\n    if res * (res - a as f64) * (res - b as f64) * (res\
    \ - c as f64) <= 0.0 {\n        -1.0\n    } else {\n        let mut result = (res\
    \ * (res - a as f64) * (res - b as f64) * (res - c as f64)).sqrt();\n        let\
    \ mut decimals = result.to_string().split(\".\").collect::<Vec<&str>>();\n   \
    \     if decimals.len() == 2 {\n            let mut result_str = String::new();\n\
    \            let mut count = 2;\n            for char in decimals[1].chars() {\n\
    \                result_str.push(char);\n                count -= 1;\n       \
    \         if count == 0 {\n                    break;\n                }\n   \
    \         }\n            result = result_str.parse::<f64>().unwrap();\n      \
    \  }\n        result\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp94jzsfdt.rs:17:13\n\
    \   |\n17 |         let mut decimals = result.to_string().split(\".\").collect::<Vec<&str>>();\n\
    \   |             ----^^^^^^^^\n   |             |\n   |             help: remove\
    \ this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0716]:\
    \ temporary value dropped while borrowed\n  --> /tmp/tmp94jzsfdt.rs:17:28\n  \
    \ |\n17 |         let mut decimals = result.to_string().split(\".\").collect::<Vec<&str>>();\n\
    \   |                            ^^^^^^^^^^^^^^^^^^                          \
    \        - temporary value is freed at the end of this statement\n   |       \
    \                     |\n   |                            creates a temporary which\
    \ is freed while still in use\n18 |         if decimals.len() == 2 {\n   |   \
    \         -------------- borrow later used here\n   |\n   = note: consider using\
    \ a `let` binding to create a longer lived value\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0716`.\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a: f64\
    \ = a as f64;\n    let b: f64 = b as f64;\n    let c: f64 = c as f64;\n    let\
    \ p = (a + b + c) / 2.0;\n    if a + b > c && a + c > b && b + c > a {\n     \
    \   (p * (p - a) * (p - b) * (p - c)).sqrt()\n    } else {\n        -1.0\n   \
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp21tqwg_i.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if is_valid_triangle(a,\
    \ b, c) {\n        let p = (a + b + c) as f64 / 2.0;\n        ((p - a as f64)\
    \ * (p - b as f64) * (p - c as f64) * p).sqrt()\n    } else {\n        -1.0\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_valid_triangle` in this scope\n\
    \  --> /tmp/tmp0gkt8zez.rs:12:8\n   |\n12 |     if is_valid_triangle(a, b, c)\
    \ {\n   |        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    let area = s * (s - a as f64) * (s - b as f64) *\
    \ (s - c as f64);\n    if area > 0.0 {\n        area.sqrt()\n    } else {\n  \
    \      -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpqpakgsj5.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut vec\
    \ = vec![a, b, c];\n    vec.sort();\n    if vec[0] + vec[1] > vec[2] {\n     \
    \   let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as\
    \ f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpl2_xnmy3.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a = a as\
    \ f64;\n    let b = b as f64;\n    let c = c as f64;\n    let p = (a + b + c)\
    \ / 2.0;\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n        (p * (p\
    \ - a) * (p - b) * (p - c)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpn_t7611g.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a > 0)\
    \ && (b > 0) && (c > 0) && ((a + b) > c) && ((a + c) > b) && ((b + c) > a) {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp0zlekfqs.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    let p = (a + b + c) as f64 / 2.0;\n    if a + b > c {\n        (p * (p -\
    \ a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpp6ewxm3p.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let p = (a\
    \ + b + c) as f64 / 2.0;\n    let s = p * (p - a as f64) * (p - b as f64) * (p\
    \ - c as f64);\n    if s > 0.0 { s.sqrt() } else { -1.0 }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp66p1tyca.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let sum_ab\
    \ = a + b;\n    let sum_bc = b + c;\n    let sum_ac = a + c;\n    if sum_ab >\
    \ c && sum_bc > a && sum_ac > b {\n        let p = (sum_ab + sum_bc + sum_ac)\
    \ as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `77.76888838089432`,\n right: `6.0`', /tmp/tmpwqd2n1_l.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut side_values\
    \ = [a, b, c];\n    side_values.sort();\n    let a = side_values[0] as f64;\n\
    \    let b = side_values[1] as f64;\n    let c = side_values[2] as f64;\n    if\
    \ a + b <= c {\n        return -1.0;\n    }\n    let p = (a + b + c) / 2.0;\n\
    \    let area = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    (area * 100.0).round()\
    \ / 100.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <=\
    \ c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n\n    let s =\
    \ (a + b + c) as f64 / 2.0;\n    let area = s * (s - a as f64) * (s - b as f64)\
    \ * (s - c as f64);\n    (area.sqrt() * 100.0).round() / 100.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let sides =\
    \ [a, b, c];\n    sides.iter().sum::<isize>() - sides.iter().max().unwrap_or(&0)\
    \ > *sides.iter().max().unwrap_or(&0) &&\n        sides.iter().sum::<isize>()\
    \ > 0 &&\n        sides.iter().all(|x| x > &0)\n        && a != b\n        &&\
    \ b != c\n        && a != c\n        && *sides.iter().max().unwrap_or(&0) < sides.iter().sum::<isize>()\
    \ - *sides.iter().max().unwrap_or(&0)\n        && *sides.iter().max().unwrap_or(&0)\
    \ > 0\n    {\n        let s = sides.iter().sum::<isize>() as f64 / 2.0;\n    \
    \    (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt().round() / 100.0\n\
    \    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `{`\n  --> /tmp/tmpl21k6vu2.rs:20:49\n   |\n\
    20 |         && *sides.iter().max().unwrap_or(&0) > 0\n   |                  \
    \                               ^ help: add `;` here\n21 |     {\n   |     - unexpected\
    \ token\n\nerror: expected expression, found keyword `else`\n  --> /tmp/tmpl21k6vu2.rs:24:7\n\
    \   |\n24 |     } else {\n   |       ^^^^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl21k6vu2.rs:13:5\n   |\n13 | /     sides.iter().sum::<isize>()\
    \ - sides.iter().max().unwrap_or(&0) > *sides.iter().max().unwrap_or(&0) &&\n\
    14 | |         sides.iter().sum::<isize>() > 0 &&\n15 | |         sides.iter().all(|x|\
    \ x > &0)\n16 | |         && a != b\n...  |\n19 | |         && *sides.iter().max().unwrap_or(&0)\
    \ < sides.iter().sum::<isize>() - *sides.iter().max().unwrap_or(&0)\n20 | |  \
    \       && *sides.iter().max().unwrap_or(&0) > 0\n   | |                     \
    \                           ^- help: consider using a semicolon here\n   | |________________________________________________|\n\
    \   |                                                  expected `()`, found `bool`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl21k6vu2.rs:23:9\n   |\n23 | \
    \        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt().round()\
    \ / 100.0\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found `f64`\n   |\nhelp: you might have meant to return this\
    \ value\n   |\n23 |         return (s * (s - a as f64) * (s - b as f64) * (s -\
    \ c as f64)).sqrt().round() / 100.0;\n   |         ++++++                    \
    \                                                          +\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        ((a as f64 + b as f64 + c as f64) / 2.0).sqrt()\
    \ * 2.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4.898979485566356`,\n right: `6.0`', /tmp/tmpxbefv0qh.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let sum = (a\
    \ + b + c) as f64;\n    let p = sum / 2.0;\n    let area = (p * (p - a as f64)\
    \ * (p - b as f64) * (p - c as f64)).sqrt();\n    if area > 0.0 { area } else\
    \ { -1.0 }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmppdwn2lik.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let p = (a\
    \ + b + c) as f64 / 2f64;\n    if p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64) <= 0f64 {\n        -1f64\n    } else {\n        (p * (p - a as f64)\
    \ * (p - b as f64) * (p - c as f64)).sqrt()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp1fau_z16.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b <=\
    \ c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n    let p = (a\
    \ + b + c) as f64 / 2.0;\n    let area = p * (p - a as f64) * (p - b as f64) *\
    \ (p - c as f64);\n    (area.sqrt() * 100.0).round() / 100.0\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        // Can find a formula for area of a triangle\
    \ if you know the side lengths,\n        // but we don't need to actually calculate\
    \ it. We just need to know if\n        // it's a triangle or not, so we can return\
    \ the area of a valid triangle\n        // or -1 for an invalid triangle.\n  \
    \      6.0\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6.0`,\n right: `8.18`', /tmp/tmp4djkojdx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  if !valid_triangle(a,\
    \ b, c) {\n    return -1.0;\n  }\n  let p = (a + b + c) as f64 / 2.0;\n  (p *\
    \ (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `valid_triangle` in this scope\n  -->\
    \ /tmp/tmp2b4c5184.rs:12:7\n   |\n12 |   if !valid_triangle(a, b, c) {\n   | \
    \      ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a <= 0 ||\
    \ b <= 0 || c <= 0 {\n        return -1.0;\n    }\n\n    let s = (a + b + c) as\
    \ f64 / 2.0;\n    let area = s * (s - a as f64) * (s - b as f64) * (s - c as f64);\n\
    \    if area <= 0.0 {\n        return -1.0;\n    }\n\n    return (area.sqrt()\
    \ * 100.0).round() / 100.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       let area = (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt();\n\
    \        return area;\n    }\n    -1.0\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpg4sev4pc.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1]\
    \ as f64;\n    let c = sides[2] as f64;\n    let s = (a + b + c) / 2.0;\n    if\
    \ a + b > c {\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n\
    \        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpkbv1zzmm.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let (x, y,\
    \ z) = if a < b {\n        if a < c {\n            (a, b, c)\n        } else {\n\
    \            (c, a, b)\n        }\n    } else {\n        if b < c {\n        \
    \    (b, a, c)\n        } else {\n            (c, a, b)\n        }\n    };\n \
    \   let p = (x + y + z) as f64 / 2.0;\n    if x + y <= z {\n        -1.0\n   \
    \ } else {\n        (p * (p - x as f64) * (p - y as f64) * (p - z as f64)).sqrt()\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpm7c0uvmq.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b <=\
    \ c) || (a + c <= b) || (b + c <= a) {\n        return -1.0;\n    }\n    let p\
    \ = (a + b + c) as f64 / 2.0;\n    ((p * (p - a as f64) * (p - b as f64) * (p\
    \ - c as f64)).sqrt() * 100.0).round() / 100.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area:\
    \ f64 = -1.0;\n    if is_valid_triangle(a, b, c) {\n        let s = (a + b + c)\
    \ as f64 / 2.0;\n        area = (s * (s - a as f64) * (s - b as f64) * (s - c\
    \ as f64)).sqrt();\n    }\n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_valid_triangle` in this scope\n\
    \  --> /tmp/tmpuvh9v_9p.rs:13:8\n   |\n13 |     if is_valid_triangle(a, b, c)\
    \ {\n   |        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let (a, b,\
    \ c) = (a as f64, b as f64, c as f64);\n    if (a + b > c) && (a + c > b) && (b\
    \ + c > a) {\n        let s = (a + b + c) / 2.0;\n        return s.sqrt() * (s\
    \ - a) * (s - b) * (s - c);\n    }\n    -1.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14.696938456699067`,\n right: `6.0`', /tmp/tmph6aqf8sq.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let (a, b,\
    \ c) = (a as f64, b as f64, c as f64);\n    let s = (a + b + c) / 2.0;\n    if\
    \ a + b > c && a + c > b && b + c > a {\n        (s * (s - a) * (s - b) * (s -\
    \ c)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp2h39j891.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a: f64\
    \ = a as f64;\n    let b: f64 = b as f64;\n    let c: f64 = c as f64;\n    if\
    \ a + b > c && a + c > b && b + c > a {\n        let p = (a + b + c) / 2.0;\n\
    \        ((p * (p - a) * (p - b) * (p - c)).sqrt() * 100.0).round() / 100.0\n\
    \    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a = a as\
    \ f64;\n    let b = b as f64;\n    let c = c as f64;\n    if a + b > c && a +\
    \ c > b && b + c > a {\n        let s = (a + b + c) / 2.0;\n        (s * (s -\
    \ a) * (s - b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp4nba42nq.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let (a, b,\
    \ c) = (a as f64, b as f64, c as f64);\n    if a + b <= c || a + c <= b || b +\
    \ c <= a {\n        -1.0\n    } else {\n        let p = (a + b + c) / 2.0;\n \
    \       (p * (p - a) * (p - b) * (p - c)).sqrt()\n    }\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpuv5dxrkw.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut tr\
    \ = vec![a, b, c];\n    tr.sort();\n    if tr[0] + tr[1] > tr[2] {\n        let\
    \ s = (tr[0] + tr[1] + tr[2]) as f64 / 2.0;\n        (s * (s - tr[0] as f64) *\
    \ (s - tr[1] as f64) * (s - tr[2] as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp_u38g6jb.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp08x192lc.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let perimeter = a + b + c;\n        let\
    \ s = perimeter as f64 / 2.0;\n        let area = (s * (s - a as f64) * (s - b\
    \ as f64) * (s - c as f64)).sqrt();\n        return area;\n    } else {\n    \
    \    return -1.0;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp7z9bfvhp.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n \
    \       let area = s * (s - a as f64) * (s - b as f64) * (s - c as f64);\n   \
    \     return (area.sqrt() * 100.0).round() / 100.0;\n    }\n    -1.0\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       ((p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.449489742783178`,\n right: `6.0`', /tmp/tmpnwda_cbl.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a < 1 ||\
    \ b < 1 || c < 1 {\n        return -1 as f64;\n    }\n    if a + b <= c || a +\
    \ c <= b || b + c <= a {\n        return -1 as f64;\n    }\n    let p = (a + b\
    \ + c) as f64 / 2.0;\n    (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpgja61djz.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut my_vec\
    \ = vec![a, b, c];\n    my_vec.sort();\n    let p = my_vec[0] + my_vec[1];\n \
    \   if p > my_vec[2] {\n        let s = (p as f64 + my_vec[2] as f64) / 2.0;\n\
    \        return (s * (s - my_vec[0] as f64) * (s - my_vec[1] as f64) * (s - my_vec[2]\
    \ as f64)).sqrt();\n    }\n    -1.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpskr5ql_d.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ vec![a, b, c];\n    s.sort();\n    if s[0] + s[1] <= s[2] {\n        return\
    \ -1.0;\n    }\n    ((s[0] + s[1] + s[2]) as f64 / 2.0).sqrt() * ((s[0] + s[1]\
    \ + s[2]) as f64 / 2.0 - s[0] as f64).sqrt() * ((s[0] + s[1] + s[2]) as f64 /\
    \ 2.0 - s[1] as f64).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11.570436465406134`,\n right: `8.18`', /tmp/tmpa2azq7j2.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    let t = s * (s - a as f64) * (s - b as f64) * (s\
    \ - c as f64);\n    if t <= 0.0 {\n        -1.0\n    } else {\n        t.sqrt()\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpdce5wfod.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut v =\
    \ [a, b, c];\n    v.sort();\n    if v[0] + v[1] > v[2] {\n        let s = (v[0]\
    \ + v[1] + v[2]) as f64 / 2.0;\n        (s * (s - v[0] as f64) * (s - v[1] as\
    \ f64) * (s - v[2] as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmphj0xbuqu.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = -1_f64;\n    let small = [a, b, c].into_iter().min().unwrap();\n    let medium\
    \ = [a, b, c].into_iter().max().unwrap();\n    let large = [a, b, c].into_iter().sum::<isize>()\
    \ - small - medium;\n    if small + medium > large {\n        let p = (a + b +\
    \ c) as f64 / 2_f64;\n        area = (p * (p - a as f64) * (p - b as f64) * (p\
    \ - c as f64)).sqrt();\n    }\n    area\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0716]: temporary value dropped while borrowed\n  --> /tmp/tmpcjxsjl5k.rs:13:17\n\
    \   |\n13 |     let small = [a, b, c].into_iter().min().unwrap();\n   |      \
    \           ^^^^^^^^^                           - temporary value is freed at\
    \ the end of this statement\n   |                 |\n   |                 creates\
    \ a temporary which is freed while still in use\n14 |     let medium = [a, b,\
    \ c].into_iter().max().unwrap();\n15 |     let large = [a, b, c].into_iter().sum::<isize>()\
    \ - small - medium;\n   |                                                    \
    \    ----- borrow later used here\n   |\n   = note: consider using a `let` binding\
    \ to create a longer lived value\n\nerror[E0716]: temporary value dropped while\
    \ borrowed\n  --> /tmp/tmpcjxsjl5k.rs:14:18\n   |\n14 |     let medium = [a, b,\
    \ c].into_iter().max().unwrap();\n   |                  ^^^^^^^^^            \
    \               - temporary value is freed at the end of this statement\n   |\
    \                  |\n   |                  creates a temporary which is freed\
    \ while still in use\n15 |     let large = [a, b, c].into_iter().sum::<isize>()\
    \ - small - medium;\n   |                                                    \
    \            ------ borrow later used here\n   |\n   = note: consider using a\
    \ `let` binding to create a longer lived value\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0716`.\n"
  stdout: ''
  timestamp: 1659976590
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let (a, b,\
    \ c) = (a as f64, b as f64, c as f64);\n    let s = (a + b + c) / 2.0;\n    if\
    \ s <= a || s <= b || s <= c {\n        -1.0\n    } else {\n        s * (s - a)\
    \ * (s - b) * (s - c)\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36.0`,\n right: `6.0`', /tmp/tmpzxlzli1j.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp08x192lc.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // FIXME\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpgu3wpzsn.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    if s <= a as f64 && s <= b as f64 && s <= c as f64\
    \ {\n        -1.0\n    } else {\n        s * (s - a as f64) * (s - b as f64) *\
    \ (s - c as f64)\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36.0`,\n right: `6.0`', /tmp/tmplfbtwj1g.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    if a < 1 || b < 1 || c < 1 || a + b <= c || a +\
    \ c <= b || b + c <= a {\n        -1.0\n    } else {\n        (s * (s - a as f64)\
    \ * (s - b as f64) * (s - c as f64)).sqrt()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmpnis6vlq2.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let (s1, s2,\
    \ s3) = (a as f64, b as f64, c as f64);\n    let s = (s1 + s2 + s3) / 2.0;\n \
    \   if s > s1 && s > s2 && s > s3 {\n        (s * (s - s1) * (s - s2) * (s - s3)).sqrt()\n\
    \    } else {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp2uxy6ifd.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b\
    \ = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a + b <= c { return\
    \ -1.0; }\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s -\
    \ b) * (s - c)).sqrt();\n    area.round() / 100.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.06`,\n right: `6.0`', /tmp/tmpu1kbuod5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  if a + b <= c\
    \ || a + c <= b || b + c <= a {\n    return -1.0;\n  }\n  let s = (a + b + c)\
    \ as f64 / 2.0;\n  let area = s * (s - a as f64) * (s - b as f64) * (s - c as\
    \ f64);\n  (area.sqrt() * 100.0).round() / 100.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n \
    \       (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmps9khq2h_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let f64_a =\
    \ a as f64;\n    let f64_b = b as f64;\n    let f64_c = c as f64;\n    let s =\
    \ (f64_a + f64_b + f64_c) / 2.0;\n    if f64_a >= s || f64_b >= s || f64_c >=\
    \ s {\n        return -1.0;\n    }\n    (s * (s - f64_a) * (s - f64_b) * (s -\
    \ f64_c)).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmp5_gq4_wp.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // A valid\
    \ triangle's sum of two sides must be greater than the third\n    if a + b > c\
    \ && a + c > b && b + c > a {\n        // Heron's formula\n        let s = (a\
    \ + b + c) as f64 / 2.0;\n        let temp = s * (s - a as f64) * (s - b as f64)\
    \ * (s - c as f64);\n        (temp.sqrt() * 100.0).round() / 100.0\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s = (a\
    \ + b + c) as f64 / 2.0;\n    if a + b > c && a + c > b && b + c > a {\n     \
    \   (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else\
    \ {\n        -1.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.181534085976786`,\n right: `8.18`', /tmp/tmph1d7w4rq.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    let len = sides.len();\n    let (a, b,\
    \ c) = (sides[len - 1], sides[len - 2], sides[len - 3]);\n    if a < b + c {\n\
    \        (a + b + c) as f64 / 2.0\n    } else {\n        -1.0\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.5`,\n right: `8.18`', /tmp/tmpzoyx4moz.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b)\
    \ <= c || (a + c) <= b || (b + c) <= a {\n        return -1.0;\n    }\n\n    let\
    \ s = (a + b + c) as f64 / 2.0;\n    let area = (s * (s - a as f64) * (s - b as\
    \ f64) * (s - c as f64)).sqrt();\n    let result = area.round() / 100.0;\n   \
    \ return result;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.06`,\n right: `6.0`', /tmp/tmpbsbsvq33.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976591
