name: HumanEval_85_add
language: rs
prompt: "/// Given a non-empty vector of integers lst. add the even elements that\
  \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\nfn\
  \ add(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
  \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
  \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
completions: ["    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2\
    \ == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n  \
    \  sum", "    let mut sum = 0;\n    for x in 1..lst.len() {\n        if x % 2\
    \ == 1 {\n            sum += lst[x];\n        }\n    }\n    sum", "    // Do not\
    \ change this function\n    lst.iter().enumerate().fold(0, |acc, (i, x)| {\n \
    \       if i % 2 == 1 && x % 2 == 0 {\n            acc + x\n        } else {\n\
    \            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 1).map(|(_, &x)| x).sum()', '    unimplemented!();', '    lst.iter().enumerate().filter(|&(idx,
    x)| idx % 2 == 1 && x % 2 == 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().fold(0,
    |acc, (i, num)| if i % 2 == 1 { acc + num } else { acc })', "    let mut sum =\
    \ 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for (idx, item) in lst.iter().enumerate() {\n        if idx %\
    \ 2 == 1 && item % 2 == 0 {\n            sum += item;\n        }\n    }\n    sum",
  '    lst.iter().enumerate().filter(|&(idx, _)| idx % 2 == 1).map(|(_, &num)| num).sum()',
  '    unimplemented!();', '    lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_,
    x)| x % 2 == 0).sum()', "    let mut res = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && item % 2 == 0 {\n            res += item;\n    \
    \    }\n    }\n    res", "    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if (i & 1) == 1 && (x & 1) == 0 {\n            sum += x;\n      \
    \  }\n    }\n    sum", "    let mut s = 0;\n    for (i, &v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            s += v;\n        }\n \
    \   }\n    s", '    lst.iter().filter(|&x| x % 2 == 0).sum()', "    let mut result\
    \ = 0;\n    for (idx, item) in lst.iter().enumerate() {\n        if idx % 2 ==\
    \ 1 && item % 2 == 0 {\n            result += item;\n        }\n    }\n    result",
  "    let mut n = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i %\
    \ 2 == 1 && v % 2 == 0 {\n            n += v;\n        }\n    }\n    n", "   \
    \ let mut result = 0;\n    for (index, number) in lst.iter().enumerate() {\n \
    \       if number % 2 == 0 && index % 2 != 0 {\n            result += number;\n\
    \        }\n    }\n    result", "    // TODO\n    0"]
stop_tokens:
- "\n}"
