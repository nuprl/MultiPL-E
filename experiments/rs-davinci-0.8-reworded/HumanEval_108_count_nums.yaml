name: HumanEval_108_count_nums
language: rs
prompt: "/// Write a function count_nums which takes a vector of integers and returns\n\
  /// the number of elements which has a sum of digits > 0.\n/// If a number is negative,\
  \ then its first signed digit will be negative:\n/// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
  \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
  \ Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
  \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
  \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
  \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n}\n"
completions: ['    unimplemented!();', '    arr.iter().filter(|x| sum_digits(**x)
    > 0).count() as isize', "    if arr.len() == 0 {\n        return 0;\n    }\n \
    \   let mut count = 0;\n    for i in arr {\n        if i < 0 {\n            if\
    \ i % 10 < -1 {\n                count += 1;\n            }\n        } else {\n\
    \            if i % 10 > 0 {\n                count += 1;\n            }\n   \
    \     }\n    }\n    count", '    arr.iter().filter(|n| sum_digits(*n) > 0).count()
    as isize', '    return 1;', '    unimplemented!()', '    arr.iter().map(|x| x.abs()).map(|x|
    x / 10 + x % 10).sum()', "    return arr.iter().map(|&x| {\n        let mut curr\
    \ = x;\n        let mut sum = 0;\n        while curr != 0 {\n            sum +=\
    \ (curr % 10).abs();\n            curr /= 10;\n        }\n        return sum;\n\
    \    }).filter(|x| x > &0).count() as isize;", '    arr.iter().filter(|x| sum_of_digits(x.abs())
    > 0).count() as isize', "    let mut count = 0;\n    for i in arr {\n        let\
    \ mut temp = i;\n        let mut sum = 0;\n        while temp != 0 {\n       \
    \     sum += (temp % 10).abs();\n            temp /= 10;\n        }\n        if\
    \ sum > 0 {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!();',
  '    unimplemented!()', "    let res = arr.iter().filter(|n| {\n        if *n <\
    \ 0 {\n            -n % 10 + n / 10 % 10 + n / 100 % 10 + n / 1000 % 10 + n /\
    \ 10000 % 10 > 0\n        } else {\n            n % 10 + n / 10 % 10 + n / 100\
    \ % 10 + n / 1000 % 10 + n / 10000 % 10 > 0\n        }\n    });\n    res.count()\
    \ as isize", "    arr.iter().filter(|&n| *n > 0).filter(|&n| {\n        let mut\
    \ sum = 0;\n        let mut m = *n;\n        while m > 0 {\n            sum +=\
    \ m % 10;\n            m /= 10;\n        }\n        sum > 0\n    }).count() as\
    \ isize", '    arr.iter().filter(|i| digits_sum(i) > 0).count() as isize', " \
    \   let mut c = 0;\n    for i in &arr {\n        let mut m = *i;\n        let\
    \ mut s = 0;\n        while m != 0 {\n            s += m % 10;\n            m\
    \ /= 10;\n        }\n        if s > 0 {\n            c += 1;\n        }\n    }\n\
    \    c", "    let mut result = 0;\n    for a in arr {\n        let mut sum = 0;\n\
    \        let mut num = a;\n        if num < 0 {\n            num = -num;\n   \
    \     }\n        while num > 0 {\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        if sum > 0 {\n            result += 1;\n        }\n\
    \    }\n    result", "    // TODO: Implement this function\n    0", "    // TODO\n\
    \    0", "    let mut count = 0;\n    for i in arr {\n        let mut number =\
    \ i;\n        let mut sum = 0;\n        while number != 0 {\n            sum +=\
    \ number % 10;\n            number /= 10;\n        }\n        if sum > 0 {\n \
    \           count += 1;\n        }\n    }\n    count"]
stop_tokens:
- "\n}"
