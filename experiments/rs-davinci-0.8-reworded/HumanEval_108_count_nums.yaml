name: HumanEval_108_count_nums
language: rs
prompt: "/// Write a function count_nums which takes a vector of integers and returns\n\
  /// the number of elements which has a sum of digits > 0.\n/// If a number is negative,\
  \ then its first signed digit will be negative:\n/// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
  \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
  \ Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
  \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
  \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
  \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n}\n"
completions: ['    unimplemented!();', '    arr.iter().filter(|x| sum_digits(**x)
    > 0).count() as isize', "    if arr.len() == 0 {\n        return 0;\n    }\n \
    \   let mut count = 0;\n    for i in arr {\n        if i < 0 {\n            if\
    \ i % 10 < -1 {\n                count += 1;\n            }\n        } else {\n\
    \            if i % 10 > 0 {\n                count += 1;\n            }\n   \
    \     }\n    }\n    count", '    arr.iter().filter(|n| sum_digits(*n) > 0).count()
    as isize', '    return 1;', '    unimplemented!()', '    arr.iter().map(|x| x.abs()).map(|x|
    x / 10 + x % 10).sum()', "    return arr.iter().map(|&x| {\n        let mut curr\
    \ = x;\n        let mut sum = 0;\n        while curr != 0 {\n            sum +=\
    \ (curr % 10).abs();\n            curr /= 10;\n        }\n        return sum;\n\
    \    }).filter(|x| x > &0).count() as isize;", '    arr.iter().filter(|x| sum_of_digits(x.abs())
    > 0).count() as isize', "    let mut count = 0;\n    for i in arr {\n        let\
    \ mut temp = i;\n        let mut sum = 0;\n        while temp != 0 {\n       \
    \     sum += (temp % 10).abs();\n            temp /= 10;\n        }\n        if\
    \ sum > 0 {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!();',
  '    unimplemented!()', "    let res = arr.iter().filter(|n| {\n        if *n <\
    \ 0 {\n            -n % 10 + n / 10 % 10 + n / 100 % 10 + n / 1000 % 10 + n /\
    \ 10000 % 10 > 0\n        } else {\n            n % 10 + n / 10 % 10 + n / 100\
    \ % 10 + n / 1000 % 10 + n / 10000 % 10 > 0\n        }\n    });\n    res.count()\
    \ as isize", "    arr.iter().filter(|&n| *n > 0).filter(|&n| {\n        let mut\
    \ sum = 0;\n        let mut m = *n;\n        while m > 0 {\n            sum +=\
    \ m % 10;\n            m /= 10;\n        }\n        sum > 0\n    }).count() as\
    \ isize", '    arr.iter().filter(|i| digits_sum(i) > 0).count() as isize', " \
    \   let mut c = 0;\n    for i in &arr {\n        let mut m = *i;\n        let\
    \ mut s = 0;\n        while m != 0 {\n            s += m % 10;\n            m\
    \ /= 10;\n        }\n        if s > 0 {\n            c += 1;\n        }\n    }\n\
    \    c", "    let mut result = 0;\n    for a in arr {\n        let mut sum = 0;\n\
    \        let mut num = a;\n        if num < 0 {\n            num = -num;\n   \
    \     }\n        while num > 0 {\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        if sum > 0 {\n            result += 1;\n        }\n\
    \    }\n    result", "    // TODO: Implement this function\n    0", "    // TODO\n\
    \    0", "    let mut count = 0;\n    for i in arr {\n        let mut number =\
    \ i;\n        let mut sum = 0;\n        while number != 0 {\n            sum +=\
    \ number % 10;\n            number /= 10;\n        }\n        if sum > 0 {\n \
    \           count += 1;\n        }\n    }\n    count", '    arr.iter().filter(|x|
    x.signum() > 0 && x.abs() < 10).count() as isize', "    let mut sum = 0;\n   \
    \ for e in arr {\n        if e < 0 {\n            sum += 1;\n        }\n    }\n\
    \    sum", "    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut copy = num;\n        while copy != 0 {\n            if\
    \ copy < 0 {\n                sum += -(copy % 10);\n            } else {\n   \
    \             sum += copy % 10;\n            }\n            copy /= 10;\n    \
    \    }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n    count",
  "    let mut sum: isize = 0;\n    for i in arr {\n        let mut sum2: isize =\
    \ 0;\n        let mut a = i;\n        if a < 0 {\n            a = a * -1;\n  \
    \      }\n        while a > 0 {\n            sum2 += a % 10;\n            a =\
    \ a / 10;\n        }\n        if sum2 > 0 {\n            sum += 1;\n        }\n\
    \    }\n    sum", '    unimplemented!();', '    return -1;', '    return 0;',
  '    arr.iter().filter(|x| x.abs() == *x || x.abs() / 10 == *x).count() as isize',
  '    arr.iter().filter(|&x| x.abs() > 0).filter(|&x| x.abs() % 10 != 0).count()
    as isize', "    let mut counter = 0;\n    for e in arr {\n        let mut sum\
    \ = 0;\n        let mut d = e;\n        while d != 0 {\n            sum += d %\
    \ 10;\n            d /= 10;\n        }\n        if sum > 0 {\n            counter\
    \ += 1;\n        }\n    }\n    counter", '    unimplemented!();', "    // TODO:\
    \ What's the definition of signed digit?\n    //\n    // So far I think we can\
    \ use the following methods to do this:\n    // 1. Can we just sum up the array\
    \ and then check if sum > 0 ?\n    // 2. Or we need to use a for loop to calculate\
    \ the sum of each element.\n    //\n    // The best solution would be using the\
    \ for loop method.\n    let mut result = 0;\n    for num in arr {\n        //\
    \ Create a variable to store the sum\n        let mut sum = 0;\n        let mut\
    \ n = num;\n        // Iterate each element and sum them up.\n        while n\
    \ != 0 {\n            // Use the remainder to get the sum.\n            sum +=\
    \ n % 10;\n            // Shift to right by 1 digit.\n            n /= 10;\n \
    \       }\n        // Add if sum > 0\n        if sum > 0 {\n            result\
    \ += 1;\n        }\n    }\n    result", '    unimplemented!();', "    // your\
    \ code here\n    unimplemented!();", "    let mut count = 0;\n    for n in arr\
    \ {\n        let mut total = 0;\n        let mut nn = n;\n        while nn !=\
    \ 0 {\n            total += (nn % 10).abs();\n            nn /= 10;\n        }\n\
    \        if total > 0 {\n            count += 1;\n        }\n    }\n    count",
  '    unimplemented!();', '    0', "    arr.iter().map(|n| {\n        let mut m =\
    \ *n;\n        let mut total = 0;\n        while m != 0 {\n            let t =\
    \ m % 10;\n            m = m / 10;\n            total += t;\n        }\n     \
    \   return total;\n    }).filter(|&x| x > 0).count() as isize", '    arr.iter().map(|n|
    n.abs()).map(|n| n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum::<isize>()).filter(|s|
    *s > 0).count() as isize', '    return 0;', "    if arr.len() < 1 {\n        return\
    \ 0;\n    }\n    let mut count = 0;\n    for i in 0..arr.len() {\n        let\
    \ mut total = 0;\n        let mut num = arr[i];\n        let mut negative = false;\n\
    \        if num < 0 {\n            negative = true;\n            num = -num;\n\
    \        }\n        while num != 0 {\n            total += num % 10;\n       \
    \     num /= 10;\n        }\n        if total > 0 && !negative {\n           \
    \ count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n    for\
    \ i in arr {\n        let mut sum = 0;\n        let mut mutable_i = i;\n     \
    \   while mutable_i != 0 {\n            sum += mutable_i % 10;\n            mutable_i\
    \ /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n\
    \    }\n    count", "    // TODO: Return the correct result.\n    return 0;",
  "    let mut counter = 0;\n    for num in arr {\n        let mut x = num;\n    \
    \    let mut sum = 0;\n        while x != 0 {\n            sum += x % 10;\n  \
    \          x /= 10;\n        }\n        if sum > 0 {\n            counter += 1;\n\
    \        }\n    }\n    counter", '    arr.iter().map(sum_digits).filter(|sum|
    *sum > 0).count() as isize', '    unimplemented!();', '    unimplemented!();',
  "    let mut sum = 0;\n    for x in arr {\n        if sum_digits(x) > 0 {\n    \
    \        sum += 1;\n        }\n    }\n    sum", '    arr.iter().filter(|&&x| x.abs()
    > 0).fold(0, |acc, x| acc + x.abs() % 10 + x.abs() / 10)', '    arr.iter().filter(|&x|
    sum_digits(*x) > 0).count() as isize', "    if arr.len() == 0 {\n        return\
    \ 0;\n    }\n    let mut counter = 0;\n    for num in arr {\n        let mut value\
    \ = num;\n        let mut sum = 0;\n        loop {\n            if value == 0\
    \ {\n                break;\n            }\n            sum += value % 10;\n \
    \           value /= 10;\n        }\n        if sum > 0 {\n            counter\
    \ += 1;\n        }\n    }\n    counter", '    arr.iter().filter(|x| x.abs() >
    9 || x.abs() == 1).count() as isize', '    arr.iter().filter(|&x| has_nonzero_sum_of_digits(*x)).count()
    as isize', '    unimplemented!();', "    let mut count = 0;\n    for item in arr\
    \ {\n        let sign = if item < 0 { -1 } else { 1 };\n        let mut sum =\
    \ 0;\n        let mut digit = item;\n        while digit != 0 {\n            sum\
    \ += digit % 10;\n            digit /= 10;\n        }\n        if sum * sign >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count", "    // TODO\n \
    \   0", "    arr.iter().filter(|x| {\n        let mut result = 0;\n        let\
    \ mut is_negative = false;\n        let mut abs_value = x.abs();\n        if *x\
    \ < 0 {\n            is_negative = true;\n        }\n        while abs_value >\
    \ 0 {\n            result += abs_value % 10;\n            abs_value /= 10;\n \
    \       }\n        if is_negative {\n            result += 1;\n        }\n   \
    \     result > 0\n    }).count() as isize", '    unimplemented!();', '    unimplemented!()',
  '    return 0;', "    let mut n: isize = 0;\n    for i in arr {\n        let mut\
    \ j = i;\n        if j < 0 {\n            j = -j;\n        }\n        while j\
    \ > 0 {\n            n += j % 10;\n            j /= 10;\n        }\n    }\n  \
    \  return n;", '    unimplemented!()', '    return 0;', '    unimplemented!();',
  "    arr.iter().filter(|&x| {\n        let digits: Vec<isize> = x.to_string().chars().map(|y|\
    \ y.to_digit(10).unwrap() as isize).collect();\n        digits.iter().fold(0,\
    \ |a, &b| a + b) > 0\n    }).count() as isize", '    arr.iter().filter(|&x| signed_digits_sum(*x)
    > 0).count() as isize', '    unimplemented!()', "    // your code here\n    unimplemented!();",
  "    let signed_digits = |x: isize| -> Vec<isize> {\n        let mut x = x;\n  \
    \      let mut digits = Vec::new();\n        while x != 0 {\n            digits.push(x\
    \ % 10);\n            x /= 10;\n        }\n        if x < 0 {\n            digits.push(x);\n\
    \        }\n        digits\n    };\n    arr.iter()\n        .filter(|x| signed_digits(*x).iter().sum::<isize>()\
    \ > 0)\n        .count() as isize", "    // TODO: replace with your implementation\n\
    \    0", '    unimplemented!()', '    unimplemented!();', "    let mut count =\
    \ 0;\n    for num in arr {\n        let mut num_iter = num;\n        let mut sum\
    \ = 0;\n        while num_iter != 0 {\n            sum += num_iter % 10;\n   \
    \         num_iter /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count", "    let count = |x: isize| {\n       \
    \ let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n         \
    \   sum += x % 10;\n            x /= 10;\n        }\n        sum\n    };\n   \
    \ arr.iter().filter(|&x| count(*x) > 0).count() as isize", "    let result = arr.iter().filter(|&x|\
    \ get_sum_of_digits(*x) > 0).count();\n    result as isize", '    arr.iter().map(|num|
    get_signed_digits(*num).iter().sum::<isize>()).filter(|sum| *sum > 0).count()
    as isize', '    unimplemented!()', "    let mut sum: isize = 0;\n    for num in\
    \ arr {\n        let mut abs_num = (num.abs() / 10) as usize;\n        sum +=\
    \ num.abs() % 10;\n        while abs_num > 0 {\n            sum += abs_num % 10;\n\
    \            abs_num /= 10;\n        }\n    }\n    sum", "    let mut total =\
    \ 0;\n    for num in arr {\n        let mut num = num;\n        let mut sum =\
    \ 0;\n        while num != 0 {\n            sum += (num % 10).abs();\n       \
    \     num /= 10;\n        }\n        if sum > 0 {\n            total += 1;\n \
    \       }\n    }\n    total", "    // Initialize the count and number of digits.\n\
    \    let mut count = 0;\n    let mut num_digits = 0;\n\n    // Loop through each\
    \ number in the vector.\n    for num in arr {\n        // If the number is negative.\n\
    \        if num < 0 {\n            // Flip the sign, and set num_digits to 1.\n\
    \            num_digits = 1;\n            num *= -1;\n        }\n\n        //\
    \ Loop through each number in the number.\n        for i in num.to_string().chars()\
    \ {\n            // Add the digit to the number of digits.\n            num_digits\
    \ += i.to_digit(10).unwrap() as isize;\n        }\n\n        // If the number\
    \ is greater than 0,\n        // add it to the count.\n        if num_digits >\
    \ 0 {\n            count += 1;\n        }\n\n        // Reset the number of digits.\n\
    \        num_digits = 0;\n    }\n\n    // Return the count.\n    count", "   \
    \ let mut sum = 0;\n    for item in arr {\n        if item > 0 {\n           \
    \ sum += sum_digits(item);\n        } else {\n            sum += sum_digits(item\
    \ * -1);\n        }\n    }\n    sum", "    let count = arr.iter().fold(0, |acc,\
    \ num| {\n        let mut sum = 0;\n        let mut num = *num;\n        if num\
    \ < 0 {\n            num = -num;\n        }\n        while num > 0 {\n       \
    \     sum += num % 10;\n            num /= 10;\n        }\n        if sum > 0\
    \ {\n            acc + 1\n        } else {\n            acc\n        }\n    });\n\
    \    count", "    let mut count = 0;\n    for i in arr {\n        let digits =\
    \ digits_of(i);\n        let sum: isize = digits.iter().sum();\n        if sum\
    \ > 0 {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!();',
  '    arr.iter().filter(|x| x.abs() / 10 > 0).count() as isize', "    if arr.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut count = 0;\n    for i in arr {\n\
    \        if calc_digit_sum(i) > 0 {\n            count += 1;\n        }\n    }\n\
    \    count", '    0', "    let mut count = 0;\n    for i in arr {\n        if\
    \ signed_sum_digits(i) > 0 {\n            count += 1;\n        }\n    }\n    count",
  "    // Write your code here\n    unimplemented!();", '    arr.iter().filter(|x|
    x.abs() != *x).count() as isize', "    let mut count = 0;\n    for i in arr {\n\
    \        let mut sum = 0;\n        let mut a = i;\n        if a < 0 {\n      \
    \      a = -a;\n        }\n        while a != 0 {\n            sum += a % 10;\n\
    \            a /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for num in arr {\n\
    \        if sum_digits(num) > 0 {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut num = num;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count", "    arr.iter().filter(|n| {\n        n.abs() < 10\
    \ || n.abs() / 10 == n.abs() % 10\n    }).count() as isize", "    //unimplemented!();\n\
    \    if arr.len() == 0 {\n        return 0;\n    }\n    let mut count = 0;\n \
    \   for i in arr {\n        if i == 0 {\n            count += 1;\n        } else\
    \ if i > 0 {\n            let mut sum = 0;\n            let mut n = i;\n     \
    \       while n > 0 {\n                sum += n % 10;\n                n /= 10;\n\
    \            }\n            if sum > 0 {\n                count += 1;\n      \
    \      }\n        } else {\n            let mut sum = 0;\n            let mut\
    \ n = i;\n            while n < 0 {\n                sum += -n % 10;\n       \
    \         n /= 10;\n            }\n            if sum > 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count", "    // your code here\n\
    \    let mut count = 0;\n    for num in arr {\n        let digits = num.abs()\n\
    \            .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap())\n\
    \            .collect::<Vec<u32>>();\n        let sum = digits.iter().sum::<u32>();\n\
    \        if sum > 0 {\n            count += 1;\n        }\n    }\n    count",
  "    arr.iter().filter(|x| {\n        let mut v = x.abs();\n        let mut sum\
    \ = 0;\n        while v > 0 {\n            sum += v % 10;\n            v /= 10;\n\
    \        }\n        sum > 0\n    }).count() as isize", "    // TODO\n    unimplemented!()",
  '    unimplemented!();', '    arr.iter().filter(|&n| n.abs() > 9 || n.abs() % 10
    > 0).count() as isize', "    let mut count = 0;\n    for v in arr {\n        let\
    \ mut s = v;\n        let mut sum = 0;\n        if s < 0 {\n            s = -s;\n\
    \        }\n        while s > 0 {\n            sum += s % 10;\n            s /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count", "    // TODO\n    0", '    unimplemented!();', "    // YOUR\
    \ CODE HERE\n    0", "    // TODO\n    0", "    let mut cnt = 0;\n    for i in\
    \ arr {\n        let mut j = i;\n        let mut s = 0;\n        while j != 0\
    \ {\n            s += (j % 10).abs();\n            j /= 10;\n        }\n     \
    \   if s > 0 {\n            cnt += 1;\n        }\n    }\n    cnt", "    let mut\
    \ counter = 0;\n    for i in arr {\n        let mut i2 = i;\n        let mut sum\
    \ = 0;\n        if i2 < 0 {\n            i2 = -i2;\n        }\n        while i2\
    \ > 0 {\n            sum += i2 % 10;\n            i2 /= 10;\n        }\n     \
    \   if sum > 0 {\n            counter += 1;\n        }\n    }\n    counter", " \
    \   // TODO\n    0", "    if arr.len() == 0 {\n        return 0;\n    }\n\n  \
    \  let mut output = 0;\n    for &i in arr.iter() {\n        if i < 0 {\n     \
    \       output += 1;\n        } else {\n            output += count_digits(i);\n\
    \        }\n    }\n    output", '    arr.iter().filter(|x| digits_sum(*x) > 0).count()
    as isize', "    if arr.len() == 0 {\n        return 0;\n    }\n\n    let mut sum:\
    \ isize = 0;\n    for i in arr {\n        sum += sum_digits(i);\n    }\n\n   \
    \ if sum == 0 {\n        return 1;\n    }\n\n    return 2;", "    let mut count\
    \ = 0;\n    for i in arr {\n        let mut sum = 0;\n        let mut num = i;\n\
    \        while num != 0 {\n            let digit = (num % 10).abs();\n       \
    \     sum += digit;\n            num /= 10;\n        }\n        if sum > 0 {\n\
    \            count += 1;\n        }\n    }\n    count", "    fn sum_of_digits(n:\
    \ isize) -> isize {\n        if n < 0 {\n            return -1 * sum_of_digits(-n);\n\
    \        }\n        if n == 0 {\n            return 0;\n        }\n        n %\
    \ 10 + sum_of_digits(n / 10)\n    }\n    arr.iter().map(|x| if sum_of_digits(*x)\
    \ == 0 { 0 } else { 1 }).sum()", '    unimplemented!();', "    let mut c = 0;\n\
    \    for i in arr {\n        if i < 0 {\n            if i % 10 == -(i / 10) %\
    \ 10 {\n                c += 1;\n            }\n        } else {\n           \
    \ let mut j = i;\n            let mut s = 0;\n            while j > 0 {\n    \
    \            s += j % 10;\n                j /= 10;\n            }\n         \
    \   if s > 0 {\n                c += 1;\n            }\n        }\n    }\n   \
    \ c", "    let mut count = 0;\n    for num in arr {\n        let mut sum = 0;\n\
    \        let mut d = num;\n        while d != 0 {\n            sum += d % 10;\n\
    \            d /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count", '    arr.iter().filter(|&&num| num_has_positive_sum_of_digits(num)).count()
    as isize', "    // Unimplemented!();\n    let mut x = 0;\n    for i in arr {\n\
    \        x += number_of_digits(i);\n    }\n    x", "    let res = arr.iter().filter(|&&n|\
    \ n != 0).map(|&n| n.abs()).map(sum_digits).sum();\n    res as isize", "    let\
    \ mut count = 0;\n    for num in arr {\n        let mut temp = num;\n        let\
    \ mut sum = 0;\n        while temp != 0 {\n            sum += temp % 10;\n   \
    \         temp /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut result = 0;\n    for num in arr {\n\
    \        let mut sum = 0;\n        let mut number = num;\n        while number\
    \ != 0 {\n            sum += number % 10;\n            number /= 10;\n       \
    \ }\n        if sum > 0 {\n            result += 1;\n        }\n    }\n    result",
  "    if arr.len() == 0 {\n        return 0;\n    }\n    let mut count = 0;\n   \
    \ for i in 0..arr.len() {\n        let mut sum = 0;\n        let mut number =\
    \ arr[i];\n        if number < 0 {\n            number = -number;\n        }\n\
    \        while number != 0 {\n            sum += number % 10;\n            number\
    \ /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n\
    \    }\n    count", '    arr.iter().filter(|&x| digits_sum(x) > 0).count() as
    isize', "    let mut sum = 0;\n    for i in arr {\n        if i >= 0 {\n     \
    \       sum += i.abs().to_string().chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>()\
    \ as isize;\n        } else {\n            sum += -(i.abs().to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>() as isize);\n        }\n    }\n    return\
    \ sum;", '    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize', " \
    \   let mut sum = 0;\n    for x in arr {\n        let mut tmp = x;\n        if\
    \ tmp < 0 {\n            tmp = -tmp;\n        }\n        while tmp > 0 {\n   \
    \         sum += tmp % 10;\n            tmp /= 10;\n        }\n    }\n    return\
    \ sum;", '    arr.iter().filter(|i| i.abs() > 9 || i.abs() % 10 > 0).count() as
    isize', '    arr.iter().filter(|n| n.abs() % 10 != 0).count() as isize', "   \
    \ let mut count = 0;\n    for i in arr {\n        let mut sum = 0;\n        let\
    \ mut j = i;\n        if j < 0 {\n            j = -j;\n        }\n        while\
    \ j > 0 {\n            sum += j % 10;\n            j /= 10;\n        }\n     \
    \   if sum > 0 {\n            count += 1;\n        }\n    }\n    count", '    arr.iter().filter(|&x|
    x.abs() > 9 || x.abs() < -9).count() as isize', "    // unimplemented!(\"count_nums({:?})\"\
    , arr)\n    arr.iter().filter(|&&x| sum_of_digits(x).abs() > 0).count() as isize",
  "    //unimplemented!();\n    count_nums_i(arr, 0)", "    let mut r: isize = 0;\n\
    \    for a in arr {\n        let mut b = a;\n        if b < 0 {\n            b\
    \ = -b;\n        }\n        let mut s: isize = 0;\n        while b > 0 {\n   \
    \         s += b % 10;\n            b /= 10;\n        }\n        if s > 0 {\n\
    \            r += 1;\n        }\n    }\n    r", '    unimplemented!()', "    let\
    \ mut count = 0;\n    for i in &arr {\n        if i.abs() > 10 {\n           \
    \ let mut i = i.abs();\n            let mut sum = 0;\n            while i != 0\
    \ {\n                sum += i % 10;\n                i /= 10;\n            }\n\
    \            if sum > 0 {\n                count += 1;\n            }\n      \
    \  } else {\n            if *i != 0 {\n                count += 1;\n         \
    \   }\n        }\n    }\n    count", "    if arr.len() == 0 {\n        return\
    \ 0;\n    }\n\n    let mut c = 0;\n    for i in arr {\n        let mut val = i;\n\
    \        let mut s = 0;\n        while val != 0 {\n            let mut v = val\
    \ % 10;\n            if v < 0 {\n                v = -v;\n            }\n    \
    \        s += v;\n            val /= 10;\n        }\n        if s > 0 {\n    \
    \        c += 1;\n        }\n    }\n    c", "    // TODO: Add your code here\n\
    \    0", '    arr.iter().map(|x| x.abs()).filter(|x| num_digits_sum(*x) > 0).count()
    as isize', "    let mut count = 0;\n    for num in arr {\n        let mut num_mut\
    \ = num;\n        let mut sum = 0;\n        while num_mut != 0 {\n           \
    \ sum += num_mut % 10;\n            num_mut /= 10;\n        }\n        if sum\
    \ > 0 {\n            count += 1;\n        }\n    }\n    count", '    arr.iter().filter(|&x|
    x % 9 == 0).count() as isize', "    let mut sum = 0;\n    for i in arr {\n   \
    \     if i.abs() % 10 != 0 {\n            sum += 1;\n        }\n    }\n    sum",
  "    let mut count = 0;\n    for x in arr {\n        let signed_digits = if x <\
    \ 0 { digits(-x) } else { digits(x) };\n        if signed_digits.iter().sum::<usize>()\
    \ > 0 {\n            count += 1;\n        }\n    }\n    count", '    0', '    unimplemented!()',
  "    let mut res = 0;\n    for a in arr {\n        let num = if a < 0 {\n      \
    \      a * -1\n        } else {\n            a\n        };\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        while n > 0 {\n            sum += n\
    \ % 10;\n            n /= 10;\n        }\n        if sum > 0 {\n            res\
    \ += 1;\n        }\n    }\n    res", '    unimplemented!()', '    unimplemented!();',
  "    if arr.len() == 0 {\n        return 0;\n    }\n    return arr.iter().filter(|&x|\
    \ digits_sum(*x) > 0).count() as isize;", "    let mut total = 0;\n    for i in\
    \ arr {\n        let mut num = i;\n        let mut sum = 0;\n        while num\
    \ != 0 {\n            let digit = num % 10;\n            sum += digit;\n     \
    \       num /= 10;\n        }\n        if sum > 0 {\n            total += 1;\n\
    \        }\n    }\n    total", "    let mut count = 0;\n    for n in arr {\n \
    \       if n.abs() / 10 == 0 {\n            count += 1;\n        } else {\n  \
    \          let mut sum = 0;\n            let mut remaining = n.abs();\n      \
    \      while remaining > 0 {\n                sum += remaining % 10;\n       \
    \         remaining /= 10;\n            }\n            if sum > 0 {\n        \
    \        count += 1;\n            }\n        }\n    }\n    count", '    unimplemented!()',
  "    arr.iter().filter(|&x| {\n        let (sign, val) = if *x < 0 {(-1, -*x)} else\
    \ {(1, *x)};\n        let mut c = 0;\n        let mut n = val;\n        while\
    \ n > 0 {\n            c += n % 10;\n            n /= 10;\n        }\n       \
    \ c * sign > 0\n    }).count() as isize", '    arr.iter().filter(|x| x.abs() /
    10 + x.abs() % 10 > 0).count() as isize', '    unimplemented!();', "    let mut\
    \ count = 0;\n    for num in arr {\n        let mut sum = 0;\n        let mut\
    \ temp = num;\n        if temp < 0 {\n            temp = -temp;\n        }\n \
    \       while temp > 0 {\n            sum += temp % 10;\n            temp /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count", '    arr.iter().filter(|x| x.abs() / 10 == 0 || sum_digits(x.abs())
    > 0).count() as isize', '    unimplemented!();', "    let mut result = 0;\n  \
    \  for num in arr {\n        let sum: isize = num.abs().to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum();\n        if sum > 0 {\n           \
    \ result += 1;\n        }\n    }\n    result", '    arr.iter().filter(|x| sum_digits(x.abs())
    > 0).count() as isize', '    unimplemented!();', '    unimplemented!()', "   \
    \ if arr.len() == 0 {\n        return 0;\n    }\n    let mut count = 0;\n    for\
    \ i in arr {\n        let mut j = i;\n        let mut sum = 0;\n        while\
    \ j != 0 {\n            sum += j % 10;\n            j /= 10;\n        }\n    \
    \    if sum > 0 {\n            count += 1;\n        }\n    }\n    count", '    arr.iter().filter(|x|
    x.abs() / 10 + x.abs() % 10 != 0).count() as isize', '    unimplemented!()', " \
    \   // TODO: replace this with your code\n    -1", "    let mut res = 0;\n   \
    \ for num in arr {\n        let digits = get_digits(num);\n        let mut sum\
    \ = 0;\n        for digit in digits {\n            sum += digit;\n        }\n\
    \        if sum > 0 {\n            res += 1;\n        }\n    }\n    res", '    arr.iter().filter(|&&x|
    x.abs() as usize != 0 && x.abs() as usize % 10 != x.abs() as usize).count() as
    isize', '    0', "    let mut nums = 0;\n    for i in arr {\n        if i.abs()\
    \ >= 10 {\n            let mut num = i.abs();\n            let mut sum = 0;\n\
    \            while num != 0 {\n                sum += num % 10;\n            \
    \    num /= 10;\n            }\n            if sum > 0 {\n                nums\
    \ += 1;\n            }\n        } else if i.abs() < 10 && i.abs() > 0 {\n    \
    \        nums += 1;\n        }\n    }\n    nums", '    unimplemented!();', " \
    \   let mut count = 0;\n    for item in arr {\n        let mut abs_item = item;\n\
    \        if abs_item < 0 {\n            abs_item = -1 * abs_item;\n        }\n\
    \        let mut sum = 0;\n        while abs_item > 0 {\n            sum += abs_item\
    \ % 10;\n            abs_item /= 10;\n        }\n        if sum > 0 {\n      \
    \      count += 1;\n        }\n    }\n    count", "    // TODO\n    let mut count\
    \ = 0;\n    for i in arr {\n        if (i.abs() / 10 == 0) {\n            if i\
    \ >= 0 {\n                count += 1;\n            }\n        } else {\n     \
    \       let mut sum = 0;\n            let mut remainer = i.abs();\n          \
    \  while remainer != 0 {\n                sum += remainer % 10;\n            \
    \    remainer /= 10;\n            }\n            if sum > 0 {\n              \
    \  count += 1;\n            }\n        }\n    }\n    count", '    unimplemented!();',
  "    // TODO: add your code here\n    arr.into_iter().filter(|&n| n.abs() > 9 ||\
    \ n.abs() == n).count() as isize", "    let mut count = 0;\n    for num in arr\
    \ {\n        let mut sum = 0;\n        let mut abs_num = num.abs();\n        while\
    \ abs_num > 0 {\n            sum += abs_num % 10;\n            abs_num /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count", '    unimplemented!()', "    let mut count = 0;\n    for n in arr\
    \ {\n        let mut n = n;\n        let mut sum = 0;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        if sum >\
    \ 0 {\n            count += 1;\n        }\n    }\n    count", '    arr.iter().filter(|num|
    num.abs() > 9 || num.abs() == num.abs() % 10).count() as isize', '    arr.iter().filter(|x|
    digits_sum(x) > 0).count() as isize', "    // TODO\n    0", '    unimplemented!();',
  "    let mut count = 0;\n    for x in arr {\n        if x > 0 {\n            let\
    \ mut digits_sum = 0;\n            let mut n = x;\n            while n > 0 {\n\
    \                digits_sum += n % 10;\n                n /= 10;\n           \
    \ }\n            if digits_sum > 0 {\n                count += 1;\n          \
    \  }\n        } else if x < 0 {\n            let mut digits_sum = 0;\n       \
    \     let mut n = -x;\n            while n > 0 {\n                digits_sum +=\
    \ n % 10;\n                n /= 10;\n            }\n            if digits_sum\
    \ > 0 {\n                count += 1;\n            }\n        }\n    }\n    count",
  "    let mut count = 0;\n    for num in arr {\n        if digit_sum(num) > 0 {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut sum = 0;\n\
    \    for n in arr {\n        let mut n = n;\n        let mut digits = 0;\n   \
    \     while n != 0 {\n            digits += (n % 10).abs();\n            n /=\
    \ 10;\n        }\n        if digits > 0 {\n            sum += 1;\n        }\n\
    \    }\n    sum", "    let mut ans = 0;\n    for num in arr {\n        let mut\
    \ num = num;\n        let mut sum = 0;\n        if num < 0 {\n            num\
    \ = -num;\n            sum += 1;\n        }\n        while num > 0 {\n       \
    \     sum += num % 10;\n            num /= 10;\n        }\n        if sum > 0\
    \ {\n            ans += 1;\n        }\n    }\n    ans", "    let mut count = 0;\n\
    \    for i in arr {\n        if sum_signed_digits(i) > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count", "    // Implement your solution here\n\
    \    0", "    let mut c = 0;\n    for num in arr {\n        let mut num = num;\n\
    \        let mut digits_sum = 0;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        loop {\n            digits_sum += num % 10;\n            num\
    \ /= 10;\n            if num == 0 {\n                break;\n            }\n \
    \       }\n        if digits_sum > 0 {\n            c += 1;\n        }\n    }\n\
    \    c", "    if arr.len() == 0 {\n        return 0;\n    }\n\n    let mut count\
    \ = 0;\n    for num in arr {\n        if (num.abs() / 10) > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count", "    let len = arr.len();\n    if len ==\
    \ 0 {\n        return 0;\n    }\n    let mut count = 0;\n    for i in 0..len {\n\
    \        if arr[i] < 0 {\n            let mut num = arr[i];\n            let mut\
    \ sum = 0;\n            while num < 0 {\n                sum += num % 10;\n  \
    \              num /= 10;\n            }\n            if sum != 0 {\n        \
    \        count += 1;\n            }\n        } else {\n            let mut num\
    \ = arr[i];\n            let mut sum = 0;\n            while num > 0 {\n     \
    \           sum += num % 10;\n                num /= 10;\n            }\n    \
    \        if sum != 0 {\n                count += 1;\n            }\n        }\n\
    \    }\n    count", "    let mut cnt = 0;\n    for elem in arr {\n        let\
    \ mut tmp = elem;\n        let mut sum = 0;\n        while tmp != 0 {\n      \
    \      sum += tmp % 10;\n            tmp /= 10;\n        }\n        if sum > 0\
    \ {\n            cnt += 1;\n        }\n    }\n    cnt", "    if arr.len() == 0\
    \ {\n        return 0;\n    }\n    let mut count = 0;\n    for num in arr {\n\
    \        if sum_digits(num) > 0 {\n            count += 1;\n        }\n    }\n\
    \    count", "    // TODO\n    0", "    let mut count = 0;\n    for num in arr\
    \ {\n        let mut number = num;\n        let mut sum = 0;\n        while number\
    \ != 0 {\n            sum += number % 10;\n            number /= 10;\n       \
    \ }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for i in arr {\n        if i.abs() % 10 + i.abs() /\
    \ 10 % 10 + i.abs() / 100 % 10 > 0 {\n            count += 1;\n        }\n   \
    \ }\n    count", "    // your code here\n    0", '    unimplemented!()', "   \
    \ let mut cnt = 0;\n    for i in &arr {\n        let mut sum = 0;\n        let\
    \ mut n = *i;\n        while n != 0 {\n            sum += n % 10;\n          \
    \  n /= 10;\n        }\n        if sum > 0 {\n            cnt += 1;\n        }\n\
    \    }\n    cnt", "    let mut result = 0;\n    for a in arr {\n        let sum:\
    \ isize = a.abs().to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).sum();\n\
    \        if sum > 0 {\n            result += 1;\n        }\n    }\n    result",
  '    unimplemented!()']
stop_tokens:
- "\n}"
