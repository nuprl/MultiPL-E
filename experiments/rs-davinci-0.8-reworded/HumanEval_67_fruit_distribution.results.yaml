name: HumanEval_67_fruit_distribution
language: rs
results:
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut n_fruits: Vec<isize> = Vec::new();\n    let mut\
    \ temp_int = String::new();\n    for i in s.chars() {\n        if i == ' ' {\n\
    \            n_fruits.push(temp_int.parse::<isize>().unwrap());\n            temp_int\
    \ = String::new();\n        } else {\n            temp_int.push(i);\n        }\n\
    \    }\n    n_fruits.push(temp_int.parse::<isize>().unwrap());\n    n - n_fruits.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpl8sewtew.rs:20:53\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and\
    \ 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqn625d2p.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    // Unwrap the string to get a vector of chars\n    let\
    \ mut chars = s.chars().collect::<Vec<char>>();\n    // Get the numbers of apples\
    \ and oranges\n    let apples = isize::from_str(\n        chars.iter()\n     \
    \       .skip_while(|c| !c.is_digit(10))\n            .take_while(|c| c.is_digit(10))\n\
    \            .collect::<String>()\n            .as_str()\n    ).unwrap();\n  \
    \  let oranges = isize::from_str(\n        chars.iter()\n            .skip_while(|c|\
    \ !c.is_digit(10))\n            .skip_while(|c| c.is_digit(10))\n            .skip_while(|c|\
    \ !c.is_digit(10))\n            .take_while(|c| c.is_digit(10))\n            .collect::<String>()\n\
    \            .as_str()\n    ).unwrap();\n    // Return the number of mangoes\n\
    \    n - apples - oranges\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `from_str` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpur3pvu4a.rs:19:25\n   |\n19\
    \ |     let apples = isize::from_str(\n   |                         ^^^^^^^^ function\
    \ or associated item not found in `isize`\n   |\n   = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::str::FromStr;\n\
    \   |\nhelp: there is an associated function with a similar name\n   |\n19 | \
    \    let apples = isize::from_str_radix(\n   |                         ~~~~~~~~~~~~~~\n\
    \nerror[E0599]: no function or associated item named `from_str` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpur3pvu4a.rs:26:26\n   |\n26 |  \
    \   let oranges = isize::from_str(\n   |                          ^^^^^^^^ function\
    \ or associated item not found in `isize`\n   |\n   = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::str::FromStr;\n\
    \   |\nhelp: there is an associated function with a similar name\n   |\n26 | \
    \    let oranges = isize::from_str_radix(\n   |                          ~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    // Write your code here\n    let mut splitted_str: Vec<&str>\
    \ = s.split(\" and \").collect();\n    let number_of_apples: isize = splitted_str[0].trim().parse().unwrap();\n\
    \    let number_of_oranges: isize = splitted_str[1].trim().parse().unwrap();\n\
    \    n - number_of_apples - number_of_oranges\n}\n\nfn main() {\n    let candidate\
    \ = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and\
    \ 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmp6u4_w6gw.rs:18:66\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let split_input: Vec<&str> = s.split(\" \").collect();\n\
    \    let apples = split_input[0].parse::<isize>().unwrap();\n    let oranges =\
    \ split_input[3].parse::<isize>().unwrap();\n    let total_apples_oranges = apples\
    \ + oranges;\n    n - total_apples_oranges\n}\n\nfn main() {\n    let candidate\
    \ = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and\
    \ 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let t: Vec<&str> = s.split(\" and \").collect();\n  \
    \  let a = t[0].split(\" \").collect::<Vec<&str>>();\n    let b = t[1].split(\"\
    \ \").collect::<Vec<&str>>();\n    n - (a[0].parse::<isize>().unwrap() + b[0].parse::<isize>().unwrap())\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    // Your code here\n    let mut sum = 0;\n    let mut\
    \ apples = 0;\n    let mut oranges = 0;\n    for (i, word) in s.split_whitespace().enumerate()\
    \ {\n        if i == 0 {\n            apples = word.parse::<isize>().unwrap();\n\
    \        } else {\n            oranges = word.parse::<isize>().unwrap();\n   \
    \     }\n    }\n    sum = n - (apples + oranges);\n    sum\n}\n\nfn main() {\n\
    \    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmp82h618sd.rs:24:45\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut nums = s.split(\" \");\n    let apples = nums.next().unwrap().parse::<isize>().unwrap();\n\
    \    let oranges = nums.next().unwrap().parse::<isize>().unwrap();\n    return\
    \ n - apples - oranges;\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpvyfsm236.rs:18:57\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    // Write your code here\n    0\n}\n\nfn main() {\n  \
    \  let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `8`', /tmp/tmpyevhm9cd.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut sum = 0;\n    let mut sum_apples = 0;\n    let\
    \ mut sum_oranges = 0;\n    let mut words = s.split_whitespace();\n    for word\
    \ in words {\n        if word.contains(\"apples\") {\n            let mut word_len\
    \ = word.len();\n            word_len -= 1;\n            sum_apples = word[..word_len].parse::<isize>().unwrap();\n\
    \        } else if word.contains(\"oranges\") {\n            let mut word_len\
    \ = word.len();\n            word_len -= 1;\n            sum_oranges = word[..word_len].parse::<isize>().unwrap();\n\
    \        }\n    }\n    sum = n - (sum_apples + sum_oranges);\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpbxp318iy.rs:24:60\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let (apples, oranges) = s.split_whitespace().filter_map(|x|\
    \ x.parse::<isize>().ok()).sum();\n    n - apples - oranges\n}\n\nfn main() {\n\
    \    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `(_, _): Sum<isize>` is not satisfied\n \
    \   --> /tmp/tmptdeu6mw4.rs:16:90\n     |\n16   |     let (apples, oranges) =\
    \ s.split_whitespace().filter_map(|x| x.parse::<isize>().ok()).sum();\n     |\
    \                                                                            \
    \              ^^^ the trait `Sum<isize>` is not implemented for `(_, _)`\n  \
    \   |\n     = help: the following other types implement trait `Sum<A>`:\n    \
    \           <Duration as Sum<&'a Duration>>\n               <Duration as Sum>\n\
    \               <Option<T> as Sum<Option<U>>>\n               <Result<T, E> as\
    \ Sum<Result<U, E>>>\n               <Simd<f32, LANES> as Sum<&'a Simd<f32, LANES>>>\n\
    \               <Simd<f32, LANES> as Sum>\n               <Simd<f64, LANES> as\
    \ Sum<&'a Simd<f64, LANES>>>\n               <Simd<f64, LANES> as Sum>\n     \
    \        and 72 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let split = s.split(\" \").map(|x| x.parse::<isize>().unwrap()).collect::<Vec<isize>>();\n\
    \    let apples = split[0];\n    let oranges = split[2];\n    n - apples - oranges\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpse8mp8j_.rs:16:57\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    // Write your code here\n    // \u4E0D\u540C\u7684\u9898\
    \u76EE\u6709\u4E0D\u540C\u7684\u89E3\u6CD5\uFF0C\u8FD9\u9898\u4E3B\u8981\u662F\
    \u5BF9\u5B57\u7B26\u4E32\u7684\u64CD\u4F5C\uFF0C\u4F46\u662F\u7531\u4E8E\u5B57\
    \u7B26\u4E32\u7684\u4E0D\u53EF\u53D8\u6027\uFF0C\u56E0\u6B64\u8981\u5148\u628A\
    \u5B57\u7B26\u4E32\u8F6C\u6362\u6210vec\uFF0C\u7136\u540E\u8FDB\u884C\u64CD\u4F5C\
    \n    let mut v = s.chars().collect::<Vec<char>>();\n    let mut i = 0;\n    let\
    \ mut start = -1;\n    while i < v.len() {\n        if v[i] == 'a' && v[i + 1]\
    \ == 'p' && v[i + 2] == 'p' && v[i + 3] == 'l' && v[i + 4] == 'e' && v[i + 5]\
    \ == 's' {\n            start = i;\n            break;\n        }\n        i +=\
    \ 1;\n    }\n    let mut j = start;\n    while j < v.len() {\n        if v[j]\
    \ == 'o' && v[j + 1] == 'r' && v[j + 2] == 'a' && v[j + 3] == 'n' && v[j + 4]\
    \ == 'g' && v[j + 5] == 'e' {\n            start = j;\n            break;\n  \
    \      }\n        j += 1;\n    }\n    let mut l = 0;\n    while l < start {\n\
    \        if v[l] >= '0' && v[l] <= '9' {\n            let mut a = 0;\n       \
    \     while l < start {\n                if v[l] >= '0' && v[l] <= '9' {\n   \
    \                 a = a * 10 + (v[l] as isize - '0' as isize);\n             \
    \       l += 1;\n                } else {\n                    break;\n      \
    \          }\n            }\n            n -= a;\n        } else {\n         \
    \   l += 1;\n        }\n    }\n\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp469n9eyo.rs:20:21\n\
    \   |\n20 |     let mut start = -1;\n   |                     ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp469n9eyo.rs:37:5\n   |\n15 |   fn fruit_distribution(s: String,\
    \ n: isize) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n37 | /     while l < start {\n\
    38 | |         if v[l] >= '0' && v[l] <= '9' {\n39 | |             let mut a =\
    \ 0;\n40 | |             while l < start {\n...  |\n51 | |         }\n52 | | \
    \    }\n   | |_____^ expected `isize`, found `()`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut apples = 0;\n    let mut oranges = 0;\n    for\
    \ c in s.chars() {\n        if c == 'a' {\n            apples += 1;\n        }\
    \ else if c == 'o' {\n            oranges += 1;\n        }\n    }\n    n - apples\
    \ - oranges\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `8`', /tmp/tmp7o6i0_ji.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let f = s.split(\" and \").map(|s| s.replace(\" apples\"\
    , \"\").replace(\" oranges\", \"\").parse::<isize>().unwrap()).sum::<isize>();\n\
    \    n - f\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut sum = 0;\n    let tmp: Vec<_> = s.split_whitespace().collect();\n\
    \    for i in 0..tmp.len() - 1 {\n        sum += tmp[i].parse::<isize>().unwrap();\n\
    \    }\n    return n - sum;\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpyoyjyt3g.rs:19:40\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut splitted_str: Vec<&str> = s.split(\" \").collect();\n\
    \    let counter = splitted_str.len() as isize - 1;\n    let sum: isize = splitted_str.iter().skip(1).map(|x|\
    \ x.parse::<isize>().unwrap()).sum();\n    n - sum - counter\n}\n\nfn main() {\n\
    \    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpfwljqbmx.rs:18:77\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut mango = n;\n    let mut number_of_apples = 0;\n\
    \    let mut number_of_oranges = 0;\n    let mut current_index = 0;\n    let mut\
    \ current_char = String::from(\"\");\n    for c in s.chars() {\n        if c.is_digit(10)\
    \ {\n            current_char.push(c);\n        } else if c == ' ' {\n       \
    \     if current_index == 0 {\n                number_of_apples = match current_char.parse::<isize>()\
    \ {\n                    Ok(n) => n,\n                    Err(_) => 0,\n     \
    \           };\n            } else {\n                number_of_oranges = match\
    \ current_char.parse::<isize>() {\n                    Ok(n) => n,\n         \
    \           Err(_) => 0,\n                };\n            }\n            current_char\
    \ = String::from(\"\");\n            current_index += 1;\n        }\n    }\n \
    \   mango = mango - number_of_apples - number_of_oranges;\n    return mango;\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut split_s = s.split_whitespace();\n    let apples\
    \ = split_s.next().unwrap().parse::<isize>().unwrap();\n    let oranges = split_s.next().unwrap().parse::<isize>().unwrap();\n\
    \    n - apples - oranges\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpegr96bv9.rs:18:60\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let words = s.split(\" and \").collect::<Vec<&str>>();\n\
    \    let mut fruit_number: isize = 0;\n    for word in words {\n        let fruit_type\
    \ = word.split(\" \").collect::<Vec<&str>>();\n        fruit_number += fruit_type[0].parse::<isize>().unwrap();\n\
    \    }\n    n - fruit_number\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
