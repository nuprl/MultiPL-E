name: HumanEval_122_add_elements
language: rs
prompt: "/// Given a non-empty vector of integers arr and an integer k, return\n///\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  /// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n///\
  \ 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k <= len(arr)\n\
  fn add_elements(arr: Vec<isize>, k: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
  \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
  \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
  \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
completions: ["    let mut sum = 0;\n    for i in 0..k {\n        let element = arr[i\
    \ as usize];\n        if element.abs() < 10 || element.abs() > -100 {\n      \
    \      sum += element;\n        }\n    }\n    sum", "    let mut arr: Vec<isize>\
    \ = arr;\n    arr.sort();\n    let mut result = 0;\n    for i in 0..k {\n    \
    \    if arr[i as usize] > 99 {\n            continue;\n        }\n        result\
    \ += arr[i as usize];\n    }\n    result", "    let mut sum = 0;\n    for n in\
    \ arr.iter().take(k as usize) {\n        if n > &99 {\n            sum += 99;\n\
    \        } else {\n            sum += n;\n        }\n    }\n    sum", "    if\
    \ k == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in 0..k\
    \ {\n        if arr[i as usize] <= 99 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for (i, &a) in arr.iter().enumerate()\
    \ {\n        if i >= k as usize {\n            break;\n        }\n        if a\
    \ < 100 {\n            sum += a;\n        }\n    }\n    sum", "    let mut ret\
    \ = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n            ret\
    \ += arr[i as usize];\n        }\n    }\n    ret", "    if k <= 0 {\n        return\
    \ 0;\n    }\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ >= 10 && arr[i as usize] < 100 {\n            sum += arr[i as usize];\n    \
    \    }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n        let\
    \ element = arr[i as usize];\n        if element > 9 && element < 100 {\n    \
    \        sum += element;\n        }\n    }\n    sum", '    arr.iter().take(k as
    usize).filter(|&x| x < &100).sum()', "    let mut result = 0;\n    for &n in arr.iter().take(k\
    \ as usize) {\n        if n >= 0 && n < 100 {\n            result += n;\n    \
    \    }\n    }\n    result", "    let mut sum = 0;\n    for (i, num) in arr.iter().enumerate()\
    \ {\n        let mut digits = 0;\n        let mut num = *num;\n        while num\
    \ > 0 {\n            num /= 10;\n            digits += 1;\n        }\n       \
    \ if digits < 3 {\n            sum += num;\n        }\n        if i + 1 == k as\
    \ usize {\n            break;\n        }\n    }\n    sum", '    arr.iter().take(k
    as usize).filter(|&&x| x < 100).sum()', "    let vec_len = arr.len();\n    let\
    \ mut sum = 0;\n    for i in 0..vec_len {\n        let num = arr[i];\n       \
    \ if num < 100 {\n            sum += num;\n        }\n        if i + 1 == k as\
    \ usize {\n            break;\n        }\n    }\n    sum", "    let mut sum =\
    \ 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum\
    \ += arr[i as usize];\n        }\n    }\n    sum", "    let mut result = 0;\n\
    \    for item in arr.iter().take(k as usize) {\n        if item < &10 || item\
    \ > &99 {\n            result += item;\n        }\n    }\n    result", "    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for i in 0..k {\n        if arr[i as usize] <= 99 {\n            sum\
    \ += arr[i as usize];\n        }\n    }\n    sum", "    let mut new_arr = arr.clone();\n\
    \    new_arr.sort();\n    new_arr.iter().take(k as usize).filter(|&n| n < 100).sum()",
  "    let sum: isize = arr.iter().filter(|&x| x <= &99).take(k as usize).sum();\n\
    \    return sum;", "    let mut sum = 0;\n    for elem in arr.iter().take(k as\
    \ usize) {\n        if elem >= &100 {\n            continue;\n        } else {\n\
    \            sum += elem;\n        }\n    }\n    sum"]
stop_tokens:
- "\n}"
