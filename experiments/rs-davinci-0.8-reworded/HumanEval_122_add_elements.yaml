name: HumanEval_122_add_elements
language: rs
prompt: "/// Given a non-empty vector of integers arr and an integer k, return\n///\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  /// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n///\
  \ 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k <= len(arr)\n\
  fn add_elements(arr: Vec<isize>, k: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
  \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
  \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
  \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
completions: ["    let mut sum = 0;\n    for i in 0..k {\n        let element = arr[i\
    \ as usize];\n        if element.abs() < 10 || element.abs() > -100 {\n      \
    \      sum += element;\n        }\n    }\n    sum", "    let mut arr: Vec<isize>\
    \ = arr;\n    arr.sort();\n    let mut result = 0;\n    for i in 0..k {\n    \
    \    if arr[i as usize] > 99 {\n            continue;\n        }\n        result\
    \ += arr[i as usize];\n    }\n    result", "    let mut sum = 0;\n    for n in\
    \ arr.iter().take(k as usize) {\n        if n > &99 {\n            sum += 99;\n\
    \        } else {\n            sum += n;\n        }\n    }\n    sum", "    if\
    \ k == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in 0..k\
    \ {\n        if arr[i as usize] <= 99 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for (i, &a) in arr.iter().enumerate()\
    \ {\n        if i >= k as usize {\n            break;\n        }\n        if a\
    \ < 100 {\n            sum += a;\n        }\n    }\n    sum", "    let mut ret\
    \ = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n            ret\
    \ += arr[i as usize];\n        }\n    }\n    ret", "    if k <= 0 {\n        return\
    \ 0;\n    }\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ >= 10 && arr[i as usize] < 100 {\n            sum += arr[i as usize];\n    \
    \    }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n        let\
    \ element = arr[i as usize];\n        if element > 9 && element < 100 {\n    \
    \        sum += element;\n        }\n    }\n    sum", '    arr.iter().take(k as
    usize).filter(|&x| x < &100).sum()', "    let mut result = 0;\n    for &n in arr.iter().take(k\
    \ as usize) {\n        if n >= 0 && n < 100 {\n            result += n;\n    \
    \    }\n    }\n    result", "    let mut sum = 0;\n    for (i, num) in arr.iter().enumerate()\
    \ {\n        let mut digits = 0;\n        let mut num = *num;\n        while num\
    \ > 0 {\n            num /= 10;\n            digits += 1;\n        }\n       \
    \ if digits < 3 {\n            sum += num;\n        }\n        if i + 1 == k as\
    \ usize {\n            break;\n        }\n    }\n    sum", '    arr.iter().take(k
    as usize).filter(|&&x| x < 100).sum()', "    let vec_len = arr.len();\n    let\
    \ mut sum = 0;\n    for i in 0..vec_len {\n        let num = arr[i];\n       \
    \ if num < 100 {\n            sum += num;\n        }\n        if i + 1 == k as\
    \ usize {\n            break;\n        }\n    }\n    sum", "    let mut sum =\
    \ 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum\
    \ += arr[i as usize];\n        }\n    }\n    sum", "    let mut result = 0;\n\
    \    for item in arr.iter().take(k as usize) {\n        if item < &10 || item\
    \ > &99 {\n            result += item;\n        }\n    }\n    result", "    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for i in 0..k {\n        if arr[i as usize] <= 99 {\n            sum\
    \ += arr[i as usize];\n        }\n    }\n    sum", "    let mut new_arr = arr.clone();\n\
    \    new_arr.sort();\n    new_arr.iter().take(k as usize).filter(|&n| n < 100).sum()",
  "    let sum: isize = arr.iter().filter(|&x| x <= &99).take(k as usize).sum();\n\
    \    return sum;", "    let mut sum = 0;\n    for elem in arr.iter().take(k as\
    \ usize) {\n        if elem >= &100 {\n            continue;\n        } else {\n\
    \            sum += elem;\n        }\n    }\n    sum", "    let mut k = k;\n \
    \   let mut sum = 0;\n    for x in arr {\n        if k == 0 {\n            break;\n\
    \        }\n        if x < 100 {\n            sum += x;\n        }\n        k\
    \ -= 1;\n    }\n    sum", "    let mut sum = 0;\n    for &num in arr.iter().take(k\
    \ as usize) {\n        if num >= 100 {\n            continue;\n        }\n   \
    \     sum += num;\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n\
    \        let elem = arr[i as usize];\n        if elem >= 100 || elem < 0 {\n \
    \           continue;\n        }\n        sum += elem;\n    }\n    sum", "   \
    \ let mut sum = 0;\n    for &n in arr.iter().take(k as usize) {\n        if n\
    \ >= 10 && n < 100 {\n            sum += n;\n        }\n    }\n    sum", "   \
    \ let mut sum = 0;\n    for v in arr.iter().take(k as usize) {\n        if *v\
    \ < 100 {\n            sum += *v;\n        }\n    }\n    sum", "    let mut elements\
    \ = vec![];\n    for elem in arr.iter().take(k as usize) {\n        if elem.to_string().len()\
    \ <= 2 {\n            elements.push(elem.clone());\n        }\n    }\n    elements.iter().sum()",
  "    let mut result = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100\
    \ {\n            result += arr[i as usize];\n        }\n    }\n    result", '    arr.iter().take(k
    as usize).filter(|x| **x < 100).sum()', "    let mut sum = 0;\n    for i in 0..k\
    \ {\n        let elem = arr[i as usize];\n        if elem >= 10 && elem < 100\
    \ {\n            sum += elem;\n        }\n    }\n    sum", "    let total = arr.iter().take(k\
    \ as usize).filter(|&i| i >= 10 && i < 100).sum();\n    total", "    let mut sum\
    \ = 0;\n    for (i, x) in arr.iter().enumerate() {\n        if i == k as usize\
    \ {\n            break;\n        }\n        if *x >= 100 || *x <= -100 {\n   \
    \         continue;\n        }\n        sum += x;\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for &v in arr.iter().take(k as usize) {\n        if v < 10 {\n\
    \            sum += v;\n        } else if v < 100 {\n            sum += v / 10\
    \ + v % 10;\n        } else {\n            sum += v / 100 + (v / 10) % 10 + v\
    \ % 10;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for (index, elem)\
    \ in arr.iter().enumerate() {\n        if index > k as usize {\n            break;\n\
    \        }\n\n        if elem >= &100 || elem <= &-100 {\n            continue;\n\
    \        }\n\n        sum += elem;\n    }\n\n    sum", "    if k <= 0 {\n    \
    \    return 0;\n    }\n    let mut sum = 0;\n    for i in 0..arr.len() {\n   \
    \     let x = arr[i];\n        if x < 100 {\n            sum += x;\n        }\n\
    \        if i == k as usize - 1 {\n            break;\n        }\n    }\n    sum",
  "    let mut res = 0;\n    for (i, &x) in arr.iter().enumerate() {\n        if i\
    \ < k as usize && x < 100 {\n            res += x;\n        }\n    }\n    res",
  '    arr.iter().take(k as usize).filter(|&x| x >= 10 && x < 100).sum()', "    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut result\
    \ = 0;\n    for element in arr.iter().take(k as usize) {\n        let str_elem\
    \ = element.to_string();\n        if str_elem.len() <= 2 {\n            result\
    \ += element;\n        }\n    }\n    result", '    arr.iter().take(k as usize).map(|&x|
    if x > 99 { 0 } else { x }).sum()', '    arr.iter().take(k as usize).filter(|x|
    *x < 100).sum()', "    let mut sum = 0;\n    for i in 0..k {\n        let num\
    \ = arr[i as usize];\n        if num >= 10 && num < 100 {\n            sum +=\
    \ num;\n        }\n    }\n    sum", "    let mut result = 0;\n    for i in 0..k\
    \ {\n        let num = arr[i as usize];\n        if num / 10 == 0 || num / 100\
    \ == 0 {\n            result += num;\n        }\n    }\n    result", "    let\
    \ mut sum = 0;\n    for elem in arr {\n        if elem < 100 {\n            sum\
    \ += elem;\n        }\n    }\n    sum", "    // initialize answer variable\n \
    \   let mut answer: isize = 0;\n    // add the first k integers\n    for i in\
    \ 0..k {\n        // check if the number is two digits or less\n        if arr[i\
    \ as usize] < 100 {\n            // add to answer\n            answer += arr[i\
    \ as usize];\n        }\n    }\n    // return answer\n    answer", "    let mut\
    \ sum = 0;\n    for v in arr {\n        if v < 100 {\n            sum += v;\n\
    \        }\n        if k == 0 {\n            break;\n        }\n        k -= 1;\n\
    \    }\n    sum", '    arr.iter().filter(|&n| n < 100).take(k as usize).sum()',
  "    let mut sum = 0;\n    for i in 0..k {\n        let element = arr[i as usize];\n\
    \        if element < 100 {\n            sum += element;\n        }\n    }\n \
    \   sum", "    // The code must be here..\n    let mut sum = 0;\n    for i in\
    \ 0..k {\n        if arr[i as usize] <= 99 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum", '    arr.iter().take(k as usize).fold(0, |sum, &x|
    sum + (x / 10).abs() % 10 + (x / 100).abs() % 10)', "    let mut arr = arr;\n\
    \    arr.sort();\n    let count = if k >= arr.len() as isize {\n        arr.len()\n\
    \    } else {\n        k as usize\n    };\n    arr[..count].iter().fold(0, |mut\
    \ acc, x| {\n        if *x > 99 {\n            acc += *x / 100;\n        } else\
    \ if *x > 9 {\n            acc += *x / 10;\n        } else {\n            acc\
    \ += *x;\n        }\n        acc\n    })", "    let mut sum = 0;\n    for n in\
    \ arr {\n        if n <= 99 {\n            sum += n;\n        }\n        if sum\
    \ == k {\n            break;\n        }\n    }\n    sum", '    arr.iter().filter(|&x|
    *x < 100).take(k as usize).sum()', '    arr.iter().take(k as usize).filter(|&x|
    x.abs() < 100).sum()', "    let mut s = 0;\n    for i in 0..k {\n        if arr[i\
    \ as usize] < 100 {\n            s += arr[i as usize];\n        }\n    }\n   \
    \ s", '    arr.iter().take(k as usize).filter(|x| *x < 100).sum()', "    let mut\
    \ sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n        if\
    \ num / 10 == 0 || num / 100 == 0 {\n            sum += num;\n        }\n    }\n\
    \    sum", "    //let mut answer = 0;\n    //for i in 0..k {\n    //    let cur\
    \ = arr[i as usize];\n    //    if cur > 99 {\n    //        answer += 99;\n \
    \   //    } else {\n    //        answer += cur;\n    //    }\n    //}\n    //answer\n\
    \    arr.iter().take(k as usize).map(|&x| min(x, 99)).sum()", "    let mut sum\
    \ = 0;\n    for i in 0..k {\n        if arr[i as usize] <= 99 {\n            sum\
    \ += arr[i as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n   \
    \ for (i, num) in arr.iter().enumerate() {\n        if i == k as usize {\n   \
    \         break;\n        }\n\n        if num < 100 {\n            sum += num;\n\
    \        }\n    }\n\n    sum", '    arr.iter().take(k as usize).map(|e| add_digits(*e)).sum()',
  "    // 24 min\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ >= 10 && arr[i as usize] < 100 {\n            sum += arr[i as usize];\n    \
    \    }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n        let\
    \ n = arr[i as usize];\n        if n < 10 {\n            sum += n;\n        }\
    \ else if n < 100 {\n            sum += n % 10 + n / 10;\n        } else {\n \
    \           sum += 3;\n        }\n    }\n    sum", "    let mut elements = arr.into_iter().take(k\
    \ as usize).filter(|x| *x > 10 && *x < 100);\n    elements.sum()", "    let mut\
    \ i = 0;\n    let mut sum = 0;\n    while i < k && i < arr.len() as isize {\n\
    \        let mut num = arr[i as usize];\n        while num > 9 {\n           \
    \ num /= 10;\n        }\n        sum += num;\n        i += 1;\n    }\n    sum",
  "    let two_digits = |x: &isize| x.to_string().len() <= 2;\n    arr.iter().take(k\
    \ as usize).filter(two_digits).sum()", '    arr.iter().take(k as usize).filter(|&n|
    n < 100).sum()', "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i\
    \ as usize] < 100 {\n            sum += arr[i as usize];\n        }\n    }\n \
    \   sum", "    let mut total = 0;\n    for i in 0..k {\n        let current =\
    \ arr[i as usize];\n        if current < 100 {\n            total += current;\n\
    \        }\n    }\n    total", "    let mut sum = 0;\n    for e in arr.iter().take(k\
    \ as usize) {\n        if *e < 100 {\n            sum += *e;\n        }\n    }\n\
    \    sum", "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ <= 99 {\n            sum += arr[i as usize];\n        }\n    }\n    sum", " \
    \   if k > arr.len() as isize {\n        return 0;\n    }\n    let mut res = 0;\n\
    \    for i in 0..k {\n        if arr[i as usize] > 99 {\n            continue;\n\
    \        }\n        res += arr[i as usize];\n    }\n    res", "    let mut result\
    \ = 0;\n    for i in 0..k {\n        let curr = arr[i as usize];\n        if curr\
    \ < 10 {\n            result += curr;\n        } else if curr < 100 {\n      \
    \      result += curr / 10 + curr % 10;\n        } else {\n            result\
    \ += 9;\n        }\n    }\n    result", "    let mut two_digit_sum = 0;\n    let\
    \ mut one_digit_sum = 0;\n    let mut iter = arr.iter();\n    for _ in 0..k {\n\
    \        match iter.next() {\n            Some(n) if *n < 100 => one_digit_sum\
    \ += *n,\n            Some(n) => two_digit_sum += *n,\n            None => return\
    \ two_digit_sum + one_digit_sum,\n        }\n    }\n    two_digit_sum + one_digit_sum",
  "    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if 0 <= num && num <= 99 {\n            sum += num;\n        }\n    }\n\
    \    sum", "    let mut sum = 0;\n    for (i, v) in arr.iter().enumerate() {\n\
    \        if i as isize == k {\n            break;\n        }\n        if v < &100\
    \ {\n            sum += v;\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for (i, item) in arr.iter().enumerate() {\n        if i > k as usize {\n\
    \            break;\n        }\n        if item < 100 {\n            sum += item;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..arr.len()\
    \ {\n        if i < k as usize {\n            sum += match arr[i] {\n        \
    \        x if x >= 10 && x < 100 => x,\n                _ => 0,\n            };\n\
    \        }\n    }\n    sum", "    let mut acc = 0;\n    for item in arr.iter().take(k\
    \ as usize) {\n        acc += if (*item >= 10) && (*item < 100) {\n          \
    \  *item\n        } else {\n            0\n        }\n    }\n    acc", "    let\
    \ mut result = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n   \
    \     if n < 100 {\n            result += n;\n        }\n    }\n    result", '    arr.iter().take(k
    as usize).filter(|&n| n < 100).sum()', "    let n = arr.len();\n    let k = std::cmp::min(k\
    \ as usize, n);\n    let mut new_arr = vec![0; n];\n    for i in 0..n {\n    \
    \    new_arr[i] = arr[i] / 10 + arr[i] % 10;\n    }\n    new_arr[..k].iter().sum()",
  "    let k = k as usize;\n    arr[..k].iter().filter(|x| x.abs() < 100).sum()",
  '    arr.iter().take(k as usize).filter(|x| **x < 100).sum()', "    // My solution\n\
    \    let mut total = 0;\n    for i in 0..k {\n        let len = arr[i as usize].to_string().len();\n\
    \        if len <= 2 {\n            total += arr[i as usize];\n        }\n   \
    \ }\n    total", "    let mut sum = 0;\n    for elem in arr.iter().take(k as usize)\
    \ {\n        if elem < &100 {\n            sum += elem;\n        }\n    }\n  \
    \  sum", "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ < 100 {\n            sum += arr[i as usize];\n        }\n    }\n    sum", " \
    \   let n = arr.len();\n    if k as usize > n {\n        panic!(\"Constraint Violation:\
    \ k <= len(arr)\");\n    }\n    let mut sum = 0;\n    for i in 0..k as usize {\n\
    \        let c = arr[i];\n        if c > 99 {\n            continue;\n       \
    \ }\n        sum += c;\n    }\n    sum", "    // TODO\n    0", "    let mut sum\
    \ = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum\
    \ += arr[i as usize];\n        }\n    }\n    sum", '    arr.iter().take(k as usize).filter(|x|
    x < &100 && x > &-100).sum()', "    let mut sum = 0;\n    for e in arr.iter().take(k\
    \ as usize) {\n        if *e >= 10 && *e < 100 {\n            sum += *e;\n   \
    \     }\n    }\n    sum", "    let mut res = 0;\n    for (i, &val) in arr.iter().enumerate()\
    \ {\n        if i > k as usize {\n            break;\n        }\n        if val\
    \ > 99 {\n            continue;\n        }\n        res += val;\n    }\n    res",
  '    arr.iter().take(k as usize).fold(0, |acc, &x| acc + (x.abs() % 100) / 10 +
    x.abs() % 10)', '    arr.iter().take(k as usize).filter(|&x| x.abs() < 100).sum()',
  "    // Sum of first k elements\n    let sum = arr[..k as usize].iter().sum();\n\
    \    // Find the amount of elements with at least 3 digits\n    let mut three_digits\
    \ = 0;\n    for n in arr[..k as usize].iter() {\n        if n >= 100 {\n     \
    \       three_digits += 1;\n        }\n    }\n    // subtracting the numbers with\
    \ 3 digits will give the ones with at most 2 digits\n    sum - three_digits *\
    \ 100", "    let mut sum = 0;\n    for i in 0..k {\n        let v = arr[i as usize];\n\
    \        if v < 100 {\n            sum += v;\n        }\n    }\n    sum", "  \
    \  // isize::max_value() is the largest value in isize.\n    let mut acc = isize::max_value();\n\
    \    let mut counter = 0;\n    for i in arr {\n        if counter >= k {\n   \
    \         break;\n        }\n        if i < 100 {\n            acc = acc.saturating_add(i);\n\
    \        }\n        counter += 1;\n    }\n    acc", "    let mut result = 0;\n\
    \    for i in 0..k {\n        if arr[i as usize] < 100 {\n            result +=\
    \ arr[i as usize];\n        }\n    }\n    result", "    let mut sum = 0;\n   \
    \ for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum += arr[i\
    \ as usize];\n        }\n    }\n    sum", '    arr.iter().take(k as usize).filter(|&x|
    x > &9 && x < &100).sum()', "    let mut sum = 0;\n    for x in arr.iter().take(k\
    \ as usize) {\n        if x < 100 {\n            sum += x;\n        }\n    }\n\
    \    sum", "    arr.iter().take(k as usize).fold(0, |acc, &x| {\n        if x\
    \ > 99 {\n            acc\n        } else {\n            acc + x\n        }\n\
    \    })", "    let mut res = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ < 100 {\n            res += arr[i as usize];\n        }\n    }\n    res", " \
    \   // Initialize result with 0.\n    let mut res = 0;\n\n    // Run a loop while\
    \ there are elements in arr\n    // and k is greater than 0.\n    let mut i =\
    \ 0;\n    while i < arr.len() && k > 0 {\n        // Add the first k elements\
    \ of arr which\n        // are of atmost 2 digits.\n        if arr[i] < 100 {\n\
    \            res += arr[i];\n            k -= 1;\n        }\n\n        // Increment\
    \ count of arr\n        i += 1;\n    }\n\n    // Return required sum.\n    res",
  '    arr.iter().take(k as usize).filter(|&x| *x > 9 && *x < 100).sum()', "    let\
    \ mut n = 0;\n    for elem in arr.iter().take(k as usize) {\n        if *elem\
    \ > 99 {\n            n += *elem / 100;\n        } else if *elem > 9 {\n     \
    \       n += *elem / 10;\n        } else {\n            n += *elem;\n        }\n\
    \    }\n    n", "    let mut sum = 0;\n    for &n in arr.iter().take(k as usize)\
    \ {\n        if 0 <= n && n <= 99 {\n            sum += n;\n        }\n    }\n\
    \    sum", "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ < 100 {\n            sum += arr[i as usize];\n        }\n    }\n    sum", " \
    \   let mut result = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 100 {\n            result += num;\n        }\n    }\n    result",
  "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n\
    \            sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for i in 0..k {\n        if i >= arr.len() {\n            break;\n\
    \        }\n        if arr[i as usize] >= 100 {\n            continue;\n     \
    \   }\n        sum += arr[i as usize];\n    }\n    sum", "    let mut res = 0;\n\
    \    for i in 0..k {\n        let num = arr[i as usize];\n        if num >= 10\
    \ && num < 100 {\n            res += num;\n        }\n    }\n    res", "    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut number = arr[i as usize];\n\
    \        let mut digits = 0;\n        while number > 0 {\n            number /=\
    \ 10;\n            digits += 1;\n        }\n        if digits <= 2 {\n       \
    \     sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut count\
    \ = 0;\n    let mut sum = 0;\n    for i in 0..arr.len() {\n        if count ==\
    \ k {\n            break;\n        }\n        if arr[i] > 99 {\n            sum\
    \ += arr[i] / 100;\n        } else {\n            sum += arr[i];\n        }\n\
    \        count += 1;\n    }\n    sum", '    arr.iter().take(k as usize).filter(|&x|
    x > 9 && x < 100).sum()', "    arr.iter().take(k as usize).fold(0, |acc, &x| {\n\
    \        if x > 99 {\n            acc\n        } else {\n            acc + x\n\
    \        }\n    })", "    arr.iter().take(k as usize).fold(0, |acc, x| {\n   \
    \     if *x < 100 {\n            acc + x\n        } else {\n            acc\n\
    \        }\n    })", '    unimplemented!()', "    let mut sum = 0;\n    for element\
    \ in arr.iter().take(k as usize) {\n        if *element >= 100 {\n           \
    \ continue;\n        }\n        sum += element;\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for i in 0..k {\n        let v = arr[i as usize];\n        if\
    \ v < 10 {\n            sum += v;\n        } else if v < 100 {\n            sum\
    \ += v % 10 + v / 10;\n        } else {\n            sum += v % 10 + v / 10 %\
    \ 10 + v / 100;\n        }\n    }\n    sum", "    arr.iter().take(k as usize).fold(0,\
    \ |acc, &x| {\n        acc + if x < 100 { x } else { 0 }\n    })", "    // TODO\n\
    \    0", '    arr.iter().filter(|&n| n < &100).take(k as usize).sum()', "    //\
    \ Your code here.\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i\
    \ as usize] < 100 {\n            sum += arr[i as usize];\n        }\n    }\n \
    \   sum", "    let mut res = 0;\n    for i in 0..k {\n        let v = arr[i as\
    \ usize];\n        if v < 100 {\n            res += v;\n        }\n    }\n   \
    \ res", "    let mut sum = 0;\n    for i in 0..k {\n        let val = arr[i as\
    \ usize];\n        if val < 10 {\n            sum += val;\n        } else if val\
    \ < 100 {\n            sum += val / 10 + val % 10;\n        } else {\n       \
    \     sum += val / 100 + (val % 100) / 10 + val % 10;\n        }\n    }\n    sum",
  "    let mut total = 0;\n    for num in arr.iter().take(k as usize) {\n        total\
    \ += if num < &100 { *num } else { 0 };\n    }\n    total", "    let mut sum =\
    \ 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n        if num\
    \ < 10 {\n            sum += num;\n        } else if num < 100 {\n           \
    \ sum += num;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for num\
    \ in arr {\n        if num < 100 {\n            sum += num;\n        }\n     \
    \   if sum >= k {\n            break;\n        }\n    }\n    sum", "    let mut\
    \ v = arr;\n    v.sort();\n    let mut sum = 0;\n    for i in 0..k {\n       \
    \ if v[i as usize] >= 100 {\n            break;\n        }\n        sum += v[i\
    \ as usize];\n    }\n    sum", '    unimplemented!()', "    // Create a helper\
    \ function to check if value is > 9 and < 100\n    fn check_100(n: isize) -> bool\
    \ {\n        n > 9 && n < 100\n    }\n\n    let mut k_count = 0;\n    let mut\
    \ sum = 0;\n\n    for i in 0..arr.len() {\n        if check_100(arr[i]) {\n  \
    \          sum += arr[i];\n            k_count += 1;\n        }\n        if k_count\
    \ == k {\n            break;\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum += arr[i\
    \ as usize];\n        }\n    }\n    sum", "    arr.iter().take(k as usize).fold(0,\
    \ |acc, n| {\n        if n < 100 {\n            acc + n\n        } else {\n  \
    \          acc\n        }\n    })", "    let mut res = 0;\n    for i in 0..k {\n\
    \        let num = arr[i as usize];\n        if num >= 10 && num < 100 {\n   \
    \         res += num;\n        }\n    }\n    res", "    // Do your magic!\n  \
    \  let mut res = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n\
    \            res += arr[i as usize];\n        }\n    }\n    res", "    let mut\
    \ result = 0;\n    for i in 0..k {\n        let number = arr[i as usize];\n  \
    \      if number > 99 {\n            result += 0;\n        } else if number >\
    \ 9 {\n            result += number / 10;\n        } else {\n            result\
    \ += number;\n        }\n    }\n    result", "    let mut sum = 0;\n    for x\
    \ in &arr[..k as usize] {\n        if *x >= 100 {\n            sum += *x;\n  \
    \      }\n    }\n    sum", "    if k < 1 || k > arr.len() as isize {\n       \
    \ panic!(\"k should be 1 <= k <= len(arr)\");\n    }\n    let mut acc = 0;\n \
    \   for i in 0..k {\n        let n = arr[i as usize];\n        if n >= 100 {\n\
    \            acc += n / 100 + n % 100 / 10 + n % 10;\n        } else if n >= 10\
    \ {\n            acc += n / 10 + n % 10;\n        } else {\n            acc +=\
    \ n;\n        }\n    }\n    acc", "    let mut sum = 0;\n    for i in 0..k {\n\
    \        if arr[i as usize] >= 10 && arr[i as usize] < 100 {\n            sum\
    \ += arr[i as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n   \
    \ for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum += arr[i\
    \ as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n    for &i in\
    \ arr.iter().take(k as usize) {\n        sum += (i / 10).min(10) * 10 + i % 10;\n\
    \    }\n    sum", "    let mut result = 0;\n    for i in 0..k {\n        let num\
    \ = arr[i as usize];\n        if num < 100 {\n            result += num;\n   \
    \     }\n    }\n    result", "    let mut sum = 0;\n    for i in 0..k {\n    \
    \    if arr[i as usize] < 100 {\n            sum += arr[i as usize];\n       \
    \ }\n    }\n    sum", "    let mut sum = 0;\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if i < k as usize && *x > -100 && *x < 100 {\n            sum +=\
    \ x;\n        }\n    }\n    sum", "    let mut k = k as usize;\n    if k >= arr.len()\
    \ {\n        k = arr.len();\n    }\n    let mut count = 0;\n    for i in 0..k\
    \ {\n        if arr[i] < 100 {\n            count += arr[i];\n        }\n    }\n\
    \    count", '    arr.iter().take(k as usize).filter(|&x| x.abs() < 100).sum()',
  "    let mut total = 0;\n    for num in arr.iter().take(k as usize) {\n        if\
    \ num > &100 {\n            continue;\n        }\n        total += num;\n    }\n\
    \    total", "    let mut result = 0;\n    for (index, number) in arr.iter().enumerate()\
    \ {\n        if index < k as usize {\n            result += number;\n        }\n\
    \    }\n    result", "    let sum: isize = arr\n        .iter()\n        .take(k\
    \ as usize)\n        .filter(|&e| e >= &10 && e < &100)\n        .sum();\n   \
    \ return sum;", "    let mut sum = 0;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if i == k as usize {\n            break;\n        }\n        if *v\
    \ < 100 {\n            sum += v;\n        }\n    }\n    sum", '    arr.iter().take(k
    as usize).filter(|&x| *x < 100).sum()', "    let mut sum = 0;\n    for i in 0..k\
    \ {\n        if arr[i as usize] < 100 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n    \
    \    if arr[i as usize] < 100 {\n            sum += arr[i as usize];\n       \
    \ }\n    }\n    sum", '    arr.iter().take(k as usize).filter(|&&x| x < 100).sum()',
  '    arr.iter().take(k as usize).filter(|&&x| x < 100).sum()', "    // Write your\
    \ code here\n    let mut sum = 0;\n    for i in 0..k {\n        let mut n = arr[i\
    \ as usize];\n        let mut d = 0;\n        while n > 0 {\n            n /=\
    \ 10;\n            d += 1;\n        }\n        if d <= 2 {\n            sum +=\
    \ arr[i as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ i in 0..k {\n        if arr[i as usize] <= 99 {\n            sum += arr[i as\
    \ usize];\n        }\n    }\n    sum", '    arr.iter().take(k as usize).filter(|&n|
    n < 100).sum()', "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i\
    \ as usize] >= 10 && arr[i as usize] < 100 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum", '    arr.iter().take(k as usize).filter(|&x| *x <
    100).sum()', "    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i\
    \ as usize];\n        if num >= 100 || num < 0 {\n            sum += 0;\n    \
    \    } else {\n            sum += num;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n        \
    \    sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut res = 0;\n\
    \    for i in 0..k {\n        let a = arr[i as usize];\n        if a < 100 {\n\
    \            res += a;\n        }\n    }\n    res", "    let mut res = 0;\n  \
    \  for i in 0..k {\n        if arr[i as usize] < 100 {\n            res += arr[i\
    \ as usize];\n        }\n    }\n    res", "    let mut result = 0;\n    for v\
    \ in arr.iter().take(k as usize) {\n        if *v > 99 {\n            result +=\
    \ 99;\n        } else {\n            result += *v;\n        }\n    }\n    result",
  '    arr.iter().filter(|n| **n < 100).take(k as usize).sum()', "    let mut ans\
    \ = 0;\n    for i in 0..k {\n        if arr[i as usize] >= 100 {\n           \
    \ continue;\n        }\n        ans += arr[i as usize];\n    }\n    ans", '    arr.iter().take(k
    as usize).filter(|n| *n >= 10 && *n < 100).sum()', '    arr.iter().take(k as usize).filter(|&x|
    x.abs() < 100).sum()', "    let k = k as usize;\n    let len = arr.len();\n  \
    \  if k < len {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in\
    \ 0..len {\n        if arr[i] > 99 {\n            continue;\n        }\n     \
    \   sum += arr[i];\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k\
    \ {\n        if arr[i as usize] < 100 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum", "    if k > arr.len() as isize {\n        return\
    \ 0;\n    }\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ < 100 {\n            sum += arr[i as usize];\n        }\n    }\n    sum", '    arr.iter().take(k
    as usize).filter(|x| x.abs() < 100).sum()', "    let k = k as usize;\n    let\
    \ mut summ = 0;\n    for i in 0..k {\n        let item = arr[i];\n        if item\
    \ < 100 {\n            summ += item;\n        }\n    }\n    summ", '    arr.iter().filter(|x|
    x < &100).take(k as usize).sum()', "    let mut count = 0;\n    let mut sum =\
    \ 0;\n    for x in arr {\n        if x < 100 {\n            sum += x;\n      \
    \      count += 1;\n        }\n        if count == k {\n            break;\n \
    \       }\n    }\n    sum", '    arr.iter().take(k as usize).map(|&x| if x > 99
    { 100 } else { x }).sum()', "    let k = k as usize;\n    let mut sum = 0;\n \
    \   for i in 0..k {\n        if arr[i] < 100 {\n            sum += arr[i];\n \
    \       }\n    }\n    sum", '    arr.iter().take(k as usize).filter(|x| x < &100).sum()',
  "    let mut result = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n > 99 {\n            result += n;\n        }\n    }\n    result",
  '    arr.iter().filter(|x| *x < 100).take(k as usize).sum()', "    let mut result\
    \ = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n            result\
    \ += arr[i as usize];\n        }\n    }\n    result", "    let mut sum = 0;\n\
    \    for i in 0..k {\n        let mut x = arr[i as usize];\n        let mut count\
    \ = 0;\n        while x != 0 {\n            x /= 10;\n            count += 1;\n\
    \        }\n        if count <= 2 {\n            sum += arr[i as usize];\n   \
    \     }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n       \
    \ if arr[i as usize] < 100 {\n            sum += arr[i as usize];\n        }\n\
    \    }\n    sum", '    arr.iter().take(k as usize).filter(|n| n.abs() < 100).sum()',
  "    let mut sum = 0;\n    for elem in arr {\n        if elem < 100 {\n        \
    \    sum += elem;\n        }\n    }\n    sum", "    let mut output = 0;\n    for\
    \ (i, val) in arr.iter().enumerate() {\n        if i < k as usize {\n        \
    \    output += *val;\n        }\n    }\n    output", "    let mut sum = 0;\n \
    \   for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum += arr[i\
    \ as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n    for x in\
    \ arr.iter().take(k as usize) {\n        if *x > 99 {\n            continue;\n\
    \        }\n        sum += x;\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ n in arr {\n        if n > 9 && n < 100 {\n            sum += n;\n        }\n\
    \        if sum > k {\n            break;\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut result\
    \ = 0;\n    for x in arr.iter().take(k as usize) {\n        if x < &100 {\n  \
    \          result += x;\n        }\n    }\n    result", "    let mut result =\
    \ 0;\n    for x in arr {\n        if 0 <= x && x <= 99 {\n            result +=\
    \ x;\n        } else if x <= 999 {\n            result += x % 100;\n        }\n\
    \        if k <= 0 {\n            break;\n        }\n        k -= 1;\n    }\n\
    \    result", "    let mut sum = 0;\n    for n in &arr[..k as usize] {\n     \
    \   if n < 10 {\n            sum += n;\n        } else if n < 100 {\n        \
    \    sum += n % 10 + n / 10;\n        } else {\n            sum += n % 10 + n\
    \ / 10 % 10 + n / 100;\n        }\n    }\n    sum", "    // The two-digit integers\
    \ are represented in form aa..a,\n    // where a is a digit.\n    // The upper\
    \ bound of the two-digit integers is 99 = 99..9,\n    // where 9 is a digit.\n\
    \    // Hence, the two-digit integers are a two-digit representation of\n    //\
    \ a number in the range [0, 99].\n    arr.iter().take(k as usize).filter(|&num|\
    \ num <= &99).sum()", "    let mut result = 0;\n    for v in arr.iter().take(k\
    \ as usize) {\n        if v < &100 {\n            result += v;\n        }\n  \
    \  }\n    result", "    let two_digits = 100;\n    arr.iter().take(k as usize).filter(|x|\
    \ x < &two_digits).sum()", "    let mut v: Vec<isize> = Vec::new();\n    for n\
    \ in arr {\n        if 0 <= n && n <= 99 {\n            v.push(n);\n        }\n\
    \    }\n    if k > v.len() as isize {\n        return -1;\n    }\n    return v.iter().take(k\
    \ as usize).sum();", '    (0..k).map(|i| arr[i as usize]).filter(|&n| n < 100).sum()']
stop_tokens:
- "\n}"
