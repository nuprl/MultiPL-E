language: rs
name: HumanEval_90_next_smallest
results:
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    if lst.len()\
    \ == 0 {\n        return None;\n    }\n    if lst.len() == 1 {\n        return\
    \ None;\n    }\n    if lst.len() == 2 {\n        if lst[0] == lst[1] {\n     \
    \       return None;\n        }\n    }\n    Some(lst[1])\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() == 0 {\n        return None;\n    }\n \
    \   let mut min = lst[0];\n    let mut submin = std::isize::MAX;\n    for el in\
    \ lst {\n        if el < min {\n            submin = min;\n            min = el;\n\
    \        } else if el < submin && el != min {\n            submin = el;\n    \
    \    }\n    }\n    if submin == std::isize::MAX {\n        None\n    } else {\n\
    \        Some(submin)\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    for i in 0..lst.len() - 1 {\n    \
    \    if lst[i] != lst[i + 1] {\n            return Some(lst[i + 1]);\n       \
    \ }\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    //TODO\n    None\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpmzitqf0z.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut sorted = lst.clone();\n    sorted.sort();\n\
    \    let uniq: Vec<isize> = sorted.into_iter().unique().collect();\n    if uniq.len()\
    \ < 2 {\n        None\n    } else {\n        Some(uniq[1])\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unique` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmp8g0dn020.rs:15:47\n   |\n15 |     let uniq:\
    \ Vec<isize> = sorted.into_iter().unique().collect();\n   |                  \
    \                             ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  lst.iter().skip(1).min().cloned()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpt5oo5fdy.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut sorted_list = lst.clone();\n    sorted_list.sort();\n\
    \    for i in 1..sorted_list.len() {\n        if sorted_list[i] != sorted_list[i\
    \ - 1] {\n            return Some(sorted_list[i]);\n        }\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() == 0 {\n        return None;\n    }\n\n\
    \    let mut min = lst[0];\n    let mut second_min = lst[0];\n\n    for n in lst\
    \ {\n        if n < min {\n            second_min = min;\n            min = n;\n\
    \        } else if n < second_min {\n            second_min = n;\n        }\n\
    \    }\n\n    match second_min {\n        s if s == min => None,\n        _ =>\
    \ Some(second_min),\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpm95rjys5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut small_ind = 0;\n    let mut sec_small_ind = 1;\n    if lst[sec_small_ind]\
    \ < lst[small_ind] {\n        small_ind = 1;\n        sec_small_ind = 0;\n   \
    \ }\n    for i in 2..lst.len() {\n        if lst[i] < lst[small_ind] {\n     \
    \       sec_small_ind = small_ind;\n            small_ind = i;\n        } else\
    \ if lst[i] < lst[sec_small_ind] {\n            sec_small_ind = i;\n        }\n\
    \    }\n    return Some(lst[sec_small_ind]);\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpc1tm41qf.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().min_by(|x, y| {\n        let diff = x - y;\n\
    \        if diff == 0 {\n            Ordering::Equal\n        } else if diff >\
    \ 0 {\n            Ordering::Greater\n        } else {\n            Ordering::Less\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = next_smallest;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpwj55qpgr.rs:16:13\n   |\n16 |             Ordering::Equal\n   |    \
    \         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpwj55qpgr.rs:18:13\n\
    \   |\n18 |             Ordering::Greater\n   |             ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpwj55qpgr.rs:20:13\n   |\n20 |             Ordering::Less\n   |\
    \             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0369]: cannot\
    \ subtract `&&isize` from `&&isize`\n  --> /tmp/tmpwj55qpgr.rs:14:22\n   |\n14\
    \ |         let diff = x - y;\n   |                    - ^ - &&isize\n   |   \
    \                 |\n   |                    &&isize\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwj55qpgr.rs:13:5\n   |\n12 |   fn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n   |                                        -------------\
    \ expected `Option<isize>` because of return type\n13 | /     lst.iter().min_by(|x,\
    \ y| {\n14 | |         let diff = x - y;\n15 | |         if diff == 0 {\n16 |\
    \ |             Ordering::Equal\n...  |\n21 | |         }\n22 | |     })\n   |\
    \ |______^ expected `isize`, found `&isize`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found enum `Option<&isize>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().enumerate().filter(|&(i, _)| i > 0).min_by_key(|&(_,\
    \ x)| x).map(|(_, x)| *x)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpvw5eezxi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let min = lst.iter().min().unwrap();\n    let mut second_min\
    \ = None;\n    for item in lst {\n        if item != *min {\n            second_min\
    \ = if let Some(x) = second_min {\n                Some(cmp::min(x, item))\n \
    \           } else {\n                Some(item)\n            }\n        }\n \
    \   }\n    second_min\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmphvl0im2z.rs:18:22\n   |\n18 |                 Some(cmp::min(x,\
    \ item))\n   |                      ^^^ use of undeclared crate or module `cmp`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // TODO\n    let mut temp:Vec<isize> = Vec::new();\n\
    \    let mut temp1:Vec<isize> = Vec::new();\n    let mut ret:Option<isize> = None;\n\
    \    let mut ret1:Option<isize> = None;\n    for x in lst {\n        temp.push(x);\n\
    \    }\n    let mut min = temp[0];\n    for x in temp.iter() {\n        if *x\
    \ < min {\n            min = *x;\n        }\n    }\n    let mut min1 = min;\n\
    \    for x in temp.iter() {\n        if *x < min1 && *x != min {\n           \
    \ min1 = *x;\n        }\n    }\n    ret = Some(min1);\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmp0gon4i3l.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut small = std::isize::MAX;\n    let mut next_small = std::isize::MAX;\n\
    \    for v in lst {\n        if v < small {\n            next_small = small;\n\
    \            small = v;\n        } else if v < next_small {\n            next_small\
    \ = v;\n        }\n    }\n    if next_small == std::isize::MAX {\n        None\n\
    \    } else {\n        Some(next_small)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp8qb_eztr.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.into_iter().min().and_then(|min| lst.into_iter().filter(|&x|\
    \ x != min).min())\n}\n\nfn main() {\n    let candidate = next_smallest;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpus74b82g.rs:13:36\n\
    \    |\n12  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    |    \
    \              --- move occurs because `lst` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n13  |     lst.into_iter().min().and_then(|min|\
    \ lst.into_iter().filter(|&x| x != min).min())\n    |         -----------    \
    \            ^^^^^ --- use occurs due to use in closure\n    |         |     \
    \                     |\n    |         |                          value used here\
    \ after move\n    |         `lst` moved due to this method call\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `lst`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut result = 0;\n    let mut val = std::isize::MAX;\n\
    \    let mut val_max = std::isize::MIN;\n    let mut flag = true;\n    for i in\
    \ lst {\n        if i < val {\n            result = val;\n            val = i;\n\
    \        } else if i < result && i > val {\n            result = i;\n        }\n\
    \        if i > val_max {\n            val_max = i;\n        }\n    }\n    if\
    \ result == 0 || val == val_max {\n        None\n    } else {\n        Some(result)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut v = lst;\n    if v.len() < 2 {\n        return\
    \ None;\n    }\n    v.sort();\n    if v[0] == v[1] {\n        return None;\n \
    \   }\n    Some(v[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut min = lst[0];\n    let mut min2 = lst[1];\n    for i in 2..lst.len()\
    \ {\n        if lst[i] < min {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i];\n        }\n  \
    \  }\n    if min2 == min {\n        None\n    } else {\n        Some(min2)\n \
    \   }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmp62orr2qa.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = isize::max_value();\n    let mut\
    \ next_smallest = isize::max_value();\n    for e in lst {\n        if e < smallest\
    \ {\n            next_smallest = smallest;\n            smallest = e;\n      \
    \  } else if e < next_smallest {\n            next_smallest = e;\n        }\n\
    \    }\n    if next_smallest == isize::max_value() {\n        None\n    } else\
    \ {\n        Some(next_smallest)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n \
    \   assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpa84cw2p1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n\
    \    lst.get(1).cloned()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut m = std::isize::MAX;\n    let mut second_m =\
    \ std::isize::MAX;\n    for i in lst {\n        if i <= m {\n            second_m\
    \ = m;\n            m = i;\n        } else if i < second_m {\n            second_m\
    \ = i;\n        }\n    }\n    if second_m != std::isize::MAX {\n        Some(second_m)\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpkhu64pl9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // for comparison, we need exactly two values\n    if\
    \ lst.len() < 2 {\n        return None;\n    }\n\n    // initialize to the first\
    \ two values\n    let mut next_smallest = lst[0].min(lst[1]);\n    let mut smallest\
    \ = lst[0].max(lst[1]);\n\n    // go through rest of the list, updating next_smallest\
    \ if necessary\n    for num in lst.iter().skip(2) {\n        if num < &smallest\
    \ {\n            next_smallest = smallest;\n            smallest = *num;\n   \
    \     } else if num < &next_smallest {\n            next_smallest = *num;\n  \
    \      }\n    }\n\n    Some(next_smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmp5yfbhce5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() == 0 {\n        return None;\n    }\n\n\
    \    let mut min = lst[0];\n    let mut second_min = min;\n\n    for elem in lst\
    \ {\n        if elem < min {\n            second_min = min;\n            min =\
    \ elem;\n        } else if elem < second_min {\n            second_min = elem;\n\
    \        }\n    }\n\n    if second_min == min {\n        None\n    } else {\n\
    \        Some(second_min)\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpk6naz99s.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut max = isize::min_value();\n    let mut min = isize::max_value();\n\
    \    for i in lst {\n        if i > max {\n            max = i;\n        }\n \
    \       if i < min {\n            min = i;\n        }\n    }\n    let mut to_ret\
    \ = None;\n    for i in lst {\n        if i < max && i > min {\n            if\
    \ let Some(old) = to_ret {\n                if i < old {\n                   \
    \ to_ret = Some(i);\n                }\n            } else {\n               \
    \ to_ret = Some(i);\n            }\n        }\n    }\n    to_ret\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpm9ggfuff.rs:27:14\n\
    \    |\n12  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    |    \
    \              --- move occurs because `lst` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n...\n18  |     for i in lst {\n    |       \
    \       --- `lst` moved due to this implicit call to `.into_iter()`\n...\n27 \
    \ |     for i in lst {\n    |              ^^^ value used here after move\n  \
    \  |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n18  |     for i in &lst {\n    |  \
    \            +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976052
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n\
    \    lst.get(1).cloned()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut min = isize::max_value();\n    let mut sec_min = isize::max_value();\n\
    \    for x in lst {\n        if x < min {\n            sec_min = min;\n      \
    \      min = x;\n        } else if x < sec_min {\n            sec_min = x;\n \
    \       }\n    }\n    if sec_min == isize::max_value() {\n        None\n    }\
    \ else {\n        Some(sec_min)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n \
    \   assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp6i75s78e.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut smallest = std::isize::MAX;\n    let mut smallest2 = std::isize::MAX;\n\
    \    for num in lst {\n        if num < smallest {\n            smallest2 = smallest;\n\
    \            smallest = num;\n        } else if num < smallest2 {\n          \
    \  smallest2 = num;\n        }\n    }\n    if smallest2 == std::isize::MAX {\n\
    \        None\n    } else {\n        Some(smallest2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpf2638pmh.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut v: Vec<isize> = lst.clone();\n    v.sort();\n\
    \    v.dedup();\n    if v.len() < 2 {\n        return None;\n    } else {\n  \
    \      return Some(v[1]);\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  lst.iter().cloned().collect::<Vec<isize>>().sort();\n    for i in 1..lst.len()\
    \ {\n        if lst[i - 1] != lst[i] {\n            return Some(lst[i]);\n   \
    \     }\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpqkjgqlhm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = isize::max_value();\n    let mut\
    \ second_smallest = isize::max_value();\n    for item in lst {\n        if item\
    \ < smallest {\n            second_smallest = smallest;\n            smallest\
    \ = item;\n        } else if item < second_smallest {\n            second_smallest\
    \ = item;\n        }\n    }\n    if second_smallest == isize::max_value() {\n\
    \        None\n    } else {\n        Some(second_smallest)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp4mnbr3_q.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpu3dop62s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut my_lst = lst.clone();\n    my_lst.sort();\n\
    \    my_lst.dedup();\n    if my_lst.len() <= 1 {\n        return None;\n    }\n\
    \    Some(my_lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut min = lst[0];\n    let mut next_min = lst[1];\n    if next_min < min\
    \ {\n        next_min = min;\n        min = lst[1];\n    }\n    for i in 2..lst.len()\
    \ {\n        if lst[i] < min {\n            next_min = min;\n            min =\
    \ lst[i];\n        } else if lst[i] < next_min {\n            next_min = lst[i];\n\
    \        }\n    }\n    Some(next_min)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp0ako932o.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let mut num\
    \ = None;\n    for i in 1..lst.len() {\n        if lst[i] != lst[i - 1] {\n  \
    \          num = Some(lst[i]);\n            break;\n        }\n    }\n    num\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut tmp = lst.clone();\n    tmp.sort();\n    let mut res = None;\n    for\
    \ i in 1..tmp.len() {\n        if tmp[i] > tmp[0] {\n            res = Some(tmp[i]);\n\
    \            break;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    use std::cmp::Ordering;\n    lst.iter().fold((None,\
    \ None), |(x, y), x_i| {\n        match x {\n            None => (Some(x_i), y),\n\
    \            Some(x_v) => match x_v.cmp(x_i) {\n                Ordering::Less\
    \ => (Some(x_v), Some(x_i)),\n                Ordering::Equal => (Some(x_v), y),\n\
    \                Ordering::Greater => (Some(x_i), y),\n            },\n      \
    \  }\n    })\n    .1\n}\n\nfn main() {\n    let candidate = next_smallest;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2xcado2z.rs:14:5\n   |\n\
    12 |   fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |            \
    \                            ------------- expected `Option<isize>` because of\
    \ return type\n13 |       use std::cmp::Ordering;\n14 | /     lst.iter().fold((None,\
    \ None), |(x, y), x_i| {\n15 | |         match x {\n16 | |             None =>\
    \ (Some(x_i), y),\n17 | |             Some(x_v) => match x_v.cmp(x_i) {\n... \
    \ |\n23 | |     })\n24 | |     .1\n   | |______^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected enum `Option<isize>`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976052
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // TODO\n    None\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpczlqvmnn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n  // TODO: return the 2nd smallest element of the vector,\
    \ None if there is no such element\n  None\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmp82kx6wn2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let mut cur_min = lst[0];\n    let mut cur_min2 = std::isize::MAX;\n    for\
    \ i in 1..lst.len() {\n        if lst[i] < cur_min {\n            cur_min2 = cur_min;\n\
    \            cur_min = lst[i];\n        } else if lst[i] < cur_min2 {\n      \
    \      cur_min2 = lst[i];\n        }\n    }\n    if cur_min2 == std::isize::MAX\
    \ {\n        None\n    } else {\n        Some(cur_min2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpnzl4pbn3.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut next_smallest = lst[0];\n    let mut smallest = lst[0];\n    for x\
    \ in lst.iter() {\n        if *x < smallest {\n            next_smallest = smallest;\n\
    \            smallest = *x;\n        } else if *x < next_smallest {\n        \
    \    next_smallest = *x;\n        }\n    }\n    Some(next_smallest)\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpwv9zfruv.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    use std::cmp::Ordering;\n    match lst.len() {\n   \
    \     0 => None,\n        1 => None,\n        _ => {\n            let mut min\
    \ = lst[0];\n            let mut min2 = lst[1];\n            for i in 2..lst.len()\
    \ {\n                match min.cmp(&lst[i]) {\n                    Ordering::Greater\
    \ => {\n                        min2 = min;\n                        min = lst[i];\n\
    \                    }\n                    Ordering::Equal => {\n           \
    \             continue;\n                    }\n                    Ordering::Less\
    \ => {\n                        match min2.cmp(&lst[i]) {\n                  \
    \          Ordering::Greater => {\n                                min2 = lst[i];\n\
    \                            }\n                            Ordering::Equal =>\
    \ {\n                                continue;\n                            }\n\
    \                            Ordering::Less => {\n                           \
    \     continue;\n                            }\n                        }\n  \
    \                  }\n                }\n            }\n            match min.cmp(&min2)\
    \ {\n                Ordering::Greater => Some(min2),\n                Ordering::Equal\
    \ => None,\n                Ordering::Less => Some(min),\n            }\n    \
    \    }\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmp8uhm__rr.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = lst[0];\n    let mut next_smallest\
    \ = isize::max_value();\n    for e in lst {\n        if e < smallest {\n     \
    \       next_smallest = smallest;\n            smallest = e;\n        } else if\
    \ e < next_smallest && e != smallest {\n            next_smallest = e;\n     \
    \   }\n    }\n    if next_smallest == isize::max_value() {\n        None\n   \
    \ } else {\n        Some(next_smallest)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpufllv6gm.rs:13:24

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpu3dop62s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut res = lst[0];\n    let mut first = true;\n    for item in lst {\n \
    \       if first {\n            first = false;\n            continue;\n      \
    \  }\n        if item < res {\n            res = item;\n        }\n    }\n   \
    \ Some(res)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpur97wnrr.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = isize::MAX;\n    let mut second_smallest\
    \ = isize::MAX;\n    for el in lst {\n        if el < smallest {\n           \
    \ second_smallest = smallest;\n            smallest = el;\n        } else if el\
    \ > smallest && el < second_smallest {\n            second_smallest = el;\n  \
    \      }\n    }\n    if second_smallest == isize::MAX {\n        None\n    } else\
    \ {\n        Some(second_smallest)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = std::isize::MAX;\n    let mut second_smallest\
    \ = std::isize::MAX;\n    for e in lst {\n        if e < smallest {\n        \
    \    second_smallest = smallest;\n            smallest = e;\n        } else if\
    \ e < second_smallest {\n            second_smallest = e;\n        }\n    }\n\
    \    if second_smallest == std::isize::MAX {\n        None\n    } else {\n   \
    \     Some(second_smallest)\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp24lyizud.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    let mut pre_num = lst[0];\n    for\
    \ num in lst {\n        if num != pre_num {\n            return Some(num);\n \
    \       }\n        pre_num = num;\n    }\n    None\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut sorted = lst.clone();\n    sorted.sort();\n    Some(sorted[1])\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpsmlqdbwq.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpu3dop62s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut min = None;\n    let mut sec = None;\n    for\
    \ num in lst {\n        match min {\n            None => min = Some(num),\n  \
    \          Some(v) => {\n                if num < v {\n                    if\
    \ let Some(t) = sec {\n                        if t < num {\n                \
    \            sec = Some(num);\n                        }\n                   \
    \ } else {\n                        sec = Some(num);\n                    }\n\
    \                    min = Some(num);\n                } else if let Some(t) =\
    \ sec {\n                    if num < t {\n                        sec = Some(num);\n\
    \                    }\n                } else {\n                    sec = Some(num);\n\
    \                }\n            }\n        }\n    }\n    sec\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpcaten0ic.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    if lst.len() <= 1 {\n      \
    \  return None;\n    }\n    lst.sort();\n    for i in 1..lst.len() {\n       \
    \ if lst[i - 1] != lst[i] {\n            return Some(lst[i]);\n        }\n   \
    \ }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().cloned().collect::<BTreeSet<_>>().iter().cloned().nth(1)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n  --> /tmp/tmphosbhrwt.rs:13:35\n\
    \   |\n13 |     lst.iter().cloned().collect::<BTreeSet<_>>().iter().cloned().nth(1)\n\
    \   |                                   ^^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::BTreeSet;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut i = lst.iter();\n    match i.next() {\n    \
    \    None => None,\n        Some(x) => {\n            let mut min = x;\n     \
    \       let mut min2 = None;\n            for j in i {\n                if j <\
    \ min {\n                    min2 = Some(min);\n                    min = j;\n\
    \                } else if min2.is_none() || (j < min2.unwrap()) {\n         \
    \           min2 = Some(j);\n                }\n            }\n            min2\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6tsnsy7t.rs:27:13\n   |\n\
    12 | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |              \
    \                        ------------- expected `Option<isize>` because of return\
    \ type\n...\n27 |             min2\n   |             ^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected enum `Option<isize>`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut t: Vec<isize> = lst.clone();\n    t.sort();\n\
    \    t.dedup();\n    if t.len() < 2 {\n        return None;\n    }\n    Some(t[1])\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let mut lst = lst;\n    lst.sort();\n    for i in 1..lst.len() {\n       \
    \ if lst[i] != lst[i - 1] {\n            return Some(lst[i]);\n        }\n   \
    \ }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // Nothing to do if there are no elements\n    if lst.len()\
    \ == 0 {\n        return None;\n    }\n\n    // Initialize min and min_2nd_smallest\n\
    \    let mut min = lst[0];\n    let mut min_2nd_smallest = std::isize::MAX;\n\n\
    \    // Find min and min_2nd_smallest in the list\n    for i in 1..lst.len() {\n\
    \        if lst[i] < min {\n            min_2nd_smallest = min;\n            min\
    \ = lst[i];\n        } else if lst[i] < min_2nd_smallest && lst[i] != min {\n\
    \            min_2nd_smallest = lst[i];\n        }\n    }\n\n    // Return only\
    \ if min_2nd_smallest is not equal to INT_MAX\n    if min_2nd_smallest != std::isize::MAX\
    \ {\n        Some(min_2nd_smallest)\n    } else {\n        None\n    }\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let mut sml = vec![];\n    let mut result = None;\n    for i in 0..lst.len()\
    \ {\n        if sml.is_empty() {\n            sml.push(lst[i]);\n        } else\
    \ if sml.len() == 1 {\n            sml.push(min(sml[0], lst[i]));\n          \
    \  result = Some(max(sml[0], lst[i]));\n        } else {\n            if lst[i]\
    \ < sml[0] {\n                result = Some(sml[0]);\n                sml[0] =\
    \ lst[i];\n            } else if lst[i] < sml[1] {\n                result = Some(lst[i]);\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp1ud9b3l4.rs:22:22\n\
    \   |\n22 |             sml.push(min(sml[0], lst[i]));\n   |                 \
    \     ^^^\n...\n36 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n22 |\
    \             sml.push(main(sml[0], lst[i]));\n   |                      ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp1ud9b3l4.rs:23:27\n\
    \   |\n23 |             result = Some(max(sml[0], lst[i]));\n   |            \
    \               ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut smallest = lst[0];\n    let mut next_smallest = None;\n    for elem\
    \ in lst {\n        if elem < smallest {\n            next_smallest = Some(smallest);\n\
    \            smallest = elem;\n        } else if next_smallest.is_none() || elem\
    \ < next_smallest.unwrap() {\n            next_smallest = Some(elem);\n      \
    \  }\n    }\n    next_smallest\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmp1mqf_db1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n  if lst.len() < 2 {\n    return None;\n  }\n  let mut sorted\
    \ = lst.clone();\n  sorted.sort();\n  let mut prev = sorted[0];\n  for x in sorted.iter().skip(1)\
    \ {\n    if *x != prev {\n      return Some(*x);\n    }\n    prev = *x;\n  }\n\
    \  None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().filter(|&x| x.is_positive()).min().cloned()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpzruu5hds.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().fold((None, None), |(first, second), num|\
    \ {\n        match first {\n            None => (Some(*num), second),\n      \
    \      Some(f) => match second {\n                None => {\n                \
    \    if f < *num {\n                        (Some(f), Some(*num))\n          \
    \          } else {\n                        (Some(*num), Some(f))\n         \
    \           }\n                }\n                Some(s) => {\n             \
    \       if f < *num && *num < s {\n                        (Some(f), Some(*num))\n\
    \                    } else if *num < f {\n                        (Some(*num),\
    \ Some(f))\n                    } else {\n                        (Some(f), Some(s))\n\
    \                    }\n                }\n            },\n        }\n    })\n\
    \    .1\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp7z5eq9ib.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let min = lst.iter().min().unwrap();\n    let mut next_min\
    \ = min + 1;\n    for e in lst.iter() {\n        if e > min && e < next_min {\n\
    \            next_min = *e;\n        }\n    }\n    if next_min == min + 1 {\n\
    \        None\n    } else {\n        Some(next_min)\n    }\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy2dbceto.rs:16:27\n   |\n\
    16 |         if e > min && e < next_min {\n   |                           ^^^^^^^^\n\
    \   |                           |\n   |                           expected `&isize`,\
    \ found `isize`\n   |                           help: consider borrowing here:\
    \ `&next_min`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut vec_in = lst.clone();\n    vec_in.sort();\n\
    \    let mut count = 0;\n    for i in 0..vec_in.len() {\n        if vec_in[i]\
    \ != vec_in[0] {\n            count = i;\n            break;\n        }\n    }\n\
    \    if count == 0 {\n        return None;\n    }\n    Some(vec_in[count])\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // Your code here\n    None\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpz9jblcci.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let l = lst.len();\n\
    \    if l < 2 {\n        return None;\n    }\n    if lst[0] == lst[1] {\n    \
    \    return None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let mut min = lst[0];\n    let mut second_min = lst[1];\n    for i in 1..lst.len()\
    \ {\n        if lst[i] < min {\n            min = lst[i];\n        }\n       \
    \ if second_min < min {\n            second_min = min;\n        }\n        if\
    \ lst[i] > min && lst[i] < second_min {\n            second_min = lst[i];\n  \
    \      }\n    }\n    if second_min == min {\n        return None;\n    }\n   \
    \ Some(second_min)\n}\n\nfn main() {\n    let candidate = next_smallest;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpbmxklr00.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut copy = lst.clone();\n    copy.sort();\n    copy.dedup();\n\
    \    copy.get(1).cloned()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // YOUR CODE HERE\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpx4i3ydg6.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    let first = lst[0];\n    let second\
    \ = lst[1];\n    if first != second {\n        return Some(second);\n    }\n \
    \   lst.retain(|&x| x != first);\n    lst.remove(0);\n    if lst.len() == 0 {\n\
    \        return None;\n    }\n    Some(lst[0])\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 0) should be < len (is
    0)'', /tmp/tmplzkbpf54.rs:24:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst_cp = lst.clone();\n    lst_cp.sort();\n    for i in 0..lst_cp.len()\
    \ - 1 {\n        if lst_cp[i] != lst_cp[i + 1] {\n            return Some(lst_cp[i\
    \ + 1]);\n        }\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let min = lst.iter().min().unwrap();\n    let mut smallest = lst.iter().filter(|x|\
    \ **x != *min).min();\n    if smallest.is_none() {\n        smallest = lst.iter().min();\n\
    \    }\n    return smallest.map(|x| *x);\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp6rd_zdmj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i == 0 {\n            continue;\n        }\n        if n != &lst[i\
    \ - 1] {\n            return Some(*n);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut a = lst;\n    a.sort();\n    a.dedup();\n  \
    \  if a.len() < 2 {\n        None\n    } else {\n        Some(a[1])\n    }\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut sorted = lst.clone();\n    sorted.sort();\n    let mut val = sorted[0];\n\
    \    for i in 0..sorted.len() {\n        if sorted[i] > val {\n            return\
    \ Some(sorted[i]);\n        }\n    }\n    None\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut v = lst;\n    v.sort();\n    let mut last = v[0];\n    for item in\
    \ v {\n        if item > last {\n            return Some(item);\n        }\n \
    \       last = item;\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpu3dop62s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    for i in 1..lst.len() {\n        if\
    \ lst[i - 1] != lst[i] {\n            return Some(lst[i]);\n        }\n    }\n\
    \    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut small = lst[0];\n    let mut medium = lst[1];\n    for i in lst {\n\
    \        if i < small {\n            medium = small;\n            small = i;\n\
    \        } else if i < medium {\n            medium = i;\n        }\n    }\n \
    \   Some(medium)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpbcfb5bgh.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut cpy = lst.clone();\n    cpy.sort();\n    let\
    \ mut p = 0;\n    while p < cpy.len() - 1 {\n        if cpy[p] != cpy[p + 1] {\n\
    \            return Some(cpy[p + 1]);\n        }\n        p += 1;\n    }\n   \
    \ None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpleldod1g.rs:16:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().min_by(|a, b| (*a).cmp(b)).copied()\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpiabky4o4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut copy = lst.clone();\n    copy.sort();\n    if\
    \ copy.len() < 2 {\n        return None;\n    }\n    for i in 1..lst.len() {\n\
    \        if copy[i] > copy[0] {\n            return Some(copy[i]);\n        }\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    return Some(lst[1]);\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n  if lst.len() <= 1 {\n    return None;\n  }\n  let mut\
    \ vec: Vec<isize> = lst.clone();\n  vec.sort();\n  for i in 0..vec.len() - 1 {\n\
    \    if vec[i] != vec[i + 1] {\n      return Some(vec[i + 1]);\n    }\n  }\n \
    \ None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = None;\n    let mut second_smallest\
    \ = None;\n    for i in lst {\n        if second_smallest.is_none() || i < second_smallest.unwrap()\
    \ {\n            if smallest.is_none() || i < smallest.unwrap() {\n          \
    \      second_smallest = smallest;\n                smallest = Some(i);\n    \
    \        } else {\n                second_smallest = Some(i);\n            }\n\
    \        }\n    }\n    second_smallest\n}\n\nfn main() {\n    let candidate =\
    \ next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n \
    \   assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmppi56yf9m.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let l = lst.len();\n\
    \    if l == 0 {\n        return None;\n    } else if l == 1 {\n        return\
    \ None;\n    } else if l == 2 {\n        if lst[0] == lst[1] {\n            return\
    \ None;\n        } else {\n            return Some(lst[1]);\n        }\n    }\
    \ else {\n        let mut min = lst[0];\n        let mut next_min = None;\n  \
    \      for num in lst {\n            if num > min {\n                if next_min.is_none()\
    \ {\n                    next_min = Some(num);\n                } else if num\
    \ < next_min.unwrap() {\n                    next_min = Some(num);\n         \
    \       }\n            }\n        }\n        return next_min;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut temp = lst;\n    temp.sort();\n    temp.dedup();\n    if temp.len()\
    \ < 2 {\n        return None;\n    }\n    return Some(temp[1]);\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut tmp = lst.clone();\n    tmp.sort();\n    let mut res = tmp[0];\n  \
    \  for i in 1..tmp.len() {\n        if tmp[i] > res {\n            res = tmp[i];\n\
    \            break;\n        }\n    }\n    if res == tmp[0] {\n        None\n\
    \    } else {\n        Some(res)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n \
    \   assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let mut min\
    \ = None;\n    for i in lst {\n        if min.is_none() {\n            min = Some(i);\n\
    \        } else if i > min.unwrap() {\n            return Some(i);\n        }\n\
    \    }\n    return None;\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    if lst[0] == lst[1] {\n        return\
    \ None;\n    }\n    return Some(lst[1]);\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = None;\n    let mut next_smallest\
    \ = None;\n    for n in lst {\n        if let Some(smallest_val) = smallest {\n\
    \            if n < smallest_val {\n                next_smallest = smallest;\n\
    \                smallest = Some(n);\n            } else if let Some(next_smallest_val)\
    \ = next_smallest {\n                if n < next_smallest_val {\n            \
    \        next_smallest = Some(n);\n                }\n            } else {\n \
    \               next_smallest = Some(n);\n            }\n        } else {\n  \
    \          smallest = Some(n);\n        }\n    }\n    next_smallest\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp6n26c_1w.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut sorted_lst = lst.clone();\n    sorted_lst.sort();\n    let mut index\
    \ = 0;\n    while index < lst.len() && sorted_lst[index] == sorted_lst[index +\
    \ 1] {\n        index += 1;\n    }\n    if index == lst.len() - 1 {\n        return\
    \ None;\n    }\n    Some(sorted_lst[index + 1])\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 2 but the
    index is 2'', /tmp/tmpblw4ahue.rs:19:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut srt = lst.clone();\n    srt.sort();\n    for\
    \ i in 0..srt.len() {\n        if srt[i] != srt[0] {\n            return Some(srt[i]);\n\
    \        }\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // Found a solution that sort the list and goes over\
    \ it:\n    // https://exercism.io/tracks/rust/exercises/collections/solutions/1e10d416d7e8418c93890e2c29eba0d7\n\
    \    // This solution is way better and I might use it on the exercise\n    //\
    \ of the longest sequence too.\n    //\n    // I sort the list to keep the first\
    \ element as the smallest one\n    // and the second as the second smallest one.\n\
    \    // If the second element is smaller than the first one (or the\n    // first\
    \ one is the last element of the list) I return the second\n    // element. If\
    \ the list has only one element or if the second\n    // element is bigger than\
    \ the first one I return None.\n    if lst.len() > 1 {\n        let mut lst =\
    \ lst;\n        lst.sort();\n        let first = &lst[0];\n        let second\
    \ = &lst[1];\n        Some(if lst.len() > 2 && *second > *first {\n          \
    \  lst[2]\n        } else {\n            *second\n        })\n    } else {\n \
    \       None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmp4gyzgrkk.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n\
    \    if lst.len() > 1 {\n        Some(lst[1])\n    } else {\n        None\n  \
    \  }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = Option::None;\n    let mut second_smallest\
    \ = Option::None;\n    for n in lst {\n        match smallest {\n            None\
    \ => smallest = Some(n),\n            Some(x) => {\n                if n < x {\n\
    \                    second_smallest = smallest;\n                    smallest\
    \ = Some(n);\n                } else if second_smallest.is_none() || n < second_smallest.unwrap()\
    \ {\n                    second_smallest = Some(n);\n                }\n     \
    \       }\n        }\n    }\n    second_smallest\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpspcbf10z.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = None;\n    let mut second_smallest\
    \ = None;\n    for i in lst {\n        match smallest {\n            None => smallest\
    \ = Some(i),\n            Some(s) => {\n                if i < s {\n         \
    \           second_smallest = smallest;\n                    smallest = Some(i);\n\
    \                } else if second_smallest.is_none() || i < second_smallest.unwrap()\
    \ {\n                    second_smallest = Some(i);\n                }\n     \
    \       }\n        }\n    }\n    second_smallest\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpm_li4vi3.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut s = BTreeSet::new();\n    for item in lst {\n\
    \        s.insert(item);\n    }\n    let mut min = None;\n    let mut min2 = None;\n\
    \    for item in s {\n        match min {\n            None => min = Some(item),\n\
    \            Some(x) => {\n                if item < x {\n                   \
    \ min2 = min;\n                    min = Some(item);\n                } else if\
    \ item > x {\n                    if let None = min2 {\n                     \
    \   min2 = Some(item);\n                    } else if item < min2.unwrap() {\n\
    \                        min2 = Some(item);\n                    }\n         \
    \       }\n            }\n        }\n    }\n    min2\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n  -->\
    \ /tmp/tmp79v3llkw.rs:13:17\n   |\n13 |     let mut s = BTreeSet::new();\n   |\
    \                 ^^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::BTreeSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let mut min = isize::max_value();\n    let mut next_min = isize::max_value();\n\
    \    for i in lst {\n        if i < min {\n            next_min = min;\n     \
    \       min = i;\n        } else if i < next_min {\n            next_min = i;\n\
    \        }\n    }\n    if next_min == isize::max_value() {\n        None\n   \
    \ } else {\n        Some(next_min)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmputqawkhe.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n  //TODO\n  let mut lst1 = lst.clone();\n  lst1.sort();\n\
    \  if lst1.len() == 0 {\n    return None;\n  } else if lst1.len() == 1 {\n   \
    \ return None;\n  } else if lst1.len() == 2 {\n    if lst1[0] == lst1[1] {\n \
    \     return None;\n    } else {\n      return Some(lst1[1]);\n    }\n  } else\
    \ {\n    for i in 1..lst1.len() - 1 {\n      if lst1[i] != lst1[i - 1] && lst1[i]\
    \ != lst1[i + 1] {\n        return Some(lst1[i]);\n      }\n    }\n    return\
    \ None;\n  }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(1)`', /tmp/tmp25fls628.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let min: isize = lst.iter().min().unwrap_or(&isize::min_value());\n\
    \    let mut smallest = isize::max_value();\n    for i in lst {\n        if i\
    \ > min && i < smallest {\n            smallest = i;\n        }\n    }\n    if\
    \ smallest == isize::max_value() {\n        None\n    } else {\n        Some(smallest)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztkslxrf.rs:13:22\n   |\n\
    13 |     let min: isize = lst.iter().min().unwrap_or(&isize::min_value());\n \
    \  |              -----   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |              |\n   |              expected due\
    \ to this\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     let min:\
    \ isize = *lst.iter().min().unwrap_or(&isize::min_value());\n   |            \
    \          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.into_iter().sorted().nth(1)\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmpkbwfmgze.rs:13:21\n   |\n13 |     lst.into_iter().sorted().nth(1)\n\
    \   |                     ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut s = lst.clone();\n    s.sort();\n    match s.get(1)\
    \ {\n        Some(x) => Some(*x),\n        None => None,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp_qtwvxrz.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut smallest = lst[0];\n    let mut next_smallest = None;\n    for &elem\
    \ in lst.iter() {\n        if elem < smallest {\n            next_smallest = Some(smallest);\n\
    \            smallest = elem;\n        } else if elem > smallest && (next_smallest.is_none()\
    \ || elem < next_smallest.unwrap()) {\n            next_smallest = Some(elem);\n\
    \        }\n    }\n    next_smallest\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut min = None;\n    let mut min2 = None;\n    for\
    \ v in lst {\n        if min == None || v < min.unwrap() {\n            min2 =\
    \ min;\n            min = Some(v);\n        } else if min2 == None || v < min2.unwrap()\
    \ {\n            min2 = Some(v);\n        }\n    }\n    min2\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp410wkj4b.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n  if lst.len() == 0 {\n    return None;\n  }\n\n  let mut\
    \ min = lst[0];\n  let mut min2 = lst[0];\n\n  for el in lst {\n    if el < min\
    \ {\n      min2 = min;\n      min = el;\n    } else if el < min2 {\n      min2\
    \ = el;\n    }\n  }\n\n  if min == min2 {\n    return None;\n  }\n\n  Some(min2)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmp9fihhpk5.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut small_first = None;\n    let mut small_second\
    \ = None;\n    for i in lst {\n        match small_first {\n            None =>\
    \ small_first = Some(i),\n            Some(v) => {\n                if i < v {\n\
    \                    small_second = small_first;\n                    small_first\
    \ = Some(i);\n                } else if small_second.is_none() || (small_second.is_some()\
    \ && i < small_second.unwrap()) {\n                    small_second = Some(i);\n\
    \                }\n            }\n        }\n    }\n    small_second\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp5h07l0v3.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = Option::None;\n    let mut second_smallest\
    \ = Option::None;\n    for x in lst {\n        match smallest {\n            Some(y)\
    \ => {\n                if x < y {\n                    second_smallest = smallest;\n\
    \                    smallest = Some(x);\n                } else if x == y {\n\
    \                    continue;\n                } else if second_smallest.is_none()\
    \ || x < second_smallest.unwrap() {\n                    second_smallest = Some(x);\n\
    \                }\n            }\n            None => {\n                smallest\
    \ = Some(x);\n            }\n        }\n    }\n    return second_smallest;\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n\
    \    lst.get(1).cloned()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut next_smallest: Option<isize> = None;\n    if\
    \ let Some(mut min) = min(lst.clone()) {\n        let mut lst = lst;\n       \
    \ lst.remove(min.0);\n        if let Some(mut min2) = min(lst) {\n           \
    \ if min.1 != min2.1 {\n                next_smallest = Some(min2.1);\n      \
    \      }\n        }\n    }\n    next_smallest\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0nzkhnma.rs:14:28\n\
    \   |\n14 |     if let Some(mut min) = min(lst.clone()) {\n   |              \
    \              ^^^\n...\n26 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    14 |     if let Some(mut min) = main(lst.clone()) {\n   |                    \
    \        ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut sorted = lst.clone();\n    sorted.sort();\n\
    \    sorted.dedup();\n    sorted.get(1).cloned()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = Option::None;\n    let mut next_smallest\
    \ = Option::None;\n    for x in lst {\n        if smallest.is_none() || x < smallest.unwrap()\
    \ {\n            next_smallest = smallest;\n            smallest = Some(x);\n\
    \        } else if next_smallest.is_none() || x < next_smallest.unwrap() {\n \
    \           next_smallest = Some(x);\n        }\n    }\n    next_smallest\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpxup11cj1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().fold((std::isize::MAX, std::isize::MAX),\
    \ |(min, next_min), num| {\n        if *num <= min {\n            (*num, min)\n\
    \        } else if *num < next_min {\n            (min, *num)\n        } else\
    \ {\n            (min, next_min)\n        }\n    }).1.checked_sub(1)\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpjphaamjz.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    for i in 0..lst.len() - 1 {\n    \
    \    if lst[i] != lst[i + 1] {\n            return Some(lst[i + 1]);\n       \
    \ }\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut new_lst = lst.clone();\n    new_lst.sort();\n\
    \    if new_lst.len() > 1 {\n        let mut ctr = 0;\n        let mut unique_lst\
    \ = vec![];\n        let mut prev_element = new_lst[0];\n        for i in new_lst\
    \ {\n            if prev_element != i {\n                unique_lst.push(i);\n\
    \                prev_element = i;\n            }\n        }\n        if unique_lst.len()\
    \ > 1 {\n            return Some(unique_lst[1]);\n        } else {\n         \
    \   return None;\n        }\n    } else {\n        return None;\n    }\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpg99rccx7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    return Some(lst[1]);\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest = isize::max_value();\n    let mut\
    \ next_smallest = isize::max_value();\n    for item in lst {\n        if item\
    \ <= smallest {\n            smallest = item;\n        } else if item < next_smallest\
    \ {\n            next_smallest = item;\n        }\n    }\n    if next_smallest\
    \ == isize::max_value() {\n        None\n    } else {\n        Some(next_smallest)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(1)`', /tmp/tmp6lewt_7l.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut temp = lst.clone();\n    temp.sort();\n    match\
    \ temp.get(1) {\n        Some(val) => Some(*val),\n        None => None,\n   \
    \ }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpjny58t7_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut smallest = lst[0];\n    let mut second_smallest = lst[1];\n    for\
    \ i in 2..lst.len() {\n        if lst[i] < smallest {\n            second_smallest\
    \ = smallest;\n            smallest = lst[i];\n        } else if lst[i] < second_smallest\
    \ {\n            second_smallest = lst[i];\n        }\n    }\n    if smallest\
    \ == second_smallest {\n        None\n    } else {\n        Some(second_smallest)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmptqwfjdu7.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let mut smallest = isize::MAX;\n    let mut second_smallest = isize::MAX;\n\
    \    for item in lst {\n        if item < smallest {\n            second_smallest\
    \ = smallest;\n            smallest = item;\n        } else if item < second_smallest\
    \ {\n            second_smallest = item;\n        }\n    }\n    if second_smallest\
    \ == isize::MAX {\n        None\n    } else {\n        Some(second_smallest)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp208b97vq.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut m = lst.len();\n    let mut n = -1;\n    for\
    \ x in lst {\n        if x < m {\n            n = m;\n            m = x;\n   \
    \     } else if x < n {\n            n = x;\n        }\n    }\n    if n == -1\
    \ {\n        None\n    } else {\n        Some(n)\n    }\n}\n\nfn main() {\n  \
    \  let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1vlpie8l.rs:16:16\n   |\n\
    16 |         if x < m {\n   |                ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         if x < m.try_into().unwrap() {\n   | \
    \                ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp1vlpie8l.rs:18:17\n   |\n13 |     let mut m = lst.len();\n   |     \
    \            --------- expected due to this value\n...\n18 |             m = x;\n\
    \   |                 ^ expected `usize`, found `isize`\n\nerror[E0277]: the trait\
    \ bound `usize: Neg` is not satisfied\n  --> /tmp/tmp1vlpie8l.rs:14:17\n   |\n\
    14 |     let mut n = -1;\n   |                 ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1vlpie8l.rs:19:23\n\
    \   |\n19 |         } else if x < n {\n   |                       ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |         } else if x < n.try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1vlpie8l.rs:20:17\n   |\n14 |     let mut n = -1;\n   |\
    \                 -- expected due to this value\n...\n20 |             n = x;\n\
    \   |                 ^ expected `usize`, found `isize`\n\nerror[E0600]: cannot\
    \ apply unary operator `-` to type `usize`\n  --> /tmp/tmp1vlpie8l.rs:23:13\n\
    \   |\n23 |     if n == -1 {\n   |             ^^\n   |             |\n   |  \
    \           cannot apply unary operator `-`\n   |             help: you may have\
    \ meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned\
    \ values cannot be negated\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1vlpie8l.rs:26:14\n\
    \   |\n26 |         Some(n)\n   |              ^"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n  let lst_clone = lst.clone();\n  lst_clone.into_iter().filter(|x|\
    \ x.clone() < lst.clone().into_iter().min().unwrap()).filter(|x| x.clone() < lst.clone().into_iter().max().unwrap()).min()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpqtyj8kb6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    match lst.len() {\n        0 => None,\n        1 =>\
    \ None,\n        _ => Some(lst[1]),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmph7x4q7hc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    match lst.len() {\n        0 => None,\n        1 =>\
    \ None,\n        2 => {\n            if lst[0] == lst[1] {\n                None\n\
    \            } else {\n                Some(lst[1])\n            }\n        }\n\
    \        _ => {\n            let mut max = std::i32::MIN;\n            let mut\
    \ second_max = std::i32::MIN;\n            for i in lst {\n                if\
    \ i > max {\n                    second_max = max;\n                    max =\
    \ i;\n                } else if i > second_max && i != max {\n               \
    \     second_max = i;\n                }\n            }\n            if second_max\
    \ == std::i32::MIN {\n                None\n            } else {\n           \
    \     Some(second_max)\n            }\n        }\n    }\n}\n\nfn main() {\n  \
    \  let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu9sq4elv.rs:27:24\n   |\n\
    27 |                 if i > max {\n   |                        ^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n27 |                 if i > max.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu9sq4elv.rs:29:27\n   |\n24 |             let mut max =\
    \ std::i32::MIN;\n   |                           ------------- expected due to\
    \ this value\n...\n29 |                     max = i;\n   |                   \
    \        ^ expected `i32`, found `isize`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpu9sq4elv.rs:30:31\n   |\n30 |                 } else if i > second_max\
    \ && i != max {\n   |                               ^^^^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n30 |                 } else if i > second_max.try_into().unwrap()\
    \ && i != max {\n   |                                         ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sq4elv.rs:30:50\n   |\n30 |\
    \                 } else if i > second_max && i != max {\n   |               \
    \                                   ^^^ expected `isize`, found `i32`\n   |\n\
    help: you can convert an `i32` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n30 |                 } else if i > second_max && i != max.try_into().unwrap()\
    \ {\n   |                                                     ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sq4elv.rs:31:34\n   |\n25 |\
    \             let mut second_max = std::i32::MIN;\n   |                      \
    \            ------------- expected due to this value\n...\n31 |             \
    \        second_max = i;\n   |                                  ^ expected `i32`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sq4elv.rs:37:22\n\
    \   |\n37 |                 Some(second_max)\n   |                      ^^^^^^^^^^\
    \ expe"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    for (i, &e) in lst.iter().enumerate()\
    \ {\n        if i > 0 && lst[i - 1] != e {\n            return Some(e);\n    \
    \    }\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let (mut smallest, mut second_smallest) = match lst.len()\
    \ {\n        0 => (None, None),\n        1 => (Some(lst[0]), None),\n        _\
    \ => (Some(lst[0]), Some(lst[1])),\n    };\n    for i in lst.iter().skip(2) {\n\
    \        match i {\n            x if x <= &smallest.unwrap() => {\n          \
    \      second_smallest = smallest;\n                smallest = Some(*x);\n   \
    \         }\n            x if second_smallest.is_none() || x <= &second_smallest.unwrap()\
    \ => {\n                second_smallest = Some(*x);\n            }\n         \
    \   _ => (),\n        }\n    }\n    second_smallest\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpa_rdfdpq.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut it = lst.iter();\n    match it.next() {\n  \
    \      None => None,\n        Some(mut cur) => {\n            while let Some(x)\
    \ = it.next() {\n                if *x < *cur {\n                    return Some(*cur);\n\
    \                }\n                cur = x;\n            }\n            None\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmp4f23bla1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    let min = lst[0];\n    for i in &lst\
    \ {\n        if *i != min {\n            return Some(*i);\n        }\n    }\n\
    \    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut smallest: Option<isize> = None;\n    let mut\
    \ next_smallest: Option<isize> = None;\n    for i in &lst {\n        if let Some(smallest_value)\
    \ = smallest {\n            if i <= &smallest_value {\n                next_smallest\
    \ = smallest;\n                smallest = Some(*i);\n            } else if let\
    \ Some(next_smallest_value) = next_smallest {\n                if i < &next_smallest_value\
    \ {\n                    next_smallest = Some(*i);\n                }\n      \
    \      } else {\n                next_smallest = Some(*i);\n            }\n  \
    \      } else {\n            smallest = Some(*i);\n        }\n    }\n    next_smallest\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp55ini2e5.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut lst = lst;\n    lst.sort();\n    Some(lst[1])\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp0ivid7i3.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().sorted().skip(1).next().cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp3sqzeyg4.rs:13:16\n   |\n13 |     lst.iter().sorted().skip(1).next().cloned()\n\
    \   |                ^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    match lst.len() {\n        0 => None,\n        1 =>\
    \ None,\n        _ => {\n            let mut smallest = std::isize::MAX;\n   \
    \         let mut next_smallest = std::isize::MAX;\n            for i in lst {\n\
    \                if i < smallest {\n                    next_smallest = smallest;\n\
    \                    smallest = i;\n                } else if i < next_smallest\
    \ {\n                    next_smallest = i;\n                }\n            }\n\
    \            if next_smallest == std::isize::MAX {\n                None\n   \
    \         } else {\n                Some(next_smallest)\n            }\n     \
    \   }\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpflllnk65.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let lst = lst;\n\
    \    lst.get(1).map(|x| *x)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmplgaty5ur.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // we can just sort then return the 2nd element of the\
    \ list\n    if lst.len() < 2 {\n        return None;\n    }\n    let mut sorted\
    \ = lst.clone();\n    sorted.sort();\n    Some(sorted[1])\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpwj27omwi.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n  let mut sorted = lst.clone();\n  sorted.sort();\n  //\
    \ if you have a Vec<T> and you remove the first element, you now have a Vec<T>\n\
    \  // if you have a Vec<T> and you remove the first element, you now have a T\n\
    \  // if you have a Vec<T> and you remove the first element, you now have a &T\n\
    \  sorted.remove(0);\n  sorted.get(0).cloned()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 0) should be < len (is
    0)'', /tmp/tmphf5iuaof.rs:18:10

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n  match lst.len() {\n    0 => None,\n    1 => None,\n  \
    \  _ => {\n      let mut sorted = lst.clone();\n      sorted.sort();\n      Some(sorted[1])\n\
    \    }\n  }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp5a6fcum2.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut curr = lst.clone();\n    curr.sort();\n    if\
    \ curr.len() == 0 {\n        return None;\n    }\n    if curr.len() < 2 {\n  \
    \      return None;\n    }\n    let min = curr[0];\n    let mut res = curr[1];\n\
    \    for i in curr.iter() {\n        if i > &min && *i < res {\n            res\
    \ = *i;\n        }\n    }\n    Some(res)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpxy343s_x.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let mut sorted = lst.clone();\n    sorted.sort();\n    let mut result = None;\n\
    \    let mut prev = None;\n    for i in sorted {\n        if i != prev {\n   \
    \         if result.is_some() {\n                return Some(i);\n           \
    \ }\n            result = Some(i);\n        }\n        prev = Some(i);\n    }\n\
    \    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpveqlfusy.rs:21:17\n   |\n\
    21 |         if i != prev {\n   |                 ^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().fold((None, None), |(smallest, second_smallest),\
    \ &elem| {\n        if smallest.is_none() || elem < smallest.unwrap() {\n    \
    \        (Some(elem), smallest)\n        } else if second_smallest.is_none() ||\
    \ elem < second_smallest.unwrap() {\n            (smallest, Some(elem))\n    \
    \    } else {\n            (smallest, second_smallest)\n        }\n    }).1\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpdlcoxzxl.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  // find the smallest\n    let mut smallest = lst[0];\n    let mut smallest_index\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if v < &smallest {\n\
    \            smallest = *v;\n            smallest_index = i;\n        }\n    }\n\
    \    let mut second_smallest = lst[1];\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i == smallest_index {\n            continue;\n        }\n    \
    \    if v < &second_smallest {\n            second_smallest = *v;\n        }\n\
    \    }\n    Some(second_smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpr_x7rg1w.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let mut result = lst[0];\n    let mut smallest = lst[0];\n    for n in &lst\
    \ {\n        if *n < smallest {\n            result = smallest;\n            smallest\
    \ = *n;\n        } else if *n < result {\n            result = *n;\n        }\n\
    \    }\n    if result == smallest {\n        None\n    } else {\n        Some(result)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpto_voqt3.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().sorted().nth(1)\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpdwqjqpkr.rs:13:16\n   |\n13 |     lst.iter().sorted().nth(1)\n\
    \   |                ^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpu3dop62s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976053
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuekjh7fz.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // TODO - try to implement this function without sorting.\n\
    \    let mut lst = lst;\n    lst.sort();\n    for i in 1..lst.len() {\n      \
    \  if lst[i] != lst[i - 1] {\n            return Some(lst[i]);\n        }\n  \
    \  }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut min = Option::None;\n    let mut next_min =\
    \ Option::None;\n    let mut found_min = false;\n    for i in lst {\n        match\
    \ min {\n            None => {\n                min = Some(i);\n            }\n\
    \            Some(m) => {\n                if i < m {\n                    if\
    \ found_min {\n                        next_min = Some(m);\n                 \
    \   }\n                    min = Some(i);\n                    found_min = true;\n\
    \                } else if i == m {\n                    found_min = false;\n\
    \                } else if i < next_min.unwrap_or(m) {\n                    next_min\
    \ = Some(i);\n                }\n            }\n        }\n    }\n    next_min\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmps__43xoa.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut sorted = lst.clone();\n    sorted.sort();\n\
    \    for i in 1..sorted.len() {\n        if sorted[i] != sorted[i - 1] {\n   \
    \         return Some(sorted[i]);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    lst.iter().fold((None, None), |(first, second), x| {\n\
    \        if first.is_none() || x < first.unwrap() {\n            (Some(*x), first)\n\
    \        } else if second.is_none() || x < second.unwrap() {\n            (first,\
    \ Some(*x))\n        } else {\n            (first, second)\n        }\n    }).1\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgvxtz55f.rs:15:19\n   |\n\
    15 |             (Some(*x), first)\n   |                   ^^\n   |          \
    \         |\n   |                   expected `&isize`, found `isize`\n   |   \
    \                help: consider borrowing here: `&*x`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgvxtz55f.rs:17:26\n   |\n17 |             (first, Some(*x))\n\
    \   |                          ^^\n   |                          |\n   |     \
    \                     expected `&isize`, found `isize`\n   |                 \
    \         help: consider borrowing here: `&*x`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgvxtz55f.rs:13:5\n   |\n12 |   fn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n   |                                        -------------\
    \ expected `Option<isize>` because of return type\n13 | /     lst.iter().fold((None,\
    \ None), |(first, second), x| {\n14 | |         if first.is_none() || x < first.unwrap()\
    \ {\n15 | |             (Some(*x), first)\n16 | |         } else if second.is_none()\
    \ || x < second.unwrap() {\n...  |\n20 | |         }\n21 | |     }).1\n   | |________^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found enum `Option<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut small = None;\n    let mut next_small = None;\n\
    \    for &i in lst.iter() {\n        if small.is_none() || i < small.unwrap()\
    \ {\n            next_small = small;\n            small = Some(i);\n        }\
    \ else if next_small.is_none() || i < next_small.unwrap() {\n            next_small\
    \ = Some(i);\n        }\n    }\n    next_small\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpo8mhwg3a.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() <= 1 {\n        return None;\n    }\n \
    \   let mut smallest = lst[0];\n    let mut second_smallest = None;\n    for item\
    \ in lst.iter() {\n        if *item < smallest {\n            second_smallest\
    \ = Some(smallest);\n            smallest = *item;\n        } else if *item !=\
    \ smallest && second_smallest.is_none() {\n            second_smallest = Some(*item);\n\
    \        } else if *item != smallest && second_smallest.is_some() && *item < second_smallest.unwrap()\
    \ {\n            second_smallest = Some(*item);\n        }\n    }\n    return\
    \ second_smallest;\n}\n\nfn main() {\n    let candidate = next_smallest;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut smallest = isize::max_value();\n    let mut next_smallest = isize::max_value();\n\
    \    for i in &lst {\n        if *i < smallest {\n            next_smallest =\
    \ smallest;\n            smallest = *i;\n        } else if *i < next_smallest\
    \ {\n            next_smallest = *i;\n        }\n    }\n    if next_smallest ==\
    \ isize::max_value() {\n        None\n    } else {\n        Some(next_smallest)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp5_w2uojh.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppt3ubsa0.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823186
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    if lst.len() < 2 {\n        return None;\n    }\n  \
    \  let mut sorted = lst.clone();\n    sorted.sort();\n    if sorted[0] == sorted[1]\
    \ {\n        None\n    } else {\n        Some(sorted[1])\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // 0. The function should return \"None\" in the case\
    \ when the\n    //    input list is empty or when there is no 2nd smallest element\
    \ in the list.\n    if lst.is_empty() {\n        return None;\n    }\n\n    //\
    \ 1. Extract the smallest element of the list.\n    let mut smallest = lst[0];\n\
    \    for i in 1..lst.len() {\n        if lst[i] < smallest {\n            smallest\
    \ = lst[i];\n        }\n    }\n\n    // 2. Search for the 2nd smallest element\
    \ of the list.\n    let mut snd_smallest = std::isize::MAX;\n    for i in 0..lst.len()\
    \ {\n        if lst[i] != smallest && lst[i] < snd_smallest {\n            snd_smallest\
    \ = lst[i];\n        }\n    }\n\n    // 3. Check if there is a 2nd smallest element\
    \ in the list.\n    if snd_smallest != std::isize::MAX {\n        return Some(snd_smallest);\n\
    \    } else {\n        return None;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut result = None;\n    let mut min = None;\n  \
    \  for x in lst {\n        match min {\n            None => { min = Some(x); },\n\
    \            Some(y) => {\n                if x < y {\n                    result\
    \ = min;\n                    min = Some(x);\n                } else if x > y\
    \ && (result == None || x < result.unwrap()) {\n                    result = Some(x);\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    // BEGIN_SOLUTION\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    let (mut a, mut b) = (None, None);\n    for v in lst {\n \
    \       match (a, b) {\n            (None, None) => (a, b) = (Some(v), None),\n\
    \            (Some(av), None) => {\n                if v < av {\n            \
    \        (a, b) = (Some(v), Some(av));\n                } else if v > av {\n \
    \                   (a, b) = (Some(av), Some(v));\n                }\n       \
    \     }\n            (Some(av), Some(bv)) => {\n                if v < av {\n\
    \                    (a, b) = (Some(v), Some(av));\n                } else if\
    \ v > av && v < bv {\n                    b = Some(v);\n                }\n  \
    \          }\n        }\n    }\n    b\n    // END_SOLUTION\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0004]: non-exhaustive patterns: `(None, Some(_))` not covered\n\
    \  --> /tmp/tmp_fvisvfe.rs:19:15\n   |\n19 |         match (a, b) {\n   |    \
    \           ^^^^^^ pattern `(None, Some(_))` not covered\n   |\n   = note: the\
    \ matched value is of type `(Option<isize>, Option<isize>)`\nhelp: ensure that\
    \ all possible cases are being handled by adding a match arm with a wildcard pattern\
    \ or an explicit pattern as shown\n   |\n34 ~             }\n35 +            \
    \ (None, Some(_)) => todo!()\n   |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0004`.\n"
  stdout: ''
  timestamp: 1659976054
- exit_code: 0
  program: "/// You are given a vector of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the vector.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(vec![])\n\
    /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
    \ -> Option<isize> {\n    let mut min: Option<isize> = None;\n    let mut min2:\
    \ Option<isize> = None;\n    for i in lst {\n        match min {\n           \
    \ None => min = Some(i),\n            Some(x) => {\n                if i < x {\n\
    \                    min2 = min;\n                    min = Some(i);\n       \
    \         } else if i == x {\n                    continue;\n                }\
    \ else if x < i {\n                    match min2 {\n                        None\
    \ => min2 = Some(i),\n                        Some(y) => {\n                 \
    \           if i < y {\n                                min2 = Some(i);\n    \
    \                        }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return min2;\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
