name: HumanEval_65_circular_shift
language: rs
results:
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let number_of_digits = number_of_digits(x);\n\
    \    if shift > number_of_digits {\n        // shift > number of digits, return\
    \ digits reversed\n        reverse_digits(x)\n    } else {\n        // shift <\
    \ number of digits, shift the digits right by shift\n        let mut reversed_shifted_digits\
    \ = String::new();\n        for d in 0..number_of_digits {\n            // shift\
    \ each digit\n            let digit = x / pow10(d) % 10;\n            let shifted_digit\
    \ = digit * pow10(number_of_digits - shift) + digit * pow10(shift);\n        \
    \    reversed_shifted_digits.push_str(&shifted_digit.to_string());\n        }\n\
    \        reverse_digits(reversed_shifted_digits.parse::<isize>().unwrap())\n \
    \   }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_of_digits` in this scope\n -->\
    \ /tmp/tmpvrwf5pv9.rs:9:28\n  |\n9 |     let number_of_digits = number_of_digits(x);\n\
    \  |                            ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `reverse_digits` in this scope\n  --> /tmp/tmpvrwf5pv9.rs:12:9\n\
    \   |\n12 |         reverse_digits(x)\n   |         ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `pow10` in this scope\n  -->\
    \ /tmp/tmpvrwf5pv9.rs:18:29\n   |\n18 |             let digit = x / pow10(d) %\
    \ 10;\n   |                             ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `pow10` in this scope\n  --> /tmp/tmpvrwf5pv9.rs:19:41\n\
    \   |\n19 |             let shifted_digit = digit * pow10(number_of_digits - shift)\
    \ + digit * pow10(shift);\n   |                                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `pow10` in this\
    \ scope\n  --> /tmp/tmpvrwf5pv9.rs:19:83\n   |\n19 |             let shifted_digit\
    \ = digit * pow10(number_of_digits - shift) + digit * pow10(shift);\n   |    \
    \                                                                            \
    \   ^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse_digits`\
    \ in this scope\n  --> /tmp/tmpvrwf5pv9.rs:22:9\n   |\n22 |         reverse_digits(reversed_shifted_digits.parse::<isize>().unwrap())\n\
    \   |         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let s = format!(\"{}\", x);\n    let n\
    \ = s.len();\n    let m = shift % n;\n    let mut s = s.chars().rev().collect::<String>();\n\
    \    s.push_str(&s[..m].chars().rev().collect::<String>());\n    s.split_off(m)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps9w4sy1y.rs:11:21\n   |\n\
    11 |     let m = shift % n;\n   |                     ^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmps9w4sy1y.rs:11:19\n\
    \   |\n11 |     let m = shift % n;\n   |                   ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmps9w4sy1y.rs:13:17\n   |\n13 |     s.push_str(&s[..m].chars().rev().collect::<String>());\n\
    \   |                 ^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps9w4sy1y.rs:14:17\n\
    \   |\n14 |     s.split_off(m)\n   |                 ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n14 |     s.split_off(m.try_into().unwrap())\n\
    \   |                  ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let s = x.to_string();\n    let (l, r)\
    \ = s.split_at(shift as usize);\n    let res = format!(\"{}{}\", r, l);\n    res\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmprldnqi55.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    if\
    \ shift > 0 {\n        let mut digits = digits(x);\n        let n = digits.len();\n\
    \        let mut n = n as isize;\n        while n > 0 {\n            result.push_str(&format!(\"\
    {}\", digits.pop().unwrap()));\n            n -= 1;\n        }\n    } else {\n\
    \        result = format!(\"{}\", x);\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digits` in this scope\n  --> /tmp/tmpsk2imkz1.rs:11:26\n\
    \   |\n11 |         let mut digits = digits(x);\n   |                        \
    \  ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift >= num_digits(x) {\n        let\
    \ mut x = x;\n        let mut result = String::new();\n        while x > 0 {\n\
    \            result.push(((x % 10) + '0' as isize) as u8 as char);\n         \
    \   x /= 10;\n        }\n        return result;\n    }\n    let mut x = x;\n \
    \   let mut result = String::new();\n    while x > 0 {\n        result.push(((x\
    \ % 10) + '0' as isize) as u8 as char);\n        x /= 10;\n    }\n    result.pop();\n\
    \    let (left, right) = result.split_at(result.len() - shift as usize);\n   \
    \ let mut result = right.to_string();\n    result.push_str(left);\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_digits` in this scope\n --> /tmp/tmp5rd368c2.rs:9:17\n\
    \  |\n9 |     if shift >= num_digits(x) {\n  |                 ^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = x.to_string();\n    if shift\
    \ >= s.len() as isize {\n        s.chars().rev().collect()\n    } else {\n   \
    \     let n = shift as usize;\n        let (l, r) = s.split_at(n);\n        format!(\"\
    {}{}\", r, l)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmplfraxqlq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut x = x;\n    let mut y = 0;\n \
    \   let mut digits = 0;\n    loop {\n        if x == 0 {\n            break;\n\
    \        }\n        digits += 1;\n        y *= 10;\n        y += x % 10;\n   \
    \     x /= 10;\n    }\n    let mut x = x;\n    let mut y = y;\n    if shift >=\
    \ digits {\n        x = y;\n        y = 0;\n        while x > 0 {\n          \
    \  y *= 10;\n            y += x % 10;\n            x /= 10;\n        }\n    }\
    \ else {\n        for _ in 0..shift {\n            x *= 10;\n            x +=\
    \ y % 10;\n            y /= 10;\n        }\n    }\n    x.to_string()\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"10\"`,\n right: `\"001\"`', /tmp/tmp7g3rm8ie.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut n = x;\n    let mut last_digit\
    \ = n % 10;\n    n /= 10;\n    let mut result = String::new();\n    while n >\
    \ 0 {\n        let new_last_digit = n % 10;\n        result.push_str(&new_last_digit.to_string());\n\
    \        n /= 10;\n    }\n    result.push_str(&last_digit.to_string());\n    let\
    \ result = result.chars().rev().collect::<String>();\n    let mut new_result =\
    \ String::new();\n    for c in result.chars().skip(shift as usize) {\n       \
    \ new_result.push(c);\n    }\n    for c in result.chars().take(shift as usize)\
    \ {\n        new_result.push(c);\n    }\n    new_result\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmps9ygxc3u.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > num_digits(x) {\n        //\
    \ shift more than number of digits\n        reverse_digits(x)\n    } else {\n\
    \        // shift less than number of digits\n        let midpoint = num_digits(x)\
    \ - shift;\n        let (left, right) = split_digits(x, midpoint);\n        right\
    \ + &left\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_digits` in this scope\n --> /tmp/tmp3rfrwetc.rs:9:16\n\
    \  |\n9 |     if shift > num_digits(x) {\n  |                ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `reverse_digits` in this\
    \ scope\n  --> /tmp/tmp3rfrwetc.rs:11:9\n   |\n11 |         reverse_digits(x)\n\
    \   |         ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `num_digits` in this scope\n  --> /tmp/tmp3rfrwetc.rs:14:24\n   |\n\
    14 |         let midpoint = num_digits(x) - shift;\n   |                     \
    \   ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `split_digits`\
    \ in this scope\n  --> /tmp/tmp3rfrwetc.rs:15:29\n   |\n15 |         let (left,\
    \ right) = split_digits(x, midpoint);\n   |                             ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    // shift is positive and by how many digits\
    \ to shift right\n    if shift == 0 {\n        return x.to_string();\n    }\n\
    \    if shift > num_digits(x) {\n        return reverse_string(&x.to_string());\n\
    \    }\n    let mut digits = to_digits(x);\n    for _ in 0..shift {\n        let\
    \ last = digits.pop().unwrap();\n        digits.insert(0, last);\n    }\n    digits_to_number(&digits)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_digits` in this scope\n  --> /tmp/tmpj664lrno.rs:13:16\n\
    \   |\n13 |     if shift > num_digits(x) {\n   |                ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `reverse_string` in\
    \ this scope\n  --> /tmp/tmpj664lrno.rs:14:16\n   |\n14 |         return reverse_string(&x.to_string());\n\
    \   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `to_digits` in this scope\n  --> /tmp/tmpj664lrno.rs:16:22\n \
    \  |\n16 |     let mut digits = to_digits(x);\n   |                      ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `digits_to_number`\
    \ in this scope\n  --> /tmp/tmpj664lrno.rs:21:5\n   |\n21 |     digits_to_number(&digits)\n\
    \   |     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 4\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut x = x;\n    let mut place = 1;\n\
    \    while x > 9 {\n        place *= 10;\n        x /= 10;\n    }\n    let rev_x\
    \ = x.to_string().chars().rev().collect::<String>();\n    let rev_x = rev_x.parse::<isize>().unwrap();\n\
    \    if shift >= place {\n        format!(\"{}\", rev_x)\n    } else {\n     \
    \   let rev_shifted = rev_x / place + rev_x % place * 10;\n        format!(\"\
    {}\", rev_shifted)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"10\"`,\n right: `\"001\"`', /tmp/tmpmi7fq3vo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let s = x.to_string();\n    let len =\
    \ s.len();\n    if shift > len as isize {\n        s.chars().rev().collect()\n\
    \    } else {\n        let index = len - shift as usize;\n        s.chars().cycle().skip(index).take(len).collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut x = x;\n    let mut res = String::new();\n\
    \    let mut count = 0;\n    while x > 0 {\n        let digit = x % 10;\n    \
    \    res.push_str(&format!(\"{}\", digit));\n        x /= 10;\n        count +=\
    \ 1;\n    }\n    res = res.chars().rev().collect();\n    if shift > count {\n\
    \        return res;\n    }\n    let res_len = res.len();\n    let left = &res[0..shift\
    \ as usize];\n    let right = &res[shift as usize..res_len];\n    format!(\"{}{}\"\
    , right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp_7eskq9n.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let digits = x.to_string();\n    let len\
    \ = digits.len();\n    if shift > len {\n        return digits.chars().rev().collect();\n\
    \    }\n    let (a, b) = digits.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", b, a)\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp649p35k3.rs:11:16\n   |\n\
    11 |     if shift > len {\n   |                ^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     if shift > len.try_into().unwrap() {\n   |\
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut x = x;\n    let mut res = String::new();\n\
    \    let mut pos = 0;\n    while x != 0 {\n        let digit = x % 10;\n     \
    \   x /= 10;\n        res.insert(pos, (digit + 48 + shift) as u8 as char);\n \
    \       pos += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"223\"`,\n right: `\"001\"`', /tmp/tmp4a02xuv1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let num_digits\
    \ = (log10(x) + 1.0) as isize;\n    for i in 0..num_digits {\n        let mut\
    \ d = (x / pow(10, i)) % 10;\n        if i + shift < num_digits {\n          \
    \  d = (x / pow(10, i + shift)) % 10;\n        }\n        s.push_str(&d.to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `log10` in this scope\n  --> /tmp/tmp40nu7bjx.rs:10:23\n\
    \   |\n10 |     let num_digits = (log10(x) + 1.0) as isize;\n   |            \
    \           ^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `pow` in this scope\n  --> /tmp/tmp40nu7bjx.rs:12:26\n   |\n12 |         let\
    \ mut d = (x / pow(10, i)) % 10;\n   |                          ^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `pow` in this scope\n  -->\
    \ /tmp/tmp40nu7bjx.rs:14:22\n   |\n14 |             d = (x / pow(10, i + shift))\
    \ % 10;\n   |                      ^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut x = x;\n    let mut shift = shift;\n\
    \    let mut res = String::new();\n    let mut digits = Vec::new();\n    while\
    \ x > 0 {\n        digits.push(x % 10);\n        x /= 10;\n    }\n    while shift\
    \ > digits.len() as isize {\n        shift -= digits.len() as isize;\n    }\n\
    \    digits.reverse();\n    res.push_str(&digits.iter().map(|&x| (x + 48) as u8\
    \ as char).collect::<String>());\n    if shift > 0 {\n        let shifted = digits.into_iter().cycle().skip(shift\
    \ as usize).take(digits.len()).collect::<Vec<_>>();\n        res.clear();\n  \
    \      res.push_str(&shifted.iter().map(|&x| (x + 48) as u8 as char).collect::<String>());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `digits`\n   --> /tmp/tmp62wml0h5.rs:23:76\n\
    \    |\n12  |     let mut digits = Vec::new();\n    |         ---------- move\
    \ occurs because `digits` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n23  |         let shifted = digits.into_iter().cycle().skip(shift\
    \ as usize).take(digits.len()).collect::<Vec<_>>();\n    |                   \
    \           -----------                                   ^^^^^^^^^^^^ value borrowed\
    \ here after move\n    |                              |\n    |               \
    \               `digits` moved due to this method call\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `digits`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift == 0 {\n        return format!(\"\
    {}\", x);\n    }\n    let mut result = String::from(\"\");\n    let mut num_digits\
    \ = 0;\n    let mut temp = x;\n    while temp > 0 {\n        temp /= 10;\n   \
    \     num_digits += 1;\n    }\n    if shift >= num_digits {\n        return format!(\"\
    {}\", reverse_int(x));\n    }\n    for _ in 0..shift {\n        let digit = x\
    \ % 10;\n        result.push_str(&digit.to_string());\n        let quotient =\
    \ x / 10;\n        result.push_str(&quotient.to_string());\n        x = quotient;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `reverse_int` in this scope\n  --> /tmp/tmp8547908o.rs:20:30\n\
    \   |\n20 |         return format!(\"{}\", reverse_int(x));\n   |            \
    \                  ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    let\
    \ len = digits.len();\n    let shift = shift % len;\n    if shift != 0 {\n   \
    \     digits.push_str(&digits[..shift]);\n        digits.drain(..shift);\n   \
    \ }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr2c5e4cx.rs:11:25\n   |\n\
    11 |     let shift = shift % len;\n   |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmpr2c5e4cx.rs:11:23\n\
    \   |\n11 |     let shift = shift % len;\n   |                       ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpr2c5e4cx.rs:13:26\n   |\n13 |         digits.push_str(&digits[..shift]);\n\
    \   |                          ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the trait bound `RangeTo<isize>: RangeBounds<usize>`\
    \ is not satisfied\n    --> /tmp/tmpr2c5e4cx.rs:14:22\n     |\n14   |        \
    \ digits.drain(..shift);\n     |                ----- ^^^^^^^ the trait `RangeBounds<usize>`\
    \ is not implemented for `RangeTo<isize>`\n     |                |\n     |   \
    \             required by a bound introduced by this call\n     |\n     = help:\
    \ the following other types implement trait `RangeBounds<T>`:\n              \
    \ RangeTo<&T>\n               RangeTo<T>\nnote: required by a bound in"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let digits = format!(\"{}\", x);\n   \
    \ let split_index = digits.len() - (shift as usize);\n    if split_index > 0 {\n\
    \        format!(\"{}{}\", &digits[split_index..], &digits[..split_index])\n \
    \   } else {\n        let mut shifted_digits = digits.chars().rev().collect::<String>();\n\
    \        shifted_digits.truncate(digits.len() - split_index.abs() as usize);\n\
    \        shifted_digits\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `abs` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpw8twnnil.rs:15:60\n   |\n15 |         shifted_digits.truncate(digits.len()\
    \ - split_index.abs() as usize);\n   |                                       \
    \                     ^^^ method not found in `usize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
