name: HumanEval_15_string_sequence
language: rs
prompt: "/// Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n\
  /// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
  \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n\
  \    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
completions: ["    let result = (0..=n).fold(String::new(), |result, i| {\n      \
    \  if result.is_empty() {\n            format!(\"{}\", i)\n        } else {\n\
    \            format!(\"{} {}\", result, i)\n        }\n    });\n    result", " \
    \   if n <= 0 {\n        return String::from(\"0\");\n    }\n    let mut string\
    \ = String::new();\n    for i in 0..n + 1 {\n        string.push_str(&i.to_string());\n\
    \        string.push(' ');\n    }\n    string.pop();\n    string", '    (0..n
    + 1).map(|n| n.to_string()).collect::<Vec<String>>().join(" ")', '    (0..=n).map(|x|
    x.to_string()).collect::<Vec<String>>().join(" ")', "    let mut output = String::new();\n\
    \    for i in 0..n + 1 {\n        output.push_str(&i.to_string());\n        output.push('\
    \ ');\n    }\n    output.pop();\n    output", "    if n == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut s = String::new();\n    let mut n = n;\n\
    \    while n >= 0 {\n        s.push_str(&n.to_string());\n        s.push(' ');\n\
    \        n -= 1;\n    }\n    s.pop();\n    s", '    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join("
    ")', "    let mut ret = String::new();\n    for i in 0..n + 1 {\n        ret.push_str(&format!(\"\
    {} \", i));\n    }\n    ret", '    return (0..n + 1).into_iter().map(|x| x.to_string()).collect::<Vec<String>>().join("
    ");', "    if n == 0 {\n        return \"0\".to_string();\n    }\n    let mut\
    \ s = String::new();\n    for i in 0..=n {\n        s += &i.to_string();\n   \
    \     s += \" \";\n    }\n    s.pop();\n    s", "    let str = (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \");\n    str", "    let mut\
    \ result = String::new();\n    for i in 0..=n {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop(); // remove last space\n  \
    \  result", '    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join("
    ")', "    let mut s = String::new();\n    for i in 0..n+1 {\n        s.push_str(&format!(\"\
    {} \", i));\n    }\n    s", "    let mut result = String::new();\n    for x in\
    \ 0..n+1 {\n        result += &x.to_string();\n        result += \" \";\n    }\n\
    \    result", '    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join("
    ")', "    let mut out = String::new();\n    for i in 0..n+1 {\n        out.push_str(&format!(\"\
    {} \", i));\n    }\n    out", "    let mut string = String::new();\n    for i\
    \ in 0..n + 1 {\n        string.push_str(&i.to_string());\n        string.push('\
    \ ');\n    }\n    string.pop();\n    string", "    let mut vec = Vec::with_capacity(n\
    \ as usize + 1);\n    for i in 0..=n {\n        vec.push(i.to_string());\n   \
    \ }\n    vec.join(\" \")", "    let mut nums = Vec::new();\n    for i in 0..n\
    \ + 1 {\n        nums.push(i);\n    }\n    let mut nums_str = String::new();\n\
    \    for i in 0..nums.len() {\n        if i != 0 {\n            nums_str.push('\
    \ ');\n        }\n        nums_str.push_str(&nums[i].to_string());\n    }\n  \
    \  nums_str"]
stop_tokens:
- "\n}"
