language: rs
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    return game.iter().zip(guess.iter()).map(|x| (x.0 - x.1).abs()).collect();\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(\n            if game[i] < 0 && guess[i] < 0 {\n    \
    \            (game[i] - guess[i]).abs()\n            } else if game[i] < 0 &&\
    \ guess[i] > 0 {\n                game[i] - guess[i]\n            } else if game[i]\
    \ > 0 && guess[i] < 0 {\n                game[i] - guess[i]\n            } else\
    \ {\n                (game[i] - guess[i]).abs()\n            }\n        );\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    for\
    \ _ in game {\n        let mut diff = game[i] - guess[i];\n        if diff < 0\
    \ {\n            diff = -diff;\n        }\n        result.push(diff);\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `game`\n   --> /tmp/tmpin2bxu4c.rs:17:24\n\
    \    |\n13  | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \    |            ---- move occurs because `game` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n16  |     for _ in game {\n    | \
    \             ----\n    |              |\n    |              `game` moved due\
    \ to this implicit call to `.into_iter()`\n    |              help: consider borrowing\
    \ to avoid moving into the for loop: `&game`\n17  |         let mut diff = game[i]\
    \ - guess[i];\n    |                        ^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `game`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    assert_eq!(game.len(), guess.len());\n    let mut result\
    \ = Vec::new();\n    for i in 0..game.len() {\n        let diff = (game[i] - guess[i]).abs();\n\
    \        result.push(diff);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(g, &gu)| g.abs_diff(&gu)).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `abs_diff` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpo7l1uimk.rs:14:52\n   |\n14 |     game.iter().zip(guess.iter()).map(|(g,\
    \ &gu)| g.abs_diff(&gu)).collect()\n   |                                     \
    \               ^^^^^^^^ method not found in `&isize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let rng = Range::new(0, guess.len());\n    let mut rng\
    \ = thread_rng();\n    let mut v: Vec<isize> = vec![];\n    for i in 0..guess.len()\
    \ {\n        if guess[i] > game[i] {\n            v.push(guess[i] - game[i]);\n\
    \        } else if guess[i] < game[i] {\n            v.push(game[i] - guess[i]);\n\
    \        } else {\n            v.push(0);\n        }\n    }\n    return v;\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Range`\n  -->\
    \ /tmp/tmpnj60yygh.rs:14:15\n   |\n14 |     let rng = Range::new(0, guess.len());\n\
    \   |               ^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ one of these items\n   |\n1  | use std::collections::btree_map::Range;\n   |\n\
    1  | use std::collections::btree_set::Range;\n   |\n1  | use std::ops::Range;\n\
    \   |\n\nerror[E0425]: cannot find function `thread_rng` in this scope\n  -->\
    \ /tmp/tmpnj60yygh.rs:15:19\n   |\n15 |     let mut rng = thread_rng();\n   |\
    \                   ^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(g, gs)| g - gs).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(g, gs)| (g - gs).abs()).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpimkp5s3r.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 0..game.len() {\n\
    \        res.push(cmp::max(game[i], guess[i]) - cmp::min(game[i], guess[i]));\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpov_xo21f.rs:16:18\n   |\n16 |         res.push(cmp::max(game[i],\
    \ guess[i]) - cmp::min(game[i], guess[i]));\n   |                  ^^^ use of\
    \ undeclared crate or module `cmp`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared crate or module `cmp`\n  --> /tmp/tmpov_xo21f.rs:16:48\n   |\n16\
    \ |         res.push(cmp::max(game[i], guess[i]) - cmp::min(game[i], guess[i]));\n\
    \   |                                                ^^^ use of undeclared crate\
    \ or module `cmp`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // apply an abs(guess - game) to each index of the two\
    \ vectors\n    let ret = game.iter().zip(guess.iter()).map(|(g, h)| (g - h).abs()).collect();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 0..game.len() {\n\
    \        res.push( (game[i] - guess[i]).abs() );\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(c, g)| (c - g).abs()).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO\n    vec![]\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpv08kgqcm.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    assert_eq!(game.len(), guess.len());\n    let mut score:\
    \ Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n        score.push(game[i]\
    \ - guess[i]).abs();\n    }\n    score\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `abs` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpysyo896j.rs:17:40\n   |\n17 |         score.push(game[i]\
    \ - guess[i]).abs();\n   |                                        ^^^ method not\
    \ found in `()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(v, g)| (v - g).abs()).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822459
