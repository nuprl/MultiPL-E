language: rs
name: HumanEval_52_below_threshold
results:
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|i| *i < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpq2hdb796.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, x| acc && x < &t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for e in l {\n        if e > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpswbxs524.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut below = true;\n    for i in l {\n        if i > t {\n       \
    \     below = false;\n        }\n    }\n    below\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxflytbfv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().any(|&x| x >= t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr4yz7fuk.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpq2hdb796.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // l.iter().fold(true, |acc, &x| acc && x < t)\n    l.iter().all(|&x|\
    \ x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |b, &x| b && x < t)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // YOUR CODE HERE\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp0lcor5u1.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    if l.len() == 0 {\n        return true;\n    }\n    if l[0] < t {\n \
    \       return below_threshold(l[1..].to_vec(), t);\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for &i in l.iter() {\n        if i >= t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut below_threshold = true;\n    for i in l {\n        if i > t {\n\
    \            below_threshold = false;\n        }\n    }\n    below_threshold\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqkevrrlp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut counter = 0;\n    for i in l {\n        if i > t {\n        \
    \    counter += 1;\n        }\n    }\n    counter == 0\n}\n\nfn main() {\n   \
    \ let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10],\
    \ 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n   \
    \ assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbo4b_br0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut res = true;\n    for i in l {\n        if i > t {\n         \
    \   res = false;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeg_ym9p2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for num in l {\n        if num >= t {\n            return false;\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpq2hdb796.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|i| i < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for num in l {\n        if num >= t {\n            return false;\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for element in l {\n        if element >= t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut res = true;\n    for item in l {\n        if item >= t {\n  \
    \          res = false;\n            break;\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    //l.iter().all(|&e| e <= t)\n    l.iter().all(|e| *e <= t)\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqntehuzz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut acc = true;\n    for x in l {\n        if x > t {\n         \
    \   acc = false;\n        }\n    }\n    acc\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy8v00cpu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    !l.iter().any(|e| e >= &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    /* Your code here */\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprl2j2qsw.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for &x in l.iter() {\n        if x > t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp3boeprx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut bt = true;\n    for i in l {\n        if i >= t {\n         \
    \   bt = false;\n        }\n    }\n    bt\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for item in l {\n        if item > t {\n            return false;\n \
    \       }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7c_2rvr_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|i| *i < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, x| acc && *x < t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpq2hdb796.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO Complete\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpbs_2yi9d.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for &x in l.iter() {\n        if x > t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp3boeprx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |prev, &x| prev && x < t)\n}\n\nfn main() {\n   \
    \ let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10],\
    \ 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n   \
    \ assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in &l {\n        if *i > t {\n            return false;\n     \
    \   }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppv8dpzbp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    if l.len() == 0 {\n        return true;\n    }\n\n    if l[0] < t {\n\
    \        return below_threshold(l[1..].to_vec(), t);\n    }\n\n    false\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for element in l {\n        if element >= t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n  // Replace with your implementation.\n  false\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp40pcqf5i.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&num| num < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 1
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut count = 0;\n    for i in l {\n        if i < t {\n          \
    \  count += 1;\n        }\n    }\n    count == l.len()\n}\n\nfn main() {\n   \
    \ let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10],\
    \ 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n   \
    \ assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp09myz1p7.rs:13:14\n\
    \    |\n6   | fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    |   \
    \                 - move occurs because `l` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n7   |     let mut count = 0;\n8   |     for\
    \ i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     count == l.len()\n    |              ^^^^^^^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n  for n in l {\n    if n >= t {\n      return false;\n    }\n  }\n  true\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // l.iter().all(|x| *x < t)\n    l.iter().fold(true, |acc, x| acc &&\
    \ *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&e| e < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for number in l {\n        if number >= t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // l.iter().all(|x| *x < t)\n    l.iter().fold(true, |acc, x| acc &&\
    \ *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpq2hdb796.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO: Write me!\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp633f4su6.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // l.iter().fold(0, |acc, i| acc + *i) < t\n    l.iter().all(|i| *i <\
    \ t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO: write a recursive function that returns true if all numbers\
    \ in l are below t\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp01u6j17h.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // We could use an iterator:\n    // l.iter().all(|&x| x < t)\n    //\
    \ but let's implement the algorithm by hand:\n    let mut i = 0;\n    while i\
    \ < l.len() {\n        if l[i] >= t {\n            return false;\n        }\n\
    \        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&e| e < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO\n    l.iter().fold(true, |acc, x| if x > &t { false } else {\
    \ true })\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8cezwroh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkm9hvlfd.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for i in l {\n        if i > t {\n      \
    \      result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptorj571e.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 1
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let v: Vec<isize> = l.into_iter().filter(|x| *x < t).collect();\n   \
    \ v.len() == l.len()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpzxfpiase.rs:8:16\n\
    \    |\n6   | fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    |   \
    \                 - move occurs because `l` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n7   |     let v: Vec<isize> = l.into_iter().filter(|x|\
    \ *x < t).collect();\n    |                           ----------- `l` moved due\
    \ to this method call\n8   |     v.len() == l.len()\n    |                ^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `l`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for e in l {\n        if e > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpswbxs524.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for num in l {\n        if num >= t {\n            return false;\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut i = 0;\n    while i < l.len() {\n        if l[i] >= t {\n   \
    \         return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Your code here\n    let mut result = true;\n    for i in l {\n   \
    \     if i >= t {\n            result = false;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|i| i < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for item in l {\n        if item >= t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut below = true;\n    for i in l {\n        if i >= t {\n      \
    \      below = false;\n        }\n    }\n    below\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in &l {\n        if *i > t {\n            return false;\n     \
    \   }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppv8dpzbp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut res = true;\n    for i in 0..l.len() {\n        res = res &&\
    \ l[i] < t;\n    }\n    res\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |a, &b| a && b < t)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // There is a standard library function called all that does exactly\
    \ what\n    // we want. However, we will reimplement it for the sake of practice.\n\
    \    for i in l {\n        if i >= t {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n  let mut below = true;\n  for i in l {\n    if i > t {\n      below = false;\n\
    \    }\n  }\n  below\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7ypa03b9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    //let mut s = true;\n    //for i in l {\n    //    if i > t {\n    //\
    \        s = false;\n    //    }\n    //}\n    //s\n    for i in l {\n       \
    \ if i > t {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpso32q1kv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // your code here\n    let mut r = true;\n    for num in l {\n      \
    \  if num > t {\n            r = false;\n        }\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgbqn2jj0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, &x| acc && x < t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // this function is implemented for you\n    for x in l {\n        if\
    \ x >= t {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // YOUR CODE HERE!\n    l.iter().all(|n| n < &t)\n}\n\nfn main() {\n\
    \    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|n| *n < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, &x| acc && x < t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    !l.iter().any(|x| *x > t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4njey6ih.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO\n    l.iter().all(|i| *i < t)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, x| acc && x < &t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n  for n in l {\n    if n >= t {\n      return false;\n    }\n  }\n  true\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&v| v < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpq2hdb796.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, x| acc && x < &t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Complete the function body. \n    false\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprzzt3hq5.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO\n    let mut check = true;\n    for num in l {\n        if num\
    \ >= t {\n            check = false;\n        }\n    }\n    check\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for e in l {\n        if e > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpswbxs524.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Function below_threshold checks if all numbers in the vector l are\
    \ below threshold t.\n    for x in l {\n        if x > t {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7ukx7dfb.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, x| acc && x < &t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut to_return = true;\n    for i in l {\n        if i > t {\n   \
    \         to_return = false;\n        }\n    }\n    to_return\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph9cy80wc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO: please implement the function.\n    for i in l.iter() {\n  \
    \      if i >= &t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let iter = l.iter();\n    // iter.all(|n| n < t)\n    for n in iter {\n\
    \        if n >= &t {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpq2hdb796.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |a, &b| a && b < t)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7do12om8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for i in l {\n        if i > t {\n      \
    \      result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptorj571e.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976055
- exit_code: 101
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpiyh0y7nw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for i in l {\n        if i >= t {\n     \
    \       result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976055
- exit_code: 0
  program: "/// Return true if all numbers in the vector l are below threshold t.\n\
    /// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1,\
    \ 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
