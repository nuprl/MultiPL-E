name: HumanEval_157_right_angle_triangle
language: rs
prompt: "/// Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
  /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
  \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
  \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
  \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
  \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
  \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
  \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
  \ 2, 10), false);\n}\n"
completions: ["    // Write your code here\n    let (a, b, c) = order_three(a, b,\
    \ c);\n    return a * a + b * b == c * c;", "    if a > 0 && b > 0 && c > 0 {\n\
    \        let mut v = vec![a, b, c];\n        v.sort();\n        v[0] * v[0] +\
    \ v[1] * v[1] == v[2] * v[2]\n    } else {\n        false\n    }", "    // Your\
    \ code here!\n    unimplemented!();", "    let a = a as f64;\n    let b = b as\
    \ f64;\n    let c = c as f64;\n    a.powi(2) + b.powi(2) == c.powi(2)", "    if\
    \ a > b && a > c {\n        a * a == b * b + c * c\n    } else if b > a && b >\
    \ c {\n        b * b == a * a + c * c\n    } else {\n        c * c == a * a +\
    \ b * b\n    }", "    if a.pow(2) + b.pow(2) == c.pow(2) {\n        return true;\n\
    \    } else if a.pow(2) + c.pow(2) == b.pow(2) {\n        return true;\n    }\
    \ else if b.pow(2) + c.pow(2) == a.pow(2) {\n        return true;\n    }\n   \
    \ return false;", "    // Hint: Pythagorean theorem states that in a right-angled\
    \ triangle, the sum\n    // of the squares of the two shorter sides must equal\
    \ the square of the\n    // hypotenuse.\n    unimplemented!();", '    unimplemented!()',
  '  unimplemented!()', "    let mut temp = 0;\n    let mut arr = [a, b, c];\n   \
    \ arr.sort();\n    let (a, b, c) = (arr[0], arr[1], arr[2]);\n    for i in 1..c\
    \ {\n        if (i * i) == (a * a + b * b) {\n            temp = 1;\n        }\n\
    \    }\n    temp == 1", '    (a.pow(2) + b.pow(2)) == c.pow(2)', "    let mut\
    \ sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    // PUT YOUR CODE HERE\n    unimplemented!();",
  "    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", '    false', "    let mut array = [a, b,\
    \ c];\n    array.sort();\n    if (array[0] * array[0] + array[1] * array[1]) ==\
    \ array[2] * array[2] {\n        return true;\n    } else {\n        return false;\n\
    \    }", "    let sides = [a, b, c];\n    sides.iter().filter(|&x| x.pow(2) ==\
    \ a.pow(2) + b.pow(2)).count() == 1", '    (a*a + b*b == c*c) || (b*b + c*c ==
    a*a) || (c*c + a*a == b*b)', "    if (a.pow(2) + b.pow(2)) == c.pow(2) {\n   \
    \     return true;\n    }\n    return false;", '    unimplemented!()']
stop_tokens:
- "\n}"
