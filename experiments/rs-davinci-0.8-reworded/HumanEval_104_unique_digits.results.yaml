language: rs
name: HumanEval_104_unique_digits
results:
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptay71jgl.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            y.push(i);\n        }\n   \
    \ }\n    y.sort();\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822354
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for num in x {\n        if (num % 2 != 0) & (num % 5\
    \ != 0) {\n            res.push(num);\n        }\n    }\n    res.sort();\n   \
    \ res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpm0th9g9e.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ !has_even_digit(n)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpgbnj4tcg.rs:10:32\n   |\n10 |     x.into_iter().filter(|&n| !has_even_digit(n)).collect()\n\
    \   |                                ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in x {\n        let mut is_unique = true;\n\
    \        for j in i.to_string().chars() {\n            if j.to_digit(10).unwrap()\
    \ % 2 == 0 {\n                is_unique = false;\n                break;\n   \
    \         }\n        }\n        if is_unique {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    for i in x {\n        if contains_odd(i) {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_odd` in this scope\n  -->\
    \ /tmp/tmpye8ksls5.rs:12:12\n   |\n12 |         if contains_odd(i) {\n   |   \
    \         ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n\tlet mut\
    \ result = Vec::new();\n\tfor num in x {\n\t\tif has_even_digit(num) {\n\t\t\t\
    continue;\n\t\t}\n\t\tresult.push(num);\n\t}\n\tresult.sort();\n\tresult\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmprinbv1ob.rs:12:6\n   |\n12 |         if has_even_digit(num) {\n   |\
    \            ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ format!(\"{}\", n).chars().all(|c| c == '1' || c == '3' || c == '5' || c ==\
    \ '7' || c == '9')).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmplval1lk4.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|n|\
    \ !is_has_even_digit(*n)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_has_even_digit` in this scope\n\
    \  --> /tmp/tmpr_j3g4qw.rs:10:31\n   |\n10 |     x.into_iter().filter(|n| !is_has_even_digit(*n)).collect()\n\
    \   |                               ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = Vec::new();\n    for i in x {\n        if is_unique_digit(i) {\n       \
    \     y.push(i);\n        }\n    }\n    y.sort();\n    y\n}\n\nfn main() {\n \
    \   let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique_digit` in this scope\n  -->\
    \ /tmp/tmpwgqm1o75.rs:12:12\n   |\n12 |         if is_unique_digit(i) {\n   |\
    \            ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let unique_digits\
    \ = x.iter().filter(|n| has_no_even_digits(n.to_string()));\n    let mut unique_digits_vec:\
    \ Vec<isize> = unique_digits.map(|n| *n).collect();\n    unique_digits_vec.sort();\n\
    \    unique_digits_vec\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_no_even_digits` in this scope\n\
    \  --> /tmp/tmpyi_wp29s.rs:10:45\n   |\n10 |     let unique_digits = x.iter().filter(|n|\
    \ has_no_even_digits(n.to_string()));\n   |                                  \
    \           ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = Vec::new();\n    for i in 0..x.len() {\n        let mut temp = x[i];\n\
    \        while temp > 0 {\n            if temp % 2 == 0 {\n                break;\n\
    \            }\n            temp /= 10;\n        }\n        if temp == 0 {\n \
    \           ans.push(x[i]);\n        }\n    }\n    ans.sort();\n    ans\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822354
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = Vec::new();\n    for n in x {\n        let s = n.to_string();\n\
    \        if !s.contains('2') && !s.contains('4') && !s.contains('6') && !s.contains('8')\
    \ {\n            v.push(n);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpi4tadnex.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret = Vec::new();\n    for v in x {\n        let mut has_even = false;\n   \
    \     let mut num = v;\n        while num > 0 {\n            if num % 2 == 0 {\n\
    \                has_even = true;\n                break;\n            }\n   \
    \         num /= 10;\n        }\n        if !has_even {\n            ret.push(v);\n\
    \        }\n    }\n    ret.sort();\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    for i in x {\n        if i.to_string().chars().any(|d| d.is_digit(10)\
    \ && d.is_even()) {\n            continue;\n        }\n        res.push(i);\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for type `char` in the current\
    \ scope\n  --> /tmp/tmphhwos4bz.rs:12:62\n   |\n12 |         if i.to_string().chars().any(|d|\
    \ d.is_digit(10) && d.is_even()) {\n   |                                     \
    \                         ^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&v|\
    \ unique_digits_help(v)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unique_digits_help` in this scope\n\
    \  --> /tmp/tmphem1sew1.rs:10:31\n   |\n10 |     x.into_iter().filter(|&v| unique_digits_help(v)).collect()\n\
    \   |                               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpaix0iskz.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|n|\
    \ *n.to_string().chars().find(|c| c.is_numeric() && c.to_digit(10).unwrap() %\
    \ 2 == 0).unwrap_or('0') == '0').collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp0e3g320x.rs:10:30\n\
    \   |\n10 |     x.into_iter().filter(|n| *n.to_string().chars().find(|c| c.is_numeric()\
    \ && c.to_digit(10).unwrap() % 2 == 0).unwrap_or('0') == '0').c...\n   |     \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ {\n        // use to_string() to convert integer to &str\n        // filter()\
    \ to filter out even digits\n        // collect() to convert back to String\n\
    \        // is_empty() to check if empty.\n        n.to_string().chars().filter(|d|\
    \ {\n            d.to_digit(10).unwrap() % 2 == 0\n        }).collect::<String>().is_empty()\n\
    \    }).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpdbvkcaf5.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&num|\
    \ is_unique_digits(num)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique_digits` in this scope\n \
    \ --> /tmp/tmpoop9wxqj.rs:10:33\n   |\n10 |     x.into_iter().filter(|&num| is_unique_digits(num)).collect()\n\
    \   |                                 ^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // First\
    \ we have to get a vector of booleans specifying if an element\n    // has an\
    \ even number. Then we must remove all the even digits\n    // and then sort the\
    \ vector.\n    let mut result: Vec<isize> = vec![];\n    let mut evens = vec![];\n\
    \    for element in x {\n        if has_even_digits(element) {\n            evens.push(true);\n\
    \        } else {\n            evens.push(false);\n        }\n    }\n    for n\
    \ in 0..x.len() {\n        if !evens[n] {\n            result.push(x[n]);\n  \
    \      }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digits` in this scope\n  -->\
    \ /tmp/tmpdl5717s2.rs:16:12\n   |\n16 |         if has_even_digits(element) {\n\
    \   |            ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = vec![];\n    for num in x {\n        let mut flag = true;\n\
    \        let num_str = num.to_string();\n        for digit in num_str.chars()\
    \ {\n            if digit.to_digit(10).unwrap() % 2 == 0 {\n                flag\
    \ = false;\n                break;\n            }\n        }\n        if flag\
    \ {\n            result.push(num);\n        }\n    }\n    result.sort();\n   \
    \ result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let x\
    \ = x.iter()\n        .filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1))\n        .collect::<Vec<_>>();\n    x.sort();\n    x\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp275p0aw3.rs:14:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    14 |     x\n   |     ^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = Vec::new();\n    for e in x {\n        if has_even_digit(e) {\n        \
    \    continue;\n        }\n        v.push(e);\n    }\n    v.sort();\n    v\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauhmwbga.rs:12:12\n   |\n12 |         if has_even_digit(e) {\n   | \
    \           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|x|\
    \ has_unique_digits(*x)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_unique_digits` in this scope\n\
    \  --> /tmp/tmpn6e43z52.rs:10:30\n   |\n10 |     x.into_iter().filter(|x| has_unique_digits(*x)).collect()\n\
    \   |                              ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO\n\
    \    let mut v = vec![];\n    for i in x {\n        if is_unique(i) {\n      \
    \      v.push(i);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique` in this scope\n  --> /tmp/tmpgiztwfu1.rs:13:12\n\
    \   |\n13 |         if is_unique(i) {\n   |            ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ vec: Vec<isize> = Vec::new();\n    let mut last: isize = 0;\n    for i in x\
    \ {\n        if i.to_string().chars().any(|c| c.is_digit(10) && c.to_digit(10).unwrap()\
    \ % 2 == 0) {\n            continue;\n        }\n        let cnt = i.to_string().chars().filter(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() == i % 10).count();\n        if cnt\
    \ > 1 {\n            continue;\n        }\n        if i > last {\n           \
    \ vec.push(i);\n            last = i;\n        }\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1wctceav.rs:16:97\n   |\n\
    16 |         let cnt = i.to_string().chars().filter(|c| c.is_digit(10) && c.to_digit(10).unwrap()\
    \ == i % 10).count();\n   |                                                  \
    \                                               ^^^^^^ expected `u32`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         let cnt = i.to_string().chars().filter(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() == (i % 10).try_into().unwrap()).count();\n\
    \   |                                                                        \
    \                         +      +++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = vec![];\n    let mut flag: bool = true;\n    for item in x\
    \ {\n        if item % 2 == 0 {\n            flag = false;\n        } else {\n\
    \            flag = true;\n        }\n        if flag {\n            ret.push(item);\n\
    \        }\n    }\n    ret.sort();\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmpsgyq8fdu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ i.to_string().chars().any(|c| c.is_digit(10) && c.to_digit(10).unwrap() % 2\
    \ == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp_941k0si.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ {\n        let mut v = n;\n        while v > 0 {\n            if v % 2 == 0\
    \ {\n                return false;\n            }\n            v /= 10;\n    \
    \    }\n        true\n    }).collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpaztm8h7k.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut is_unique\
    \ = true;\n        for digit in i.to_string().chars() {\n            if digit.to_digit(10).unwrap()\
    \ % 2 == 0 {\n                is_unique = false;\n                break;\n   \
    \         }\n        }\n        if is_unique {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for val in x {\n        if is_unique(val)\
    \ {\n            result.push(val);\n        }\n    }\n    result.sort();\n   \
    \ result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique` in this scope\n  --> /tmp/tmpz6lj27aj.rs:12:12\n\
    \   |\n12 |         if is_unique(val) {\n   |            ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n\tx.into_iter().filter(|&n|\
    \ {\n\t\t(0..10).any(|m| (n/m)%2 == 1)\n\t}).collect()\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to divide by zero'', /tmp/tmppzdqfunt.rs:11:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for num in x {\n        let mut num =\
    \ num;\n        let mut unique = true;\n        while num > 0 {\n            if\
    \ num % 2 == 0 {\n                unique = false;\n                break;\n  \
    \          }\n            num /= 10;\n        }\n        if unique {\n       \
    \     result.push(num);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpl_mfl4vu.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for val in x {\n        if val < 10 {\n          \
    \  result.push(val);\n        } else {\n            let mut copy = val;\n    \
    \        while copy > 0 {\n                if copy % 2 == 0 {\n              \
    \      break;\n                }\n                copy /= 10;\n            }\n\
    \            if copy == 0 {\n                result.push(val);\n            }\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in x {\n        if has_even_digit(i) {\n       \
    \     continue;\n        }\n        result.push(i);\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpswp3w3jd.rs:12:12\n   |\n12 |         if has_even_digit(i) {\n   | \
    \           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnn4lt5q1.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    return\
    \ vec![];\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpdhtkzt2e.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // initialize\
    \ a new vector\n    let mut result: Vec<isize> = Vec::new();\n    // check each\
    \ element in the vector\n    for elt in x {\n        // check if the element has\
    \ a unique digit\n        if unique_digit(elt) {\n            // if it does, push\
    \ it onto the new vector\n            result.push(elt);\n        }\n    }\n  \
    \  // sort the new vector\n    result.sort();\n    // return the sorted vector\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unique_digit` in this scope\n  -->\
    \ /tmp/tmpnbr_appm.rs:15:12\n   |\n15 |         if unique_digit(elt) {\n   | \
    \           ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let v:\
    \ Vec<isize> = x.into_iter().filter(|n| {\n        n.to_string().chars().all(|c|\
    \ c == '1' || c == '3' || c == '5' || c == '7' || c == '9')\n    }).collect();\n\
    \    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmprb8z15dw.rs:13:5\n   |\n10 |     let v: Vec<isize> = x.into_iter().filter(|n|\
    \ {\n   |         - help: consider changing this to be mutable: `mut v`\n...\n\
    13 |     v.sort();\n   |     ^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ output: Vec<isize> = Vec::new();\n    for i in x {\n        let mut flag = true;\n\
    \        for j in i.to_string().chars() {\n            if j.to_digit(10).unwrap()\
    \ % 2 == 0 {\n                flag = false;\n                break;\n        \
    \    }\n        }\n        if flag {\n            output.push(i);\n        }\n\
    \    }\n    output.sort();\n    output\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in x {\n        let mut v = i;\n        let\
    \ mut has_even = false;\n        while v > 0 {\n            if v % 2 == 0 {\n\
    \                has_even = true;\n                break;\n            }\n   \
    \         v /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res: Vec<isize> = Vec::new();\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            res.push(num);\n        }\n    }\n    res.sort();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpj8s4nw0z.rs:12:13\n   |\n12 |         if !has_even_digit(num) {\n  \
    \ |             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res: Vec<isize> = vec![];\n    let mut res_sorted: Vec<isize> = vec![];\n  \
    \  for item in x {\n        let mut temp = item;\n        let mut flag = true;\n\
    \        while temp != 0 {\n            if temp % 2 == 0 {\n                flag\
    \ = false;\n                break;\n            }\n            temp /= 10;\n \
    \       }\n        if flag {\n            res.push(item);\n        }\n    }\n\
    \    // Sort vector\n    for _ in 0..res.len() {\n        let mut temp_min = 0;\n\
    \        for i in 0..res.len() {\n            if res[i] > temp_min {\n       \
    \         temp_min = res[i];\n            }\n        }\n        res_sorted.push(temp_min);\n\
    \        let mut del_ind = 0;\n        for i in 0..res.len() {\n            if\
    \ res[i] == temp_min {\n                del_ind = i;\n                break;\n\
    \            }\n        }\n        res.remove(del_ind);\n    }\n    res_sorted\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[33, 15, 1]`,\n right: `[1, 15, 33]`', /tmp/tmphy0vbk7i.rs:49:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n\tlet mut\
    \ vec = vec![];\n\tlet mut value = 0;\n\tfor y in x {\n\t\tvalue = y;\n\t\tloop\
    \ {\n\t\t\tif value < 10 {\n\t\t\t\tif value % 2 == 0 {\n\t\t\t\t\tbreak;\n\t\t\
    \t\t} else {\n\t\t\t\t\tvec.push(y);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else\
    \ {\n\t\t\t\tif value % 2 == 0 {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\
    \tvalue = value / 10;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tvec.sort();\n\tvec\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ new_vec = Vec::new();\n    for i in x {\n        let mut has_even_digit = false;\n\
    \        let mut num = i;\n        while num > 0 {\n            if num % 2 ==\
    \ 0 {\n                has_even_digit = true;\n                break;\n      \
    \      }\n            num /= 10;\n        }\n        if !has_even_digit {\n  \
    \          new_vec.push(i);\n        }\n    }\n    new_vec.sort();\n    new_vec\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    for i in x {\n        if is_unique_digits(i) {\n        \
    \    res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique_digits` in this scope\n \
    \ --> /tmp/tmpmyg6mj7m.rs:12:12\n   |\n12 |         if is_unique_digits(i) {\n\
    \   |            ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028110
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|i|\
    \ {\n        !i.to_string().chars().any(|ch| ch.to_digit(10).unwrap() % 2 == 0)\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpj6a3az5g.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = Vec::new();\n    for n in x {\n        let s = n.to_string();\n\
    \        if s.chars().any(|c| c == '2' || c == '4' || c == '6' || c == '8' ||\
    \ c == '0') {\n            continue;\n        }\n        v.push(n);\n    }\n \
    \   v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n \
    \   assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for i in x {\n        if unique_check(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unique_check` in this scope\n  -->\
    \ /tmp/tmpf3245dw7.rs:12:12\n   |\n12 |         if unique_check(i) {\n   |   \
    \         ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ {\n        let mut n = i;\n        while n > 0 {\n            if n % 2 == 0\
    \ {\n                return false;\n            }\n            n /= 10;\n    \
    \    }\n        true\n    }).collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpndeidf5h.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut unique =\
    \ true;\n        let mut tmp = i;\n        while tmp > 0 {\n            if tmp\
    \ % 2 == 0 {\n                unique = false;\n                break;\n      \
    \      }\n            tmp /= 10;\n        }\n        if unique {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ vec: Vec<isize> = Vec::new();\n    for n in x {\n        if is_unique(n) {\n\
    \            vec.push(n);\n        }\n    }\n    vec.sort();\n    vec\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique` in this scope\n  --> /tmp/tmpyshh3aky.rs:12:12\n\
    \   |\n12 |         if is_unique(n) {\n   |            ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|n|\
    \ is_digit_even(*n)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_digit_even` in this scope\n  -->\
    \ /tmp/tmpca1bza8z.rs:10:30\n   |\n10 |     x.into_iter().filter(|n| is_digit_even(*n)).collect()\n\
    \   |                              ^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO\n\
    \    // Write your code here\n    let mut uniq_x = vec![];\n    for i in x {\n\
    \        let mut has_even = false;\n        let digits = i.to_string();\n    \
    \    for char in digits.chars() {\n            if char == '2' || char == '4' ||\
    \ char == '6' || char == '8' {\n                has_even = true;\n           \
    \     break;\n            }\n        }\n        if !has_even {\n            uniq_x.push(i);\n\
    \        }\n    }\n    uniq_x.sort();\n    uniq_x\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmp258wgkml.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = vec![];\n    for value in x {\n        let mut is_unique\
    \ = true;\n        for character in value.to_string().chars() {\n            let\
    \ digit = character.to_digit(10).unwrap();\n            if digit % 2 == 0 {\n\
    \                is_unique = false;\n                break;\n            }\n \
    \       }\n        if is_unique {\n            result.push(value);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|y|\
    \ !is_unique(*y)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique` in this scope\n  --> /tmp/tmpi8eysu1a.rs:10:31\n\
    \   |\n10 |     x.into_iter().filter(|y| !is_unique(*y)).collect()\n   |     \
    \                          ^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    return\
    \ x.into_iter().filter(|&item| !has_even_digit(item)).collect();\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp384rm1fn.rs:10:42\n   |\n10 |     return x.into_iter().filter(|&item|\
    \ !has_even_digit(item)).collect();\n   |                                    \
    \      ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&y|\
    \ is_odd_digit(y)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd_digit` in this scope\n  -->\
    \ /tmp/tmpvdn7y287.rs:10:31\n   |\n10 |     x.into_iter().filter(|&y| is_odd_digit(y)).collect()\n\
    \   |                               ^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|x|\
    \ x.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|e|\
    \ {\n        e.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp41hd0z32.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v_sorted: Vec<isize> = x.iter().cloned().collect();\n    v_sorted.sort();\n\
    \    let n = v_sorted.len();\n    let mut v_new: Vec<isize> = Vec::new();\n  \
    \  for i in 0..n {\n        let num = v_sorted[i];\n        let mut has_even =\
    \ false;\n        let mut temp = num;\n        while temp > 0 {\n            let\
    \ digit = temp % 10;\n            if digit % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            temp /= 10;\n  \
    \      }\n        if !has_even {\n            v_new.push(num);\n        }\n  \
    \  }\n    v_new\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ _return = Vec::new();\n    for &i in &x {\n        let mut is_even = false;\n\
    \        let mut j = i;\n        while j > 0 {\n            let digit = j % 10;\n\
    \            if digit % 2 == 0 {\n                is_even = true;\n          \
    \      break;\n            }\n            j /= 10;\n        }\n        if !is_even\
    \ {\n            _return.push(i);\n        }\n    }\n    _return.sort();\n   \
    \ _return\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|i|\
    \ i.to_string().chars().all(|c| c != '2' && c != '4' && c != '6' && c != '8' &&\
    \ c != '0')).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp0krayg24.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnn4lt5q1.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().to_lowercase().chars().any(|c|\
    \ c != '1' && c != '3' && c != '5' && c != '7' && c != '9') {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpr9s7ovld.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ results = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|x|\
    \ !x.is_numeric()) {\n            continue;\n        }\n        let mut unique\
    \ = true;\n        for j in i.to_string().chars() {\n            if j.to_digit(10).unwrap()\
    \ % 2 == 0 {\n                unique = false;\n                break;\n      \
    \      }\n        }\n        if unique {\n            results.push(i);\n     \
    \   }\n    }\n    results.sort();\n    results\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ {\n        let mut tmp = x;\n        while tmp > 0 {\n            if (tmp %\
    \ 10) % 2 == 0 {\n                return false;\n            }\n            tmp\
    \ /= 10;\n        }\n        true\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpvfw_6k5m.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let unique_digits\
    \ = |n: isize| -> bool {\n        let mut number = n;\n        while number >\
    \ 0 {\n            if number % 2 == 0 {\n                return false;\n     \
    \       }\n            number /= 10;\n        }\n        true\n    };\n    x.into_iter().filter(|&n|\
    \ unique_digits(n)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp13pfc_fa.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ odds = Vec::new();\n    for i in x {\n        if is_odd(i) {\n            odds.push(i);\n\
    \        }\n    }\n    odds.sort();\n    odds\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmpieb8e8t6.rs:12:12\n\
    \   |\n12 |         if is_odd(i) {\n   |            ^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ digits: Vec<isize> = vec![];\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            digits.push(i);\n        }\n\
    \    }\n    digits.sort();\n    digits\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|y|\
    \ y.to_string().chars().all(|z| z != '2' && z != '4' && z != '6' && z != '8' &&\
    \ z != '0')).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp8561ijsw.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    fn has_even_digit(n:\
    \ isize) -> bool {\n        let mut m = n;\n        while m > 0 {\n          \
    \  if m % 2 == 0 {\n                return true;\n            }\n            m\
    \ /= 10;\n        }\n        false\n    }\n    let mut ret = Vec::new();\n   \
    \ for i in x {\n        if !has_even_digit(i) {\n            ret.push(i);\n  \
    \      }\n    }\n    ret.sort();\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // write\
    \ your code here\n    let mut result: Vec<isize> = Vec::new();\n    for i in x\
    \ {\n        if i.to_string().chars().any(|c| c.is_numeric() && c.to_digit(10).unwrap()\
    \ % 2 == 0) {\n            continue;\n        }\n        result.push(i);\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ out = Vec::new();\n    for num in x {\n        if all_odd(num) {\n         \
    \   out.push(num);\n        }\n    }\n    out.sort();\n    out\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `all_odd` in this scope\n  --> /tmp/tmpn7nfckdb.rs:12:12\n\
    \   |\n12 |         if all_odd(num) {\n   |            ^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y: Vec<isize> = Vec::new();\n    for z in x {\n        if z % 2 != 0 {\n   \
    \         y.push(z);\n        }\n    }\n    y.sort();\n    y\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmpaxqcqyk0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|y|\
    \ {\n        let mut y = *y;\n        let mut has_odd = false;\n        while\
    \ y > 0 {\n            if y % 2 == 0 {\n                return false;\n      \
    \      }\n            has_odd = true;\n            y /= 10;\n        }\n     \
    \   has_odd\n    }).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpl56ncvts.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d: Vec<isize> = Vec::new();\n    for n in x {\n        let s = n.to_string();\n\
    \        let mut e = true;\n        for c in s.chars() {\n            if c ==\
    \ '2' || c == '4' || c == '6' || c == '8' {\n                e = false;\n    \
    \            break;\n            }\n        }\n        if e {\n            d.push(n);\n\
    \        }\n    }\n    d.sort();\n    d\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmprdy_sg4b.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut has_even_digit\
    \ = false;\n        let mut j = i;\n        while j > 0 {\n            if j %\
    \ 2 == 0 {\n                has_even_digit = true;\n                break;\n \
    \           }\n            j /= 10;\n        }\n        if !has_even_digit {\n\
    \            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for i in x {\n        if !i.to_string().contains(\"2\"\
    ) &&\n            !i.to_string().contains(\"4\") &&\n            !i.to_string().contains(\"\
    6\") &&\n            !i.to_string().contains(\"8\") {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmprdcoqdzv.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ {\n        n.to_string().chars().all(|x| x.to_digit(10).unwrap() % 2 == 1)\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmph_j9je24.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ r: Vec<isize> = Vec::new();\n    for n in x {\n        let mut tmp = n;\n  \
    \      let mut flag = true;\n        while tmp > 0 {\n            if tmp % 2 ==\
    \ 0 {\n                flag = false;\n                break;\n            }\n\
    \            tmp /= 10;\n        }\n        if flag {\n            r.push(n);\n\
    \        }\n    }\n    r.sort();\n    r\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digits = Vec::new();\n    for i in 0..x.len() {\n        if is_unique_digits(x[i])\
    \ {\n            unique_digits.push(x[i]);\n        }\n    }\n    unique_digits.sort();\n\
    \    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique_digits` in this scope\n \
    \ --> /tmp/tmp3aby3zp4.rs:12:12\n   |\n12 |         if is_unique_digits(x[i])\
    \ {\n   |            ^^^^^^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `unique_digits`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y: Vec<isize> = Vec::new();\n    for n in x {\n        let mut n_str = n.to_string();\n\
    \        n_str.retain(|c| c != '0' && c != '2' && c != '4' && c != '6' && c !=\
    \ '8');\n        if n_str == n.to_string() {\n            y.push(n);\n       \
    \ }\n    }\n    y.sort();\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = Vec::new();\n    for n in x {\n        let mut odd = true;\n\
    \        let mut n = n;\n        while n > 0 {\n            if n % 2 == 0 {\n\
    \                odd = false;\n                break;\n            }\n       \
    \     n /= 10;\n        }\n        if odd {\n            ret.push(n);\n      \
    \  }\n    }\n    ret.sort();\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpedxszzgo.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ answer: Vec<isize> = Vec::new();\n    for i in x {\n        let mut temp = i;\n\
    \        while temp != 0 {\n            if temp % 2 == 0 {\n                break;\n\
    \            }\n            temp /= 10;\n        }\n        if temp == 0 {\n \
    \           answer.push(i);\n        }\n    }\n    answer.sort();\n    answer\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in x {\n        if !contains_even_digit(i) {\n\
    \            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even_digit` in this scope\n\
    \  --> /tmp/tmp7m7_21xd.rs:12:13\n   |\n12 |         if !contains_even_digit(i)\
    \ {\n   |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&y|\
    \ y.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp72m6nje1.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ {\n        i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpyhcqpb90.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            res.push(i);\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpcsvt1n8a.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ i < 10).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 15, 33]`', /tmp/tmp3drk14nz.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ x.to_string().bytes().all(|c| c & 1 == 1)).collect()\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp_jskcj8f.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = Vec::new();\n    for num in x {\n        if has_even_digit(num) {\n  \
    \          continue;\n        }\n        ans.push(num);\n    }\n    ans.sort();\n\
    \    ans\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpwzuuvifb.rs:12:12\n   |\n12 |         if has_even_digit(num) {\n   |\
    \            ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for num in x {\n        let mut s = num.to_string();\n\
    \        let mut even = false;\n        for c in s.chars() {\n            if c\
    \ == '2' || c == '4' || c == '6' || c == '8' {\n                even = true;\n\
    \                break;\n            }\n        }\n        if !even {\n      \
    \      res.push(num);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmp9aqgiurr.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO:\
    \ implement here\n    return x;\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpedgagvi1.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for &n in &x {\n        if n.to_string().chars().all(|c|\
    \ (c.to_digit(10).unwrap() % 2) == 1) {\n            res.push(n);\n        }\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ !x.to_string().chars().any(|c| c.is_digit(10) && c.to_digit(10).unwrap() % 2\
    \ == 0)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpbys1ij8k.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ n.to_string().chars().any(|c| c.is_digit(10) && c.to_digit(10).unwrap() % 2\
    \ == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpqdtn490o.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ answer = Vec::new();\n    for i in x {\n        if !is_unique(i) {\n       \
    \     answer.push(i);\n        }\n    }\n    answer.sort();\n    answer\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique` in this scope\n  --> /tmp/tmp9gy5xkhr.rs:12:13\n\
    \   |\n12 |         if !is_unique(i) {\n   |             ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&v|\
    \ has_unique_digits(v)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_unique_digits` in this scope\n\
    \  --> /tmp/tmpdcsvmfw2.rs:10:31\n   |\n10 |     x.into_iter().filter(|&v| has_unique_digits(v)).collect()\n\
    \   |                               ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    return\
    \ x.into_iter().filter(|&y| is_unique_digits(y)).collect();\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique_digits` in this scope\n \
    \ --> /tmp/tmp7t74fb7c.rs:10:38\n   |\n10 |     return x.into_iter().filter(|&y|\
    \ is_unique_digits(y)).collect();\n   |                                      ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    //  \
    \       let mut y = x.iter().map(|&x| x.to_string().as_str()).filter(|x| x.chars().all(|c|\
    \ c.is_numeric()));\n    //         let mut y = x.iter().map(|&x| x.to_string().as_str()).filter(|x|\
    \ x.chars().all(|c| c.is_numeric()));\n    //         let mut y = x.iter().map(|&x|\
    \ x.to_string().as_str()).filter(|x| x.chars().all(|c| c.is_numeric()));\n   \
    \ //         let mut y = x.iter().map(|&x| x.to_string().as_str()).filter(|x|\
    \ x.chars().all(|c| c.is_numeric()));\n    //         let mut y = x.iter().map(|&x|\
    \ x.to_string().as_str()).filter(|x| x.chars().all(|c| c.is_numeric()));\n   \
    \ //         let mut y = x.iter().map(|&x| x.to_string().as_str()).filter(|x|\
    \ x.chars().all(|c| c.is_numeric()));\n    //         let mut y = x.iter().map(|&x|\
    \ x.to_string().as_str()).filter(|x| x.chars().all(|c| c.is_numeric()));\n   \
    \ //         let mut y = x.iter().map(|&x| x.to_string().as_str()).filter(|x|\
    \ x.chars().all(|c| c.is_numeric()));\n    //         let mut y = x.iter().map(|&x|\
    \ x.to_string().as_str()).filter(|x| x.chars().all(|c| c.is_numeric()));\n   \
    \ //         let mut y = x.iter().map(|&x| x.to_string().as_str()).filter(|x|\
    \ x.chars().all(|c|\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphw7fq4h6.rs:9:36\n  |\n9 |\
    \ fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------      \
    \             ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for num in x {\n        if unique_check(num) {\n \
    \           result.push(num);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unique_check` in this scope\n  -->\
    \ /tmp/tmpxk9koojx.rs:12:12\n   |\n12 |         if unique_check(num) {\n   | \
    \           ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x_vec: Vec<isize> = Vec::new();\n    let mut y_vec: Vec<isize> = Vec::new();\n\
    \    for i in x {\n        if (i % 2 != 0) {\n            x_vec.push(i);\n   \
    \     }\n    }\n    for i in x_vec {\n        if i.to_string().contains(\"2\"\
    ) | i.to_string().contains(\"4\") | i.to_string().contains(\"6\") | i.to_string().contains(\"\
    8\") {\n            continue;\n        } else {\n            y_vec.push(i);\n\
    \        }\n    }\n    y_vec.sort();\n    return y_vec;\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[31, 103, 135]`,\n right: `[31, 135]`', /tmp/tmprqjzf5r1.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res: Vec<isize> = Vec::new();\n    for i in x {\n        if !contains_even(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even` in this scope\n  -->\
    \ /tmp/tmpgfua5yne.rs:12:13\n   |\n12 |         if !contains_even(i) {\n   | \
    \            ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res: Vec<isize> = Vec::new();\n    for i in x {\n        if !is_contain_even(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_contain_even` in this scope\n  -->\
    \ /tmp/tmpnn734i89.rs:12:13\n   |\n12 |         if !is_contain_even(i) {\n   |\
    \             ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ uniq_digits: Vec<isize> = Vec::new();\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            uniq_digits.push(num);\n        }\n    }\n    uniq_digits.sort();\n\
    \    uniq_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpo8v_zimq.rs:12:13\n   |\n12 |         if !has_even_digit(num) {\n  \
    \ |             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique = Vec::new();\n    for num in x {\n        let mut digits = num.to_string();\n\
    \        if !digits.contains(\"2\") && !digits.contains(\"4\") && !digits.contains(\"\
    6\")\n            && !digits.contains(\"8\") && !digits.contains(\"0\") {\n  \
    \          unique.push(num);\n        }\n    }\n    unique.sort();\n    unique\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n\tlet mut\
    \ result = Vec::new();\n\tfor x_num in x {\n\t\tif !contains_even_digits(x_num)\
    \ {\n\t\t\tresult.push(x_num);\n\t\t}\n\t}\n\tresult.sort();\n\tresult\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even_digits` in this scope\n\
    \  --> /tmp/tmp64ivft21.rs:12:7\n   |\n12 |         if !contains_even_digits(x_num)\
    \ {\n   |             ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnn4lt5q1.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // REPLACE\
    \ THIS CODE WITH YOUR SOLUTION\n    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpy38bzvac.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ {\n        let mut x = x;\n        while x > 0 {\n            if x % 2 == 0\
    \ {\n                return false;\n            }\n            x /= 10;\n    \
    \    }\n        true\n    }).collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpgev9east.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ digits: Vec<isize> = Vec::new();\n    for i in x {\n        let mut num: isize\
    \ = i;\n        let mut even: bool = false;\n        while num > 0 {\n       \
    \     if num % 2 == 0 {\n                even = true;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if !even {\n      \
    \      digits.push(i);\n        }\n    }\n    digits.sort();\n    digits\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO:\
    \ Implement the function\n    vec![]\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmp528v9m1_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|i|\
    \ (0..10).all(|j| !(i.to_string().contains(&j.to_string())))).collect()\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmp153xn6sf.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpaix0iskz.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digits = Vec::new();\n    for i in x {\n        if is_unique_digit(i)\
    \ {\n            unique_digits.push(i);\n        }\n    }\n    unique_digits.sort();\n\
    \    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique_digit` in this scope\n  -->\
    \ /tmp/tmpj78x11h8.rs:12:12\n   |\n12 |         if is_unique_digit(i) {\n   |\
    \            ^^^^^^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `unique_digits`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for num in x {\n        let mut odd = true;\n    \
    \    let mut n = num;\n        while n > 0 {\n            if n % 2 == 0 {\n  \
    \              odd = false;\n                break;\n            }\n         \
    \   n /= 10;\n        }\n        if odd {\n            result.push(num);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnn4lt5q1.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ valid_numbers: Vec<isize> = Vec::new();\n    let mut sorted_valid_numbers: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().find(\"2\").is_none()\
    \ &&\n           i.to_string().find(\"4\").is_none() &&\n           i.to_string().find(\"\
    6\").is_none() &&\n           i.to_string().find(\"8\").is_none() {\n        \
    \    valid_numbers.push(i);\n        }\n    }\n    valid_numbers.sort();\n   \
    \ for i in valid_numbers {\n        sorted_valid_numbers.push(i);\n    }\n   \
    \ sorted_valid_numbers\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmp75vvedp6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ r = vec![];\n    for n in x {\n        let mut n = n;\n        let mut add =\
    \ true;\n        while n > 0 {\n            if n % 2 == 0 {\n                add\
    \ = false;\n                break;\n            }\n            n /= 10;\n    \
    \    }\n        if add {\n            r.push(n);\n        }\n    }\n    r.sort();\n\
    \    r\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpwja3ws4y.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptay71jgl.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO:\
    \ Implement me!\n    x.iter().filter(|&i| i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp549qf4qn.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for n in x {\n        if !has_even_digit(n)\
    \ {\n            result.push(n);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpkde4sb9y.rs:12:13\n   |\n12 |         if !has_even_digit(n) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|v|\
    \ v.to_string().bytes().all(|c| c % 2 == 1)).collect()\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpt20rop6p.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ n.to_string().chars().any(|c| c.is_digit(10) && c.to_digit(10).unwrap() % 2\
    \ == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpqdtn490o.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|x|\
    \ x.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpzf1xzo0d.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ x.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp5xef3jg3.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&num|\
    \ {\n        let mut d = num;\n        while d > 0 {\n            if d % 2 ==\
    \ 0 {\n                return false;\n            }\n            d /= 10;\n  \
    \      }\n        true\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmprbcmkehd.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ {\n        let mut xx = x;\n        while xx > 0 {\n            if xx % 2 ==\
    \ 0 {\n                return false;\n            }\n            xx /= 10;\n \
    \       }\n        true\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp1xhunfhs.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ !is_even_digit(n)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_even_digit` in this scope\n  -->\
    \ /tmp/tmpwbtb38sf.rs:10:32\n   |\n10 |     x.into_iter().filter(|&n| !is_even_digit(n)).collect()\n\
    \   |                                ^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ out = vec![];\n    for i in x {\n        if unique_digit(i) {\n            out.push(i);\n\
    \        }\n    }\n    out.sort();\n    out\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unique_digit` in this scope\n  -->\
    \ /tmp/tmpachyn6ja.rs:12:12\n   |\n12 |         if unique_digit(i) {\n   |   \
    \         ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphe5g8z9s.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ (c as u8) % 2 == 0) {\n            continue;\n        }\n        result.push(i);\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = x.clone();\n    y.sort();\n    y.dedup();\n    let mut z = Vec::new();\n\
    \    for i in y {\n        if i.to_string().chars().all(|x| x == '1' || x == '3'\
    \ || x == '5' || x == '7' || x == '9') {\n            z.push(i);\n        }\n\
    \    }\n    z\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ !has_even_digit(x)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp312501jh.rs:10:32\n   |\n10 |     x.into_iter().filter(|&x| !has_even_digit(x)).collect()\n\
    \   |                                ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret = Vec::new();\n    for i in x {\n        if !contains_even_digit(i) {\n\
    \            ret.push(i);\n        }\n    }\n    ret.sort();\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even_digit` in this scope\n\
    \  --> /tmp/tmpluqboc68.rs:12:13\n   |\n12 |         if !contains_even_digit(i)\
    \ {\n   |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&v|\
    \ v.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp5uniujc7.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ filtered = x.clone();\n    for i in x {\n        let mut has_even = false;\n\
    \        let mut n = i;\n        while n > 0 {\n            if n % 2 == 0 {\n\
    \                has_even = true;\n                break;\n            }\n   \
    \         n /= 10;\n        }\n        if has_even {\n            filtered.retain(|&x|\
    \ x != i);\n        }\n    }\n    filtered.sort();\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpaix0iskz.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|n|\
    \ n.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpjk2btqgr.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ temp: Vec<isize> = Vec::new();\n    let mut s: Vec<isize> = Vec::new();\n  \
    \  for num in x.iter() {\n        temp.push(num);\n    }\n    for num in temp.iter()\
    \ {\n        let num_str = num.to_string();\n        for ch in num_str.chars()\
    \ {\n            if ch.to_digit(10).unwrap() % 2 == 0 {\n                s.push(num.clone());\n\
    \                break;\n            }\n        }\n    }\n    for num in s.iter()\
    \ {\n        temp.retain(|&n| n != num);\n    }\n    temp.sort();\n    temp\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzc4c4v0h.rs:13:19\n   |\n\
    13 |         temp.push(num);\n   |                   ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \ temp.push(*num);\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpzc4c4v0h.rs:25:31\n   |\n25 |         temp.retain(|&n| n != num);\n\
    \   |                               ^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n25 |         temp.retain(|&n| n\
    \ != *num);\n   |                               +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028112
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for &n in &x {\n        let mut is_unique:\
    \ bool = true;\n        let mut current: isize = n;\n        while current > 0\
    \ {\n            if current % 2 == 0 {\n                is_unique = false;\n \
    \               break;\n            }\n            current /= 10;\n        }\n\
    \        if is_unique {\n            result.push(n);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphe5g8z9s.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ new_vec = Vec::new();\n    for n in x {\n        if n.to_string().chars().all(|c|\
    \ c != '0' && c != '2' && c != '4' && c != '6' && c != '8') {\n            new_vec.push(n);\n\
    \        }\n    }\n    new_vec.sort();\n    new_vec\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ output = Vec::new();\n    for i in x {\n        let mut temp = i;\n        let\
    \ mut flag = true;\n        while temp > 0 {\n            if temp % 10 % 2 ==\
    \ 0 {\n                flag = false;\n                break;\n            }\n\
    \            temp /= 10;\n        }\n        if flag {\n            output.push(i);\n\
    \        }\n    }\n    output.sort();\n    output\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO\n\
    \    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpnfr0zfhc.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = x.clone();\n    y.sort();\n    y.iter().filter(|&z| z.to_string().chars().any(|d|\
    \ d % 2 == 1)).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `char` by `{integer}`\n  --> /tmp/tmpvz880nxm.rs:12:58\n\
    \   |\n12 |     y.iter().filter(|&z| z.to_string().chars().any(|d| d % 2 == 1)).cloned().collect()\n\
    \   |                                                        - ^ - {integer}\n\
    \   |                                                        |\n   |         \
    \                                               char\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptay71jgl.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptay71jgl.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp73uyxpv1.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ r: Vec<isize> = Vec::new();\n    for num in x {\n        let str_num = num.to_string();\n\
    \        let mut contain_even_digit = false;\n        for digit in str_num.chars()\
    \ {\n            if digit.to_digit(10).unwrap() % 2 == 0 {\n                contain_even_digit\
    \ = true;\n                break;\n            }\n        }\n        if !contain_even_digit\
    \ {\n            r.push(num);\n        }\n    }\n    r.sort();\n    r\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n\tlet mut\
    \ res = Vec::new();\n\tfor n in x {\n\t\tlet mut digits = n.clone();\n\t\twhile\
    \ digits > 0 {\n\t\t\tif digits % 2 == 0 {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdigits\
    \ /= 10;\n\t\t}\n\t\tif digits == 0 {\n\t\t\tres.push(n);\n\t\t}\n\t}\n\tres.sort();\n\
    \tres\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let evens\
    \ = ['0', '2', '4', '6', '8'];\n    let mut vec = Vec::new();\n    for i in x\
    \ {\n        let mut has_even = false;\n        for c in i.to_string().chars()\
    \ {\n            if evens.contains(&c) {\n                has_even = true;\n \
    \               break;\n            }\n        }\n        if !has_even {\n   \
    \         vec.push(i);\n        }\n    }\n    vec.sort();\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|x|\
    \ {\n        x.to_string().bytes().all(|c| c != b'0' && c != b'2' && c != b'4'\
    \ && c != b'6' && c != b'8')\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp5w82gvrw.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ {\n        !i.to_string().chars().any(|d| d.is_digit(10) && d.to_digit(10).unwrap()\
    \ % 2 == 0)\n    }).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmplvqhd_o6.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res: Vec<isize> = Vec::new();\n    for i in x {\n        let mut odd = true;\n\
    \        let i_string = i.to_string();\n        for c in i_string.chars() {\n\
    \            if c.to_digit(10).unwrap() % 2 == 0 {\n                odd = false;\n\
    \                break;\n            }\n        }\n        if odd {\n        \
    \    res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_vec: Vec<isize> = Vec::new();\n    for num in x {\n        let mut unique\
    \ = true;\n        let mut num_ = num;\n        while num_ > 0 {\n           \
    \ if num_ % 2 == 0 {\n                unique = false;\n                break;\n\
    \            }\n            num_ /= 10;\n        }\n        if unique {\n    \
    \        unique_vec.push(num);\n        }\n    }\n    unique_vec.sort();\n   \
    \ unique_vec\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&y|\
    \ unique_digits_h(y)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unique_digits_h` in this scope\n  -->\
    \ /tmp/tmppre1836p.rs:10:31\n   |\n10 |     x.into_iter().filter(|&y| unique_digits_h(y)).collect()\n\
    \   |                               ^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ uniques: Vec<isize> = vec![];\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            uniques.push(num);\n        }\n    }\n    uniques.sort();\n \
    \   uniques\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpj2ypns1g.rs:12:13\n   |\n12 |         if !has_even_digit(num) {\n  \
    \ |             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in x {\n        let mut is_even = false;\n \
    \       let mut num = i;\n        while num > 0 {\n            if num % 2 == 0\
    \ {\n                is_even = true;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if !is_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ n.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpveze5cuk.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ output = Vec::new();\n    for value in x {\n        if !contains_even(value)\
    \ {\n            output.push(value);\n        }\n    }\n    output.sort();\n \
    \   output\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even` in this scope\n  -->\
    \ /tmp/tmpnb788isw.rs:12:13\n   |\n12 |         if !contains_even(value) {\n \
    \  |             ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|n|\
    \ !has_even_digit(n)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmppf9_m885.rs:10:31\n   |\n10 |     x.into_iter().filter(|n| !has_even_digit(n)).collect()\n\
    \   |                               ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptay71jgl.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ format!(\"{}\", x).chars().filter(|&c| c.is_digit(10) && (c.to_digit(10).unwrap()\
    \ & 1) == 1).count() == format!(\"{}\", x).chars().filter(|&c| c.is_digit(10)).count()).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp880802c5.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for val in x {\n        let sval = val.to_string();\n\
    \        let mut valid = true;\n        for c in sval.chars() {\n            if\
    \ c.to_digit(10).unwrap() % 2 == 0 {\n                valid = false;\n       \
    \         break;\n            }\n        }\n        if valid {\n            result.push(val);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for item in x {\n        let mut has_even_digit\
    \ = false;\n        let mut item_copy = item;\n        while item_copy > 0 {\n\
    \            if (item_copy % 10) % 2 == 0 {\n                has_even_digit =\
    \ true;\n                break;\n            }\n            item_copy /= 10;\n\
    \        }\n        if !has_even_digit {\n            result.push(item);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnn4lt5q1.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028111
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for i in x {\n        if i.to_string().chars().filter(|c|\
    \ c.is_digit(10)).all(|c| c.to_digit(10).unwrap() & 1 == 1) {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for num in x {\n        if num.to_string().chars().all(|x|\
    \ x != '0' && x != '2' && x != '4' && x != '6' && x != '8') {\n            result.push(num);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    for a in x {\n        if a < 10 {\n            res.push(a);\n\
    \        } else {\n            let mut has_even = false;\n            let mut\
    \ rem = a;\n            while rem > 0 {\n                if rem % 2 == 0 {\n \
    \                   has_even = true;\n                    break;\n           \
    \     }\n                rem /= 10;\n            }\n            if !has_even {\n\
    \                res.push(a);\n            }\n        }\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    return\
    \ x.into_iter().filter(|&i| i.to_string().bytes().all(|c| c & 1 == 1)).collect();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmprx16kc53.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnn4lt5q1.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = Vec::new();\n    for n in x {\n        let mut b = true;\n        for i\
    \ in 0..4 {\n            if n / (10_isize.pow(i)) % 2 == 0 {\n               \
    \ b = false;\n                break;\n            }\n        }\n        if b {\n\
    \            v.push(n);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpqwfvkew2.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ r = vec![];\n    for i in x {\n        if i < 10 {\n            r.push(i);\n\
    \        } else {\n            let mut is_unique = true;\n            let mut\
    \ n = i;\n            while n > 0 {\n                if n % 2 == 0 {\n       \
    \             is_unique = false;\n                    break;\n               \
    \ }\n                n /= 10;\n            }\n            if is_unique {\n   \
    \             r.push(i);\n            }\n        }\n    }\n    r.sort();\n   \
    \ r\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO:\
    \ implement this method\n    let mut s = Vec::new();\n    for i in x {\n     \
    \   if no_even_digits(i){\n            s.push(i);\n        }\n    }\n    s.sort();\n\
    \    s\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `no_even_digits` in this scope\n  -->\
    \ /tmp/tmptjotv0h3.rs:13:12\n   |\n13 |         if no_even_digits(i){\n   |  \
    \          ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnn4lt5q1.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028111
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for n in x {\n        let mut is_even = false;\n     \
    \   let mut n = n;\n        while n > 0 {\n            if n % 2 == 0 {\n     \
    \           is_even = true;\n                break;\n            }\n         \
    \   n /= 10;\n        }\n        if !is_even {\n            result.push(n);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpg6ajpk2b.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    return\
    \ x;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp9dq7qde5.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let even_digits = vec![0, 2, 4, 6, 8];\n    for i\
    \ in x {\n        let digits = digits(i);\n        if digits.iter().any(|x| even_digits.contains(x))\
    \ {\n            continue;\n        }\n        result.push(i);\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n  --> /tmp/tmpmr5ov83y.rs:13:22\n\
    \   |\n13 |         let digits = digits(i);\n   |                      ^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ solution: Vec<isize> = vec![];\n    for &n in x.iter() {\n        let n_string\
    \ = n.to_string();\n        let mut has_even = false;\n        for c in n_string.chars()\
    \ {\n            let d = c.to_digit(10).unwrap();\n            if d % 2 == 0 {\n\
    \                has_even = true;\n                break;\n            }\n   \
    \     }\n        if !has_even {\n            solution.push(n);\n        }\n  \
    \  }\n    solution.sort();\n    solution\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028114
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ answer: Vec<isize> = Vec::new();\n    for num in x {\n        let mut string\
    \ = num.to_string();\n        let mut can_add = true;\n        for c in string.chars()\
    \ {\n            if c.to_digit(10).unwrap() % 2 == 0 {\n                can_add\
    \ = false;\n                break;\n            }\n        }\n        if can_add\
    \ {\n            answer.push(num);\n        }\n    }\n    answer.sort();\n   \
    \ answer\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028114
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|x|\
    \ x.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpzf1xzo0d.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnn4lt5q1.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028111
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|x|\
    \ is_unique_digits(*x)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique_digits` in this scope\n \
    \ --> /tmp/tmpjo3itrhr.rs:10:30\n   |\n10 |     x.into_iter().filter(|x| is_unique_digits(*x)).collect()\n\
    \   |                              ^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for n in x {\n        if has_even_digit(n) {\n      \
    \      continue;\n        }\n        res.push(n);\n    }\n    res.sort();\n  \
    \  res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpt95r49le.rs:12:12\n   |\n12 |         if has_even_digit(n) {\n   | \
    \           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for i in &x {\n        if i.to_string().chars().all(|c|\
    \ c != '0' && c != '2' && c != '4' && c != '6' && c != '8') {\n            res.push(*i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028114
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = x.clone();\n    y.sort();\n    y.iter().filter(|&i| !i.to_string().contains(\"\
    2\") && !i.to_string().contains(\"4\") && !i.to_string().contains(\"6\") && !i.to_string().contains(\"\
    8\")).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmp1bx4f9ni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028114
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for y in x {\n        let mut y_digits = Vec::new();\n\
    \        let mut y_string = y.to_string();\n        for i in y_string.chars()\
    \ {\n            y_digits.push(i.to_digit(10).unwrap());\n        }\n        let\
    \ y_digits_even = y_digits.iter().any(|x| x % 2 == 0);\n        if !y_digits_even\
    \ {\n            result.push(y);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028114
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|num|\
    \ !num.to_string().chars().any(|c| c.is_numeric() && c.to_digit(10).unwrap() %\
    \ 2 == 0)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n \
    \   assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmprr7zdmch.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028114
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptay71jgl.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for v in x {\n        let mut is_odd:\
    \ bool = true;\n        let s = v.to_string();\n        for c in s.chars() {\n\
    \            if c.to_digit(10).unwrap() % 2 == 0 {\n                is_odd = false;\n\
    \                break;\n            }\n        }\n        if is_odd {\n     \
    \       result.push(v);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028114
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique = Vec::new();\n    for num in x {\n        if !is_has_even_digit(num)\
    \ {\n            unique.push(num);\n        }\n    }\n    unique.sort();\n   \
    \ unique\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_has_even_digit` in this scope\n\
    \  --> /tmp/tmpc90d3_gg.rs:12:13\n   |\n12 |         if !is_has_even_digit(num)\
    \ {\n   |             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ uniq = vec![];\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            uniq.push(i);\n        }\n    }\n    uniq.sort();\n\
    \    uniq\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028114
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = vec![];\n    for i in x {\n        if i % 2 != 0 {\n  \
    \          result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmpbp0aqzjj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028114
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = vec![];\n    for i in 0..x.len() {\n        if is_valid(&x[i])\
    \ {\n            result.push(x[i]);\n        }\n    }\n    result.sort();\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_valid` in this scope\n  --> /tmp/tmph59pljrg.rs:12:12\n\
    \   |\n12 |         if is_valid(&x[i]) {\n   |            ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028113
- exit_code: 0
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && (c.to_digit(10).unwrap() % 2 == 0)) {\n            continue;\n\
    \        }\n        y.push(i);\n    }\n    y.sort();\n    y\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028114
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|n|\
    \ !has_even_digit(*n)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp79i_0cy3.rs:10:31\n   |\n10 |     x.into_iter().filter(|n| !has_even_digit(*n)).collect()\n\
    \   |                               ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028113
