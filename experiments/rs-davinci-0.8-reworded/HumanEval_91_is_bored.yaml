name: HumanEval_91_is_bored
language: rs
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
  Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
  \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    let mut result = 0;\n    let it = S.split(|c| c == '.' || c ==\
    \ '?' || c == '!');\n    for i in it {\n        let words = i.split_whitespace();\n\
    \        for j in words {\n            if *j == \"I\" {\n                result\
    \ += 1;\n                break;\n            }\n        }\n    }\n    result",
  "    let mut ret = 0;\n    let mut start = 0;\n    for (i, ch) in S.chars().enumerate()\
    \ {\n        if ch == '.' || ch == '?' || ch == '!' {\n            if S[start..i].starts_with(\"\
    I\") {\n                ret += 1;\n            }\n            start = i + 1;\n\
    \        }\n    }\n    ret", "    S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!').filter(|&s| s.trim().starts_with(\"I\")).count() as isize", "    S.split_terminator(|c:\
    \ char| c == '.' || c == '?' || c == '!')\n        .filter(|s| s.starts_with(\"\
    I \"))\n        .count() as isize", "    // Your code here!\n    0", "    let\
    \ S = S.to_lowercase();\n    let mut boredoms = 0;\n    let mut sentences = S.split(|c|\
    \ c == '.' || c == '?' || c == '!');\n    for sentence in sentences {\n      \
    \  if sentence.starts_with(\"i\") {\n            boredoms += 1;\n        }\n \
    \   }\n    boredoms", "    let mut count = 0;\n    let mut last = ' ';\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  last = ' ';\n        } else if last == 'I' && c == ' ' {\n            count\
    \ += 1;\n        }\n        last = c;\n    }\n    count", "    let v: Vec<&str>\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n    let mut\
    \ boredoms = 0;\n    for word in v {\n        if word.starts_with(\"I\") {\n \
    \           boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredom_counter\
    \ = 0;\n    let words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    for word in words {\n        let is_first_word_i = word.split_whitespace().next().unwrap()\
    \ == \"I\";\n        if is_first_word_i {\n            boredom_counter += 1;\n\
    \        }\n    }\n    boredom_counter", "    //let mut count: isize = 0;\n  \
    \  //let vec = S.split_terminator(|c| c == '.' || c == '?' || c == '!');\n   \
    \ //for v in vec {\n    //    if v.to_uppercase().contains(\"I\") {\n    //  \
    \      count += 1;\n    //    }\n    //}\n    //count\n    S.split_terminator(|c|\
    \ c == '.' || c == '?' || c == '!')\n        .filter(|word| word.to_uppercase().contains(\"\
    I\"))\n        .count() as isize", "    // Your code goes here\n    let mut split\
    \ = S.split(|c| c == '.' || c == '?' || c == '!');\n    let mut count = 0;\n \
    \   loop {\n        let first = split.next();\n        if first.is_none() {\n\
    \            break;\n        } else {\n            if first.unwrap().starts_with(\"\
    I\") {\n                count += 1;\n            }\n        }\n    }\n    count",
  "    let s: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut cnt = 0;\n    for ss in s {\n        if let Some(x) = ss.split_whitespace().next()\
    \ {\n            if x == \"I\" {\n                cnt += 1;\n            }\n \
    \       }\n    }\n    cnt", "    let mut count = 0;\n    let v: Vec<&str> = S.split(|c|\
    \ c == '.' || c == '?' || c == '!').collect();\n    for i in v {\n        if i.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count", "    let mut result\
    \ = 0;\n    let mut splitted = S.split(|c| c == '.' || c == '?' || c == '!');\n\
    \    for _x in splitted {\n        let words = _x.split(' ');\n        for word\
    \ in words {\n            if word == \"I\" {\n                result += 1;\n \
    \               break;\n            }\n        }\n    }\n    result", "    let\
    \ mut result = 0;\n    let mut prev = String::from(\"\");\n    for s in S.split_whitespace()\
    \ {\n        let token = String::from(s);\n        if token == String::from(\"\
    I\") {\n            if prev == String::from(\".\")\n                || prev ==\
    \ String::from(\"?\")\n                || prev == String::from(\"!\")\n      \
    \      {\n                result += 1;\n            }\n        }\n        prev\
    \ = token;\n    }\n    result", "    if S.is_empty() {\n        return 0;\n  \
    \  }\n    let mut boredoms = 0;\n    let sentences = S.split(|x| x == '.' || x\
    \ == '?' || x == '!');\n    for sentence in sentences {\n        let words = sentence.split_whitespace();\n\
    \        if words.next() == Some(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut is_bored = 0;\n    let s: Vec<_> = S.split(\"\
    \ \").collect();\n    let mut start_with_I = false;\n    for each in s {\n   \
    \     if each.chars().next().unwrap() == 'I' {\n            start_with_I = true;\n\
    \        }\n        if each.chars().last().unwrap() == '.' || each.chars().last().unwrap()\
    \ == '?' || each.chars().last().unwrap() == '!' {\n            if start_with_I\
    \ {\n                is_bored += 1;\n            }\n            start_with_I =\
    \ false;\n        }\n    }\n    is_bored", "    let words: Vec<&str> = S.split(|c:\
    \ char| !c.is_alphabetic()).collect();\n    words.iter().filter(|&word| word.starts_with(\"\
    I\")).count() as isize", "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n\
    \        .filter(|s| s.starts_with(\"I\"))\n        .count() as isize", "    S.split_terminator(|c:\
    \ char| !c.is_alphabetic())\n        .filter(|w| w.to_uppercase() == \"I\")\n\
    \        .count() as isize", "    let mut boredoms = 0;\n    let mut words = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    for word in words {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut is_bored = 0;\n    let v: Vec<&str> = S.split(|c| c\
    \ == '.' || c == '?' || c == '!').collect();\n    for s in v {\n        let m:\
    \ Vec<&str> = s.split(' ').collect();\n        if m.len() > 0 && m[0] == \"I\"\
    \ {\n            is_bored += 1;\n        }\n    }\n    is_bored", "    let mut\
    \ boredoms = 0;\n    let mut word_starts_with_i = false;\n    for char in S.chars()\
    \ {\n        if char == '.' || char == '?' || char == '!' {\n            word_starts_with_i\
    \ = false;\n        } else if char == ' ' && word_starts_with_i {\n          \
    \  boredoms += 1;\n            word_starts_with_i = false;\n        } else if\
    \ char == 'I' {\n            word_starts_with_i = true;\n        }\n    }\n  \
    \  boredoms", "    let mut result = 0;\n    let mut words = S.split(\" \");\n\
    \    while let Some(word) = words.next() {\n        if word == \"I\" {\n     \
    \       result += 1;\n        }\n    }\n    result", "    let mut iter = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    let mut count = 0;\n    loop {\n\
    \        match iter.next() {\n            Some(word) => {\n                if\
    \ word.starts_with(\"I\") {\n                    count += 1;\n               \
    \ }\n            }\n            None => return count,\n        }\n    }", "  \
    \  // We don't really care about the ending punctuation.\n    let s = S.to_uppercase().trim_end_matches(|c|\
    \ c == '.' || c == '?' || c == '!');\n    // Now we split the text into sentences\
    \ and filter out any sentence that\n    // does not start with \"I\".\n    let\
    \ I_s = s.split(|c| c == '.' || c == '?' || c == '!').filter(|x| x.starts_with(\"\
    I\"));\n    // And finally, we count the sentences which start with \"I\".\n \
    \   I_s.count() as isize", "    let mut bored = 0;\n    let words: Vec<&str> =\
    \ S.split(\" \").collect();\n    for i in 0..words.len() {\n        if words[i]\
    \ == \"I\" {\n            if i == 0 {\n                bored += 1;\n         \
    \   } else if words[i - 1].contains(\".\") {\n                bored += 1;\n  \
    \          }\n        }\n    }\n    bored", "    S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!')\n        .map(|s| s.trim())\n        .filter(|s| s.starts_with(\"\
    I\"))\n        .count() as isize", "    S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!')\n        .filter(|s| s.to_lowercase().starts_with(\"i\"))\n   \
    \     .count() as isize", "    let split: Vec<&str> = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!').collect();\n    let mut res = 0;\n    for s in split\
    \ {\n        if s.trim_left().starts_with(\"I\") {\n            res += 1;\n  \
    \      }\n    }\n    res", "    let mut bored = 0;\n    let mut prev = false;\n\
    \    for c in S.chars() {\n        if c == 'I' {\n            prev = true;\n \
    \       } else if !prev && (c == '.' || c == '?' || c == '!') {\n            bored\
    \ += 1;\n        } else {\n            prev = false;\n        }\n    }\n    bored",
  "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n        .filter(|s| s.trim().starts_with(\"\
    I\"))\n        .count() as isize", "    let mut boredoms = 0;\n    let chars:\
    \ Vec<char> = S.chars().collect();\n    let mut prev_boredom = false;\n    for\
    \ i in 0..chars.len() {\n        let char_is_i = chars[i] == 'I';\n        let\
    \ char_is_period = chars[i] == '.';\n        let char_is_question = chars[i] ==\
    \ '?';\n        let char_is_exclamation = chars[i] == '!';\n        let next_char_is_i\
    \ = i + 1 < chars.len() && chars[i + 1] == 'I';\n        if char_is_i && !prev_boredom\
    \ {\n            if next_char_is_i {\n                boredoms += 1;\n       \
    \         prev_boredom = true;\n            } else {\n                boredoms\
    \ += 1;\n                prev_boredom = false;\n            }\n        } else\
    \ if char_is_period || char_is_question || char_is_exclamation {\n           \
    \ prev_boredom = false;\n        }\n    }\n    boredoms", "    S.trim()\n    \
    \    .split_terminator(|c: char| c == '.' || c == '?' || c == '!')\n        .filter(|s|\
    \ s.starts_with(\"I\"))\n        .count() as isize", "    // This is an example,\
    \ change it to the solution.\n    S.split(\".\").map(|s| s.trim()).filter(|s|\
    \ s.starts_with(\"I\")).count() as isize", "    let v: Vec<&str> = S.split(|c:\
    \ char| \"!?.\".contains(c)).collect();\n    let mut count = 0;\n    for s in\
    \ v {\n        if s.trim_start().starts_with(\"I\") {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut counter = 0;\n    let mut words =\
    \ S.split(|c: char| c == '.' || c == '?' || c == '!');\n    for sentence in words\
    \ {\n        let words = sentence.split_whitespace();\n        for word in words\
    \ {\n            if word == \"I\" {\n                counter += 1;\n         \
    \       break;\n            }\n        }\n    }\n    counter", "    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!')\n        .filter(|sentence| sentence.starts_with(\"\
    I\"))\n        .count() as isize", "    let mut count = 0;\n    let mut words\
    \ = S.split_whitespace();\n    while let Some(word) = words.next() {\n       \
    \ if word == \"I\" {\n            count += 1;\n        }\n    }\n    count", " \
    \   let mut boredoms = 0;\n    let mut last_char = ' ';\n    for c in S.chars()\
    \ {\n        if c == 'I' && last_char == ' ' {\n            boredoms += 1;\n \
    \       } else if c == '?' || c == '!' || c == '.' {\n            last_char =\
    \ ' ';\n        } else {\n            last_char = c;\n        }\n    }\n    boredoms",
  '    unimplemented!()', "    let split = S.split(|x| x == '.' || x == '?' || x ==\
    \ '!');\n    let mut n = 0;\n    for i in split {\n        if i.starts_with(\"\
    I\") {\n            n += 1;\n        }\n    }\n    n", "    let mut index = 0;\n\
    \    let mut boredoms = 0;\n    let mut it = S.split_whitespace();\n    while\
    \ let Some(word) = it.next() {\n        index += 1;\n        if word == \"I\"\
    \ {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    if S.starts_with(\"\
    I\") {\n        return 1;\n    }\n    S.split(\".\").map(|s| is_bored(s.to_string())).sum()",
  '    S.matches("I").count() as isize', "    let mut count = 0;\n    let mut word_start\
    \ = true;\n    for c in S.chars() {\n        match c {\n            '.' | '?'\
    \ | '!' => {\n                word_start = true;\n            }\n            _\
    \ => {\n                if word_start && c == 'I' {\n                    count\
    \ += 1;\n                }\n                word_start = false;\n            }\n\
    \        }\n    }\n    count", "    let mut cnt = 0;\n    let mut ss = String::new();\n\
    \    for c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n   \
    \         if ss.starts_with(\"I\") {\n                cnt += 1;\n            }\n\
    \            ss.clear();\n        } else {\n            ss.push(c);\n        }\n\
    \    }\n    if ss.starts_with(\"I\") {\n        cnt += 1;\n    }\n    cnt", " \
    \   let mut count = 0;\n    let mut temp = String::new();\n    for c in S.chars()\
    \ {\n        if c != '.' && c != '?' && c != '!' {\n            temp.push(c);\n\
    \        } else {\n            if temp.starts_with(\"I\") {\n                count\
    \ += 1;\n            }\n            temp.clear();\n        }\n    }\n    if temp.starts_with(\"\
    I\") {\n        count += 1;\n    }\n    count", "    S.split(|c: char| {\n   \
    \     c == '.' || c == '?' || c == '!'\n    }).filter(|sentence| {\n        sentence.starts_with(\"\
    I\")\n    }).count() as isize", "    let mut boredoms = 0;\n    let parts: Vec<&str>\
    \ = S.split(|c| c == '.' || c == '?' || c == '!').collect();\n    for part in\
    \ parts {\n        if part.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n    }\n    boredoms", "    S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!')\n        .filter(|s| s.starts_with(\"I\"))\n        .count() as\
    \ isize", "    let mut num_boredoms = 0;\n    for sentence in S.split(|c| c ==\
    \ '.' || c == '?' || c == '!') {\n        let split_sentence: Vec<&str> = sentence.split_whitespace().collect();\n\
    \        if split_sentence.is_empty() {\n            continue;\n        }\n  \
    \      let mut i = 0;\n        while i < split_sentence.len() {\n            if\
    \ split_sentence[i] == \"I\" {\n                num_boredoms += 1;\n         \
    \       break;\n            }\n            i += 1;\n        }\n    }\n    num_boredoms",
  "    let mut is_bored_count = 0;\n    let mut prev_ch = ' ';\n    for ch in S.chars()\
    \ {\n        match ch {\n            '.' | '?' | '!' => {\n                if\
    \ prev_ch == 'I' {\n                    is_bored_count += 1;\n               \
    \ }\n            }\n            _ => {}\n        }\n        prev_ch = ch;\n  \
    \  }\n    return is_bored_count;", "    let mut count = 0;\n    let chars: Vec<char>\
    \ = S.chars().collect();\n    for i in 1..chars.len() - 1 {\n        if chars[i\
    \ - 1] == 'I' && chars[i] == ' ' && chars[i + 1] != ' ' {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    let mut res = 0;\n    let chars: Vec<char>\
    \ = S.chars().collect();\n    let mut i = 0;\n    while i < chars.len() {\n  \
    \      let (word, last_pos) = read_word(&chars, i);\n        if word == \"I\"\
    \ {\n            let (mut sentence, next_pos) = read_sentence(&chars, last_pos);\n\
    \            sentence.insert(0, \"I\");\n            if sentence.contains(&\"\
    I\") {\n                res += 1;\n            }\n            i = next_pos;\n\
    \        } else {\n            i = last_pos;\n        }\n    }\n    res", "  \
    \  let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c\
    \ == '?' || c == '!');\n    for w in words {\n        if w.split_whitespace().next().unwrap()\
    \ == \"I\" {\n            boredoms += 1;\n        }\n    }\n    boredoms", " \
    \   // Your code goes here\n    let mut result = 0;\n    let s: Vec<&str> = S.split(|c|\
    \ c == '.' || c == '?' || c == '!').collect();\n    for i in s {\n        if i.contains(\"\
    I\") {\n            result += 1;\n        }\n    }\n    result", "    let mut\
    \ boredoms = 0;\n    let mut w = String::new();\n    for c in S.chars() {\n  \
    \      match c {\n            '.' | '?' | '!' => {\n                if w == \"\
    I\" {\n                    boredoms += 1;\n                }\n               \
    \ w = String::new();\n            }\n            ' ' => {\n                if\
    \ w == \"I\" {\n                    boredoms += 1;\n                }\n      \
    \          w = String::new();\n            }\n            _ => w.push(c),\n  \
    \      }\n    }\n    boredoms", '    unimplemented!();', "    if S.contains(\"\
    I\") {\n        1\n    } else {\n        0\n    }", '    unimplemented!();', " \
    \   // This is your job.\n    let mut num = 0;\n    let mut text = S.split_whitespace();\n\
    \    for word in text {\n        if word == \"I\" {\n            num += 1;\n \
    \       }\n    }\n    num", "    let is_bored: Vec<_> = S.split(|c| c == '.' ||\
    \ c == '?' || c == '!')\n        .map(|s| s.trim())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.starts_with(\"I\") as isize)\n        .collect();\n    is_bored.iter().sum()",
  "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n        .filter(|s| s.starts_with(\"\
    I\"))\n        .count() as isize", '    isize::try_from(S.as_str().matches(" I
    ").count()).unwrap()', "    let words: Vec<&str> = S.split(|c: char| { c == '.'\
    \ || c == '?' || c == '!' })\n        .collect();\n    words.iter().filter(|&s|\
    \ s.trim().chars().next().unwrap() == 'I').count() as isize", "    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!')\n        .filter(|s| s.split_whitespace().next()\
    \ == Some(\"I\"))\n        .count() as isize", "    let mut boredoms = 0;\n  \
    \  let chars = S.chars().filter(|x| *x != '.' && *x != '?' && *x != '!');\n  \
    \  let mut iter = chars.peekable();\n    while let Some(c) = iter.next() {\n \
    \       if c == 'I' {\n            match iter.peek() {\n                Some(x)\
    \ => {\n                    if *x == ' ' {\n                        boredoms +=\
    \ 1;\n                    }\n                }\n                None => {\n  \
    \                  break;\n                }\n            }\n        }\n    }\n\
    \    boredoms", "    let mut result = 0;\n    let lines = S.split(|c| c == '.'\
    \ || c == '?' || c == '!');\n    for line in lines {\n        if line.starts_with(\"\
    I\") {\n            result += 1;\n        }\n    }\n    result", "    let s =\
    \ S.as_str();\n    let mut result = 0;\n    let mut in_sentence = false;\n   \
    \ for c in s.chars() {\n        if in_sentence {\n            if c == '.' || c\
    \ == '?' || c == '!' {\n                in_sentence = false;\n            }\n\
    \        } else {\n            if c == 'I' {\n                result += 1;\n \
    \               in_sentence = true;\n            }\n        }\n    }\n    result",
  "    let mut boredoms = 0;\n    let mut was_newline = false;\n    for ch in S.chars()\
    \ {\n        if was_newline && ch == 'I' {\n            boredoms += 1;\n     \
    \   }\n        if ch == '.' || ch == '?' || ch == '!' {\n            was_newline\
    \ = true;\n        } else {\n            was_newline = false;\n        }\n   \
    \ }\n    boredoms", "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n\
    \        .filter(|s| s.trim_start().starts_with(\"I\"))\n        .count() as isize",
  "    let mut boredoms = 0;\n    let re = Regex::new(r\"(I)\\s\").unwrap();\n   \
    \ for caps in re.captures_iter(&S) {\n        boredoms += 1;\n    }\n    boredoms",
  "    // Your code here\n    0", "    let mut boredom_counter = 0;\n    let mut word_start\
    \ = 0;\n    let mut is_bored = false;\n    for (i, c) in S.chars().enumerate()\
    \ {\n        if c == ' ' {\n            if is_bored {\n                boredom_counter\
    \ += 1;\n                is_bored = false;\n            }\n            word_start\
    \ = i + 1;\n        } else if c == '.' || c == '?' || c == '!' {\n           \
    \ if is_bored {\n                boredom_counter += 1;\n                is_bored\
    \ = false;\n            }\n        } else if c == 'I' && word_start == i {\n \
    \           is_bored = true;\n        }\n    }\n    if is_bored {\n        boredom_counter\
    \ += 1;\n    }\n    boredom_counter", "    let mut count = 0;\n    let mut parse\
    \ = S.trim().split(|c| c == '.' || c == '?' || c == '!');\n    while let Some(sentence)\
    \ = parse.next() {\n        let words = sentence.split(' ');\n        if words.clone().next()\
    \ == Some(\"I\") {\n            count += 1;\n        }\n    }\n    count", " \
    \   let mut s: Vec<&str> = S.split(|x| x == '.' || x == '?' || x == '!').collect();\n\
    \    let mut i = 0;\n    for item in s.iter() {\n        if item.starts_with(\"\
    I\") {\n            i += 1;\n        }\n    }\n    i", "    let mut boredoms =\
    \ 0;\n    let mut word = String::new();\n    let mut is_sentence = false;\n  \
    \  for c in S.chars() {\n        match c {\n            '.' | '?' | '!' => {\n\
    \                if is_sentence && word == \"I\" {\n                    boredoms\
    \ += 1;\n                }\n                is_sentence = true;\n            \
    \    word = String::new();\n            }\n            ' ' => {\n            \
    \    if is_sentence && word == \"I\" {\n                    boredoms += 1;\n \
    \               }\n                word = String::new();\n            }\n    \
    \        _ => {\n                if is_sentence {\n                    word.push(c);\n\
    \                }\n            }\n        }\n    }\n    if is_sentence && word\
    \ == \"I\" {\n        boredoms += 1;\n    }\n    boredoms", "    let mut boredoms\
    \ = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    let mut words = words.filter(|s| s.is_ascii_alphabetic());\n    for (i, word)\
    \ in words.enumerate() {\n        if word.to_lowercase() == \"i\" {\n        \
    \    if i == 0 {\n                boredoms += 1;\n            } else {\n     \
    \           if words.nth(i - 1).unwrap().to_lowercase() != \"i\" {\n         \
    \           boredoms += 1;\n                }\n            }\n        }\n    }\n\
    \    boredoms", "    let mut boredoms = 0;\n    let mut is_bored = false;\n  \
    \  for word in S.split_whitespace() {\n        if word == \"I\" {\n          \
    \  is_bored = true;\n        }\n        if is_bored && word.ends_with(\".\") ||\
    \ word.ends_with(\"?\") || word.ends_with(\"!\") {\n            boredoms += 1;\n\
    \            is_bored = false;\n        }\n    }\n    boredoms", "    S.split(|c:\
    \ char| {\n        c == '.' || c == '?' || c == '!'\n    }).filter(|s| {\n   \
    \     s.starts_with(\"I\")\n    }).count() as isize", "    S.split(|c: char| c\
    \ == '.' || c == '?' || c == '!')\n        .filter(|sentence| sentence.starts_with(\"\
    I\"))\n        .count() as isize", "    let mut boredoms = 0;\n    let mut words\
    \ = S.split_whitespace();\n    while let Some(word) = words.next() {\n       \
    \ if word == \"I\" {\n            boredoms += 1;\n        }\n    }\n    boredoms",
  "    S.split(&['.', '?', '!'][..])\n        .filter(|s| s.starts_with(\"I\"))\n\
    \        .count() as isize", "    let filtered: Vec<&str> = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!').collect();\n    let mut count = 0;\n    for\
    \ s in filtered {\n        let words: Vec<&str> = s.split_whitespace().collect();\n\
    \        if words.len() == 0 {\n            continue;\n        }\n        if words[0]\
    \ == \"I\" {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!();',
  "    S.split(|c: char| {\n        if c == '.' || c == '?' || c == '!' {\n      \
    \      true\n        } else {\n            false\n        }\n    })\n    .filter(|x|\
    \ x.starts_with(\"I\"))\n    .count() as isize", "    let mut res = 0;\n    let\
    \ mut i = 0;\n    let mut char_vec: Vec<char> = S.chars().collect();\n    char_vec.push('.');\n\
    \    while i < char_vec.len() {\n        if char_vec[i] == 'I' {\n           \
    \ res += 1;\n        }\n        while char_vec[i] != '.' && char_vec[i] != '?'\
    \ && char_vec[i] != '!' {\n            i += 1;\n        }\n        i += 1;\n \
    \   }\n    res", "    let sentence = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    let mut count = 0;\n    for s in sentence {\n        let words\
    \ = s.split_whitespace();\n        if words.count() > 0 && words.next().unwrap()\
    \ == \"I\" {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut result = 0;\n    let words: Vec<&str> = S.split_whitespace().collect();\n\
    \    for word in words {\n        if word == \"I\" {\n            result += 1;\n\
    \        }\n    }\n    result", "    S.split(|c: char| {\n        c == '.' ||\
    \ c == '?' || c == '!'\n    }).filter(|s| s.starts_with(\"I\")).count() as isize",
  '    return S.split_whitespace().filter(|&word| word == "I").count() as isize;',
  "    let mut boring: isize = 0;\n    let mut words: Vec<&str> = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!').collect();\n    for word in words {\n    \
    \    let mut chars: Vec<char> = word.chars().collect();\n        if chars.len()\
    \ != 0 {\n            if chars[0] == 'I' {\n                boring += 1;\n   \
    \         }\n        }\n    }\n    boring", "    // Get sentences\n    let sentences:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    // Count sentences that starts with 'I'\n    sentences.iter().filter(|&s|\
    \ s.trim().starts_with(\"I\")).count() as isize", "    // place your code here\n\
    \    1", "    if S.contains(\"I\") {\n        return 1;\n    }\n    return 0;",
  "    // Your code here\n    0", "    S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!')\n        .filter(|s| s.trim().starts_with(\"I\"))\n        .count()\
    \ as isize", "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n      \
    \  .filter(|sentence| sentence.starts_with(\"I\"))\n        .count() as isize",
  "    let v: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    v.iter().filter(|s| s.starts_with(\"I\")).count() as isize", "    let wb:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let c: isize = wb.iter().filter(|&x| x.starts_with(\"I\")).count() as isize;\n\
    \    c", "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n        .map(|s|\
    \ s.trim().split_whitespace().next().unwrap())\n        .filter(|s| s == \"I\"\
    )\n        .count() as isize", '    unimplemented!();', "    S.lines()\n     \
    \   .filter(|s| s.starts_with(\"I\"))\n        .count() as isize", "    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!')\n        .filter(|x| x.starts_with(\"\
    I\"))\n        .count() as isize", "    S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!')\n        .filter(|x| x.starts_with(\"I \"))\n        .count() as\
    \ isize", "    let mut count = 0;\n    let mut chars = S.chars();\n    while let\
    \ Some(c) = chars.next() {\n        match c {\n            '.' | '?' | '!' =>\
    \ if chars.clone().take(1).collect::<String>() == \"I\" {\n                count\
    \ += 1;\n            },\n            _ => {}\n        }\n    }\n    count", " \
    \   let mut t: Vec<char> = S.chars().collect();\n    if t.contains(&'.') || t.contains(&'!')\
    \ || t.contains(&'?') {\n        let s: String = t.into_iter().collect();\n  \
    \      let b: Vec<&str> = s.split(|c| c == '.' || c == '!' || c == '?').collect();\n\
    \        let mut c = 0;\n        for i in b {\n            if i.starts_with(\"\
    I\") {\n                c += 1;\n            }\n        }\n        return c;\n\
    \    }\n    0", "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n   \
    \     .filter(|x| x.starts_with(\"I\"))\n        .count() as isize", "    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!')\n        .filter(|&s| s.trim_start().starts_with(\"\
    I\"))\n        .count() as isize", "    let mut i = 0;\n    for s in S.split(|c|\
    \ c == '.' || c == '?' || c == '!') {\n        if s.starts_with(\"I\") {\n   \
    \         i += 1;\n        }\n    }\n    i", "    let mut bored = 0;\n    let\
    \ mut last_char = '.';\n    for c in S.chars() {\n        match c {\n        \
    \    'I' if last_char == ' ' => bored += 1,\n            '!' | '?' | '.' => last_char\
    \ = ' ',\n            _ => {}\n        }\n        last_char = c;\n    }\n    bored",
  "    let mut words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let\
    \ mut count = 0;\n    while let Some(x) = words.next() {\n        if x.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count", "    let mut boredoms\
    \ = 0;\n    let mut i = 0;\n    let mut chars = S.chars();\n    while let Some(c)\
    \ = chars.next() {\n        if c == 'I' {\n            if i != 0 {\n         \
    \       boredoms += 1;\n            }\n        } else if c == '.' || c == '?'\
    \ || c == '!' {\n            i += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms = 0;\n    let mut words = S.split_whitespace();\n    for word in\
    \ words {\n        if word == \"I\" {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    // TODO: write your code here\n    unimplemented!()",
  "    let mut curr_boredom: isize = 0;\n    let mut i = 0;\n    let mut str_arr:\
    \ Vec<char> = S.chars().collect();\n    let mut is_bored_start: bool = false;\n\
    \    let mut is_bored_end: bool = false;\n    while i < str_arr.len() {\n    \
    \    let mut temp_arr: Vec<char> = Vec::new();\n        while i < str_arr.len()\
    \ {\n            if str_arr[i] == '.' || str_arr[i] == '?' || str_arr[i] == '!'\
    \ {\n                temp_arr.push(str_arr[i]);\n                i += 1;\n   \
    \             break;\n            }\n            temp_arr.push(str_arr[i]);\n\
    \            i += 1;\n        }\n        let mut temp_str: String = temp_arr.into_iter().collect();\n\
    \        if temp_str.trim().starts_with(\"I\") {\n            if is_bored_start\
    \ {\n                is_bored_end = true;\n            } else {\n            \
    \    is_bored_start = true;\n            }\n        } else {\n            if is_bored_start\
    \ && is_bored_end {\n                curr_boredom += 1;\n            }\n     \
    \       is_bored_start = false;\n            is_bored_end = false;\n        }\n\
    \    }\n    if is_bored_start && is_bored_end {\n        curr_boredom += 1;\n\
    \    }\n    curr_boredom", "    let mut count = 0;\n    let mut is_bored = false;\n\
    \    for c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n   \
    \         is_bored = false;\n        } else if c == 'I' {\n            is_bored\
    \ = true;\n        } else if is_bored {\n            count += 1;\n        }\n\
    \    }\n    count", "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n\
    \        .filter(|s| s.trim().starts_with(\"I\"))\n        .count() as isize",
  "    let mut bored = 0;\n    let mut flag = false;\n    for word in S.split_whitespace()\
    \ {\n        match word {\n            \"I\" => flag = true,\n            \".\"\
    \ | \"?\" | \"!\" => {\n                if flag {\n                    bored +=\
    \ 1;\n                }\n                flag = false;\n            }\n      \
    \      _ => {}\n        }\n    }\n    bored", "    let mut n = 0;\n    let mut\
    \ b = false;\n    for i in S.chars() {\n        if b {\n            if i == '\
    \ ' {\n                n += 1;\n                b = false;\n            }\n  \
    \      } else {\n            if i == 'I' {\n                b = true;\n      \
    \      }\n        }\n    }\n    return n;", "    let mut count = 0;\n    let S\
    \ = S.to_lowercase();\n    let mut words = S.split_whitespace();\n    for word\
    \ in words {\n        if word == \"i\" {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut boredoms = 0;\n    let mut chars = S.chars();\n\
    \    let mut prev = ' ';\n    while let Some(c) = chars.next() {\n        if prev\
    \ == 'I' && c == ' ' {\n            boredoms += 1;\n        }\n        prev =\
    \ c;\n    }\n    boredoms", "    // Write your code here\n    let punctuations\
    \ = ['.', '?', '!'];\n    let words: Vec<&str> = S.split(|c| punctuations.contains(&c)).collect();\n\
    \    let boredoms: Vec<&str> = words.iter().filter(|&x| x.starts_with(\"I\")).collect();\n\
    \    return boredoms.len() as isize;", "    let mut count = 0;\n    let mut flag\
    \ = false;\n    for c in S.chars() {\n        if c == 'I' {\n            flag\
    \ = true;\n        }\n        if c == '.' || c == '?' || c == '!' {\n        \
    \    if flag {\n                count += 1;\n            }\n            flag =\
    \ false;\n        }\n    }\n    count", "    S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!')\n        .filter(|s| s.starts_with(\"I\"))\n        .count()\
    \ as isize", "    let mut s = S.split(|c| c == '.' || c == '?' || c == '!');\n\
    \    let mut boredoms = 0;\n    for word in s {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut count = 0;\n    let S: Vec<&str> = S.split(|c| c == '.' || c == '?' || c\
    \ == '!').collect();\n    for s in S {\n        let s: Vec<&str> = s.split(' ').collect();\n\
    \        if s.len() > 0 && s[0] == \"I\" {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut boredoms = 0;\n    let mut in_sentence = false;\n\
    \    for c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n   \
    \         in_sentence = false;\n        } else if c == 'I' && !in_sentence {\n\
    \            boredoms += 1;\n            in_sentence = true;\n        }\n    }\n\
    \    boredoms", "    S.split(&['.', '?', '!'][..])\n        .filter(|word| word.starts_with(\"\
    I\"))\n        .count() as isize", "    let ws = S.split(\" \");\n    let mut\
    \ count = 0;\n    for w in ws {\n        if w == \"I\" {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    let chars: Vec<char> = S.chars().collect();\n\
    \    let mut boredoms = 0;\n    let mut i = 0;\n    let mut prev_char: char =\
    \ '.';\n    for ch in chars {\n        match ch {\n            '.' | '?' | '!'\
    \ => {\n                if i >= 2 && prev_char == ' ' && chars[i - 2] == 'I' {\n\
    \                    boredoms += 1;\n                }\n                prev_char\
    \ = ch;\n            }\n            _ => {\n                prev_char = ch;\n\
    \            }\n        }\n        i += 1;\n    }\n    boredoms", "    let mut\
    \ boredoms = 0;\n    let mut word = String::new();\n    let mut sentence = String::new();\n\
    \    for c in S.chars() {\n        if c == ' ' {\n            sentence += &word;\n\
    \            word = String::new();\n        } else if c == '.' || c == '?' ||\
    \ c == '!' {\n            sentence += &word;\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence =\
    \ String::new();\n            word = String::new();\n        } else {\n      \
    \      word.push(c);\n        }\n    }\n    boredoms", "    let mut arr = S.split(|c|\
    \ c == '.' || c == '?' || c == '!');\n    let mut count = 0;\n    while let Some(s)\
    \ = arr.next() {\n        if s.starts_with(\"I\") {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    let mut is_bored =\
    \ false;\n    for c in S.chars() {\n        if is_bored {\n            if c ==\
    \ ' ' {\n                is_bored = false;\n            }\n        } else {\n\
    \            if c == 'I' {\n                is_bored = true;\n            }\n\
    \        }\n        if is_bored && c == '.' {\n            count += 1;\n     \
    \       is_bored = false;\n        }\n    }\n    count", "    let text = S.split_whitespace();\n\
    \    let mut boredoms = 0;\n    for word in text {\n        if word == \"I\" {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms\
    \ = 0;\n    let mut count = 0;\n    let mut delimiters = String::from(\"!?.\"\
    );\n    let mut in_word = false;\n    let mut skip = 0;\n    for c in S.chars()\
    \ {\n        if delimiters.contains(c) {\n            count = 0;\n           \
    \ in_word = false;\n            skip = 1;\n        } else if skip > 0 {\n    \
    \        if !delimiters.contains(c) {\n                skip = 0;\n           \
    \ }\n        } else if !in_word {\n            in_word = true;\n            if\
    \ c == 'I' {\n                boredoms += 1;\n            }\n        }\n    }\n\
    \    boredoms", "    let mut count = 0;\n    let mut bored = false;\n    for ch\
    \ in S.chars() {\n        if bored && ch == ' ' {\n            bored = false;\n\
    \        } else if bored && ch != ' ' {\n            bored = false;\n        \
    \    count += 1;\n        } else if ch == 'I' {\n            bored = true;\n \
    \       }\n    }\n    count", "    let mut counter = 0;\n    let mut word = Vec::new();\n\
    \    for ch in S.chars() {\n        if ch == ' ' {\n            if word.len()\
    \ > 0 {\n                if word.join(\"\") == \"I\" {\n                    counter\
    \ += 1;\n                }\n                word.clear();\n            }\n   \
    \     } else if ch == '.' || ch == '?' || ch == '!' {\n            if word.len()\
    \ > 0 {\n                if word.join(\"\") == \"I\" {\n                    counter\
    \ += 1;\n                }\n                word.clear();\n            }\n   \
    \     } else {\n            word.push(ch);\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if word.join(\"\") == \"I\" {\n            counter += 1;\n  \
    \      }\n    }\n    counter", "    S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!')\n        .filter(|s| s.starts_with(\"I\"))\n        .count() as isize",
  "    // This is your job.\n    return 0;", "    let mut boredoms = 0;\n    let mut\
    \ prev_char: char = '-';\n    for c in S.chars() {\n        if c == 'I' && prev_char\
    \ == ' ' {\n            boredoms += 1;\n        }\n        prev_char = c;\n  \
    \  }\n    boredoms", "    let mut res = 0;\n    let mut prev = '.';\n    for c\
    \ in S.chars() {\n        if prev == 'I' && c == ' ' {\n            res += 1;\n\
    \        }\n        prev = c;\n    }\n    res", "    let mut strs = String::new();\n\
    \    for s in S.split(|c| c == '.' || c == '?' || c == '!') {\n        strs.push_str(s);\n\
    \        strs.push(' ');\n    }\n    let count = strs.matches(\"I \").count();\n\
    \    count as isize", "    let mut chars = S.char_indices();\n    let mut result\
    \ = 0;\n    loop {\n        match chars.next() {\n            Some((_, 'I')) =>\
    \ result += 1,\n            Some((_, '.')) => continue,\n            Some((_,\
    \ '?')) => continue,\n            Some((_, '!')) => continue,\n            Some(_)\
    \ => continue,\n            None => break,\n        }\n    }\n    result", " \
    \   let mut boredoms = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word == \"I\" {\n            boredoms += 1;\n  \
    \      }\n    }\n    boredoms", "    S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!')\n        .filter(|s| s.split(' ').next().unwrap() == \"I\")\n    \
    \    .count() as isize", "    let mut c: isize = 0;\n    let mut prev: String\
    \ = String::from(\"\");\n    for i in S.split_whitespace() {\n        if i ==\
    \ \"I\" && prev != \"I\" {\n            c += 1;\n        }\n        prev = i.to_string();\n\
    \    }\n    c", "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n   \
    \     .filter(|s| s.trim().starts_with(\"I\"))\n        .count() as isize", " \
    \   let mut result = 0;\n    let mut pre_result = true;\n    for ch in S.chars()\
    \ {\n        if pre_result && ch == 'I' {\n            result += 1;\n        \
    \    pre_result = false;\n        } else if ch == '.' || ch == '?' || ch == '!'\
    \ {\n            pre_result = true;\n        }\n    }\n    result", "    let mut\
    \ boredoms = 0;\n    let mut is_it_boredom = false;\n    for c in S.chars() {\n\
    \        if c == '!' || c == '?' || c == '.' {\n            is_it_boredom = false;\n\
    \        } else if c == 'I' {\n            is_it_boredom = true;\n        } else\
    \ if is_it_boredom {\n            boredoms += 1;\n        }\n    }\n    boredoms",
  "    let mut count = 0;\n    let mut is_bored = false;\n    for (i, c) in S.chars().enumerate()\
    \ {\n        if is_bored && !c.is_alphabetic() {\n            count += 1;\n  \
    \          is_bored = false;\n        } else if c == 'I' {\n            is_bored\
    \ = true;\n        }\n    }\n    if is_bored {\n        count += 1;\n    }\n \
    \   count", "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n       \
    \ .filter(|s| s.starts_with(\"I\"))\n        .count() as isize", "    S.split_terminator(|c:\
    \ char| c == '.' || c == '?' || c == '!')\n        .map(|s| {\n            let\
    \ mut chars = s.split_whitespace();\n            let first = chars.next();\n \
    \           let second = chars.next();\n            (first, second)\n        })\n\
    \        .filter(|(first, second)| match (first, second) {\n            (Some(s),\
    \ Some(t)) => s == \"I\" && t.is_alphabetic(),\n            _ => false,\n    \
    \    })\n        .count() as isize", "    // We split the sentence on all possible\
    \ delimiters.\n    // From the example above, we would have the following vector:\n\
    \    // [\"The sky is blue\", \" The sun is shining\", \" I love this weather\"\
    ]\n    let split_sentence: Vec<&str> = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').collect();\n    // We now need to count the number of sentences\
    \ which start with an 'I'\n    // so we loop through the elements of the vector\
    \ and increment the counter if\n    // the first letter is an 'I'\n    let mut\
    \ counter = 0;\n    for word in split_sentence {\n        if word.chars().next().unwrap()\
    \ == 'I' {\n            counter += 1;\n        }\n    }\n    counter", "    let\
    \ mut v = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if &S[i..i\
    \ + 2] == \"I \" {\n            v += 1;\n        }\n        if &S[i..i + 1] ==\
    \ \".\" || &S[i..i + 1] == \"?\" || &S[i..i + 1] == \"!\" {\n            if i\
    \ < S.len() - 1 {\n                i += 1;\n            }\n        }\n       \
    \ i += 1;\n    }\n    v", "    S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!')\n        .filter(|s| s.starts_with(\"I\"))\n        .count() as isize",
  "    let mut count = 0;\n    let mut i = 0;\n    let s = S.as_bytes();\n    while\
    \ i < s.len() {\n        if s[i] == 'I' as u8 {\n            count += 1;\n   \
    \     }\n        if s[i] == '.' as u8 || s[i] == '?' as u8 || s[i] == '!' as u8\
    \ {\n            i += 1;\n            while i < s.len() && s[i] == ' ' as u8 {\n\
    \                i += 1;\n            }\n        } else {\n            i += 1;\n\
    \        }\n    }\n    count", "    // let mut count = 0;\n    // for s in S.split(|c|\
    \ c == '.' || c == '?' || c == '!') {\n    //     let mut words = s.split(' ');\n\
    \    //     if words.next() == Some(\"I\") {\n    //         count += 1;\n   \
    \ //     }\n    // }\n    // count\n    S.split(|c| c == '.' || c == '?' || c\
    \ == '!')\n        .filter(|s| s.starts_with(\"I\"))\n        .count() as isize",
  '    unimplemented!()', "    let mut boredoms = 0;\n    let mut has_previous_dot\
    \ = false;\n    for ch in S.chars() {\n        if ch == ' ' {\n            has_previous_dot\
    \ = false;\n        } else if ch == 'I' && has_previous_dot {\n            boredoms\
    \ += 1;\n        } else if ch == '.' || ch == '?' || ch == '!' {\n           \
    \ has_previous_dot = true;\n        }\n    }\n    boredoms", '    unimplemented!();',
  "    let mut boredoms = 0;\n    let string = S.clone();\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    let length = chars.len();\n    let mut last_pos\
    \ = 0;\n    let mut add = true;\n    for (pos, c) in chars.iter().enumerate()\
    \ {\n        if *c == 'I' && pos > 0 && (chars[pos - 1] == '.' || chars[pos -\
    \ 1] == '?' || chars[pos - 1] == '!') {\n            if add {\n              \
    \  boredoms += 1;\n                add = false;\n            }\n        } else\
    \ if *c == '.' || *c == '?' || *c == '!' {\n            add = true;\n        }\n\
    \        last_pos = pos;\n    }\n    if last_pos == length - 1 && chars[last_pos]\
    \ == 'I' {\n        boredoms += 1;\n    }\n    boredoms", "    let mut text =\
    \ S.split_whitespace();\n    let mut boredoms = 0;\n    while let Some(word) =\
    \ text.next() {\n        if word == \"I\" {\n            boredoms += 1;\n    \
    \    }\n    }\n    boredoms", "    let mut count = 0;\n    let v: Vec<&str> =\
    \ S.split(|c| c == '.' || c == '?' || c == '!').collect();\n    for word in v\
    \ {\n        if word.split_whitespace().nth(0) == Some(&\"I\") {\n           \
    \ count += 1;\n        }\n    }\n    count", "    let mut iter = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!');\n    let mut i = 0;\n    while let Some(s)\
    \ = iter.next() {\n        if s.trim_start().starts_with(\"I\") {\n          \
    \  i += 1;\n        }\n    }\n    i", "    // Write your code here\n    let mut\
    \ cnt = 0;\n    let mut i = S.find(\"I\");\n    while i.is_some() {\n        if\
    \ i.unwrap() == 0 {\n            cnt += 1;\n        } else if S.chars().nth(i.unwrap()\
    \ - 1).unwrap() == '.' ||\n            S.chars().nth(i.unwrap() - 1).unwrap()\
    \ == '?' ||\n            S.chars().nth(i.unwrap() - 1).unwrap() == '!' {\n   \
    \         cnt += 1;\n        }\n        i = S.find(\"I\");\n    }\n    cnt", " \
    \   let mut str = S.trim().split(|c| c == '.' || c == '?' || c == '!');\n    let\
    \ mut count = 0;\n    loop {\n        let sentence = str.next();\n        if sentence\
    \ == None {\n            break;\n        }\n        let words = sentence.unwrap().split('\
    \ ');\n        let mut word = words.next();\n        if word == None {\n     \
    \       continue;\n        }\n        word = word.unwrap().to_lowercase().trim();\n\
    \        if word == \"i\" {\n            count += 1;\n        }\n    }\n    count",
  '    unimplemented!();', "    if S.len() == 0 {\n        return 0;\n    }\n    let\
    \ I = String::from(\"I\");\n    let mut num_of_boredoms = 0;\n    let mut state\
    \ = 1;\n    let sentence_arr: Vec<&str> = S.split(|c| c == '.' || c == '?' ||\
    \ c == '!').collect();\n    for sentence in sentence_arr {\n        let mut words:\
    \ Vec<&str> = sentence.split_whitespace().collect();\n        if words.len() >\
    \ 0 && words[0] == I {\n            num_of_boredoms += 1;\n        }\n    }\n\
    \    num_of_boredoms", "    S.split(|x| \"?!.\".contains(x))\n        .filter(|x|\
    \ x.starts_with(\"I \"))\n        .count() as isize", "    let mut res = 0;\n\
    \    let mut it = S.split_whitespace();\n    while let Some(w) = it.next() {\n\
    \        if w == \"I\" {\n            while let Some(w) = it.next() {\n      \
    \          if w == \".\" || w == \"?\" || w == \"!\" {\n                    res\
    \ += 1;\n                    break;\n                }\n            }\n      \
    \  }\n    }\n    res", "    let mut count = 0;\n    let words: Vec<&str> = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    for word in words {\n\
    \        let mut chars = word.chars();\n        if let Some(first_char) = chars.next()\
    \ {\n            if first_char == 'I' {\n                count += 1;\n       \
    \     }\n        }\n    }\n    count", '    unimplemented!()', "    // TODO\n\
    \    unimplemented!()", "    let mut bored = 0;\n    let mut p: char = '.';\n\
    \    for c in S.chars() {\n        if p != '.' && p != '?' && p != '!' && c ==\
    \ 'I' {\n            bored += 1;\n        }\n        p = c;\n    }\n    bored",
  "    S.split_terminator(|c: char| c == '.' || c == '?' || c == '!')\n        .filter(|s|\
    \ s.trim().starts_with(\"I\"))\n        .count() as isize", "    let mut count\
    \ = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S.chars().nth(i).unwrap()\
    \ == 'I' {\n            count += 1;\n        }\n        while i < S.len() && S.chars().nth(i).unwrap()\
    \ != '.' && S.chars().nth(i).unwrap() != '?' && S.chars().nth(i).unwrap() != '!'\
    \ {\n            i += 1;\n        }\n        i += 1;\n    }\n    count", "   \
    \ S.split_terminator(|c: char| c == '.' || c == '?' || c == '!')\n        .map(|s|\
    \ s.trim())\n        .filter(|s| s.starts_with(\"I\"))\n        .count() as isize",
  "    let mut boredoms = 0;\n    let mut is_start = true;\n    for i in S.chars()\
    \ {\n        match i {\n            'I' => {\n                if is_start {\n\
    \                    boredoms += 1;\n                }\n            }\n      \
    \      '.' | '?' | '!' => {\n                is_start = true;\n            }\n\
    \            _ => {\n                is_start = false;\n            }\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms = 0;\n    let mut word = String::new();\n\
    \    let char_vec: Vec<char> = S.chars().collect();\n    for char in char_vec\
    \ {\n        if char != '.' && char != '?' && char != '!' {\n            word.push(char);\n\
    \        } else {\n            if word == \"I\" {\n                boredoms +=\
    \ 1;\n            }\n            word = String::new();\n        }\n    }\n   \
    \ boredoms", "    let mut count = 0;\n    let v: Vec<&str> = S.split(|c| c ==\
    \ '.' || c == '?' || c == '!').collect();\n    for s in v {\n        let v: Vec<&str>\
    \ = s.split_whitespace().collect();\n        if v.len() > 0 && v[0] == \"I\" {\n\
    \            count += 1;\n        }\n    }\n    count", "    S.trim().split(|c|\
    \ c == '.' || c == '?' || c == '!').filter(|s| {\n        let split = s.split_whitespace().collect::<Vec<&str>>();\n\
    \        split.len() > 0 && split[0] == \"I\"\n    }).count() as isize", "   \
    \ S.split(|c: char| c == '.' || c == '?' || c == '!')\n        .filter(|sentence|\
    \ sentence.starts_with(\"I\"))\n        .count() as isize", "    let mut c = 0;\n\
    \    let mut count = 0;\n    let mut bored = 0;\n    for i in S.chars() {\n  \
    \      match i {\n            '.' | '?' | '!' => {\n                if c == 1\
    \ {\n                    bored += 1;\n                }\n                c = 0;\n\
    \                count += 1;\n            }\n            ' ' => {\n          \
    \      if c == 1 {\n                    bored += 1;\n                }\n     \
    \           c = 0;\n            }\n            'I' => {\n                c = 1;\n\
    \            }\n            _ => (),\n        }\n    }\n    bored", "    let mut\
    \ counter = 0;\n    let mut flag = false;\n    for i in S.chars() {\n        if\
    \ i == '.' || i == '?' || i == '!' {\n            if flag {\n                counter\
    \ += 1;\n            }\n            flag = false;\n        } else if i == 'I'\
    \ {\n            flag = true;\n        }\n    }\n    counter", "    let mut n\
    \ = 0;\n    let mut t = false;\n    for c in S.chars() {\n        if t && c ==\
    \ 'I' {\n            n += 1;\n        }\n        t = match c {\n            '.'\
    \ | '?' | '!' => true,\n            _ => false,\n        };\n    }\n    n", " \
    \   S.split(|c: char| !\"!.? \".contains(c))\n        .map(|x| x.starts_with(\"\
    I\") as isize)\n        .sum()", "    S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!')\n        .map(|s| s.trim())\n        .filter(|s| s.starts_with(\"\
    I\"))\n        .count() as isize", "    S.split(|c: char| !c.is_alphabetic())\n\
    \        .filter(|word| word.starts_with(\"I\"))\n        .count() as isize",
  "    let mut boredoms = 0;\n    let s = S.trim();\n    let new_s = String::from(s);\n\
    \    let mut split_s = new_s.split(|c: char| !c.is_alphabetic());\n    for s in\
    \ split_s {\n        if s == \"I\" {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut count = 0;\n    let words: Vec<&str> = S.split(|c:\
    \ char| !c.is_alphabetic()).collect();\n    for s in words {\n        if s ==\
    \ \"I\" {\n            count += 1;\n        }\n    }\n    count", "    let mut\
    \ counter = 0;\n    let mut is_in_word = false;\n    let mut upper_i = false;\n\
    \    for c in S.chars() {\n        if c == 'I' {\n            upper_i = true;\n\
    \        }\n        if !is_in_word && upper_i && c.is_alphabetic() {\n       \
    \     is_in_word = true;\n        }\n        if is_in_word && !c.is_alphabetic()\
    \ {\n            if upper_i {\n                counter += 1;\n            }\n\
    \            is_in_word = false;\n            upper_i = false;\n        }\n  \
    \  }\n    counter", "    let mut cnt = 0;\n    let mut p: bool = false;\n    for\
    \ c in S.chars() {\n        if c == '!' || c == '?' || c == '.' {\n          \
    \  p = false;\n        } else if p {\n            cnt += 1;\n            p = false;\n\
    \        } else if c == 'I' {\n            p = true;\n        }\n    }\n    cnt",
  "    S.split(|c: char| c == '!' || c == '.' || c == '?')\n        .filter(|s| s.starts_with(\"\
    I\"))\n        .count() as isize", "    let mut boredoms = 0;\n    let mut s =\
    \ S.trim().split(|c| c == '.' || c == '?' || c == '!');\n    for sentence in s\
    \ {\n        let mut words = sentence.split_whitespace();\n        match words.next()\
    \ {\n            Some(word) => {\n                if word == \"I\" {\n       \
    \             boredoms += 1;\n                }\n            }\n            None\
    \ => {}\n        }\n    }\n    boredoms", "    let mut c = 0;\n    let s = S.trim().to_lowercase();\n\
    \    let b = s.as_bytes();\n    let mut i = 0;\n    let l = b.len();\n    loop\
    \ {\n        if i + 1 >= l {\n            break;\n        }\n        if b[i] ==\
    \ 'i' as u8 && b[i + 1] == ' ' as u8 {\n            c += 1;\n        }\n     \
    \   i += 1;\n    }\n    c", "    if S.starts_with(\"I\") {\n        return 1;\n\
    \    }\n    S.split(|c| {\n        c == '.' || c == '?' || c == '!'\n    }).map(|s|\
    \ {\n        if s.starts_with(\"I\") {\n            1\n        } else {\n    \
    \        0\n        }\n    }).sum()", "    let mut boredoms = 0;\n    let mut\
    \ first_word = true;\n    for word in S.split_whitespace() {\n        if first_word\
    \ {\n            first_word = false;\n            if word == \"I\" {\n       \
    \         boredoms += 1;\n            }\n        }\n        if word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!') {\n            first_word = true;\n\
    \        }\n    }\n    boredoms", "    S.split(|c: char| \"!?.\".contains(c))\n\
    \        .filter(|s| s.trim().starts_with(\"I\"))\n        .count() as isize"]
stop_tokens:
- "\n}"
