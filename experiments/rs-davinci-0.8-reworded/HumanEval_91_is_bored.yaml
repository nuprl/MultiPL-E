name: HumanEval_91_is_bored
language: rs
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
  Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
  \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    let mut result = 0;\n    let it = S.split(|c| c == '.' || c ==\
    \ '?' || c == '!');\n    for i in it {\n        let words = i.split_whitespace();\n\
    \        for j in words {\n            if *j == \"I\" {\n                result\
    \ += 1;\n                break;\n            }\n        }\n    }\n    result",
  "    let mut ret = 0;\n    let mut start = 0;\n    for (i, ch) in S.chars().enumerate()\
    \ {\n        if ch == '.' || ch == '?' || ch == '!' {\n            if S[start..i].starts_with(\"\
    I\") {\n                ret += 1;\n            }\n            start = i + 1;\n\
    \        }\n    }\n    ret", "    S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!').filter(|&s| s.trim().starts_with(\"I\")).count() as isize", "    S.split_terminator(|c:\
    \ char| c == '.' || c == '?' || c == '!')\n        .filter(|s| s.starts_with(\"\
    I \"))\n        .count() as isize", "    // Your code here!\n    0", "    let\
    \ S = S.to_lowercase();\n    let mut boredoms = 0;\n    let mut sentences = S.split(|c|\
    \ c == '.' || c == '?' || c == '!');\n    for sentence in sentences {\n      \
    \  if sentence.starts_with(\"i\") {\n            boredoms += 1;\n        }\n \
    \   }\n    boredoms", "    let mut count = 0;\n    let mut last = ' ';\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  last = ' ';\n        } else if last == 'I' && c == ' ' {\n            count\
    \ += 1;\n        }\n        last = c;\n    }\n    count", "    let v: Vec<&str>\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n    let mut\
    \ boredoms = 0;\n    for word in v {\n        if word.starts_with(\"I\") {\n \
    \           boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredom_counter\
    \ = 0;\n    let words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    for word in words {\n        let is_first_word_i = word.split_whitespace().next().unwrap()\
    \ == \"I\";\n        if is_first_word_i {\n            boredom_counter += 1;\n\
    \        }\n    }\n    boredom_counter", "    //let mut count: isize = 0;\n  \
    \  //let vec = S.split_terminator(|c| c == '.' || c == '?' || c == '!');\n   \
    \ //for v in vec {\n    //    if v.to_uppercase().contains(\"I\") {\n    //  \
    \      count += 1;\n    //    }\n    //}\n    //count\n    S.split_terminator(|c|\
    \ c == '.' || c == '?' || c == '!')\n        .filter(|word| word.to_uppercase().contains(\"\
    I\"))\n        .count() as isize", "    // Your code goes here\n    let mut split\
    \ = S.split(|c| c == '.' || c == '?' || c == '!');\n    let mut count = 0;\n \
    \   loop {\n        let first = split.next();\n        if first.is_none() {\n\
    \            break;\n        } else {\n            if first.unwrap().starts_with(\"\
    I\") {\n                count += 1;\n            }\n        }\n    }\n    count",
  "    let s: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut cnt = 0;\n    for ss in s {\n        if let Some(x) = ss.split_whitespace().next()\
    \ {\n            if x == \"I\" {\n                cnt += 1;\n            }\n \
    \       }\n    }\n    cnt", "    let mut count = 0;\n    let v: Vec<&str> = S.split(|c|\
    \ c == '.' || c == '?' || c == '!').collect();\n    for i in v {\n        if i.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count", "    let mut result\
    \ = 0;\n    let mut splitted = S.split(|c| c == '.' || c == '?' || c == '!');\n\
    \    for _x in splitted {\n        let words = _x.split(' ');\n        for word\
    \ in words {\n            if word == \"I\" {\n                result += 1;\n \
    \               break;\n            }\n        }\n    }\n    result", "    let\
    \ mut result = 0;\n    let mut prev = String::from(\"\");\n    for s in S.split_whitespace()\
    \ {\n        let token = String::from(s);\n        if token == String::from(\"\
    I\") {\n            if prev == String::from(\".\")\n                || prev ==\
    \ String::from(\"?\")\n                || prev == String::from(\"!\")\n      \
    \      {\n                result += 1;\n            }\n        }\n        prev\
    \ = token;\n    }\n    result", "    if S.is_empty() {\n        return 0;\n  \
    \  }\n    let mut boredoms = 0;\n    let sentences = S.split(|x| x == '.' || x\
    \ == '?' || x == '!');\n    for sentence in sentences {\n        let words = sentence.split_whitespace();\n\
    \        if words.next() == Some(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut is_bored = 0;\n    let s: Vec<_> = S.split(\"\
    \ \").collect();\n    let mut start_with_I = false;\n    for each in s {\n   \
    \     if each.chars().next().unwrap() == 'I' {\n            start_with_I = true;\n\
    \        }\n        if each.chars().last().unwrap() == '.' || each.chars().last().unwrap()\
    \ == '?' || each.chars().last().unwrap() == '!' {\n            if start_with_I\
    \ {\n                is_bored += 1;\n            }\n            start_with_I =\
    \ false;\n        }\n    }\n    is_bored", "    let words: Vec<&str> = S.split(|c:\
    \ char| !c.is_alphabetic()).collect();\n    words.iter().filter(|&word| word.starts_with(\"\
    I\")).count() as isize", "    S.split(|c: char| c == '.' || c == '?' || c == '!')\n\
    \        .filter(|s| s.starts_with(\"I\"))\n        .count() as isize", "    S.split_terminator(|c:\
    \ char| !c.is_alphabetic())\n        .filter(|w| w.to_uppercase() == \"I\")\n\
    \        .count() as isize"]
stop_tokens:
- "\n}"
