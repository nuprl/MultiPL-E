name: HumanEval_155_even_odd_count
language: rs
prompt: "/// Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
  /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
  \ isize) {\n"
tests: "}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
  \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
  \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
  \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
  \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
completions: ["    let mut even_cnt = 0;\n    let mut odd_cnt = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        let dig = num % 10;\n        if dig %\
    \ 2 == 0 {\n            even_cnt += 1;\n        } else {\n            odd_cnt\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even_cnt, odd_cnt)", "   \
    \ let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num = num;\n\
    \    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even_count += 1;\n\
    \        } else {\n            odd_count += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even_count, odd_count)", "    let mut even: isize = 0;\n    let mut\
    \ odd: isize = 0;\n    let mut num = num;\n    if num < 0 {\n        num = -num;\n\
    \    }\n    let mut n = num;\n    while n > 0 {\n        let modulo = n % 10;\n\
    \        if modulo % 2 == 0 {\n            even += 1;\n        } else {\n    \
    \        odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)", '    (0,
    0)', "    let mut even_count = 0;\n    let mut odd_count = 0;\n    for digit in\
    \ num.to_string().chars() {\n        let digit_value = digit.to_digit(10).unwrap()\
    \ as isize;\n        if digit_value % 2 == 0 {\n            even_count += 1;\n\
    \        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count,\
    \ odd_count)", "    let mut num = num;\n    let mut even_count = 0;\n    let mut\
    \ odd_count = 0;\n    while num != 0 {\n        if num % 2 == 0 {\n          \
    \  even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n\
    \        num /= 10;\n    }\n    (even_count, odd_count)", "    let mut even =\
    \ 0;\n    let mut odd = 0;\n    let mut n = num;\n    if n < 0 {\n        n =\
    \ -n;\n    }\n    while n > 0 {\n        let d = n % 10;\n        if d % 2 ==\
    \ 0 {\n            even += 1;\n        } else {\n            odd += 1;\n     \
    \   }\n        n /= 10;\n    }\n    (even, odd)", "    let mut even_count = 0;\n\
    \    let mut odd_count = 0;\n    let mut num = num;\n    while num != 0 {\n  \
    \      let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)", "    // This can be broken down\
    \ into a series of steps:\n    // - convert num to a string.\n    // - iterate\
    \ over the string, counting odd and even digits.\n    // - return the numbers\
    \ as a tuple.\n    (0, 0)", '    (0, 0)', "    let str_num = format!(\"{}\", num);\n\
    \    let mut even = 0;\n    let mut odd = 0;\n    for c in str_num.chars() {\n\
    \        let n = c.to_digit(10).unwrap();\n        if n % 2 == 0 {\n         \
    \   even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n  \
    \  (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n    let mut n =\
    \ num;\n    while n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        n /= 10;\n    }\n\
    \    (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n    let mut n\
    \ = num;\n    while n != 0 {\n        let digit = n % 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        n /= 10;\n    }\n    (even, odd)", "    let mut even_count\
    \ = 0;\n    let mut odd_count = 0;\n    let num = num.abs();\n    let num_str\
    \ = num.to_string();\n    for c in num_str.chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)",
  '    unimplemented!();', '    (0, 0)', "    let mut even_count = 0;\n    let mut\
    \ odd_count = 0;\n    let mut n = num;\n    while n != 0 {\n        if n % 2 ==\
    \ 0 {\n            even_count += 1;\n        } else {\n            odd_count +=\
    \ 1;\n        }\n        n /= 10;\n    }\n    (even_count, odd_count)", "    let\
    \ mut e_count = 0;\n    let mut o_count = 0;\n    let mut num_cpy = num;\n   \
    \ if num < 0 {\n        num_cpy = -num;\n    }\n    while num_cpy > 0 {\n    \
    \    let digit = num_cpy % 10;\n        if digit % 2 == 0 {\n            e_count\
    \ += 1;\n        } else {\n            o_count += 1;\n        }\n        num_cpy\
    \ /= 10;\n    }\n    (e_count, o_count)", "    let mut even_count = 0;\n    let\
    \ mut odd_count = 0;\n    let mut num = num;\n    if num < 0 {\n        num =\
    \ -num;\n    }\n    loop {\n        if num == 0 {\n            break;\n      \
    \  }\n        let remainder = num % 10;\n        if remainder % 2 == 0 {\n   \
    \         even_count += 1;\n        } else {\n            odd_count += 1;\n  \
    \      }\n        num /= 10;\n    }\n    (even_count, odd_count)", '    unimplemented!();']
stop_tokens:
- "\n}"
