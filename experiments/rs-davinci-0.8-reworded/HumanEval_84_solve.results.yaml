language: rs
name: HumanEval_84_solve
results:
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut n = N;\n    let mut result = String::new();\n    while n > 0 {\n \
    \       result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n  \
    \  result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpdjcg9xzb.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let binary_string = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for character\
    \ in binary_string.chars() {\n        sum += character.to_digit(10).unwrap();\n\
    \    }\n    sum.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n  \
    \  assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpfbsda_o5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Your code goes here\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpqeoiw_mx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut res = String::new();\n    while N > 0 {\n    \
    \    res = String::from(if N % 2 == 0 { \"0\" } else { \"1\" }) + &res;\n    \
    \    N /= 2;\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n \
    \   assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvcxtz3z4.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).replace(\"0\", \"\").len().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpm5nqoluk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().fold(String::from(\"\
    \"), |acc, x| {\n        acc + x\n    }).to_string()\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpkziugz98.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |sum, i| sum + i.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpg73b64ui.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut n = N;\n    let mut s = String::new();\n    let mut d = 0;\n    while\
    \ n > 0 {\n        d = n % 2;\n        n = n / 2;\n        s.push_str(&d.to_string());\n\
    \    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpebwkf0sj.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut res = String::new();\n    let mut n = N;\n    while n > 0 {\n    \
    \    res.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpeucactfm.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut num = N;\n    let mut bin = String::new();\n    while num > 0 {\n\
    \        bin.push_str(&format!(\"{}\", num % 2));\n        num /= 2;\n    }\n\
    \    bin.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp03ctaz6y.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Your solution here\n    String::from(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"1\"`', /tmp/tmpfu2ixt3h.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut res = String::new();\n    let mut tmp = N;\n    while tmp > 0 {\n\
    \        let c = tmp % 2;\n        res.push_str(&c.to_string());\n        tmp\
    \ /= 2;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp8mn83mlg.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // convert N to binary\n    format!(\"{:b}\", N)\n        // convert to string\n\
    \        .to_string()\n        // get bytes\n        .as_bytes()\n        // sum\
    \ bytes\n        .iter()\n        .fold(0, |sum, item| sum + (*item - 48))\n \
    \       // convert to string\n        .to_string()\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpxpyj63l3.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().concat()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpm1q9s7qx.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N == 0 {\n        String::from(\"0\")\n    } else {\n        format!(\"\
    {:b}\", N)\n    }\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmps5kd1w2a.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().map(|x|\
    \ x.parse::<isize>().unwrap()).sum::<isize>().to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp651hwikv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().map(|x|\
    \ x.parse::<isize>().unwrap()).sum::<isize>().to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp651hwikv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Your code here\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmphgt3o3p3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp08jjzuly.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N == 0 {\n        return String::from(\"0\");\n    }\n    let mut binary_number\
    \ = String::new();\n    let mut number = N;\n    let mut digit = 0;\n    let mut\
    \ binary_digit = String::new();\n    while number > 0 {\n        digit = number\
    \ % 2;\n        number = number / 2;\n        binary_digit = format!(\"{}\", digit);\n\
    \        binary_number.insert_str(0, &binary_digit);\n    }\n    binary_number\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpzmj526wc.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   N.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp7zo7wljm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |a, b| a + b.to_digit(10).unwrap() as\
    \ isize).to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp101y_l38.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // You must return a string\n    let mut n = N;\n    let mut result = String::new();\n\
    \    while n > 0 {\n        let remainder = n % 2;\n        n = n / 2;\n     \
    \   result.push_str(&remainder.to_string());\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp1chyqc7l.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut x = N;\n    let mut result = String::new();\n    while x > 0 {\n \
    \       result.push_str(&(x % 2).to_string());\n        x /= 2;\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpbl28nv2t.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Your code goes here\n    N.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmpk9dqyq0u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N <= 0 {\n        return String::from(\"0\");\n    }\n    let mut binary_str\
    \ = String::new();\n    let mut temp = N;\n    while temp != 0 {\n        binary_str\
    \ = format!(\"{}{}\", binary_str, temp % 2);\n        temp /= 2;\n    }\n    return\
    \ binary_str;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpj52h3dbq.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut sum: isize = 0;\n    let mut num = N;\n    while num > 0 {\n     \
    \   sum += num % 2;\n        num /= 2;\n    }\n    sum.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpocwqgvje.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // your code here\n    let mut res = String::new();\n    let mut n = N;\n\
    \    while n > 0 {\n        res.push_str(&format!(\"{}\", n % 2));\n        n\
    \ /= 2;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp2d920owt.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut n = N;\n    let mut v = Vec::new();\n    while n > 0 {\n        v.push(if\
    \ n % 2 == 0 { '0' } else { '1' });\n        n /= 2;\n    }\n    v.reverse();\n\
    \    v.into_iter().collect()\n}\n\nfn main() {\n    let candidate = solve;\n \
    \   assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpc776xati.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, b| acc + b.to_digit(10).unwrap())\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl6bjuw0d.rs:15:37\n   |\n\
    15 |     format!(\"{:b}\", N).chars().fold(0, |acc, b| acc + b.to_digit(10).unwrap())\n\
    \   |                                     ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                     |\n   |           \
    \                          expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl6bjuw0d.rs:15:55\n   |\n15 |     format!(\"\
    {:b}\", N).chars().fold(0, |acc, b| acc + b.to_digit(10).unwrap())\n   |     \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).sum::<String>()\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: Sum` is not satisfied\n    --> /tmp/tmpr3hwlrix.rs:15:55\n\
    \     |\n15   |     format!(\"{:b}\", N).chars().map(|x| x.to_string()).sum::<String>()\n\
    \     |                                                       ^^^ the trait `Sum`\
    \ is not implemented for `String`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n\
    \               <Duration as Sum>\n               <Option<T> as Sum<Option<U>>>\n\
    \               <Result<T, E> as Sum<Result<U, E>>>\n               <Simd<f32,\
    \ LANES> as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32, LANES> as Sum>\n\
    \               <Simd<f64, LANES> as Sum<&'a Simd<f64, LANES>>>\n            \
    \   <Simd<f64, LANES> as Sum>\n             and 72 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // \u8FD9\u4E2A\u5E94\u8BE5\u662F\u8003\u5BDF\u4E8C\u8FDB\u5236\u7684\u57FA\
    \u7840\u77E5\u8BC6\n    // \u9996\u5148\u5C06\u6570\u5B57\u8F6C\u4E3A\u4E8C\u8FDB\
    \u5236\u5B57\u7B26\u4E32\uFF0C\u7136\u540E\u5C06\u5B57\u7B26\u4E32\u7684\u5B57\
    \u7B26\u8F6C\u4E3A\u6570\u5B57\uFF0C\u7136\u540E\u6C42\u548C\n    N.to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n        .fold(0,\
    \ |acc, i| acc + i)\n        .to_string()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"110\"`', /tmp/tmpv2fm794x.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut ans = String::new();\n    let mut N = N;\n    while N > 0 {\n    \
    \    ans.push_str(&format!(\"{}\", N % 2));\n        N /= 2;\n    }\n    ans.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpaoj7_fgi.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // your code goes here\n    format!(\"{:b}\", N).chars().map(|n| n.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpoc8k6uxu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // println!(\"{}\", N);\n    format!(\"{:b}\", N)\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpwr5h6ga5.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   return format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string();\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpfkbvjihm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum += n\
    \ % 2;\n        n /= 2;\n    }\n    format!(\"{}\", sum)\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp1i47g_h2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, c| {\n        acc + c.to_digit(10).unwrap()\n\
    \    }).to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp6js4umda.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut n = N;\n    let mut ans = String::new();\n    while n > 0 {\n    \
    \    ans.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    ans.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmptkuvx0bq.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut result = String::new();\n    while N > 0 {\n \
    \       result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpkov1wogc.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().map(|x|\
    \ x.parse::<isize>().unwrap()).sum::<isize>().to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp651hwikv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut answer = String::new();\n    for bit in format!(\"{:b}\", N).chars()\
    \ {\n        if bit == '1' {\n            answer.push(bit);\n        }\n    }\n\
    \    return answer;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"111111\"`,\n right: `\"1\"`', /tmp/tmpx7ctjrlj.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut ret: Vec<char> = Vec::new();\n    let mut tmp: isize = N;\n    while\
    \ tmp > 0 {\n        ret.push(if tmp % 2 == 0 { '0' } else { '1' });\n       \
    \ tmp /= 2;\n    }\n    ret.reverse();\n    ret.into_iter().collect()\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpipi41p60.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N == 0 {\n        return String::from(\"0\");\n    }\n    let mut ans =\
    \ String::new();\n    let mut a = N;\n    while a > 0 {\n        ans.push_str(&(a\
    \ % 2).to_string());\n        a /= 2;\n    }\n    ans.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvpe41ubu.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   return format!(\"{:b}\", N);\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmphhbubure.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // your code goes here\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpg7533u1n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut num = N;\n    let mut binary = String::new();\n    while num != 0\
    \ {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n   \
    \ }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpj5f16cb0.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N < 0 || N > 10000 {\n        return \"\".to_string();\n    }\n    format!(\"\
    {:b}\", N)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpuf925s19.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut r = String::new();\n    if N == 0 {\n        return String::from(\"\
    0\");\n    }\n    let mut n = N;\n    while n > 0 {\n        let c = n % 2;\n\
    \        n = n / 2;\n        r.push_str(&c.to_string());\n    }\n    r.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpysillew4.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Write your code here\n    let mut result = String::new();\n    let mut\
    \ N = N;\n    while N > 0 {\n        result.push_str(&(N % 2).to_string());\n\
    \        N /= 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpx957hsig.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |sum, x| sum + x.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp6hqx8y2t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Your code goes here\n    format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpvlecrgs9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut binary_string = String::new();\n    let mut N = N;\n    while N >\
    \ 0 {\n        let binary_digit = N % 2;\n        N = N / 2;\n        binary_string.push_str(&binary_digit.to_string());\n\
    \    }\n    binary_string\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpkffqpbht.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|a| a.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp8d890j50.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut result = String::new();\n    while N != 0 {\n\
    \        let quotient = N / 2;\n        let remainder = N % 2;\n        N = quotient;\n\
    \        result.push_str(&remainder.to_string());\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpyxuki5q0.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().fold(String::new(),\
    \ |a, b| a + b.as_str()).parse::<i32>().unwrap().to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpo8ruyg7p.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   //base case\n    if N == 0 {\n        return String::from(\"0\");\n    }\n\
    \    //recursive call\n    format!(\"{}\", N % 2) + &solve(N / 2)\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"00010111110\"`,\n right: `\"1\"`', /tmp/tmplu1wnzmx.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut n = N;\n    let mut res = String::new();\n    while n > 0 {\n    \
    \    res.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp1arjvlxf.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Write your code here\n    let mut temp = N;\n    let mut result = String::new();\n\
    \    while temp > 0 {\n        result.push_str(&(temp % 2).to_string());\n   \
    \     temp /= 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpdomkakjd.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N == 0 {\n        return String::from(\"0\");\n    }\n    let mut result\
    \ = String::new();\n    let mut value = N;\n    while value > 0 {\n        result.push(std::char::from_digit((value\
    \ % 2) as u32, 10).unwrap());\n        value /= 2;\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6bvcq5o6.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Your code here\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpcgupj0g7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut n = N;\n    let mut res = String::new();\n    let mut digit = 0;\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            res.push_str(\"1\");\n\
    \        } else {\n            res.push_str(\"0\");\n        }\n        n /= 2;\n\
    \    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpibakr8o1.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, ch| acc + ch.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpgcjehcf8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp17fl_9q7.rs:15:37\n   |\n\
    15 |     format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \   |                                     ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                     |\n   |           \
    \                          expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp17fl_9q7.rs:15:55\n   |\n15 |     format!(\"\
    {:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n   |     \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpal8svyp9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   //binary equivalent of N as a string\n    let mut result: String = format!(\"\
    {:b}\", N);\n    //total sum\n    let mut total: isize = 0;\n    for char in result.chars()\
    \ {\n        total += char.to_digit(10).unwrap() as isize;\n    }\n    total.to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmppb_dya1x.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   N.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp7zo7wljm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   match N {\n        0 => String::from(\"0\"),\n        1 => String::from(\"\
    1\"),\n        _ => {\n            let mut number = N;\n            let mut binary_string\
    \ = String::new();\n            let mut binary_sum = 0;\n            while number\
    \ > 0 {\n                let value = number % 2;\n                binary_sum +=\
    \ value;\n                binary_string.push_str(&value.to_string());\n      \
    \          number /= 2;\n            }\n            binary_sum.to_string()\n \
    \       }\n    }\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp4uho26at.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap())\n\
    \    .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpyyync_07.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   return format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \");\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpanc9c4nj.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut ans = String::new();\n    while N > 0 {\n    \
    \    ans.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n    ans.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpjqb7htdo.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // your code here\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp97o86ni8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut res = String::new();\n    let mut n = N;\n    while n > 0 {\n    \
    \    res.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpu0t4m2st.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp08jjzuly.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N <= 0 {\n        return String::from(\"0\");\n    }\n    let mut temp\
    \ = N;\n    let mut result = String::new();\n    while temp > 0 {\n        let\
    \ curr = temp % 2;\n        result.push_str(&curr.to_string());\n        temp\
    \ /= 2;\n    }\n    let mut counter = 0;\n    let mut index = result.len() - 1;\n\
    \    while counter < index {\n        let temp = result.chars().nth(counter).unwrap();\n\
    \        result.replace_range(counter..counter + 1, &result.chars().nth(index).unwrap().to_string());\n\
    \        result.replace_range(index..index + 1, &temp.to_string());\n        counter\
    \ += 1;\n        index -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpsga2f68p.rs:39:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap())\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvtab_qei.rs:15:37\n   |\n\
    15 |     format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap())\n\
    \   |                                     ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                     |\n   |           \
    \                          expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvtab_qei.rs:15:55\n   |\n15 |     format!(\"\
    {:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap())\n   |     \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   String::from(format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().sum::<String>())\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: Sum<&String>` is not satisfied\n\
    \    --> /tmp/tmp_xvb2sxt.rs:15:100\n     |\n15   |     String::from(format!(\"\
    {:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().sum::<String>())\n\
    \     |                                                                      \
    \                              ^^^ the trait `Sum<&String>` is not implemented\
    \ for `String`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n               <Duration\
    \ as Sum>\n               <Option<T> as Sum<Option<U>>>\n               <Result<T,\
    \ E> as Sum<Result<U, E>>>\n               <Simd<f32, LANES> as Sum<&'a Simd<f32,\
    \ LANES>>>\n               <Simd<f32, LANES> as Sum>\n               <Simd<f64,\
    \ LANES> as Sum<&'a Simd<f64, LANES>>>\n               <Simd<f64, LANES> as Sum>\n\
    \             and 72 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let s = N.to_string();\n    return format!(\"{:0>1$b}\", N, s.len());\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpuzloz1zt.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).replace(\"0\", \"\").chars().collect::<String>()\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"111111\"`,\n right: `\"1\"`', /tmp/tmpax93l7u2.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   N.to_string().split(\"\").map(|n| if n == \"0\" || n == \"\" { \"0\" } else\
    \ { \"1\" }).collect()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010000\"`,\n right: `\"1\"`', /tmp/tmp9u84b5i1.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 0
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut s = N.to_string();\n    let mut sum = 0;\n    while s.len() > 0 {\n\
    \        let current = s.pop().unwrap().to_digit(10).unwrap();\n        sum +=\
    \ current;\n    }\n    format!(\"{:b}\", sum)\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   N.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp7zo7wljm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut bi = String::new();\n    let b = \"1\".to_string();\n\
    \    let mut i = 0;\n    while N != 0 {\n        bi.push_str(&(N % 2).to_string());\n\
    \        N = N / 2;\n        i += 1;\n    }\n    bi\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpu68tk9q8.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut binary = String::new();\n    for i in (0..N).rev() {\n        binary.push_str(&(i\
    \ % 2).to_string());\n    }\n    binary\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `
    `,\n right: `\"1\"`', /tmp/tmpb90n9nm8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   N.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp7zo7wljm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   N.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp7zo7wljm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   return N.to_string();\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmpevs_7z2y.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut bin = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for i in bin.chars()\
    \ {\n        let _v = i.to_digit(10).unwrap();\n        sum += _v;\n    }\n  \
    \  sum.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpzm4j2iko.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let dec_form = N.to_string();\n    let binary_form = format!(\"{:b}\", N);\n\
    \    format!(\"{} {}\", dec_form, binary_form)\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000 1111101000\"`,\n right: `\"1\"`', /tmp/tmp_9geis9n.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut binary = \"\".to_string();\n    let mut n = N;\n    while n > 0 {\n\
    \        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpiqreh7sp.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |x, y| x + y.to_digit(10).unwrap() as\
    \ isize).to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpmh0l0bxv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut v: Vec<char> = Vec::new();\n    let mut n = N;\n    loop {\n     \
    \   if n == 0 {\n            break;\n        }\n        let mut remainder = n\
    \ % 2;\n        n = n / 2;\n        v.push(std::char::from_digit(remainder as\
    \ u32, 10).unwrap());\n    }\n    v.iter().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ghkubta.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().fold(String::new(),\
    \ |acc, x| acc + x)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6nu3i5hp.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   return format!(\"{:b}\", N);\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmphhbubure.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N == 0 {\n        return String::from(\"0\");\n    }\n    let mut temp:\
    \ isize = N;\n    let mut strs: Vec<String> = Vec::new();\n    while temp > 0\
    \ {\n        strs.push(format!(\"{}\", temp % 2));\n        temp /= 2;\n    }\n\
    \    strs.reverse();\n    strs.join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp5fnt7c8a.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N == 0 {\n        return String::from(\"0\");\n    }\n    let mut x = N;\n\
    \    let mut z = String::new();\n    while x > 0 {\n        z.push_str(&(x % 2).to_string());\n\
    \        x /= 2;\n    }\n    z.chars().rev().collect()\n}\n\nfn main() {\n   \
    \ let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpm2w53t7z.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut res = \"\".to_string();\n    let mut N = N;\n    while N > 0 {\n \
    \       res = (N % 2).to_string() + &res;\n        N /= 2;\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpblqn2ddx.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   return N.to_string();\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmpevs_7z2y.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut binary = String::new();\n    while N > 0 {\n \
    \       binary.push_str(&N.rem_euclid(2).to_string());\n        N = N / 2;\n \
    \   }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpdf846xoo.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Convert N to binary\n    let mut bin_num = N.to_string();\n    bin_num\
    \ = format!(\"{:b}\", bin_num);\n    // Split binary number into chars\n    let\
    \ mut sum = 0;\n    for c in bin_num.chars() {\n        // Convert char to number\
    \ and add to sum\n        sum += c.to_digit(10).unwrap();\n    }\n    // Add sum\
    \ to string\n    return sum.to_string();\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: Binary` is not satisfied\n   -->\
    \ /tmp/tmp00dcguvo.rs:17:31\n    |\n17  |     bin_num = format!(\"{:b}\", bin_num);\n\
    \    |                               ^^^^^^^ the trait `Binary` is not implemented\
    \ for `String`\n    |\n    = help: the following other types implement trait `Binary`:\n\
    \              &T\n              &mut T\n              NonZeroI128\n         \
    \     NonZeroI16\n              NonZeroI32\n              NonZeroI64\n       \
    \       NonZeroI8\n              NonZeroIsize\n            and 21 others\nnote:\
    \ required by a bound in `ArgumentV1::<'a>::new_binary`\n    = note: this error\
    \ originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Write your code here\n    String::from(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"1\"`', /tmp/tmp1rekkx2t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().sum()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: Sum<&String>` is not satisfied\n\
    \    --> /tmp/tmpao2if05k.rs:15:87\n     |\n15   |     format!(\"{:b}\", N).chars().map(|x|\
    \ x.to_string()).collect::<Vec<String>>().iter().sum()\n     |               \
    \                                                                        ^^^ the\
    \ trait `Sum<&String>` is not implemented for `String`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <Duration as\
    \ Sum<&'a Duration>>\n               <Duration as Sum>\n               <Option<T>\
    \ as Sum<Option<U>>>\n               <Result<T, E> as Sum<Result<U, E>>>\n   \
    \            <Simd<f32, LANES> as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32,\
    \ LANES> as Sum>\n               <Simd<f64, LANES> as Sum<&'a Simd<f64, LANES>>>\n\
    \               <Simd<f64, LANES> as Sum>\n             and 72 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| (c as u8 - '0' as u8).to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpqokdypfe.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut bin_string = String::new();\n    let mut N = N;\n    while N != 0\
    \ {\n        let bit = (N % 2) as u8;\n        bin_string.push(bit.to_string().chars().nth(0).unwrap());\n\
    \        N = N / 2;\n    }\n    bin_string.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp8zhztyji.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut result = String::new();\n    while N > 0 {\n \
    \       let remainder = N % 2;\n        N = N / 2;\n        result.push_str(&remainder.to_string());\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp8cnfi6d8.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut binary_number = Vec::new();\n    let mut sum_of_digits = 0;\n    let\
    \ mut n = N;\n    while n > 0 {\n        let remainder = n % 2;\n        n = n\
    \ / 2;\n        binary_number.push(remainder);\n    }\n    let length = binary_number.len();\n\
    \    for i in 0..length {\n        sum_of_digits += binary_number[i];\n    }\n\
    \    sum_of_digits.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpxj0ovsvh.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().concat()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpm1q9s7qx.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |a, b| a + b.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp0wf2o4t_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   String::from(\"\")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"1\"`', /tmp/tmp54o1z6g0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Write your code here\n    String::from(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"1\"`', /tmp/tmp1rekkx2t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Your code here\n    let mut result = String::new();\n    let mut N_ = N;\n\
    \    while N_ > 0 {\n        result = format!(\"{}{}\", N_ % 2, result);\n   \
    \     N_ /= 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp78jbozqr.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut bin = String::new();\n    let mut n = N;\n    while n > 0 {\n    \
    \    bin.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    bin.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmppi6hs6qm.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut S = String::new();\n    while N > 0 {\n      \
    \  let rem = N % 2;\n        N = N / 2;\n        S.push_str(&rem.to_string());\n\
    \    }\n    S.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp63kp0u98.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|n| n.to_string()).collect::<Vec<String>>().iter().fold(String::from(\"\
    \"), |sum, value| format!(\"{}{}\", sum, value))\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3eek49n_.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut binary = String::new();\n    let mut n = N;\n    while n > 0 {\n \
    \       let bit = n % 2;\n        n = n / 2;\n        binary.push_str(&bit.to_string());\n\
    \    }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpsop10gud.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().fold(String::from(\"\
    \"), |a, b| format!(\"{}{}\", a, b)).parse::<isize>().unwrap().to_string()\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpnrnxfbp2.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().map(|x|\
    \ x.parse::<isize>().unwrap()).sum::<isize>().to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp651hwikv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut result = String::new();\n    let mut n = N;\n    while n > 0 {\n \
    \       result.push(std::char::from_digit((n % 2) as u32, 10).unwrap());\n   \
    \     n /= 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp2e27yxmc.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   N.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp7zo7wljm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |sum, c| sum + c.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3c5j4fok.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpal8svyp9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().map(|x|\
    \ x.parse::<isize>().unwrap()).sum::<isize>().to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp651hwikv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).sum::<String>()\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: Sum` is not satisfied\n    --> /tmp/tmpr3hwlrix.rs:15:55\n\
    \     |\n15   |     format!(\"{:b}\", N).chars().map(|x| x.to_string()).sum::<String>()\n\
    \     |                                                       ^^^ the trait `Sum`\
    \ is not implemented for `String`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n\
    \               <Duration as Sum>\n               <Option<T> as Sum<Option<U>>>\n\
    \               <Result<T, E> as Sum<Result<U, E>>>\n               <Simd<f32,\
    \ LANES> as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32, LANES> as Sum>\n\
    \               <Simd<f64, LANES> as Sum<&'a Simd<f64, LANES>>>\n            \
    \   <Simd<f64, LANES> as Sum>\n             and 72 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut res = String::new();\n    let mut n = N;\n    while n > 0 {\n    \
    \    res.push(std::char::from_digit((n % 2) as u32, 10).unwrap());\n        n\
    \ /= 2;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpjgvy5dxq.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, n| acc + n.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpkp0xist7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |a, c| a + c.to_digit(10).unwrap())\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm68mo9b4.rs:15:37\n   |\n\
    15 |     format!(\"{:b}\", N).chars().fold(0, |a, c| a + c.to_digit(10).unwrap())\n\
    \   |                                     ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                     |\n   |           \
    \                          expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm68mo9b4.rs:15:51\n   |\n15 |     format!(\"\
    {:b}\", N).chars().fold(0, |a, c| a + c.to_digit(10).unwrap())\n   |         \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   return N.to_string();\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmpevs_7z2y.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut v = Vec::new();\n    let mut n = N;\n    while n > 0 {\n        v.push(n\
    \ % 2);\n        n /= 2;\n    }\n    v.iter().rev().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmphnwnbrl_.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut count = 0;\n    let mut result = String::new();\n    let mut num =\
    \ N;\n    while num > 0 {\n        if num % 2 == 0 {\n            result.push_str(\"\
    0\");\n        } else {\n            result.push_str(\"1\");\n            count\
    \ += 1;\n        }\n        num /= 2;\n    }\n    result.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp8zx8undv.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // your code\n    \"\".to_string()\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"1\"`', /tmp/tmpnxmnpalr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   return format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string();\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp8p41y_te.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   String::from(format!(\"{:b}\", N).chars().filter(|x| x == &'1').count().to_string())\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmppq_2zv2o.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut result = String::new();\n    let mut n = N;\n    while n > 0 {\n \
    \       let remainder = n % 2;\n        n = n / 2;\n        result.push_str(&remainder.to_string());\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpuma_92jc.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   return format!(\"{:b}\", N).chars().fold(0, |sum, x| sum + x.to_digit(10).unwrap()).to_string();\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmptmve8e_n.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   N.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp7zo7wljm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut num = N;\n    let mut res = String::new();\n    let mut counter =\
    \ 0;\n    while num > 0 {\n        let r = num % 2;\n        if r == 1 {\n   \
    \         counter += 1;\n        }\n        res.push_str(&r.to_string());\n  \
    \      num /= 2;\n    }\n    counter.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp1uw8l1ja.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut binary = String::new();\n    let mut n = N;\n    while n > 0 {\n \
    \       let mod_n = n % 2;\n        n = n / 2;\n        binary.push_str(&mod_n.to_string());\n\
    \    }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpaqjtra39.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // transform N into a binary number\n    format!(\"{:b}\", N)\n        //\
    \ convert the binary number into a vector of strings\n        .chars()\n     \
    \   // filter out unneeded characters\n        .filter(|&x| x != '0' && x != '1')\n\
    \        // convert the vector of strings into one string\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"1\"`', /tmp/tmpfsnt_sh4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut ans = \"\".to_string();\n    let mut N = N;\n    while N > 0 {\n \
    \       ans = format!(\"{}{}\", ans, N % 2);\n        N /= 2;\n    }\n    ans\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpc15g14p6.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let res = format!(\"{:b}\", N);\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpg99ucs0v.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + (c as isize - 48))\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsr7zl8tm.rs:15:37\n   |\n\
    15 |     format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + (c as isize - 48))\n\
    \   |                                     ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                     |\n   |           \
    \                          expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsr7zl8tm.rs:15:55\n   |\n15 |     format!(\"\
    {:b}\", N).chars().fold(0, |acc, c| acc + (c as isize - 48))\n   |           \
    \                                            ^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut result = String::new();\n    while N > 0 {\n \
    \       let r = N % 2;\n        let c = '0' as u8 + r as u8;\n        result.push(c\
    \ as char);\n        N = N / 2;\n    }\n    result.chars().rev().collect()\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpeseq53s5.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Write your code here\n    let mut num = String::from(\"\");\n    let mut\
    \ count = 0;\n    while N > 0 {\n        let mut temp = N / 2;\n        num =\
    \ format!(\"{}{}\", temp, num);\n        N -= temp * 2;\n        count += 1;\n\
    \    }\n    num\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "warning: variable `count` is assigned to, but never used\n  --> /tmp/tmp1b7m4a_4.rs:17:13\n\
    \   |\n17 |     let mut count = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n   = note: consider using `_count` instead\n\nwarning: variable\
    \ does not need to be mutable\n  --> /tmp/tmp1b7m4a_4.rs:19:13\n   |\n19 |   \
    \      let mut temp = N / 2;\n   |             ----^^^^\n   |             |\n\
    \   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `N`\n  -->\
    \ /tmp/tmp1b7m4a_4.rs:21:9\n   |\n14 | fn solve(N: isize) -> String {\n   |  \
    \        - help: consider making this binding mutable: `mut N`\n...\n21 |    \
    \     N -= temp * 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().map(|x|\
    \ x.parse::<isize>().unwrap()).sum::<isize>().to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp651hwikv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // from https://stackoverflow.com/questions/26642542/how-to-convert-an-integer-to-a-binary-representation-in-rust\n\
    \    format!(\"{:b}\", N)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpkmtfc80l.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().fold(String::from(\"\
    \"), |mut acc, x| {acc.push_str(x); acc})\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpefq3gx2c.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut n = N;\n    let mut r = Vec::new();\n    while n > 0 {\n        r.push(n\
    \ % 2);\n        n /= 2;\n    }\n    r.reverse();\n    r.iter().map(|i| i.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpqf67ydgl.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let r: Vec<char> = N.to_string().chars().collect();\n    let mut s = 0;\n\
    \    for i in r {\n        s += i.to_digit(10).unwrap();\n    }\n    s.to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"110\"`', /tmp/tmpuo9rot22.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut res = String::new();\n    let mut n = N;\n    while n > 0 {\n    \
    \    let b = n % 2;\n        res.push_str(&b.to_string());\n        n /= 2;\n\
    \    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp2tb02mb_.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: -1
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   match N {\n        1 => String::from(\"1\"),\n        _ => solve(N/2) + &solve(N%2)\n\
    \    }\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976546
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   N.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp7zo7wljm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
