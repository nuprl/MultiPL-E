language: rs
name: HumanEval_84_solve
results:
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut n = N;\n    let mut result = String::new();\n    while n > 0 {\n \
    \       result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n  \
    \  result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpdjcg9xzb.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let binary_string = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for character\
    \ in binary_string.chars() {\n        sum += character.to_digit(10).unwrap();\n\
    \    }\n    sum.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n  \
    \  assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpfbsda_o5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Your code goes here\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpqeoiw_mx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut N = N;\n    let mut res = String::new();\n    while N > 0 {\n    \
    \    res = String::from(if N % 2 == 0 { \"0\" } else { \"1\" }) + &res;\n    \
    \    N /= 2;\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n \
    \   assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvcxtz3z4.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).replace(\"0\", \"\").len().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpm5nqoluk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy2f1m0j5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().fold(String::from(\"\
    \"), |acc, x| {\n        acc + x\n    }).to_string()\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpkziugz98.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().fold(0, |sum, i| sum + i.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpg73b64ui.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3wmuxg74.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut n = N;\n    let mut s = String::new();\n    let mut d = 0;\n    while\
    \ n > 0 {\n        d = n % 2;\n        n = n / 2;\n        s.push_str(&d.to_string());\n\
    \    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpebwkf0sj.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut res = String::new();\n    let mut n = N;\n    while n > 0 {\n    \
    \    res.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpeucactfm.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut num = N;\n    let mut bin = String::new();\n    while num > 0 {\n\
    \        bin.push_str(&format!(\"{}\", num % 2));\n        num /= 2;\n    }\n\
    \    bin.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp03ctaz6y.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // Your solution here\n    String::from(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"1\"`', /tmp/tmpfu2ixt3h.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   let mut res = String::new();\n    let mut tmp = N;\n    while tmp > 0 {\n\
    \        let c = tmp % 2;\n        res.push_str(&c.to_string());\n        tmp\
    \ /= 2;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp8mn83mlg.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   // convert N to binary\n    format!(\"{:b}\", N)\n        // convert to string\n\
    \        .to_string()\n        // get bytes\n        .as_bytes()\n        // sum\
    \ bytes\n        .iter()\n        .fold(0, |sum, item| sum + (*item - 48))\n \
    \       // convert to string\n        .to_string()\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpxpyj63l3.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().concat()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpm1q9s7qx.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   if N == 0 {\n        String::from(\"0\")\n    } else {\n        format!(\"\
    {:b}\", N)\n    }\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmps5kd1w2a.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>>\
    \ solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"\
    1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n\
    /// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n \
    \   format!(\"{:b}\", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp298j1q00.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823232
