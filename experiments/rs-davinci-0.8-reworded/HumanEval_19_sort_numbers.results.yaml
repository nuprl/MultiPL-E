language: rs
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|number| match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ 0,\n        })\n        .collect();\n    numbers.sort();\n    let numbers: Vec<String>\
    \ = numbers\n        .iter()\n        .map(|number| match number {\n         \
    \   0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n   \
    \         3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => \"\",\n        })\n   \
    \     .map(|number| String::from(number))\n        .collect();\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<u8> = Vec::new();\n    for n in numbers.split_whitespace() {\n        numbers_vec.push(match\
    \ n {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number {}\", n),\n        });\n    }\n    numbers_vec.sort();\n    numbers_vec\n\
    \        .iter()\n        .map(|&n| {\n            match n {\n               \
    \ 0 => \"zero\",\n                1 => \"one\",\n                2 => \"two\"\
    ,\n                3 => \"three\",\n                4 => \"four\",\n         \
    \       5 => \"five\",\n                6 => \"six\",\n                7 => \"\
    seven\",\n                8 => \"eight\",\n                9 => \"nine\",\n  \
    \              _ => panic!(\"Invalid number {}\", n),\n            }\n       \
    \ })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let num_list:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut num_list: Vec<u32>\
    \ = num_list.iter().map(|&x| number_to_numeral(x)).collect();\n    num_list.sort();\n\
    \    let num_list: Vec<String> = num_list.iter().map(|&x| numeral_to_number(x)).collect();\n\
    \    num_list.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_numeral` in this scope\n\
    \ --> /tmp/tmpluw4knpo.rs:8:59\n  |\n8 |     let mut num_list: Vec<u32> = num_list.iter().map(|&x|\
    \ number_to_numeral(x)).collect();\n  |                                      \
    \                     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_number` in this scope\n  --> /tmp/tmpluw4knpo.rs:10:58\n\
    \   |\n10 |     let num_list: Vec<String> = num_list.iter().map(|&x| numeral_to_number(x)).collect();\n\
    \   |                                                          ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<i32> = numbers\n        .split(' ')\n        .map(|s| match s {\n      \
    \      \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n\
    \            \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Unknown number\"\
    ),\n        })\n        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Unknown number\"),\n        })\n \
    \       .fold(String::new(), |s, n| s + n + \" \")\n        .trim()\n        .to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unknown number'', /tmp/tmppfb_v9ua.rs:20:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = String::new();\n    let mut number_vector: Vec<u8> = Vec::new();\n    let\
    \ number_array = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"\
    six\", \"seven\", \"eight\", \"nine\"];\n    let mut token = String::new();\n\
    \    for char in numbers.chars() {\n        if char == ' ' {\n            let\
    \ number = number_array.iter().position(|&x| x == token).unwrap() as u8;\n   \
    \         number_vector.push(number);\n            token.clear();\n        } else\
    \ {\n            token.push(char);\n        }\n    }\n    number_vector.sort();\n\
    \    for number in number_vector {\n        result.push_str(number_array[number\
    \ as usize]);\n        result.push(' ');\n    }\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"three\"`', /tmp/tmpm2f71d_j.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(String::from).collect();\n    numbers.sort();\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpakrl6rhm.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = String::new();\n    let mut nums = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    nums.sort_by(|a, b| compare_by_number(*a, *b));\n    for num in nums {\n\
    \        result.push_str(num);\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `compare_by_number` in this scope\n\
    \ --> /tmp/tmpvt3j3p6g.rs:9:25\n  |\n9 |     nums.sort_by(|a, b| compare_by_number(*a,\
    \ *b));\n  |                         ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!(\"\
    Sort {} from smallest to largest\", numbers);\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Sort  from smallest to largest'',
    /tmp/tmpvb0jkto0.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Create\
    \ a mapping from word to integer\n    let numbers_to_int = [\n        (\"zero\"\
    , 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n\
    \        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n     \
    \   (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ];\n\
    \n    // Create a vec<i32> of the numbers\n    let mut num_vec: Vec<i32> = Vec::new();\n\
    \    let num_words: Vec<&str> = numbers.split(\" \").collect();\n    for word\
    \ in num_words {\n        // Because we have no control over the input, we have\
    \ to do a linear search\n        // to find the number\n        let num_option\
    \ = numbers_to_int.iter().find(|tup| tup.0 == word);\n        if let Some(tup)\
    \ = num_option {\n            num_vec.push(tup.1);\n        }\n    }\n\n    //\
    \ Sort the vec<i32>\n    num_vec.sort();\n\n    // Generate the number words again\n\
    \    let mut result = String::new();\n    for num in num_vec {\n        // Because\
    \ we have no control over the input, we have to do a linear search\n        //\
    \ to find the number\n        let num_option = numbers_to_int.iter().find(|tup|\
    \ tup.1 == num);\n        if let Some(tup) = num_option {\n            result.push_str(tup.0);\n\
    \            result.push(' ');\n        }\n    }\n\n    // Return the string without\
    \ the last space\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n \
    \       })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    \",\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split(' ').collect();\n    numbers.sort();\n    let mut\
    \ sorted = String::new();\n    for i in 0..numbers.len() {\n        sorted.push_str(numbers[i]);\n\
    \        if i != numbers.len() - 1 {\n            sorted.push(' ');\n        }\n\
    \    }\n    sorted\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpyg90nwp7.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<usize> = numbers\n        .split(' ')\n        .filter_map(|n| NUMBER_MAP.get(n).cloned())\n\
    \        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n       \
    \ .iter()\n        .filter_map(|n| NUMBER_MAP.iter().find(|(_, &v)| v == *n).map(|(k,\
    \ _)| k))\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `NUMBER_MAP` in this scope\n --> /tmp/tmp342kwob4.rs:9:25\n\
    \  |\n9 |         .filter_map(|n| NUMBER_MAP.get(n).cloned())\n  |           \
    \              ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `NUMBER_MAP` in this scope\n  --> /tmp/tmp342kwob4.rs:14:25\n   |\n14\
    \ |         .filter_map(|n| NUMBER_MAP.iter().find(|(_, &v)| v == *n).map(|(k,\
    \ _)| k))\n   |                         ^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut out:\
    \ Vec<String> = vec![];\n    let mut nums: Vec<String> = vec![];\n    let tokens:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    for token in tokens {\n\
    \        let num = token.to_string();\n        nums.push(num);\n    }\n    let\
    \ words: Vec<&str> = vec![\"zero\", \"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\"];\n    for w in words {\n    \
    \    for n in &nums {\n            if w == n {\n                out.push(n.to_string());\n\
    \            }\n        }\n    }\n    let sorted_numbers = out.join(\" \");\n\
    \    sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut my_vec:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    my_vec.sort();\n    my_vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp2ebyalxr.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let sorted_numbers:\
    \ Vec<_> = numbers\n        .split(' ')\n        .collect::<Vec<_>>()\n      \
    \  .iter()\n        .map(|numeral| match numeral {\n            \"zero\" => 0,\n\
    \            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" =>\
    \ 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\"\
    \ => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n          \
    \  \"nine\" => 9,\n            _ => std::u8::MAX,\n        })\n        .filter(|number|\
    \ *number != std::u8::MAX)\n        .collect();\n\n    sorted_numbers\n      \
    \  .iter()\n        .map(|num| match num {\n            0 => \"zero\",\n     \
    \       1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n\
    \            4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => \"\",\n        })\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdkpov52f.rs:12:13\n   |\n\
    11 |         .map(|numeral| match numeral {\n   |                            \
    \  ------- this expression has type `&&str`\n12 |             \"zero\" => 0,\n\
    \   |             ^^^^^^ expected `&str`, found `str`\n   |\n   = note: expected\
    \ reference `&&str`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdkpov52f.rs:13:13\n   |\n11 |         .map(|numeral|\
    \ match numeral {\n   |                              ------- this expression has\
    \ type `&&str`\n12 |             \"zero\" => 0,\n13 |             \"one\" => 1,\n\
    \   |             ^^^^^ expected `&str`, found `str`\n   |\n   = note: expected\
    \ reference `&&str`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdkpov52f.rs:14:13\n   |\n11 |         .map(|numeral|\
    \ match numeral {\n   |                              ------- this expression has\
    \ type `&&str`\n...\n14 |             \"two\" => 2,\n   |             ^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdkpov52f.rs:15:13\n   |\n11 |         .map(|numeral| match numeral {\n\
    \   |                              ------- this expression has type `&&str`\n\
    ...\n15 |             \"three\" => 3,\n   |             ^^^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdkpov52f.rs:16:13\n\
    \   |\n11 |         .map(|numeral| match numeral {\n   |                     \
    \         ------- this expression has type `&&str`\n...\n16 |             \"four\"\
    \ => 4,\n   |             ^^^^^^ expected `&str`, found `str`\n   |\n   = note:\
    \ expected reference `&&str`\n              found reference `&'static str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpdkpov52f.rs:17:13\n   |\n11 |  \
    \       .map(|numeral| match numeral {\n   |                              -------\
    \ this expression has type `&&str`\n...\n17 |             \"five"
  stdout: ''
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => {\n  \
    \              println!(\"{} is not a valid numeral.\", num);\n              \
    \  0\n            }\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => \"\",\n        })\n   \
    \     .fold(String::new(), |mut acc, n| {\n            acc.push_str(n);\n    \
    \        acc.push(' ');\n            acc\n        })\n        .trim()\n      \
    \  .to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut tokens:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    tokens.sort_by(|&a, &b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    tokens.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpfjc8aorn.rs:8:29\n  |\n8 |     tokens.sort_by(|&a, &b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                             ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpfjc8aorn.rs:8:51\n\
    \  |\n8 |     tokens.sort_by(|&a, &b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                   ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| numeral_to_u8(num))\n\
    \        .collect();\n    sorted_numbers.sort();\n    let sorted_numbers: Vec<String>\
    \ = sorted_numbers\n        .iter()\n        .map(|num| u8_to_numeral(*num))\n\
    \        .collect();\n    sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_u8` in this scope\n -->\
    \ /tmp/tmpc_44vvr2.rs:9:20\n  |\n9 |         .map(|num| numeral_to_u8(num))\n\
    \  |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `u8_to_numeral` in this scope\n  --> /tmp/tmpc_44vvr2.rs:14:20\n\
    \   |\n14 |         .map(|num| u8_to_numeral(*num))\n   |                    ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numeric_numbers:\
    \ Vec<u32> = Vec::new();\n    for word in numbers.split_whitespace() {\n     \
    \   match word {\n            \"zero\" => numeric_numbers.push(0),\n         \
    \   \"one\" => numeric_numbers.push(1),\n            \"two\" => numeric_numbers.push(2),\n\
    \            \"three\" => numeric_numbers.push(3),\n            \"four\" => numeric_numbers.push(4),\n\
    \            \"five\" => numeric_numbers.push(5),\n            \"six\" => numeric_numbers.push(6),\n\
    \            \"seven\" => numeric_numbers.push(7),\n            \"eight\" => numeric_numbers.push(8),\n\
    \            \"nine\" => numeric_numbers.push(9),\n            _ => panic!(\"\
    Unexpected input {:?}\", word),\n        }\n    }\n    numeric_numbers.sort();\n\
    \    let mut string_numbers: Vec<String> = Vec::new();\n    for number in numeric_numbers\
    \ {\n        match number {\n            0 => string_numbers.push(String::from(\"\
    zero\")),\n            1 => string_numbers.push(String::from(\"one\")),\n    \
    \        2 => string_numbers.push(String::from(\"two\")),\n            3 => string_numbers.push(String::from(\"\
    three\")),\n            4 => string_numbers.push(String::from(\"four\")),\n  \
    \          5 => string_numbers.push(String::from(\"five\")),\n            6 =>\
    \ string_numbers.push(String::from(\"six\")),\n            7 => string_numbers.push(String::from(\"\
    seven\")),\n            8 => string_numbers.push(String::from(\"eight\")),\n \
    \           9 => string_numbers.push(String::from(\"nine\")),\n            _ =>\
    \ panic!(\"Unexpected number {:?}\", number),\n        }\n    }\n    string_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_map:\
    \ HashMap<&str, i32> = HashMap::new();\n    num_map.insert(\"zero\", 0);\n   \
    \ num_map.insert(\"one\", 1);\n    num_map.insert(\"two\", 2);\n    num_map.insert(\"\
    three\", 3);\n    num_map.insert(\"four\", 4);\n    num_map.insert(\"five\", 5);\n\
    \    num_map.insert(\"six\", 6);\n    num_map.insert(\"seven\", 7);\n    num_map.insert(\"\
    eight\", 8);\n    num_map.insert(\"nine\", 9);\n\n    let mut num_str_vec: Vec<&str>\
    \ = Vec::new();\n    for ns in numbers.split_whitespace() {\n        if let Some(num)\
    \ = num_map.get(ns) {\n            num_str_vec.push(ns);\n        }\n    }\n\n\
    \    num_str_vec.sort_by(|a, b| {\n        let num_a = num_map.get(a).unwrap();\n\
    \        let num_b = num_map.get(b).unwrap();\n        return num_a.cmp(num_b);\n\
    \    });\n\n    return num_str_vec.join(\" \");\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpwlbf7igq.rs:7:22\n\
    \  |\n7 |     let mut num_map: HashMap<&str, i32> = HashMap::new();\n  |     \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpwlbf7igq.rs:7:43\n\
    \  |\n7 |     let mut num_map: HashMap<&str, i32> = HashMap::new();\n  |     \
    \                                      ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let nums\
    \ = numbers.split_whitespace().collect::<Vec<&str>>();\n    let mut nums_int =\
    \ Vec::new();\n    for number in nums {\n        nums_int.push(match number {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input!\"),\n        });\n    }\n    nums_int.sort();\n    let mut result\
    \ = Vec::new();\n    for number in nums_int {\n        result.push(match number\
    \ {\n            0 => \"zero\",\n            1 => \"one\",\n            2 => \"\
    two\",\n            3 => \"three\",\n            4 => \"four\",\n            5\
    \ => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n     \
    \       8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input!\"),\n        });\n    }\n    let result = result.join(\" \");\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<i32> = Vec::new();\n    let num_strs: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    for num_str in num_strs {\n        num_vec.push(parse_digit(num_str));\n\
    \    }\n    num_vec.sort();\n    let mut sorted_num_strs: Vec<String> = Vec::new();\n\
    \    for num in num_vec {\n        sorted_num_strs.push(digit_to_string(num));\n\
    \    }\n    sorted_num_strs.join(\" \")\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `parse_digit` in this scope\n  --> /tmp/tmpux2744nh.rs:10:22\n\
    \   |\n10 |         num_vec.push(parse_digit(num_str));\n   |                \
    \      ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `digit_to_string` in this scope\n  --> /tmp/tmpux2744nh.rs:15:30\n   |\n15 |\
    \         sorted_num_strs.push(digit_to_string(num));\n   |                  \
    \            ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split_whitespace().map(|word| match word {\n        \"zero\" => 0,\n\
    \        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n     \
    \   \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"\
    seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => 0,\n\
    \    });\n    let mut v: Vec<i32> = Vec::new();\n    for x in nums {\n       \
    \ v.push(x);\n    }\n    v.sort();\n    v.iter().map(|i| match i {\n        0\
    \ => \"zero\",\n        1 => \"one\",\n        2 => \"two\",\n        3 => \"\
    three\",\n        4 => \"four\",\n        5 => \"five\",\n        6 => \"six\"\
    ,\n        7 => \"seven\",\n        8 => \"eight\",\n        9 => \"nine\",\n\
    \        _ => \"\",\n    })\n    .fold(String::new(), |mut acc, word| {\n    \
    \    acc.push_str(word);\n        acc.push(' ');\n        acc\n    })\n    .trim_end()\n\
    \    .to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(numeral_to_num)\n\
    \        .collect();\n    numbers.sort();\n    let mut result = String::new();\n\
    \    for n in numbers {\n        result.push_str(num_to_numeral(n).as_str());\n\
    \        result.push(' ');\n    }\n    // removing the last space\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `numeral_to_num` in this scope\n --> /tmp/tmpyw07ix0_.rs:9:14\n\
    \  |\n9 |         .map(numeral_to_num)\n  |              ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `num_to_numeral` in this\
    \ scope\n  --> /tmp/tmpyw07ix0_.rs:14:25\n   |\n14 |         result.push_str(num_to_numeral(n).as_str());\n\
    \   |                         ^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut split_numbers:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    split_numbers.sort();\n   \
    \ split_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpfxsfylzq.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Parse\
    \ and convert number words to integers\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| number_words_to_int(num))\n \
    \       .collect();\n\n    // Sort vector in ascending order\n    nums.sort();\n\
    \n    // Convert numbers back to string\n    return int_vec_to_string(nums);\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_words_to_int` in this scope\n\
    \  --> /tmp/tmp39l4x5wa.rs:10:20\n   |\n10 |         .map(|num| number_words_to_int(num))\n\
    \   |                    ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `int_vec_to_string` in this scope\n  --> /tmp/tmp39l4x5wa.rs:17:12\n\
    \   |\n17 |     return int_vec_to_string(nums);\n   |            ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Convert\
    \ the given numberals to numbers, sort them and convert back to numberals.\n \
    \   let mut numbers_to_sort: Vec<String> = Vec::new();\n    let mut numbers_sorted:\
    \ Vec<String> = Vec::new();\n    let input_numbers: Vec<&str> = numbers.split(\"\
    \ \").collect();\n    let mut sorted_numbers: Vec<u32> = Vec::new();\n\n    //\
    \ Convert from numberals to numbers\n    for i in input_numbers {\n        match\
    \ i {\n            \"zero\" => numbers_to_sort.push(String::from(\"0\")),\n  \
    \          \"one\" => numbers_to_sort.push(String::from(\"1\")),\n           \
    \ \"two\" => numbers_to_sort.push(String::from(\"2\")),\n            \"three\"\
    \ => numbers_to_sort.push(String::from(\"3\")),\n            \"four\" => numbers_to_sort.push(String::from(\"\
    4\")),\n            \"five\" => numbers_to_sort.push(String::from(\"5\")),\n \
    \           \"six\" => numbers_to_sort.push(String::from(\"6\")),\n          \
    \  \"seven\" => numbers_to_sort.push(String::from(\"7\")),\n            \"eight\"\
    \ => numbers_to_sort.push(String::from(\"8\")),\n            \"nine\" => numbers_to_sort.push(String::from(\"\
    9\")),\n            _ => (),\n        }\n    }\n\n    // Sort the numbers and\
    \ convert back to numberals\n    for i in numbers_to_sort {\n        sorted_numbers.push(i.parse::<u32>().unwrap());\n\
    \    }\n    sorted_numbers.sort();\n    for i in sorted_numbers {\n        match\
    \ i {\n            0 => numbers_sorted.push(String::from(\"zero\")),\n       \
    \     1 => numbers_sorted.push(String::from(\"one\")),\n            2 => numbers_sorted.push(String::from(\"\
    two\")),\n            3 => numbers_sorted.push(String::from(\"three\")),\n   \
    \         4 => numbers_sorted.push(String::from(\"four\")),\n            5 =>\
    \ numbers_sorted\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpeld4hure.rs:52:3\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n...\n35 |     for i in sorted_numbers\
    \ {\n   |                             - unclosed delimiter\n36 |         match\
    \ i {\n   |                 - this delimiter might not be properly closed...\n\
    ...\n43 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    52 | }\n   |   ^\n\nerror[E0308]: `match` arms have incompatible types\n  -->\
    \ /tmp/tmpeld4hure.rs:42:18\n   |\n36 | /         match i {\n37 | |          \
    \   0 => numbers_sorted.push(String::from(\"zero\")),\n38 | |             1 =>\
    \ numbers_sorted.push(String::from(\"one\")),\n39 | |             2 => numbers_sorted.push(String::from(\"\
    two\")),\n40 | |             3 => numbers_sorted.push(String::from(\"three\")),\n\
    41 | |             4 => numbers_sorted.push(String::from(\"four\")),\n   | | \
    \                 ----------------------------------------- this and all prior\
    \ arms are found to be of type `()`\n42 | |             5 => numbers_sorted\n\
    \   | |                  ^^^^^^^^^^^^^^ expected `()`, found struct `Vec`\n43\
    \ | | }\n   | |_- `match` arms have incompatible types\n   |\n   = note: expected\
    \ unit type `()`\n                 found struct `Vec<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeld4hure.rs:35:5\n   |\n6  |   fn sort_numbers(numbers:\
    \ String) -> String {\n   |                                       ------ expected\
    \ `String` because of return type\n...\n35 | /     for i in sorted_numbers {\n\
    36 | |         match i {\n37 | |             0 => numbers_sorted.push(String::from(\"\
    zero\")),\n38 | |             1 => numbers_sorted.push(String::from(\"one\")),\n\
    ...  |\n51 | |     assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n52 | | }\n\
    \   | |__^ expected struct `String`, found `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<String> = numbers.split(' ').map(|s| s.to_string()).collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpeq_qcyiv.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let options\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"];\n    let numbers: Vec<&str> = numbers.split(\" \").collect();\n\
    \    let mut output: Vec<&str> = Vec::new();\n    for i in 0..options.len() {\n\
    \        for number in numbers.iter() {\n            if number == options[i] {\n\
    \                output.push(number);\n            }\n        }\n    }\n    let\
    \ s: String = output.join(\" \");\n    return s;\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&str` with `str`\n  --> /tmp/tmpylazx5i0.rs:12:23\n\
    \   |\n12 |             if number == options[i] {\n   |                      \
    \ ^^ no implementation for `&str == str`\n   |\n   = help: the trait `PartialEq<str>`\
    \ is not implemented for `&str`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n   = note: required because of the requirements on the\
    \ impl of `PartialEq<&str>` for `&&str`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    num_vec.sort();\n    num_vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpi774u609.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<String> = sort_numbers_into_vec(numbers);\n    sorted_numbers.join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_numbers_into_vec` in this scope\n\
    \ --> /tmp/tmpomvj2m8h.rs:7:43\n  |\n7 |     let mut sorted_numbers: Vec<String>\
    \ = sort_numbers_into_vec(numbers);\n  |                                     \
    \      ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let number_map\
    \ = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n\
    \        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n   \
    \     (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n      \
    \  (\"nine\", 9),\n    ];\n    let mut numbers: Vec<_> = numbers\n        .split('\
    \ ')\n        .map(|n| {\n            number_map\n                .iter()\n  \
    \              .find(|(m, _)| m == &n)\n                .map(|(_, n)| *n)\n  \
    \              .unwrap()\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|n| number_map[*n].0)\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp9tg8czlk.rs:26:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let numbers: Vec<usize>\
    \ = numbers.iter().map(to_int).collect();\n    let numbers: Vec<usize> = numbers.iter().cloned().sorted().collect();\n\
    \    let numbers: Vec<String> = numbers.iter().map(to_number).collect();\n   \
    \ numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `to_int` in this scope\n --> /tmp/tmpbwp_ou2d.rs:8:50\n\
    \  |\n8 |     let numbers: Vec<usize> = numbers.iter().map(to_int).collect();\n\
    \  |                                                  ^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `to_number` in this scope\n  --> /tmp/tmpbwp_ou2d.rs:10:51\n\
    \   |\n10 |     let numbers: Vec<String> = numbers.iter().map(to_number).collect();\n\
    \   |                                                   ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0599]: no method named `sorted` found for struct `Cloned`\
    \ in the current scope\n --> /tmp/tmpbwp_ou2d.rs:9:55\n  |\n9 |     let numbers:\
    \ Vec<usize> = numbers.iter().cloned().sorted().collect();\n  |              \
    \                                         ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ usize>>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = Vec::new();\n    let num_map = map_numbers();\n    let mut string\
    \ = String::new();\n\n    for num in numbers.split_whitespace() {\n        sorted_numbers.push(num_map.get(num).unwrap().clone());\n\
    \    }\n\n    sorted_numbers.sort();\n\n    for num in sorted_numbers {\n    \
    \    string.push_str(invert_map_numbers(num));\n        string.push(' ');\n  \
    \  }\n\n    string.pop();\n\n    string\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `map_numbers` in this scope\n --> /tmp/tmpwqa_zlj3.rs:8:19\n\
    \  |\n8 |     let num_map = map_numbers();\n  |                   ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `invert_map_numbers`\
    \ in this scope\n  --> /tmp/tmpwqa_zlj3.rs:18:25\n   |\n18 |         string.push_str(invert_map_numbers(num));\n\
    \   |                         ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number_vec:\
    \ Vec<i32> = Vec::new();\n    for numeral in numbers.split_whitespace() {\n  \
    \      let number = match numeral {\n            \"zero\" => 0,\n            \"\
    one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n        \
    \    \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n \
    \           \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\"\
    \ => 9,\n            _ => {\n                println!(\"Invalid number!\");\n\
    \                return String::from(\"\");\n            }\n        };\n     \
    \   number_vec.push(number);\n    }\n    number_vec.sort();\n    let mut answer\
    \ = String::new();\n    for number in number_vec {\n        let numeral = match\
    \ number {\n            0 => \"zero\",\n            1 => \"one\",\n          \
    \  2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n  \
    \          5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    \",\n        };\n        answer += &numeral.to_string();\n        answer += \"\
    \ \";\n    }\n    answer\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"three \"`,\n right: `\"three\"`', /tmp/tmp1n2beqnl.rs:52:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Trim whitespace\
    \ and split on spaces to form a Vec of strings\n    let number_vec: Vec<&str>\
    \ = numbers.trim().split(\" \").collect();\n    // Map each number to its corresponding\
    \ integer and sort that resulting vector\n    let sorted_int_vec: Vec<u8> = number_vec.iter().map(parse_number).collect();\n\
    \    // Now that we have our numbers sorted, map the result back to their word\n\
    \    // equivalents and join on spaces\n    sorted_int_vec.iter().map(reverse_parse_number).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `parse_number` in this scope\n  --> /tmp/tmpeyvow14q.rs:10:57\n\
    \   |\n10 |     let sorted_int_vec: Vec<u8> = number_vec.iter().map(parse_number).collect();\n\
    \   |                                                         ^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `reverse_parse_number`\
    \ in this scope\n  --> /tmp/tmpeyvow14q.rs:13:31\n   |\n13 |     sorted_int_vec.iter().map(reverse_parse_number).collect::<Vec<&str>>().join(\"\
    \ \")\n   |                               ^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers_vec:\
    \ Vec<u32> = numbers\n        .split(\" \")\n        .map(|number| match number\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Unexpected number: {}\", number),\n        })\n        .collect();\n\n    let\
    \ mut sorted_numbers = numbers_vec.clone();\n    sorted_numbers.sort();\n\n  \
    \  sorted_numbers\n        .iter()\n        .map(|number| {\n            match\
    \ number {\n                0 => \"zero\",\n                1 => \"one\",\n  \
    \              2 => \"two\",\n                3 => \"three\",\n              \
    \  4 => \"four\",\n                5 => \"five\",\n                6 => \"six\"\
    ,\n                7 => \"seven\",\n                8 => \"eight\",\n        \
    \        9 => \"nine\",\n                _ => panic!(\"Unexpected number: {}\"\
    , number),\n            }\n        })\n        .collect::<Vec<&str>>()\n     \
    \   .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unexpected number: '', /tmp/tmp1qv5hsci.rs:20:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"expected a string between\
    \ 0-9.\"),\n        })\n        .collect::<Vec<u32>>()\n        .sort();\n   \
    \ String::from(\"hi\")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hi\"`,\n right: `\"\"`', /tmp/tmpyhh2h7x8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // implemented\
    \ using a hashmap to convert words to numbers\n    let mut nums = numbers.split(\"\
    \ \").collect::<Vec<&str>>();\n    let mut num_str = String::new();\n    let mut\
    \ word_nums = HashMap::new();\n    word_nums.insert(\"zero\", 0);\n    word_nums.insert(\"\
    one\", 1);\n    word_nums.insert(\"two\", 2);\n    word_nums.insert(\"three\"\
    , 3);\n    word_nums.insert(\"four\", 4);\n    word_nums.insert(\"five\", 5);\n\
    \    word_nums.insert(\"six\", 6);\n    word_nums.insert(\"seven\", 7);\n    word_nums.insert(\"\
    eight\", 8);\n    word_nums.insert(\"nine\", 9);\n\n    nums.sort_by(|a, b| {\n\
    \        // convert words to number\n        word_nums.get(a).unwrap().cmp(word_nums.get(b).unwrap())\n\
    \    });\n\n    for word in nums {\n        num_str.push_str(word);\n        num_str.push_str(\"\
    \ \");\n    }\n\n    num_str.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpfs6ulaa4.rs:10:25\n   |\n10 |     let mut word_nums = HashMap::new();\n\
    \   |                         ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split_whitespace().map(|n| {\n        let mut num = String::new();\n\
    \        num.push_str(match n {\n            \"zero\" => \"0\",\n            \"\
    one\" => \"1\",\n            \"two\" => \"2\",\n            \"three\" => \"3\"\
    ,\n            \"four\" => \"4\",\n            \"five\" => \"5\",\n          \
    \  \"six\" => \"6\",\n            \"seven\" => \"7\",\n            \"eight\" =>\
    \ \"8\",\n            \"nine\" => \"9\",\n            _ => n,\n        });\n \
    \       num\n    });\n    nums.sort();\n    nums.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp5kddqso0.rs:24:10\n   |\n24 |     nums.sort();\n   |  \
    \        ^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmp5kddqso0.rs:7:51:\
    \ 23:6]>`\n\nerror[E0599]: no method named `join` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp5kddqso0.rs:25:10\n   |\n25 |     nums.join(\"\
    \ \")\n   |          ^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmp5kddqso0.rs:7:51:\
    \ 23:6]>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut chars:\
    \ Vec<char> = numbers.chars().collect();\n    let nums: Vec<&str> = \"zero one\
    \ two three four five six seven eight nine\".split(' ').collect();\n    let mut\
    \ vals: Vec<&str> = vec![];\n    let mut numers: Vec<u8> = vec![];\n    for i\
    \ in 0..chars.len() {\n        if chars[i] == ' ' {\n            chars[i] = '-';\n\
    \        }\n    }\n    let nums_str: String = chars.into_iter().collect();\n \
    \   let mut nums_split: Vec<&str> = nums_str.split('-').collect();\n    nums_split.sort();\n\
    \    for (i, num) in nums_split.iter().enumerate() {\n        for (j, name) in\
    \ nums.iter().enumerate() {\n            if num == name {\n                numers.push(j\
    \ as u8);\n            }\n        }\n    }\n    for num in numers {\n        vals.push(nums[num\
    \ as usize]);\n    }\n    let mut result: String = vals.join(\" \");\n    result.push('\
    \ ');\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" \"`,\n right: `\"\"`', /tmp/tmp6cppyfrx.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let nums\
    \ = numbers.split_whitespace();\n    let mut nums: Vec<_> = nums.map(|s| match\
    \ s {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n\
    \        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n   \
    \     \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n      \
    \  \"nine\" => 9,\n        _ => panic!(\"invalid numeral\"),\n    }).collect();\n\
    \    nums.sort();\n    nums.iter().map(|n| match n {\n        0 => \"zero\",\n\
    \        1 => \"one\",\n        2 => \"two\",\n        3 => \"three\",\n     \
    \   4 => \"four\",\n        5 => \"five\",\n        6 => \"six\",\n        7 =>\
    \ \"seven\",\n        8 => \"eight\",\n        9 => \"nine\",\n        _ => panic!(\"\
    invalid numeral\"),\n    }).collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut mapped:\
    \ Vec<String> = numbers\n        .split(\" \")\n        .map(|n| match n {\n \
    \           \"zero\" => String::from(\"0\"),\n            \"one\" => String::from(\"\
    1\"),\n            \"two\" => String::from(\"2\"),\n            \"three\" => String::from(\"\
    3\"),\n            \"four\" => String::from(\"4\"),\n            \"five\" => String::from(\"\
    5\"),\n            \"six\" => String::from(\"6\"),\n            \"seven\" => String::from(\"\
    7\"),\n            \"eight\" => String::from(\"8\"),\n            \"nine\" =>\
    \ String::from(\"9\"),\n            _ => String::from(\"\"),\n        })\n   \
    \     .collect();\n    mapped.sort();\n    let mut sorted: Vec<String> = mapped\n\
    \        .iter()\n        .map(|n| match n.as_str() {\n            \"0\" => String::from(\"\
    zero\"),\n            \"1\" => String::from(\"one\"),\n            \"2\" => String::from(\"\
    two\"),\n            \"3\" => String::from(\"three\"),\n            \"4\" => String::from(\"\
    four\"),\n            \"5\" => String::from(\"five\"),\n            \"6\" => String::from(\"\
    six\"),\n            \"7\" => String::from(\"seven\"),\n            \"8\" => String::from(\"\
    eight\"),\n            \"9\" => String::from(\"nine\"),\n            _ => String::from(\"\
    \"),\n        })\n        .collect();\n    sorted.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = numbers.split(' ').collect::<Vec<&str>>();\n    sorted.sort();\n    sorted.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpavjwohb5.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|x| match x {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid Input: {}\", x),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|x| match x {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid Number:\
    \ {}\", x),\n        })\n        .fold(String::new(), |acc, x| {\n           \
    \ if acc.is_empty() {\n                x.to_string()\n            } else {\n \
    \               format!(\"{} {}\", acc, x)\n            }\n        })\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let number_to_int\
    \ = |number: &str| match number {\n        \"zero\" => 0,\n        \"one\" =>\
    \ 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n\
    \        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n    \
    \    \"eight\" => 8,\n        \"nine\" => 9,\n        _ => panic!(\"invalid number:\
    \ {}\", number),\n    };\n\n    let int_to_number = |number: &u32| match number\
    \ {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\",\n  \
    \      3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n     \
    \   6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n        9\
    \ => \"nine\",\n        _ => panic!(\"invalid number: {}\", number),\n    };\n\
    \n    let numbers = numbers.split_whitespace().map(number_to_int).collect::<Vec<u32>>();\n\
    \    let mut numbers = numbers.clone();\n    numbers.sort();\n    numbers.iter().map(int_to_number).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut arr:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    unknown number {}\", n),\n        })\n        .collect();\n    arr.sort();\n \
    \   arr.iter()\n        .map(|n| match n {\n            0 => \"zero\",\n     \
    \       1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n\
    \            4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => panic!(\"unknown number {}\", n),\n        })\n\
    \        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut output:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    output.sort_by(|a, b| {\n        match a.as_str() {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Not a valid number\"),\n\
    \        }\n        .cmp(&match b.as_str() {\n            \"zero\" => 0,\n   \
    \         \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n\
    \            \"four\" => 4,\n            \"five\" => 5,\n            \"six\" =>\
    \ 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"\
    nine\" => 9,\n            _ => panic!(\"Not a valid number\"),\n        })\n \
    \   });\n    output.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split_whitespace().map(|s| match s {\n        \"zero\" => 0,\n   \
    \     \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"\
    four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\"\
    \ => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => panic!(\"\
    unknown number: {}\", s),\n    });\n    let mut sorted = nums.collect::<Vec<_>>();\n\
    \    sorted.sort();\n    sorted.iter().map(|n| numeral(*n)).collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral` in this scope\n  --> /tmp/tmpyh317k_2.rs:22:27\n\
    \   |\n22 |     sorted.iter().map(|n| numeral(*n)).collect::<Vec<_>>().join(\"\
    \ \")\n   |                           ^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split_whitespace();\n    let first = nums.next().unwrap();\n    let\
    \ second = nums.next().unwrap();\n    let third = nums.next().unwrap();\n\n  \
    \  let first_num = to_number(first);\n    let second_num = to_number(second);\n\
    \    let third_num = to_number(third);\n\n    let mut sorted = vec![first_num,\
    \ second_num, third_num];\n    sorted.sort();\n\n    let first_word = to_word(sorted[0]);\n\
    \    let second_word = to_word(sorted[1]);\n    let third_word = to_word(sorted[2]);\n\
    \n    let mut sorted_words = vec![first_word, second_word, third_word];\n    sorted_words.sort();\n\
    \n    sorted_words.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_number` in this scope\n  --> /tmp/tmpevjntl65.rs:12:21\n\
    \   |\n12 |     let first_num = to_number(first);\n   |                     ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `to_number` in\
    \ this scope\n  --> /tmp/tmpevjntl65.rs:13:22\n   |\n13 |     let second_num =\
    \ to_number(second);\n   |                      ^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `to_number` in this scope\n  --> /tmp/tmpevjntl65.rs:14:21\n\
    \   |\n14 |     let third_num = to_number(third);\n   |                     ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `to_word` in this\
    \ scope\n  --> /tmp/tmpevjntl65.rs:19:22\n   |\n19 |     let first_word = to_word(sorted[0]);\n\
    \   |                      ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `to_word` in this scope\n  --> /tmp/tmpevjntl65.rs:20:23\n   |\n\
    20 |     let second_word = to_word(sorted[1]);\n   |                       ^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `to_word` in this\
    \ scope\n  --> /tmp/tmpevjntl65.rs:21:22\n   |\n21 |     let third_word = to_word(sorted[2]);\n\
    \   |                      ^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut letters\
    \ = numbers.split_whitespace().map(|n| {\n        match n {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => 0,\n        }\n    });\n    let\
    \ mut sorted = letters.collect::<Vec<u8>>();\n    sorted.sort();\n    return sorted\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"\",\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut v:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n     \
    \   })\n        .collect();\n    v.sort();\n    v.iter()\n        .map(|i| match\
    \ i {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    zero\",\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut res:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  match num {\n            \"zero\" => res.push(0),\n            \"one\" => res.push(1),\n\
    \            \"two\" => res.push(2),\n            \"three\" => res.push(3),\n\
    \            \"four\" => res.push(4),\n            \"five\" => res.push(5),\n\
    \            \"six\" => res.push(6),\n            \"seven\" => res.push(7),\n\
    \            \"eight\" => res.push(8),\n            \"nine\" => res.push(9),\n\
    \            _ => panic!(\"Unknown numeral: {}\", num),\n        }\n    }\n  \
    \  res.sort();\n    let mut res_str = String::new();\n    for num in res {\n \
    \       res_str.push_str(stringify_number(num).as_str());\n        res_str.push('\
    \ ');\n    }\n    res_str.pop();\n    res_str\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `stringify_number` in this scope\n \
    \ --> /tmp/tmp0n2cu6gh.rs:26:26\n   |\n26 |         res_str.push_str(stringify_number(num).as_str());\n\
    \   |                          ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<i32> = vec![];\n    let numbers_split = numbers.split_whitespace();\n  \
    \  for i in numbers_split {\n        numbers_vec.push(number_convert(&i.to_string()));\n\
    \    }\n    numbers_vec.sort();\n    let mut answer = String::new();\n    for\
    \ i in numbers_vec {\n        answer.push_str(number_convert_back(&i.to_string()));\n\
    \        answer.push_str(\" \");\n    }\n    answer.pop();\n    answer\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_convert` in this scope\n  -->\
    \ /tmp/tmpc8xmnyz4.rs:10:26\n   |\n10 |         numbers_vec.push(number_convert(&i.to_string()));\n\
    \   |                          ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_convert_back` in this scope\n  --> /tmp/tmpc8xmnyz4.rs:15:25\n\
    \   |\n15 |         answer.push_str(number_convert_back(&i.to_string()));\n  \
    \ |                         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<&str> = numbers.split(' ').collect();\n    let mut sorted_numbers: Vec<&str>\
    \ = numbers.clone();\n    sorted_numbers.sort();\n    sorted_numbers.join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmprbaj0xxm.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split_whitespace().map(|x| match x {\n        \"zero\" => 0,\n   \
    \     \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"\
    four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\"\
    \ => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => unreachable!(),\n\
    \    });\n    let mut nums = nums.collect::<Vec<u8>>();\n    nums.sort();\n  \
    \  nums.iter()\n        .map(|&x| match x {\n            0 => \"zero\",\n    \
    \        1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => unreachable!(),\n        })\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `join` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpaeclr5vr.rs:36:10\n   |\n36 |         .join(\" \")\n  \
    \ |          ^^^^ method not found in `Map<std::slice::Iter<'_, u8>, [closure@/tmp/tmpaeclr5vr.rs:23:14:\
    \ 35:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ word_to_num(*a).cmp(&word_to_num(*b)));\n    numbers.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_num` in this scope\n --> /tmp/tmpjwwn6u1k.rs:8:28\n\
    \  |\n8 |     numbers.sort_by(|a, b| word_to_num(*a).cmp(&word_to_num(*b)));\n\
    \  |                            ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `word_to_num` in this scope\n --> /tmp/tmpjwwn6u1k.rs:8:49\n\
    \  |\n8 |     numbers.sort_by(|a, b| word_to_num(*a).cmp(&word_to_num(*b)));\n\
    \  |                                                 ^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number_list:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Unknown number\"),\n        })\n        .collect();\n    number_list.sort();\n\
    \    let numbers_str: Vec<String> = number_list\n        .iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Unknown number\"),\n        })\n        .map(|s| String::from(s))\n        .collect();\n\
    \    return numbers_str.join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|&a,\
    \ &b| numbers_map(a).cmp(&numbers_map(b)));\n    numbers.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numbers_map` in this scope\n --> /tmp/tmppx_uwf0m.rs:8:30\n\
    \  |\n8 |     numbers.sort_by(|&a, &b| numbers_map(a).cmp(&numbers_map(b)));\n\
    \  |                              ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numbers_map` in this scope\n --> /tmp/tmppx_uwf0m.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|&a, &b| numbers_map(a).cmp(&numbers_map(b)));\n\
    \  |                                                  ^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut digits:\
    \ Vec<u32> = Vec::new();\n    let mut strings: Vec<String> = Vec::new();\n   \
    \ let mut output: String = String::new();\n\n    for word in numbers.split_whitespace()\
    \ {\n        match word {\n            \"zero\" => digits.push(0),\n         \
    \   \"one\" => digits.push(1),\n            \"two\" => digits.push(2),\n     \
    \       \"three\" => digits.push(3),\n            \"four\" => digits.push(4),\n\
    \            \"five\" => digits.push(5),\n            \"six\" => digits.push(6),\n\
    \            \"seven\" => digits.push(7),\n            \"eight\" => digits.push(8),\n\
    \            \"nine\" => digits.push(9),\n            _ => panic!(\"Invalid number\
    \ string\"),\n        }\n    }\n\n    // Sort the digits\n    digits.sort();\n\
    \n    // Convert back to strings\n    for digit in digits {\n        match digit\
    \ {\n            0 => strings.push(String::from(\"zero\")),\n            1 =>\
    \ strings.push(String::from(\"one\")),\n            2 => strings.push(String::from(\"\
    two\")),\n            3 => strings.push(String::from(\"three\")),\n          \
    \  4 => strings.push(String::from(\"four\")),\n            5 => strings.push(String::from(\"\
    five\")),\n            6 => strings.push(String::from(\"six\")),\n           \
    \ 7 => strings.push(String::from(\"seven\")),\n            8 => strings.push(String::from(\"\
    eight\")),\n            9 => strings.push(String::from(\"nine\")),\n         \
    \   _ => panic!(\"Invalid digit value\"),\n        }\n    }\n\n    // Join the\
    \ strings with a single space\n    output = strings.join(\" \");\n\n    output\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut input:\
    \ Vec<u8> = numbers.split_whitespace().map(|s| get_number(s)).collect();\n   \
    \ input.sort();\n    input.iter().map(|n| get_number_string(*n)).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_number` in this scope\n --> /tmp/tmpfn4z0jmx.rs:7:65\n\
    \  |\n7 |     let mut input: Vec<u8> = numbers.split_whitespace().map(|s| get_number(s)).collect();\n\
    \  |                                                                 ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `get_number_string`\
    \ in this scope\n --> /tmp/tmpfn4z0jmx.rs:9:26\n  |\n9 |     input.iter().map(|n|\
    \ get_number_string(*n)).collect::<Vec<String>>().join(\" \")\n  |           \
    \               ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut vec:\
    \ Vec<usize> = Vec::new();\n    let number_to_index = |x: String| -> usize {\n\
    \        match x.as_str() {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"invalid number\"),\n        }\n    };\n    for x in numbers.split(\"\
    \ \") {\n        vec.push(number_to_index(String::from(x)));\n    }\n    vec.sort();\n\
    \    let index_to_number = |x: usize| -> String {\n        match x {\n       \
    \     0 => String::from(\"zero\"),\n            1 => String::from(\"one\"),\n\
    \            2 => String::from(\"two\"),\n            3 => String::from(\"three\"\
    ),\n            4 => String::from(\"four\"),\n            5 => String::from(\"\
    five\"),\n            6 => String::from(\"six\"),\n            7 => String::from(\"\
    seven\"),\n            8 => String::from(\"eight\"),\n            9 => String::from(\"\
    nine\"),\n            _ => panic!(\"invalid number\"),\n        }\n    };\n  \
    \  let mut ans = String::new();\n    for i in 0..vec.len() {\n        if i !=\
    \ 0 {\n            ans.push_str(\" \");\n        }\n        ans.push_str(index_to_number(vec[i]).as_str());\n\
    \    }\n    ans\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''invalid number'', /tmp/tmpielun90f.rs:20:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers_split:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    let mut numbers_vec: Vec<usize>\
    \ = vec![];\n    for number in numbers_split {\n        numbers_vec.push(translate_number(number));\n\
    \    }\n    numbers_vec.sort();\n    let mut numbers_sorted = String::new();\n\
    \    for number in numbers_vec {\n        numbers_sorted.push_str(translate_number_back(number));\n\
    \        numbers_sorted.push_str(\" \");\n    }\n    numbers_sorted\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `translate_number` in this scope\n \
    \ --> /tmp/tmp5eub_fb5.rs:10:26\n   |\n10 |         numbers_vec.push(translate_number(number));\n\
    \   |                          ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `translate_number_back` in this scope\n  --> /tmp/tmp5eub_fb5.rs:15:33\n\
    \   |\n15 |         numbers_sorted.push_str(translate_number_back(number));\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut ints:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|v| match v {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n     \
    \   })\n        .collect();\n    ints.sort();\n    ints.iter()\n        .map(|v|\
    \ match v {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    zero\",\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let number_map\
    \ = map_numbers();\n    let mut nums: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    let mut mapped_nums: Vec<usize> = Vec::new();\n    for num in nums.iter()\
    \ {\n        mapped_nums.push(number_map.get(num).unwrap());\n    }\n    mapped_nums.sort();\n\
    \    let mut sorted_nums: Vec<String> = Vec::new();\n    for num in mapped_nums.iter()\
    \ {\n        sorted_nums.push(number_map.get(num).unwrap().to_string());\n   \
    \ }\n    sorted_nums.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `map_numbers` in this scope\n --> /tmp/tmp21utl60t.rs:7:22\n\
    \  |\n7 |     let number_map = map_numbers();\n  |                      ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = Vec::new();\n    let mut numbers: Vec<String> = numbers.split_whitespace().map(String::from).collect();\n\
    \    let mut number_values: HashMap<String, u8> = HashMap::new();\n    number_values.insert(String::from(\"\
    zero\"), 0);\n    number_values.insert(String::from(\"one\"), 1);\n    number_values.insert(String::from(\"\
    two\"), 2);\n    number_values.insert(String::from(\"three\"), 3);\n    number_values.insert(String::from(\"\
    four\"), 4);\n    number_values.insert(String::from(\"five\"), 5);\n    number_values.insert(String::from(\"\
    six\"), 6);\n    number_values.insert(String::from(\"seven\"), 7);\n    number_values.insert(String::from(\"\
    eight\"), 8);\n    number_values.insert(String::from(\"nine\"), 9);\n\n    while\
    \ !numbers.is_empty() {\n        let mut min_index = 0;\n        let mut min_val\
    \ = number_values.get(&numbers[0]).unwrap();\n        for (index, number) in numbers.iter().enumerate()\
    \ {\n            let n = number_values.get(number).unwrap();\n            if n\
    \ < min_val {\n                min_index = index;\n                min_val = n;\n\
    \            }\n        }\n        sorted_numbers.push(*min_val);\n        numbers.remove(min_index);\n\
    \    }\n\n    let mut result = String::new();\n    for (index, number) in sorted_numbers.iter().enumerate()\
    \ {\n        let mut number_key: String = number_values\n            .iter()\n\
    \            .find(|&(_, v)| v == number)\n            .unwrap()\n           \
    \ .0\n            .clone();\n        if index > 0 {\n            result.push_str(\"\
    \ \");\n        }\n        result.push_str(&number_key);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpi5lh6_0i.rs:9:28\n\
    \  |\n9 |     let mut number_values: HashMap<String, u8> = HashMap::new();\n \
    \ |                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpi5lh6_0i.rs:9:50\n\
    \  |\n9 |     let mut number_values: HashMap<String, u8> = HashMap::new();\n \
    \ |                                                  ^^^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut integer_array:\
    \ Vec<i32> = Vec::new();\n    let numbers_array: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    for number in numbers_array {\n        match number {\n            \"zero\"\
    \ => integer_array.push(0),\n            \"one\" => integer_array.push(1),\n \
    \           \"two\" => integer_array.push(2),\n            \"three\" => integer_array.push(3),\n\
    \            \"four\" => integer_array.push(4),\n            \"five\" => integer_array.push(5),\n\
    \            \"six\" => integer_array.push(6),\n            \"seven\" => integer_array.push(7),\n\
    \            \"eight\" => integer_array.push(8),\n            \"nine\" => integer_array.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    integer_array.sort();\n\
    \    return sort_numbers_from_array(integer_array);\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_numbers_from_array` in this scope\n\
    \  --> /tmp/tmpyht86ccr.rs:25:12\n   |\n25 |     return sort_numbers_from_array(integer_array);\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // numbers.split_whitespace().map(|x|\
    \ numeral_to_i32(x)).collect()\n    let mut num_vec: Vec<i32> = Vec::new();\n\
    \    for s in numbers.split_whitespace() {\n        num_vec.push(numeral_to_i32(s));\n\
    \    }\n    num_vec.sort();\n    let mut sorted_num_vec: Vec<String> = Vec::new();\n\
    \    for num in num_vec {\n        sorted_num_vec.push(i32_to_numeral(num));\n\
    \    }\n    sorted_num_vec.join(\" \")\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_i32` in this scope\n  -->\
    \ /tmp/tmpzyrg8qg5.rs:10:22\n   |\n10 |         num_vec.push(numeral_to_i32(s));\n\
    \   |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `i32_to_numeral` in this scope\n  --> /tmp/tmpzyrg8qg5.rs:15:29\n\
    \   |\n15 |         sorted_num_vec.push(i32_to_numeral(num));\n   |          \
    \                   ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    num_vec.sort_by(|a, b| get_number(a) - get_number(b));\n    num_vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_number` in this scope\n --> /tmp/tmpcbt193ca.rs:8:28\n\
    \  |\n8 |     num_vec.sort_by(|a, b| get_number(a) - get_number(b));\n  |    \
    \                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `get_number` in this scope\n --> /tmp/tmpcbt193ca.rs:8:44\n  |\n\
    8 |     num_vec.sort_by(|a, b| get_number(a) - get_number(b));\n  |          \
    \                                  ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number_vec:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    invalid input\"),\n        })\n        .collect();\n    number_vec.sort();\n \
    \   number_vec\n        .iter()\n        .map(|n| match n {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => \"\",\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut words\
    \ = numbers.split(' ');\n    let mut nums: Vec<i32> = Vec::new();\n    while let\
    \ Some(word) = words.next() {\n        nums.push(match word {\n            \"\
    zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n         \
    \   \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid word {}\"\
    , word),\n        });\n    }\n    nums.sort();\n    let mut ret = String::new();\n\
    \    for num in nums {\n        ret.push_str(match num {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Invalid number {}\", num),\n\
    \        });\n        ret.push(' ');\n    }\n    ret.pop();\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid word '', /tmp/tmpubz2fsme.rs:21:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let options\
    \ = get_number_options();\n    let mut str_list: Vec<_> = numbers.split_whitespace().collect();\n\
    \    str_list.sort_by(|a, b| options.get(a).unwrap().cmp(options.get(b).unwrap()));\n\
    \    return str_list.join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_number_options` in this scope\n\
    \ --> /tmp/tmp1w_p6jia.rs:7:19\n  |\n7 |     let options = get_number_options();\n\
    \  |                   ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_split\
    \ = numbers.split(\" \");\n    let mut result: Vec<i32> = Vec::new();\n    for\
    \ number in numbers_split {\n        let n = match number {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => -1,\n        };\n        if n >\
    \ -1 {\n            result.push(n);\n        }\n    }\n    result.sort();\n  \
    \  result\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"\",\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .map(|numeral| numeral_to_digit(numeral))\n\
    \        .collect::<Vec<u32>>()\n        .sort();\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_digit` in this scope\n -->\
    \ /tmp/tmpnuqdcigx.rs:9:24\n  |\n9 |         .map(|numeral| numeral_to_digit(numeral))\n\
    \  |                        ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let digits\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"];\n    let nums: Vec<&str> = numbers.split(\" \").collect();\n\
    \    let mut result: Vec<&str> = Vec::new();\n    for &digit in digits.iter()\
    \ {\n        for &num in nums.iter() {\n            if num == digit {\n      \
    \          result.push(num);\n            }\n        }\n    }\n    result.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    use std::collections::HashMap;\n\
    \    use std::iter::FromIterator;\n\n    let mut map = HashMap::new();\n    map.insert(\"\
    zero\", 0);\n    map.insert(\"one\", 1);\n    map.insert(\"two\", 2);\n    map.insert(\"\
    three\", 3);\n    map.insert(\"four\", 4);\n    map.insert(\"five\", 5);\n   \
    \ map.insert(\"six\", 6);\n    map.insert(\"seven\", 7);\n    map.insert(\"eight\"\
    , 8);\n    map.insert(\"nine\", 9);\n\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split(' ')\n        .map(|num| *map.get(num).unwrap())\n        .collect();\n\
    \    numbers.sort();\n\n    let numbers: Vec<String> = numbers.iter().map(|num|\
    \ num.to_string()).collect();\n    String::from_iter(numbers)\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp8vn3z95c.rs:24:34

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut numbers_to_int:\
    \ Vec<usize> = vec![];\n    for num in numbers {\n        let current_num = match\
    \ num {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"\
    two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n       \
    \     \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n\
    \            \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        };\n        numbers_to_int.push(current_num);\n\
    \    }\n    numbers_to_int.sort();\n    let mut result = String::new();\n    for\
    \ num in numbers_to_int {\n        result.push_str(match num {\n            0\
    \ => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n       \
    \     3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n\
    \            6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\"\
    , num),\n        });\n        result.push(' ');\n    }\n    result.pop();\n  \
    \  result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> =\n        numbers\n            .split_whitespace()\n            .map(|s|\
    \ number_to_numeral(s.to_string()))\n            .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|n| numeral_to_number(*n))\n     \
    \   .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_numeral` in this scope\n\
    \  --> /tmp/tmp_b1cbjpt.rs:10:22\n   |\n10 |             .map(|s| number_to_numeral(s.to_string()))\n\
    \   |                      ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_number` in this scope\n  --> /tmp/tmp_b1cbjpt.rs:15:18\n\
    \   |\n15 |         .map(|n| numeral_to_number(*n))\n   |                  ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut values:\
    \ Vec<&str> = numbers.split(' ').collect();\n    values.sort();\n    let sorted:\
    \ String = values.join(\" \");\n    return sorted;\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpbsqh34i_.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|number| match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    let numbers: Vec<String> = numbers\n        .iter()\n        .map(|number|\
    \ match number {\n            0 => \"zero\",\n            1 => \"one\",\n    \
    \        2 => \"two\",\n            3 => \"three\",\n            4 => \"four\"\
    ,\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"\
    seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n          \
    \  _ => panic!(\"Invalid number\"),\n        })\n        .map(|number| String::from(number))\n\
    \        .collect();\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut vec:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut words: Vec<String>\
    \ = vec.iter().map(|n| numeral_to_word(n)).collect();\n    words.sort();\n   \
    \ let sorted: Vec<&str> = words.iter().map(|s| word_to_numeral(s)).collect();\n\
    \    return sorted.join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_word` in this scope\n -->\
    \ /tmp/tmp77cbrbum.rs:8:53\n  |\n8 |     let mut words: Vec<String> = vec.iter().map(|n|\
    \ numeral_to_word(n)).collect();\n  |                                        \
    \             ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `word_to_numeral` in this scope\n  --> /tmp/tmp77cbrbum.rs:10:50\n\
    \   |\n10 |     let sorted: Vec<&str> = words.iter().map(|s| word_to_numeral(s)).collect();\n\
    \   |                                                  ^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let input_numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut sorted_numbers:\
    \ Vec<u32> = Vec::new();\n\n    for number in input_numbers {\n        match number\
    \ {\n            \"zero\" => sorted_numbers.push(0),\n            \"one\" => sorted_numbers.push(1),\n\
    \            \"two\" => sorted_numbers.push(2),\n            \"three\" => sorted_numbers.push(3),\n\
    \            \"four\" => sorted_numbers.push(4),\n            \"five\" => sorted_numbers.push(5),\n\
    \            \"six\" => sorted_numbers.push(6),\n            \"seven\" => sorted_numbers.push(7),\n\
    \            \"eight\" => sorted_numbers.push(8),\n            \"nine\" => sorted_numbers.push(9),\n\
    \            _ => panic!(\"{} is not a valid number\"),\n        }\n    }\n\n\
    \    sorted_numbers.sort();\n\n    let mut output_numbers: Vec<String> = Vec::new();\n\
    \n    for number in sorted_numbers {\n        match number {\n            0 =>\
    \ output_numbers.push(String::from(\"zero\")),\n            1 => output_numbers.push(String::from(\"\
    one\")),\n            2 => output_numbers.push(String::from(\"two\")),\n     \
    \       3 => output_numbers.push(String::from(\"three\")),\n            4 => output_numbers.push(String::from(\"\
    four\")),\n            5 => output_numbers.push(String::from(\"five\")),\n   \
    \         6 => output_numbers.push(String::from(\"six\")),\n            7 => output_numbers.push(String::from(\"\
    seven\")),\n            8 => output_numbers.push(String::from(\"eight\")),\n \
    \           9 => output_numbers.push(String::from(\"nine\")),\n            _ =>\
    \ panic!(\"{} is not a valid number\"),\n        }\n    }\n\n    return output_numbers.join(\"\
    \ \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<String> = vec![];\n    let numbers: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    for number in numbers {\n        match number {\n            \"zero\" =>\
    \ sorted_numbers.push(String::from(\"zero\")),\n            \"one\" => sorted_numbers.push(String::from(\"\
    one\")),\n            \"two\" => sorted_numbers.push(String::from(\"two\")),\n\
    \            \"three\" => sorted_numbers.push(String::from(\"three\")),\n    \
    \        \"four\" => sorted_numbers.push(String::from(\"four\")),\n          \
    \  \"five\" => sorted_numbers.push(String::from(\"five\")),\n            \"six\"\
    \ => sorted_numbers.push(String::from(\"six\")),\n            \"seven\" => sorted_numbers.push(String::from(\"\
    seven\")),\n            \"eight\" => sorted_numbers.push(String::from(\"eight\"\
    )),\n            \"nine\" => sorted_numbers.push(String::from(\"nine\")),\n  \
    \          _ => sorted_numbers.push(String::from(\"error\")),\n        }\n   \
    \ }\n    sorted_numbers.sort();\n    let mut sorted_string = String::new();\n\
    \    for number in sorted_numbers {\n        sorted_string = format!(\"{} {}\"\
    , sorted_string, number);\n    }\n    sorted_string.trim().to_string()\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpyvbix_am.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<i32> = vec![];\n    for number in numbers.split_whitespace() {\n       \
    \ sorted_numbers.push(string_to_number(number.to_string()));\n    }\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| number_to_string(n.clone()))\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `string_to_number` in this scope\n -->\
    \ /tmp/tmpx5jmkcpw.rs:9:29\n  |\n9 |         sorted_numbers.push(string_to_number(number.to_string()));\n\
    \  |                             ^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `number_to_string` in this scope\n  --> /tmp/tmpx5jmkcpw.rs:14:18\n\
    \   |\n14 |         .map(|n| number_to_string(n.clone()))\n   |              \
    \    ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Split\
    \ the numbers into a Vec<String>\n    let number_strs: Vec<String> = numbers.split(\"\
    \ \").map(|s| s.to_string()).collect();\n\n    // Parse the number strings as\
    \ a Vec<usize>\n    let mut number_ints: Vec<usize> = Vec::new();\n    for num_str\
    \ in number_strs {\n        match number_to_usize(&num_str) {\n            Some(num_int)\
    \ => number_ints.push(num_int),\n            None => return String::from(\"error\"\
    )\n        }\n    }\n\n    // Sort the ints\n    number_ints.sort();\n\n    //\
    \ Turn the ints back into Strings\n    let mut result: Vec<String> = Vec::new();\n\
    \    for num_int in number_ints {\n        result.push(number_to_string(num_int));\n\
    \    }\n\n    // Join the resulting strings into a single string\n    result.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_usize` in this scope\n  -->\
    \ /tmp/tmp39g2cgbg.rs:13:15\n   |\n13 |         match number_to_usize(&num_str)\
    \ {\n   |               ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_string` in this scope\n  --> /tmp/tmp39g2cgbg.rs:25:21\n\
    \   |\n25 |         result.push(number_to_string(num_int));\n   |            \
    \         ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number_int_vector:\
    \ Vec<i64> = Vec::new();\n    let mut mapped_numbers = Vec::new();\n    let number_list:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    for i in number_list\
    \ {\n        match i {\n            \"zero\" => {\n                number_int_vector.push(0);\n\
    \                mapped_numbers.push(i);\n            }\n            \"one\" =>\
    \ {\n                number_int_vector.push(1);\n                mapped_numbers.push(i);\n\
    \            }\n            \"two\" => {\n                number_int_vector.push(2);\n\
    \                mapped_numbers.push(i);\n            }\n            \"three\"\
    \ => {\n                number_int_vector.push(3);\n                mapped_numbers.push(i);\n\
    \            }\n            \"four\" => {\n                number_int_vector.push(4);\n\
    \                mapped_numbers.push(i);\n            }\n            \"five\"\
    \ => {\n                number_int_vector.push(5);\n                mapped_numbers.push(i);\n\
    \            }\n            \"six\" => {\n                number_int_vector.push(6);\n\
    \                mapped_numbers.push(i);\n            }\n            \"seven\"\
    \ => {\n                number_int_vector.push(7);\n                mapped_numbers.push(i);\n\
    \            }\n            \"eight\" => {\n                number_int_vector.push(8);\n\
    \                mapped_numbers.push(i);\n            }\n            \"nine\"\
    \ => {\n                number_int_vector.push(9);\n                mapped_numbers.push(i);\n\
    \            }\n            _ => {}\n        }\n    }\n    number_int_vector.sort();\n\
    \    let mut str: String = String::new();\n    for i in number_int_vector {\n\
    \        for j in mapped_numbers.iter() {\n            match j {\n           \
    \     \"zero\" => {\n                    if i == 0 {\n                       \
    \ str.push_str(j);\n                        str.push_str(\" \");\n           \
    \         }\n                }\n                \"one\" => {\n               \
    \     if\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9gcfjbna.rs:77:3\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n...\n57 |     for i in number_int_vector\
    \ {\n   |                                - unclosed delimiter\n58 |         for\
    \ j in mapped_numbers.iter() {\n   |                                        -\
    \ unclosed delimiter\n59 |             match j {\n   |                     - unclosed\
    \ delimiter\n...\n66 |                 \"one\" => {\n   |                    \
    \      - this delimiter might not be properly closed...\n67 |                \
    \     if\n68 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n77 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmp9gcfjbna.rs:68:1\n\
    \   |\n68 | }\n   | ^ expected expression\n\nerror: expected identifier, found\
    \ keyword `fn`\n  --> /tmp/tmp9gcfjbna.rs:70:1\n   |\n70 | fn main() {\n   | ^^\
    \ expected identifier, found keyword\n\nerror: expected one of `=>`, `@`, `if`,\
    \ or `|`, found `main`\n  --> /tmp/tmp9gcfjbna.rs:70:4\n   |\n70 | fn main() {\n\
    \   |    ^^^^ expected one of `=>`, `@`, `if`, or `|`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9gcfjbna.rs:60:17\n   |\n59 |             match j {\n \
    \  |                   - this expression has type `&&str`\n60 |              \
    \   \"zero\" => {\n   |                 ^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9gcfjbna.rs:66:17\n  \
    \ |\n59 |             match j {\n   |                   - this expression has\
    \ type `&&str`\n...\n66 |                 \"one\" => {\n   |                 ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9gcfjbna.rs:57:5\n   |\n6  |   fn sort_numbers(numbers: String)\
    \ -> String {\n   |                                       ------ expected `String`\
    \ because of return type\n...\n57 | /     for i in number_i"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    let mut result: Vec<u8> = Vec::new();\n    for number in numbers {\n    \
    \    result.push(convert_number_to_u8(number));\n    }\n    result.sort();\n \
    \   let mut result: Vec<String> = result.iter().map(|n| convert_u8_to_number(*n)).collect();\n\
    \    result.sort();\n    let result: String = result.join(\" \");\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `convert_number_to_u8` in this scope\n\
    \  --> /tmp/tmpssnlnntx.rs:10:21\n   |\n10 |         result.push(convert_number_to_u8(number));\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `convert_u8_to_number` in this scope\n  --> /tmp/tmpssnlnntx.rs:13:57\n\
    \   |\n13 |     let mut result: Vec<String> = result.iter().map(|n| convert_u8_to_number(*n)).collect();\n\
    \   |                                                         ^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut v\
    \ = vec![];\n    for s in numbers.split_whitespace() {\n        v.push(s);\n \
    \   }\n    v.sort();\n    let mut ret = String::new();\n    for s in v {\n   \
    \     ret.push_str(s);\n        ret.push(' ');\n    }\n    ret.pop();\n    ret\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpn1s2xrfc.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut v:\
    \ Vec<usize> = Vec::new();\n    for num in numbers.split_whitespace() {\n    \
    \    match num {\n            \"zero\" => v.push(0),\n            \"one\" => v.push(1),\n\
    \            \"two\" => v.push(2),\n            \"three\" => v.push(3),\n    \
    \        \"four\" => v.push(4),\n            \"five\" => v.push(5),\n        \
    \    \"six\" => v.push(6),\n            \"seven\" => v.push(7),\n            \"\
    eight\" => v.push(8),\n            \"nine\" => v.push(9),\n            _ => panic!(\"\
    Invalid numeral: {}\", num),\n        }\n    }\n    let mut sorted = v.clone();\n\
    \    sorted.sort();\n    let mut output = String::new();\n    for i in sorted\
    \ {\n        output += \" \";\n        output += &match i {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral: {}\"\
    , i),\n        };\n    }\n    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" three\"`,\n right: `\"three\"`', /tmp/tmp_rd0tdbs.rs:48:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|number| string_to_number(number))\n\
    \        .collect();\n    let mut sorted = numbers.clone();\n    sorted.sort();\n\
    \    return sorted\n        .iter()\n        .map(|number| number_to_string(*number))\n\
    \        .collect::<Vec<String>>()\n        .join(\" \");\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `string_to_number` in this scope\n -->\
    \ /tmp/tmp74hh3_ir.rs:9:23\n  |\n9 |         .map(|number| string_to_number(number))\n\
    \  |                       ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_string` in this scope\n  --> /tmp/tmp74hh3_ir.rs:15:23\n\
    \   |\n15 |         .map(|number| number_to_string(*number))\n   |           \
    \            ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number_vec:\
    \ Vec<u8> = vec![];\n    let input_vec: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    for n in input_vec {\n        match n {\n            \"zero\" => number_vec.push(0),\n\
    \            \"one\" => number_vec.push(1),\n            \"two\" => number_vec.push(2),\n\
    \            \"three\" => number_vec.push(3),\n            \"four\" => number_vec.push(4),\n\
    \            \"five\" => number_vec.push(5),\n            \"six\" => number_vec.push(6),\n\
    \            \"seven\" => number_vec.push(7),\n            \"eight\" => number_vec.push(8),\n\
    \            \"nine\" => number_vec.push(9),\n            _ => continue,\n   \
    \     }\n    }\n    number_vec.sort();\n    let output_vec: Vec<String> = number_vec\n\
    \        .iter()\n        .map(|x| match x {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"\",\n        })\n        .map(String::from)\n\
    \        .collect();\n    output_vec.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ number_from_string(a).cmp(&number_from_string(b)));\n    numbers.join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_from_string` in this scope\n\
    \ --> /tmp/tmpfb0u71jr.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_from_string(a).cmp(&number_from_string(b)));\n\
    \  |                            ^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `number_from_string` in this scope\n --> /tmp/tmpfb0u71jr.rs:8:55\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_from_string(a).cmp(&number_from_string(b)));\n\
    \  |                                                       ^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Split\
    \ input into vector of strings\n    let mut split_numbers: Vec<&str> = numbers.split(\"\
    \ \").collect();\n\n    // Convert vector of strings to vector of u8s\n    let\
    \ mut num_vec: Vec<u8> = Vec::new();\n    for num in split_numbers.drain(..) {\n\
    \        num_vec.push(string_to_u8(num));\n    }\n\n    // Sort vector of u8s\n\
    \    num_vec.sort();\n\n    // Convert vector of u8s to space-delimited string\
    \ of numberals from 'zero' to 'nine'\n    let mut sorted_numbers: String = \"\"\
    .to_string();\n    for num in num_vec.drain(..) {\n        sorted_numbers = sorted_numbers\
    \ + \" \" + &u8_to_string(num);\n    }\n\n    sorted_numbers.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `string_to_u8` in this scope\n  -->\
    \ /tmp/tmpt6gk44uk.rs:13:22\n   |\n13 |         num_vec.push(string_to_u8(num));\n\
    \   |                      ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `u8_to_string` in this scope\n  --> /tmp/tmpt6gk44uk.rs:22:50\n\
    \   |\n22 |         sorted_numbers = sorted_numbers + \" \" + &u8_to_string(num);\n\
    \   |                                                  ^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = Vec::new();\n    for num in numbers.split_whitespace() {\n        sorted.push(word_to_numeral(num))\n\
    \    }\n    sorted.sort();\n    let mut result = String::new();\n    for num in\
    \ sorted {\n        result.push_str(&numeral_to_word(num));\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_numeral` in this scope\n -->\
    \ /tmp/tmpoqmukjmq.rs:9:21\n  |\n9 |         sorted.push(word_to_numeral(num))\n\
    \  |                     ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_word` in this scope\n  --> /tmp/tmpoqmukjmq.rs:14:26\n\
    \   |\n14 |         result.push_str(&numeral_to_word(num));\n   |            \
    \              ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut my_vec:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    my_vec.sort();\n    my_vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpckuibv76.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = vec![];\n    for number in numbers.split(\" \") {\n        match\
    \ number {\n            \"zero\" => sorted_numbers.push(0),\n            \"one\"\
    \ => sorted_numbers.push(1),\n            \"two\" => sorted_numbers.push(2),\n\
    \            \"three\" => sorted_numbers.push(3),\n            \"four\" => sorted_numbers.push(4),\n\
    \            \"five\" => sorted_numbers.push(5),\n            \"six\" => sorted_numbers.push(6),\n\
    \            \"seven\" => sorted_numbers.push(7),\n            \"eight\" => sorted_numbers.push(8),\n\
    \            \"nine\" => sorted_numbers.push(9),\n            _ => sorted_numbers.push(999),\n\
    \        }\n    }\n    sorted_numbers.sort();\n    let mut output = String::new();\n\
    \    for number in sorted_numbers {\n        match number {\n            0 =>\
    \ output.push_str(\"zero \"),\n            1 => output.push_str(\"one \"),\n \
    \           2 => output.push_str(\"two \"),\n            3 => output.push_str(\"\
    three \"),\n            4 => output.push_str(\"four \"),\n            5 => output.push_str(\"\
    five \"),\n            6 => output.push_str(\"six \"),\n            7 => output.push_str(\"\
    seven \"),\n            8 => output.push_str(\"eight \"),\n            9 => output.push_str(\"\
    nine \"),\n            _ => (),\n        }\n    }\n    output.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Expected the string to be one of these: 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\"),\n        })\n        .collect();\n\
    \    numbers.sort();\n    let mut sorted_numbers = String::new();\n    for num\
    \ in numbers {\n        match num {\n            0 => sorted_numbers.push_str(\"\
    zero \"),\n            1 => sorted_numbers.push_str(\"one \"),\n            2\
    \ => sorted_numbers.push_str(\"two \"),\n            3 => sorted_numbers.push_str(\"\
    three \"),\n            4 => sorted_numbers.push_str(\"four \"),\n           \
    \ 5 => sorted_numbers.push_str(\"five \"),\n            6 => sorted_numbers.push_str(\"\
    six \"),\n            7 => sorted_numbers.push_str(\"seven \"),\n            8\
    \ => sorted_numbers.push_str(\"eight \"),\n            9 => sorted_numbers.push_str(\"\
    nine \"),\n            _ => (),\n        }\n    }\n    sorted_numbers.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<i32> = Vec::new();\n    for numeral in numbers.split_whitespace() {\n  \
    \      match numeral {\n            \"zero\" => sorted_numbers.push(0),\n    \
    \        \"one\" => sorted_numbers.push(1),\n            \"two\" => sorted_numbers.push(2),\n\
    \            \"three\" => sorted_numbers.push(3),\n            \"four\" => sorted_numbers.push(4),\n\
    \            \"five\" => sorted_numbers.push(5),\n            \"six\" => sorted_numbers.push(6),\n\
    \            \"seven\" => sorted_numbers.push(7),\n            \"eight\" => sorted_numbers.push(8),\n\
    \            \"nine\" => sorted_numbers.push(9),\n            _ => (),\n     \
    \   }\n    }\n    sorted_numbers.sort();\n    let mut result: String = String::new();\n\
    \    for num in sorted_numbers {\n        match num {\n            0 => result.push_str(\"\
    zero \"),\n            1 => result.push_str(\"one \"),\n            2 => result.push_str(\"\
    two \"),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => (),\n\
    \        }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut mapped_numbers:\
    \ Vec<String> = Vec::new();\n    let num_map = build_num_map();\n    let numbers:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    for n in numbers {\n      \
    \  mapped_numbers.push(num_map.get(n).unwrap().to_string());\n    }\n    mapped_numbers.sort();\n\
    \    let mut output = String::new();\n    for n in mapped_numbers {\n        output.push_str(num_map.get(&n.parse::<i32>().unwrap()).unwrap());\n\
    \        output.push_str(\" \");\n    }\n    output.pop();\n    output\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `build_num_map` in this scope\n -->\
    \ /tmp/tmplt24pr4c.rs:8:19\n  |\n8 |     let num_map = build_num_map();\n  | \
    \                  ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpod2m8kub.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|&n| match n {\n            0 => \"zero\",\n            1 => \"\
    one\",\n            2 => \"two\",\n            3 => \"three\",\n            4\
    \ => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n      \
    \      7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut v:\
    \ Vec<i64> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    unknown number\"),\n        })\n        .collect();\n    v.sort();\n    let mut\
    \ result = String::new();\n    for num in v {\n        result.push_str(match num\
    \ {\n            0 => \"zero\",\n            1 => \"one\",\n            2 => \"\
    two\",\n            3 => \"three\",\n            4 => \"four\",\n            5\
    \ => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n     \
    \       8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    unknown number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for i in numbers.split(\" \") {\n        match i\
    \ {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => (),\n        }\n    }\n    nums.sort();\n    let mut words:\
    \ Vec<String> = Vec::new();\n    for i in nums {\n        match i {\n        \
    \    0 => words.push(String::from(\"zero\")),\n            1 => words.push(String::from(\"\
    one\")),\n            2 => words.push(String::from(\"two\")),\n            3 =>\
    \ words.push(String::from(\"three\")),\n            4 => words.push(String::from(\"\
    four\")),\n            5 => words.push(String::from(\"five\")),\n            6\
    \ => words.push(String::from(\"six\")),\n            7 => words.push(String::from(\"\
    seven\")),\n            8 => words.push(String::from(\"eight\")),\n          \
    \  9 => words.push(String::from(\"nine\")),\n            _ => (),\n        }\n\
    \    }\n    words.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut ns:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|n| NUMBERS[n])\n\
    \        .collect();\n    ns.sort();\n    ns.iter()\n        .map(|&n| NUMBERS.iter().find(|&(_,\
    \ &v)| v == n).unwrap().0)\n        .collect::<Vec<_>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `NUMBERS` in this scope\n --> /tmp/tmps2tj7fb7.rs:9:18\n\
    \  |\n9 |         .map(|n| NUMBERS[n])\n  |                  ^^^^^^^ help: a local\
    \ variable with a similar name exists: `numbers`\n\nerror[E0425]: cannot find\
    \ value `NUMBERS` in this scope\n  --> /tmp/tmps2tj7fb7.rs:13:19\n   |\n13 | \
    \        .map(|&n| NUMBERS.iter().find(|&(_, &v)| v == n).unwrap().0)\n   |  \
    \                 ^^^^^^^ help: a local variable with a similar name exists: `numbers`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // unwrap\
    \ the numbers from the string and sort the numbers\n    let mut numbers: Vec<u32>\
    \ = numbers\n        .split_whitespace()\n        .map(|s| String::from(s))\n\
    \        .map(|s| String::from(s))\n        .map(|s| get_number_from_word(s))\n\
    \        .collect();\n    numbers.sort();\n\n    // map numbers to words and join\
    \ them into a string\n    numbers\n        .iter()\n        .map(|num| get_word_from_number(*num))\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_number_from_word` in this scope\n\
    \  --> /tmp/tmpg_kszax8.rs:12:18\n   |\n12 |         .map(|s| get_number_from_word(s))\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `get_word_from_number` in this scope\n  --> /tmp/tmpg_kszax8.rs:19:20\n\
    \   |\n19 |         .map(|num| get_word_from_number(*num))\n   |             \
    \       ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let sorted_number_string\
    \ = numbers\n        .split_whitespace()\n        .map(|numeral| numberal_to_number(numeral))\n\
    \        .collect::<Vec<u8>>()\n        .iter()\n        .sorted()\n        .map(|number|\
    \ number_to_numeral(*number))\n        .collect::<Vec<String>>()\n        .join(\"\
    \ \");\n\n    sorted_number_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numberal_to_number` in this scope\n\
    \ --> /tmp/tmpm41jok67.rs:9:24\n  |\n9 |         .map(|numeral| numberal_to_number(numeral))\n\
    \  |                        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_numeral` in this scope\n  --> /tmp/tmpm41jok67.rs:13:23\n\
    \   |\n13 |         .map(|number| number_to_numeral(*number))\n   |          \
    \             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `sorted` found for struct `std::slice::Iter` in the current scope\n  -->\
    \ /tmp/tmpm41jok67.rs:12:10\n   |\n12 |         .sorted()\n   |          ^^^^^^\
    \ method not found in `std::slice::Iter<'_, u8>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number_list:\
    \ Vec<String> = numbers.split(\" \").map(|x| x.to_string()).collect();\n    number_list.sort_by(|a,\
    \ b| {\n        let nums: HashMap<&str, i32> = [\n            (\"zero\", 0),\n\
    \            (\"one\", 1),\n            (\"two\", 2),\n            (\"three\"\
    , 3),\n            (\"four\", 4),\n            (\"five\", 5),\n            (\"\
    six\", 6),\n            (\"seven\", 7),\n            (\"eight\", 8),\n       \
    \     (\"nine\", 9),\n        ]\n        .iter()\n        .cloned()\n        .collect();\n\
    \        nums[a]\n            .cmp(&nums[b])\n            .then(b.cmp(&a))\n \
    \           .then(b.cmp(&a))\n            .then(b.cmp(&a))\n            .then(b.cmp(&a))\n\
    \            .then(b.cmp(&a))\n            .then(b.cmp(&a))\n            .then(b.cmp(&a))\n\
    \            .then(b.cmp(&a))\n            .then(b.cmp(&a))\n    });\n    number_list.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpay4qa8tm.rs:9:19\n\
    \  |\n9 |         let nums: HashMap<&str, i32> = [\n  |                   ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = vec![];\n    for num in numbers.split_whitespace() {\n        result.push(word_to_numeral(num));\n\
    \    }\n    result.sort();\n    result.iter().map(|&n| numeral_to_word(n)).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_numeral` in this scope\n -->\
    \ /tmp/tmpckcv79hk.rs:9:21\n  |\n9 |         result.push(word_to_numeral(num));\n\
    \  |                     ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_word` in this scope\n  --> /tmp/tmpckcv79hk.rs:12:28\n\
    \   |\n12 |     result.iter().map(|&n| numeral_to_word(n)).collect::<Vec<String>>().join(\"\
    \ \")\n   |                            ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let tokenized_numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut numbers_as_ints:\
    \ Vec<i32> = Vec::new();\n    for &number in tokenized_numbers.iter() {\n    \
    \    numbers_as_ints.push(match number {\n            \"zero\" => 0,\n       \
    \     \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n\
    \            \"four\" => 4,\n            \"five\" => 5,\n            \"six\" =>\
    \ 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"\
    nine\" => 9,\n            _ => panic!(\"Invalid token: {}\", number),\n      \
    \  });\n    }\n    numbers_as_ints.sort();\n    let mut res = String::new();\n\
    \    for num in numbers_as_ints.iter() {\n        res.push_str(match num {\n \
    \           0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ token: {}\", num),\n        });\n        res.push(' ');\n    }\n    res.pop();\n\
    \    res\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = false;\n    let mut nums = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    while !sorted {\n        sorted = true;\n        for i in 0..nums.len()-1\
    \ {\n            if nums[i] > nums[i+1] {\n                nums.swap(i, i+1);\n\
    \                sorted = false;\n            }\n        }\n    }\n    nums.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpofy_edon.rs:11:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for n in numbers.split_whitespace() {\n        match\
    \ n {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"unknown number name\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut ret = String::new();\n    for n in nums {\n        match n {\n  \
    \          0 => ret.push_str(\"zero \"),\n            1 => ret.push_str(\"one\
    \ \"),\n            2 => ret.push_str(\"two \"),\n            3 => ret.push_str(\"\
    three \"),\n            4 => ret.push_str(\"four \"),\n            5 => ret.push_str(\"\
    five \"),\n            6 => ret.push_str(\"six \"),\n            7 => ret.push_str(\"\
    seven \"),\n            8 => ret.push_str(\"eight \"),\n            9 => ret.push_str(\"\
    nine \"),\n            _ => panic!(\"can't parse number name\"),\n        }\n\
    \    }\n    ret.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number_words\
    \ = numbers.split_whitespace().collect::<Vec<&str>>();\n    number_words.sort_by(|a,\
    \ b| {\n        match numeral_to_number(a) {\n            Ok(a_number) => match\
    \ numeral_to_number(b) {\n                Ok(b_number) => a_number.cmp(&b_number),\n\
    \                Err(_) => b.cmp(a),\n            },\n            Err(_) => a.cmp(b),\n\
    \        }\n    });\n    number_words.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \ --> /tmp/tmpmgk7gby7.rs:9:15\n  |\n9 |         match numeral_to_number(a) {\n\
    \  |               ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_number` in this scope\n  --> /tmp/tmpmgk7gby7.rs:10:35\n\
    \   |\n10 |             Ok(a_number) => match numeral_to_number(b) {\n   |   \
    \                                ^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> =\n        numbers\n            .split_whitespace()\n            .map(|n|\
    \ match n {\n                \"zero\" => 0,\n                \"one\" => 1,\n \
    \               \"two\" => 2,\n                \"three\" => 3,\n             \
    \   \"four\" => 4,\n                \"five\" => 5,\n                \"six\" =>\
    \ 6,\n                \"seven\" => 7,\n                \"eight\" => 8,\n     \
    \           \"nine\" => 9,\n                _ => panic!(\"invalid numberal\"),\n\
    \            })\n            .collect();\n    numbers.sort();\n    numbers\n \
    \       .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n    \
    \        1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"invalid numberal\"),\n        })\n\
    \        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut vector\
    \ = numbers.split_whitespace().map(|n| match n {\n        \"zero\" => 0,\n   \
    \     \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"\
    four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\"\
    \ => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => panic!(\"\
    Not a valid number!\"),\n    }).collect::<Vec<_>>();\n    vector.sort();\n   \
    \ vector.iter().map(|n| match n {\n        0 => \"zero\",\n        1 => \"one\"\
    ,\n        2 => \"two\",\n        3 => \"three\",\n        4 => \"four\",\n  \
    \      5 => \"five\",\n        6 => \"six\",\n        7 => \"seven\",\n      \
    \  8 => \"eight\",\n        9 => \"nine\",\n        _ => panic!(\"Not a valid\
    \ number!\"),\n    }).collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    numbers.sort_by(|a, b| match (a.as_str(), b.as_str()) {\n        (\"zero\"\
    , \"zero\") => Ordering::Equal,\n        (\"zero\", _) => Ordering::Less,\n  \
    \      (_, \"zero\") => Ordering::Greater,\n        (\"one\", \"one\") => Ordering::Equal,\n\
    \        (\"one\", _) => Ordering::Less,\n        (_, \"one\") => Ordering::Greater,\n\
    \        (\"two\", \"two\") => Ordering::Equal,\n        (\"two\", _) => Ordering::Less,\n\
    \        (_, \"two\") => Ordering::Greater,\n        (\"three\", \"three\") =>\
    \ Ordering::Equal,\n        (\"three\", _) => Ordering::Less,\n        (_, \"\
    three\") => Ordering::Greater,\n        (\"four\", \"four\") => Ordering::Equal,\n\
    \        (\"four\", _) => Ordering::Less,\n        (_, \"four\") => Ordering::Greater,\n\
    \        (\"five\", \"five\") => Ordering::Equal,\n        (\"five\", _) => Ordering::Less,\n\
    \        (_, \"five\") => Ordering::Greater,\n        (\"six\", \"six\") => Ordering::Equal,\n\
    \        (\"six\", _) => Ordering::Less,\n        (_, \"six\") => Ordering::Greater,\n\
    \        (\"seven\", \"seven\") => Ordering::Equal,\n        (\"seven\", _) =>\
    \ Ordering::Less,\n        (_, \"seven\") => Ordering::Greater,\n        (\"eight\"\
    , \"eight\") => Ordering::Equal,\n        (\"eight\", _) => Ordering::Less,\n\
    \        (_, \"eight\") => Ordering::Greater,\n        (\"nine\", \"nine\") =>\
    \ Ordering::Equal,\n        (\"nine\", _) => Ordering::Less,\n        (_, \"nine\"\
    ) => Ordering::Greater,\n        (_, _) => Ordering::Equal,\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmpdgyvj4dq.rs:9:29\n  |\n9 |         (\"zero\", \"zero\") => Ordering::Equal,\n\
    \  |                             ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpdgyvj4dq.rs:10:24\n\
    \   |\n10 |         (\"zero\", _) => Ordering::Less,\n   |                   \
    \     ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpdgyvj4dq.rs:11:24\n   |\n11\
    \ |         (_, \"zero\") => Ordering::Greater,\n   |                        ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpdgyvj4dq.rs:12:27\n   |\n12 |    \
    \     (\"one\", \"one\") => Ordering::Equal,\n   |                           ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpdgyvj4dq.rs:13:23\n   |\n13 |    \
    \     (\"one\", _) => Ordering::Less,\n   |                       ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Ordering`\n  --> /tmp/tmpdgyvj4dq.rs:14:23\n   |\n14 |         (_, \"\
    one\") => Ordering::Greater,\n   |                       ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpdgyvj4dq.rs:15:27\n   |\n15 |         (\"two\", \"two\") => Ordering::Equal,\n\
    \   |                           ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpdgyvj4dq.rs:16:23\n\
    \   |\n16 |         (\"two\", _) => Ordering::Less,\n   |                    \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpdgyvj4dq.rs:17:23\n   |\n17\
    \ |         (_, \"two\") => Ordering::Greater,\n   |                       ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undecla"
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split(' ')\n        .map(|s| s.parse::<u8>().unwrap())\n        .collect::<Vec<u8>>()\n\
    \        .sort();\n    String::from(\"one three five\")\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: Empty }'', /tmp/tmpiacg4mis.rs:9:34

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut vec\
    \ = numbers.split_whitespace().map(|word| match word {\n        \"zero\" => 0,\n\
    \        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n     \
    \   \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"\
    seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => panic!(\"\
    Not a valid numberal\"),\n    }).collect::<Vec<u8>>();\n    vec.sort();\n    vec.iter().map(|num|\
    \ match num {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"\
    two\",\n        3 => \"three\",\n        4 => \"four\",\n        5 => \"five\"\
    ,\n        6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n \
    \       9 => \"nine\",\n        _ => panic!(\"Not a valid numberal\"),\n    }).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut digits:\
    \ Vec<usize> = Vec::new();\n    for numeral in numbers.split_whitespace() {\n\
    \        match numeral {\n            \"zero\" => digits.push(0),\n          \
    \  \"one\" => digits.push(1),\n            \"two\" => digits.push(2),\n      \
    \      \"three\" => digits.push(3),\n            \"four\" => digits.push(4),\n\
    \            \"five\" => digits.push(5),\n            \"six\" => digits.push(6),\n\
    \            \"seven\" => digits.push(7),\n            \"eight\" => digits.push(8),\n\
    \            \"nine\" => digits.push(9),\n            _ => panic!(\"invalid numeral\"\
    ),\n        }\n    }\n    digits.sort();\n    let mut numeral_string = String::new();\n\
    \    for digit in digits {\n        numeral_string.push_str(match digit {\n  \
    \          0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"invalid\
    \ digit\"),\n        });\n        numeral_string.push(' ');\n    }\n    numeral_string.pop();\n\
    \    numeral_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<&str> = numbers.split(' ').collect();\n    let mut values: Vec<usize> =\
    \ Vec::new();\n    for x in numbers {\n        values.push(match x {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"{} is not\
    \ a valid number\"),\n        });\n    }\n    values.sort();\n    let mut output\
    \ = String::new();\n    for x in values {\n        output.push_str(match x {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"{} is not\
    \ a valid number\"),\n        });\n        output.push(' ');\n    }\n    output.pop();\n\
    \    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''{} is not a valid number'', /tmp/tmp5f79u037.rs:21:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split(' ')\n        .map(|number| match number\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", number),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|number| match number {\n        \
    \    0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n  \
    \          3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number:\
    \ {}\", number),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid number: '', /tmp/tmp28b1up4e.rs:20:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(String::from).collect();\n    numbers.sort();\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpakrl6rhm.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|x| x.parse::<u32>().unwrap())\n\
    \        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n       \
    \ .iter()\n        .map(|x| x.to_string())\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpvi5jty1y.rs:9:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split_whitespace().map(|word| {\n        match word {\n          \
    \  \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n    \
    \        \"three\" => 3,\n            \"four\" => 4,\n            \"five\" =>\
    \ 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => 0,\n        }\n    });\n\
    \    let mut sorted = nums.collect::<Vec<u32>>();\n    sorted.sort();\n    format!(\"\
    {}\", sorted.iter().map(|x| translate(*x)).collect::<Vec<String>>().join(\" \"\
    ))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `translate` in this scope\n  --> /tmp/tmpct37oy4b.rs:24:41\n\
    \   |\n24 |     format!(\"{}\", sorted.iter().map(|x| translate(*x)).collect::<Vec<String>>().join(\"\
    \ \"))\n   |                                         ^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut s:\
    \ Vec<&str> = numbers.split(' ').collect();\n    s.sort();\n    s.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpzu582gg5.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut v:\
    \ Vec<String> = numbers.split(' ').map(|s| s.to_string()).collect();\n    v.sort_by(|a,\
    \ b| numeral_value(a).cmp(&numeral_value(b)));\n    v.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_value` in this scope\n -->\
    \ /tmp/tmpdijor779.rs:8:22\n  |\n8 |     v.sort_by(|a, b| numeral_value(a).cmp(&numeral_value(b)));\n\
    \  |                      ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_value` in this scope\n --> /tmp/tmpdijor779.rs:8:44\n\
    \  |\n8 |     v.sort_by(|a, b| numeral_value(a).cmp(&numeral_value(b)));\n  |\
    \                                            ^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = numbers.split(' ').collect::<Vec<&str>>();\n    result.sort_by(|a, b| digits(*a).cmp(&digits(*b)));\n\
    \    result.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmpw8jte2zt.rs:8:27\n\
    \  |\n8 |     result.sort_by(|a, b| digits(*a).cmp(&digits(*b)));\n  |       \
    \                    ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `digits` in this scope\n --> /tmp/tmpw8jte2zt.rs:8:43\n  |\n8 |   \
    \  result.sort_by(|a, b| digits(*a).cmp(&digits(*b)));\n  |                  \
    \                         ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let digits\
    \ = numbers.split_whitespace();\n    let mut nums: Vec<i32> = Vec::new();\n  \
    \  for digit in digits {\n        nums.push(numeral_to_int(digit.to_string()));\n\
    \    }\n    nums.sort();\n    let mut sorted_numbers = String::new();\n    for\
    \ num in nums {\n        sorted_numbers.push_str(&int_to_numeral(num));\n    \
    \    sorted_numbers.push(' ');\n    }\n    sorted_numbers.pop();\n    sorted_numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_int` in this scope\n  -->\
    \ /tmp/tmpylzb44sw.rs:10:19\n   |\n10 |         nums.push(numeral_to_int(digit.to_string()));\n\
    \   |                   ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `int_to_numeral` in this scope\n  --> /tmp/tmpylzb44sw.rs:15:34\n\
    \   |\n15 |         sorted_numbers.push_str(&int_to_numeral(num));\n   |     \
    \                             ^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976046
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split(' ')\n        .map(|s| match s {\n      \
    \      \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n\
    \            \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"invalid number\
    \ in input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"invalid number in input\"),\n    \
    \    })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''invalid number in input'', /tmp/tmp9h6hf550.rs:20:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut sorted_numbers:\
    \ Vec<String> = vec![];\n    for num in numbers {\n        let digit: u8 = match\
    \ num {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"\
    two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n       \
    \     \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n\
    \            \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n\
    \        };\n        sorted_numbers.push(digit.to_string());\n    }\n    sorted_numbers.sort();\n\
    \    sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmpetwfucql.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut _numbers:\
    \ Vec<i32> = Vec::new();\n    let _numbers_raw: Vec<&str> = numbers.split(\" \"\
    ).collect();\n    for s in _numbers_raw {\n        match s {\n            \"zero\"\
    \ => _numbers.push(0),\n            \"one\" => _numbers.push(1),\n           \
    \ \"two\" => _numbers.push(2),\n            \"three\" => _numbers.push(3),\n \
    \           \"four\" => _numbers.push(4),\n            \"five\" => _numbers.push(5),\n\
    \            \"six\" => _numbers.push(6),\n            \"seven\" => _numbers.push(7),\n\
    \            \"eight\" => _numbers.push(8),\n            \"nine\" => _numbers.push(9),\n\
    \            _ => panic!(\"BAD INPUT\"),\n        }\n    }\n    let mut result:\
    \ String = String::new();\n    _numbers.sort();\n    for n in _numbers {\n   \
    \     match n {\n            0 => result.push_str(\"zero \"),\n            1 =>\
    \ result.push_str(\"one \"),\n            2 => result.push_str(\"two \"),\n  \
    \          3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    BAD INPUT\"),\n        }\n    }\n    let _result: String = result.trim().to_string();\n\
    \    _result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''BAD INPUT'', /tmp/tmp_e419v6k.rs:21:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut words\
    \ = numbers.split(' ');\n    let words: Vec<&str> = words.collect();\n    let\
    \ mut result = Vec::new();\n    for i in 0..words.len() {\n        if words[i]\
    \ == \"zero\" {\n            result.push(0);\n        } else if words[i] == \"\
    one\" {\n            result.push(1);\n        } else if words[i] == \"two\" {\n\
    \            result.push(2);\n        } else if words[i] == \"three\" {\n    \
    \        result.push(3);\n        } else if words[i] == \"four\" {\n         \
    \   result.push(4);\n        } else if words[i] == \"five\" {\n            result.push(5);\n\
    \        } else if words[i] == \"six\" {\n            result.push(6);\n      \
    \  } else if words[i] == \"seven\" {\n            result.push(7);\n        } else\
    \ if words[i] == \"eight\" {\n            result.push(8);\n        } else if words[i]\
    \ == \"nine\" {\n            result.push(9);\n        }\n    }\n    result.sort();\n\
    \    let mut result = result.iter().map(|n| n.to_string()).collect::<Vec<String>>();\n\
    \    let mut end_result = String::new();\n    for i in 0..result.len() {\n   \
    \     if i == result.len() - 1 {\n            end_result.push_str(&result[i]);\n\
    \        } else {\n            end_result.push_str(&result[i]);\n            end_result.push('\
    \ ');\n        }\n    }\n    end_result\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmpxw6yhkmn.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut map\
    \ = HashMap::new();\n    let values = vec![\n        \"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n  \
    \  ];\n    let mut sorted_numbers = Vec::new();\n\n    map.insert(\"zero\", 0);\n\
    \    map.insert(\"one\", 1);\n    map.insert(\"two\", 2);\n    map.insert(\"three\"\
    , 3);\n    map.insert(\"four\", 4);\n    map.insert(\"five\", 5);\n    map.insert(\"\
    six\", 6);\n    map.insert(\"seven\", 7);\n    map.insert(\"eight\", 8);\n   \
    \ map.insert(\"nine\", 9);\n\n    for word in numbers.split_whitespace() {\n \
    \       let word = word.to_string();\n        sorted_numbers.push(map.get(&word).unwrap().to_string());\n\
    \    }\n\n    return sorted_numbers.join(\" \");\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp9r2q079c.rs:7:19\n  |\n7 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers_vec:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut numbers_i64:\
    \ Vec<i64> = Vec::new();\n    for number in numbers_vec {\n        let number_i64\
    \ = match number {\n            \"zero\" => 0,\n            \"one\" => 1,\n  \
    \          \"two\" => 2,\n            \"three\" => 3,\n            \"four\" =>\
    \ 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => -1,\n        };\n        numbers_i64.push(number_i64);\n    }\n    numbers_i64.sort();\n\
    \    let mut sorted_numbers = String::new();\n    for number in numbers_i64 {\n\
    \        let number_str = match number {\n            0 => \"zero\",\n       \
    \     1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n\
    \            4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => \"\",\n        };\n        sorted_numbers = format!(\"\
    {} {}\", sorted_numbers, number_str);\n    }\n    sorted_numbers.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|x| numberal_to_i32(x))\n\
    \        .collect();\n    nums.sort();\n    let sorted_numbers: Vec<String> =\
    \ nums.iter().map(|x| i32_to_numberal(*x)).collect();\n    sorted_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numberal_to_i32` in this scope\n -->\
    \ /tmp/tmpuvlhr3n7.rs:9:18\n  |\n9 |         .map(|x| numberal_to_i32(x))\n  |\
    \                  ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `i32_to_numberal` in this scope\n  --> /tmp/tmpuvlhr3n7.rs:12:59\n\
    \   |\n12 |     let sorted_numbers: Vec<String> = nums.iter().map(|x| i32_to_numberal(*x)).collect();\n\
    \   |                                                           ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<&str> = numbers.split(' ').collect();\n    // Sort the numbers\n    let\
    \ mut sorted_numbers: Vec<&str> = vec![];\n    sorted_numbers.extend(sort_numbers_in_range(&numbers,\
    \ &[\"zero\", \"one\", \"two\", \"three\", \"four\"]));\n    sorted_numbers.extend(sort_numbers_in_range(&numbers,\
    \ &[\"five\", \"six\", \"seven\", \"eight\", \"nine\"]));\n    sorted_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_numbers_in_range` in this scope\n\
    \  --> /tmp/tmpebq0sdra.rs:10:27\n   |\n10 |     sorted_numbers.extend(sort_numbers_in_range(&numbers,\
    \ &[\"zero\", \"one\", \"two\", \"three\", \"four\"]));\n   |                \
    \           ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `sort_numbers_in_range` in this scope\n  --> /tmp/tmpebq0sdra.rs:11:27\n\
    \   |\n11 |     sorted_numbers.extend(sort_numbers_in_range(&numbers, &[\"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\"]));\n   |                          \
    \ ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split(' ').collect();\n    let index_to_number: HashMap<usize,\
    \ String> =\n        [(0, \"zero\"), (1, \"one\"), (2, \"two\"), (3, \"three\"\
    ), (4, \"four\"), (5, \"five\"), (6, \"six\"), (7, \"seven\"), (8, \"eight\"),\
    \ (9, \"nine\")]\n            .iter().cloned().collect();\n    numbers.sort_by(|a,\
    \ b| index_to_number[&string_to_number(a.to_string())].cmp(&index_to_number[&string_to_number(b.to_string())]));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpp9l_83q7.rs:8:26\n\
    \  |\n8 |     let index_to_number: HashMap<usize, String> =\n  |             \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot\
    \ find function `string_to_number` in this scope\n  --> /tmp/tmpp9l_83q7.rs:11:45\n\
    \   |\n11 |     numbers.sort_by(|a, b| index_to_number[&string_to_number(a.to_string())].cmp(&index_to_number[&string_to_number(b.to_string())]));\n\
    \   |                                             ^^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `string_to_number` in this\
    \ scope\n  --> /tmp/tmpp9l_83q7.rs:11:100\n   |\n11 |     numbers.sort_by(|a,\
    \ b| index_to_number[&string_to_number(a.to_string())].cmp(&index_to_number[&string_to_number(b.to_string())]));\n\
    \   |                                                                        \
    \                            ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|x| match x {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid string!\"),\n        })\n        .collect();\n    numbers.sort();\n  \
    \  let mut ret = String::new();\n    for i in numbers {\n        match i {\n \
    \           0 => ret.push_str(\"zero \"),\n            1 => ret.push_str(\"one\
    \ \"),\n            2 => ret.push_str(\"two \"),\n            3 => ret.push_str(\"\
    three \"),\n            4 => ret.push_str(\"four \"),\n            5 => ret.push_str(\"\
    five \"),\n            6 => ret.push_str(\"six \"),\n            7 => ret.push_str(\"\
    seven \"),\n            8 => ret.push_str(\"eight \"),\n            9 => ret.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid number!\"),\n        }\n    }\n \
    \   ret.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number_vec:\
    \ Vec<String> = Vec::new();\n    for number in numbers.split_whitespace() {\n\
    \        number_vec.push(number.to_string());\n    }\n    number_vec.sort();\n\
    \    number_vec.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp4sjhsi8_.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut output:\
    \ Vec<String> = Vec::new();\n    let mut nums: Vec<u32> = Vec::new();\n    for\
    \ num in numbers.split(\" \") {\n        match num {\n            \"zero\" =>\
    \ {\n                nums.push(0);\n                output.push(String::from(\"\
    zero\"));\n            }\n            \"one\" => {\n                nums.push(1);\n\
    \                output.push(String::from(\"one\"));\n            }\n        \
    \    \"two\" => {\n                nums.push(2);\n                output.push(String::from(\"\
    two\"));\n            }\n            \"three\" => {\n                nums.push(3);\n\
    \                output.push(String::from(\"three\"));\n            }\n      \
    \      \"four\" => {\n                nums.push(4);\n                output.push(String::from(\"\
    four\"));\n            }\n            \"five\" => {\n                nums.push(5);\n\
    \                output.push(String::from(\"five\"));\n            }\n       \
    \     \"six\" => {\n                nums.push(6);\n                output.push(String::from(\"\
    six\"));\n            }\n            \"seven\" => {\n                nums.push(7);\n\
    \                output.push(String::from(\"seven\"));\n            }\n      \
    \      \"eight\" => {\n                nums.push(8);\n                output.push(String::from(\"\
    eight\"));\n            }\n            \"nine\" => {\n                nums.push(9);\n\
    \                output.push(String::from(\"nine\"));\n            }\n       \
    \     _ => {\n                println!(\"One of your numbers did not match a valid\
    \ input. Please try again.\");\n                break;\n            }\n      \
    \  }\n    }\n    nums.sort();\n    let mut final_output = String::new();\n   \
    \ for num in nums {\n        for i in 0..output.len() {\n            if match_number(&output[i])\
    \ == num {\n                final_output.push_str(&output[i]);\n             \
    \   final_output.push_str(\" \");\n            }\n        }\n    }\n    final_output.pop();\n\
    \    return final_output;\n\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `match_number` in this scope\n  -->\
    \ /tmp/tmppvvg_sno.rs:61:16\n   |\n61 |             if match_number(&output[i])\
    \ == num {\n   |                ^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers_vec.sort();\n\
    \    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp032qw66b.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vector:\
    \ Vec<u32> = Vec::new();\n    let mut numbers_string: String = String::new();\n\
    \n    for word in numbers.split_whitespace() {\n        match word {\n       \
    \     \"zero\" => numbers_vector.push(0),\n            \"one\" => numbers_vector.push(1),\n\
    \            \"two\" => numbers_vector.push(2),\n            \"three\" => numbers_vector.push(3),\n\
    \            \"four\" => numbers_vector.push(4),\n            \"five\" => numbers_vector.push(5),\n\
    \            \"six\" => numbers_vector.push(6),\n            \"seven\" => numbers_vector.push(7),\n\
    \            \"eight\" => numbers_vector.push(8),\n            \"nine\" => numbers_vector.push(9),\n\
    \            _ => continue,\n        }\n    }\n\n    numbers_vector.sort();\n\n\
    \    for number in numbers_vector {\n        numbers_string.push_str(num_to_word(number));\n\
    \        numbers_string.push(' ');\n    }\n\n    numbers_string.pop();\n    numbers_string\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_to_word` in this scope\n  --> /tmp/tmpno5ikmxq.rs:29:33\n\
    \   |\n29 |         numbers_string.push_str(num_to_word(number));\n   |      \
    \                           ^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let num_hash\
    \ = get_hashmap();\n    let mut vec_of_strings: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    vec_of_strings.sort_by(|&a, &b| num_hash.get(a).unwrap().cmp(num_hash.get(b).unwrap()));\n\
    \    let sorted_numbers = vec_of_strings.join(\" \");\n    sorted_numbers\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_hashmap` in this scope\n --> /tmp/tmpdwp4hkg6.rs:7:20\n\
    \  |\n7 |     let num_hash = get_hashmap();\n  |                    ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = vec![];\n    for word in numbers.split(' ') {\n        let value = match word\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid word {}\", word),\n        };\n        result.push(value);\n    }\n  \
    \  result.sort();\n    let result: Vec<String> = result.iter().map(|num| {\n \
    \       match num {\n            0 => \"zero\",\n            1 => \"one\",\n \
    \           2 => \"two\",\n            3 => \"three\",\n            4 => \"four\"\
    ,\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"\
    seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n          \
    \  _ => panic!(\"Invalid number {}\", num),\n        }\n    }).map(String::from).collect();\n\
    \    result.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid word '', /tmp/tmps9t_q427.rs:20:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|n| get_number(n))\n\
    \        .collect();\n    numbers.sort();\n    let mut output = String::new();\n\
    \    for num in numbers {\n        let word = get_word(num);\n        output +=\
    \ word;\n        output += \" \";\n    }\n    output.trim().to_string()\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_number` in this scope\n --> /tmp/tmpglll8gs6.rs:9:18\n\
    \  |\n9 |         .map(|n| get_number(n))\n  |                  ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `get_word` in this\
    \ scope\n  --> /tmp/tmpglll8gs6.rs:14:20\n   |\n14 |         let word = get_word(num);\n\
    \   |                    ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut digits:\
    \ Vec<u8> = numbers\n        .split(' ')\n        .map(number_to_digit)\n    \
    \    .filter(|&digit| digit.is_some())\n        .map(|digit| digit.unwrap())\n\
    \        .collect();\n    digits.sort();\n    digits\n        .iter()\n      \
    \  .map(digit_to_number)\n        .filter(|&number| number.is_some())\n      \
    \  .map(|number| number.unwrap())\n        .collect::<Vec<String>>()\n       \
    \ .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `number_to_digit` in this scope\n --> /tmp/tmpqod_3nqo.rs:9:14\n\
    \  |\n9 |         .map(number_to_digit)\n  |              ^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `digit_to_number` in\
    \ this scope\n  --> /tmp/tmpqod_3nqo.rs:16:14\n   |\n16 |         .map(digit_to_number)\n\
    \   |              ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // add code\
    \ here\n    let mut nums = numbers.split_whitespace().map(|x| {\n        match\
    \ x {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    invalid\"),\n        }\n    });\n    let mut numbers: Vec<_> = nums.collect();\n\
    \    numbers.sort();\n    let mut result = numbers.iter().map(|x| match x {\n\
    \        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\",\n      \
    \  3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n        6\
    \ => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n        9 =>\
    \ \"nine\",\n        _ => panic!(\"invalid\"),\n    });\n    result.collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    /// sort\
    \ vector of tuple by number\n    fn sort_helper(v: &mut Vec<(usize, &str)>) {\n\
    \        v.sort_by(|a, b| a.0.cmp(&b.0));\n    }\n\n    let mut number_vector:\
    \ Vec<(usize, &str)> = vec![];\n    let number_dict = [\n        (\"zero\", 0),\n\
    \        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n     \
    \   (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"\
    seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ];\n\n    for\
    \ word in numbers.split_whitespace() {\n        for &(key, value) in number_dict.iter()\
    \ {\n            if word == key {\n                number_vector.push((value,\
    \ word));\n            }\n        }\n    }\n\n    sort_helper(&mut number_vector);\n\
    \n    let mut result = String::new();\n    for (index, value) in number_vector.iter().enumerate()\
    \ {\n        result.push_str(value.1);\n        if index != number_vector.len()\
    \ - 1 {\n            result.push(' ');\n        }\n    }\n\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut split\
    \ = numbers.split_whitespace();\n    let mut ns: Vec<u32> = Vec::new();\n    while\
    \ let Some(num) = split.next() {\n        let n = match num {\n            \"\
    zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n         \
    \   \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"\
    ),\n        };\n        ns.push(n);\n    }\n    ns.sort();\n    let mut words:\
    \ Vec<String> = Vec::new();\n    for n in ns {\n        let word = match n {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        };\n        words.push(String::from(word));\n    }\n    words.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = vec![];\n    for num in numbers.split_whitespace() {\n        sorted.push(match\
    \ num {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"\
    two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n       \
    \     \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n\
    \            \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input!\"),\n        });\n    }\n    sorted.sort();\n    let mut sorted_str\
    \ = String::new();\n    for num in sorted {\n        sorted_str.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input!\"),\n        });\n        sorted_str.push(' ');\n    }\n    sorted_str.pop();\n\
    \    sorted_str\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut res\
    \ = String::new();\n    let mut num_list: Vec<u8> = numbers\n        .split_whitespace()\n\
    \        .map(|s| numeral_to_number(s))\n        .collect();\n    num_list.sort();\n\
    \    for num in num_list {\n        res += number_to_numeral(num);\n        res\
    \ += \" \";\n    }\n    res.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \  --> /tmp/tmpni376k81.rs:10:18\n   |\n10 |         .map(|s| numeral_to_number(s))\n\
    \   |                  ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_numeral` in this scope\n  --> /tmp/tmpni376k81.rs:14:16\n\
    \   |\n14 |         res += number_to_numeral(num);\n   |                ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let split_numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut nums: Vec<u8>\
    \ = Vec::new();\n    for i in split_numbers {\n        let num = match i {\n \
    \           \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => {\n      \
    \          println!(\"Invalid argument: {}\", i);\n                0\n       \
    \     }\n        };\n        nums.push(num);\n    }\n    nums.sort();\n    let\
    \ mut sorted_numbers = String::new();\n    for i in nums {\n        let new_number\
    \ = match i {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => {\n\
    \                println!(\"Invalid num: {}\", i);\n                \"zero\"\n\
    \            }\n        };\n        sorted_numbers.push_str(new_number);\n   \
    \     sorted_numbers.push(' ');\n    }\n    sorted_numbers.pop();\n    sorted_numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_map:\
    \ HashMap<&str, u8> = HashMap::new();\n    num_map.insert(\"zero\", 0);\n    num_map.insert(\"\
    one\", 1);\n    num_map.insert(\"two\", 2);\n    num_map.insert(\"three\", 3);\n\
    \    num_map.insert(\"four\", 4);\n    num_map.insert(\"five\", 5);\n    num_map.insert(\"\
    six\", 6);\n    num_map.insert(\"seven\", 7);\n    num_map.insert(\"eight\", 8);\n\
    \    num_map.insert(\"nine\", 9);\n\n    let mut num_list: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    num_list.sort_by(|a, b| num_map.get(a).cmp(&num_map.get(b)));\n    num_list.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmphm1ftdj2.rs:7:22\n\
    \  |\n7 |     let mut num_map: HashMap<&str, u8> = HashMap::new();\n  |      \
    \                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphm1ftdj2.rs:7:42\n\
    \  |\n7 |     let mut num_map: HashMap<&str, u8> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut vec\
    \ = Vec::new();\n    for x in numbers.split_whitespace() {\n        let word_to_num:\
    \ i32 = match x {\n            \"zero\" => 0,\n            \"one\" => 1,\n   \
    \         \"two\" => 2,\n            \"three\" => 3,\n            \"four\" =>\
    \ 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => -1,\n        };\n        if word_to_num != -1 {\n            vec.push(word_to_num);\n\
    \        }\n    }\n    vec.sort();\n    let mut i = 0;\n    let mut result = String::new();\n\
    \    while i < vec.len() {\n        let num_to_word: &str = match vec[i] {\n \
    \           0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => \"\",\n        };\n\
    \        if i == vec.len() - 1 {\n            result.push_str(num_to_word);\n\
    \        } else {\n            result.push_str(num_to_word);\n            result.push_str(\"\
    \ \");\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split(' ').map(|w| {\n        let v = w.parse::<u32>().unwrap();\n\
    \        println!(\"{}\", v);\n        v\n    }).collect::<Vec<u32>>();\n    nums.sort();\n\
    \    let ans = nums.iter().map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \");\n    return ans;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: Empty }'', /tmp/tmp0kipdpm9.rs:8:34

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let nums\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"];\n    let mut v = numbers.split_whitespace().map(|w| nums.iter().position(|&r|\
    \ r == w).unwrap()).collect::<Vec<usize>>();\n    v.sort();\n    v.iter().map(|i|\
    \ nums[*i]).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut vec:\
    \ Vec<i64> = Vec::new();\n    for number in numbers.split_whitespace() {\n   \
    \     let n = match number {\n            \"zero\" => 0,\n            \"one\"\
    \ => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"\
    four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n        \
    \    \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n\
    \            _ => panic!(\"Unknown number: {}\", number),\n        };\n      \
    \  vec.push(n);\n    }\n    vec.sort();\n    let mut result = String::new();\n\
    \    for number in vec {\n        let word = match number {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Unknown number: {}\"\
    , number),\n        };\n        result.push_str(word);\n        result.push('\
    \ ');\n    }\n    // result.trim_end_matches(' ');\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"three \"`,\n right: `\"three\"`', /tmp/tmp_fsakdi0.rs:50:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut vec\
    \ = Vec::new();\n    for num in numbers.split_whitespace() {\n        match num\
    \ {\n            \"zero\" => vec.push(0),\n            \"one\" => vec.push(1),\n\
    \            \"two\" => vec.push(2),\n            \"three\" => vec.push(3),\n\
    \            \"four\" => vec.push(4),\n            \"five\" => vec.push(5),\n\
    \            \"six\" => vec.push(6),\n            \"seven\" => vec.push(7),\n\
    \            \"eight\" => vec.push(8),\n            \"nine\" => vec.push(9),\n\
    \            _ => (),\n        }\n    }\n    vec.sort();\n    let mut sorted =\
    \ String::new();\n    for num in vec {\n        match num {\n            0 =>\
    \ sorted.push_str(\"zero \"),\n            1 => sorted.push_str(\"one \"),\n \
    \           2 => sorted.push_str(\"two \"),\n            3 => sorted.push_str(\"\
    three \"),\n            4 => sorted.push_str(\"four \"),\n            5 => sorted.push_str(\"\
    five \"),\n            6 => sorted.push_str(\"six \"),\n            7 => sorted.push_str(\"\
    seven \"),\n            8 => sorted.push_str(\"eight \"),\n            9 => sorted.push_str(\"\
    nine \"),\n            _ => (),\n        }\n    }\n    sorted.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    num_vec.sort();\n    let mut\
    \ sorted_numbers = String::new();\n    for number in num_vec {\n        sorted_numbers.push_str(number);\n\
    \        sorted_numbers.push(' ');\n    }\n    sorted_numbers.pop();\n    sorted_numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmps1sd8eg0.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_to_sort:\
    \ Vec<u8> = Vec::new();\n    for number in numbers.split_whitespace() {\n    \
    \    match number {\n            \"zero\" => numbers_to_sort.push(0),\n      \
    \      \"one\" => numbers_to_sort.push(1),\n            \"two\" => numbers_to_sort.push(2),\n\
    \            \"three\" => numbers_to_sort.push(3),\n            \"four\" => numbers_to_sort.push(4),\n\
    \            \"five\" => numbers_to_sort.push(5),\n            \"six\" => numbers_to_sort.push(6),\n\
    \            \"seven\" => numbers_to_sort.push(7),\n            \"eight\" => numbers_to_sort.push(8),\n\
    \            \"nine\" => numbers_to_sort.push(9),\n            _ => unreachable!(),\n\
    \        }\n    }\n    numbers_to_sort.sort();\n    let mut result = String::new();\n\
    \    for number in numbers_to_sort {\n        match number {\n            0 =>\
    \ result.push_str(\"zero \"),\n            1 => result.push_str(\"one \"),\n \
    \           2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => unreachable!(),\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut answers:\
    \ Vec<String> = Vec::new();\n    let nums: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    for num in nums {\n        let num_int = convert_number(num);\n        answers.push(num_int.to_string());\n\
    \    }\n    answers.sort();\n    answers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `convert_number` in this scope\n  -->\
    \ /tmp/tmplsfhfzrh.rs:10:23\n   |\n10 |         let num_int = convert_number(num);\n\
    \   |                       ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = String::new();\n    for word in numbers.split_whitespace() {\n        result.push_str(match\
    \ word {\n            \"zero\" => \"0\",\n            \"one\" => \"1\",\n    \
    \        \"two\" => \"2\",\n            \"three\" => \"3\",\n            \"four\"\
    \ => \"4\",\n            \"five\" => \"5\",\n            \"six\" => \"6\",\n \
    \           \"seven\" => \"7\",\n            \"eight\" => \"8\",\n           \
    \ \"nine\" => \"9\",\n            _ => panic!(\"Invalid number!\"),\n        });\n\
    \    }\n    let v: Vec<_> = result.split_whitespace().collect();\n    let v: Vec<_>\
    \ = v.iter().map(|s| s.parse::<i32>().unwrap()).collect();\n    v.iter().cloned().sorted().fold(String::new(),\
    \ |mut acc, x| {\n        if acc.len() > 0 {\n            acc.push(' ');\n   \
    \     }\n        acc.push_str(&x.to_string());\n        acc\n    })\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpxuk1mx85.rs:25:23\n   |\n25 |     v.iter().cloned().sorted().fold(String::new(),\
    \ |mut acc, x| {\n   |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ i32>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numeral_vec:\
    \ Vec<u8> = Vec::new();\n    for number in numbers.split_whitespace() {\n    \
    \    numeral_vec.push(number_to_numeral(number));\n    }\n    numeral_vec.sort();\n\
    \    let mut sorted_vec: Vec<String> = Vec::new();\n    for numeral in numeral_vec\
    \ {\n        sorted_vec.push(numeral_to_number(numeral));\n    }\n    return sorted_vec.join(\"\
    \ \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_numeral` in this scope\n\
    \ --> /tmp/tmp5bz9flut.rs:9:26\n  |\n9 |         numeral_vec.push(number_to_numeral(number));\n\
    \  |                          ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_number` in this scope\n  --> /tmp/tmp5bz9flut.rs:14:25\n\
    \   |\n14 |         sorted_vec.push(numeral_to_number(numeral));\n   |       \
    \                  ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> =\n        numbers\n            .split(' ')\n            .map(|num|\
    \ match num {\n                \"zero\" => 0,\n                \"one\" => 1,\n\
    \                \"two\" => 2,\n                \"three\" => 3,\n            \
    \    \"four\" => 4,\n                \"five\" => 5,\n                \"six\" =>\
    \ 6,\n                \"seven\" => 7,\n                \"eight\" => 8,\n     \
    \           \"nine\" => 9,\n                _ => 0,\n            })\n        \
    \    .collect();\n    numbers.sort();\n    numbers\n        .iter()\n        .map(|&num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    \",\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"zero\"`,\n right: `\"\"`', /tmp/tmpqd2k02j0.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = Vec::new();\n    for numeral in numbers.split_whitespace() {\n        let\
    \ number = match numeral {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => {\n                eprintln!(\"Invalid number '{}', ignoring...\"\
    , numeral);\n                continue;\n            }\n        };\n        result.push(number);\n\
    \    }\n    result.sort();\n    let result = result\n        .iter()\n       \
    \ .map(|num| match num {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => unreachable!(),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \");\n    String::from(result)\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split(\" \") {\n        match\
    \ num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => (),\n        }\n    }\n    let mut out = String::new();\n  \
    \  for num in nums.iter().sorted() {\n        out += match num {\n           \
    \ 0 => \"zero \",\n            1 => \"one \",\n            2 => \"two \",\n  \
    \          3 => \"three \",\n            4 => \"four \",\n            5 => \"\
    five \",\n            6 => \"six \",\n            7 => \"seven \",\n         \
    \   8 => \"eight \",\n            9 => \"nine \",\n            _ => \"\",\n  \
    \      }\n    }\n    return out.trim().to_string();\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpq31z4cms.rs:24:28\n   |\n24 |     for num\
    \ in nums.iter().sorted() {\n   |                            ^^^^^^ method not\
    \ found in `std::slice::Iter<'_, u32>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut digits:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  digits.push(convert_to_numeral(num));\n    }\n    digits.sort();\n    let mut\
    \ result = String::new();\n    for num in digits {\n        result.push_str(convert_to_str(num));\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `convert_to_numeral` in this scope\n\
    \ --> /tmp/tmpj116o11o.rs:9:21\n  |\n9 |         digits.push(convert_to_numeral(num));\n\
    \  |                     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `convert_to_str` in this scope\n  --> /tmp/tmpj116o11o.rs:14:25\n\
    \   |\n14 |         result.push_str(convert_to_str(num));\n   |              \
    \           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number_words\
    \ = numbers.split_whitespace().collect::<Vec<&str>>();\n    number_words.sort_by(|a,\
    \ b| number_from_word(a).cmp(&number_from_word(b)));\n    number_words.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_from_word` in this scope\n -->\
    \ /tmp/tmpl6mzsqw1.rs:8:33\n  |\n8 |     number_words.sort_by(|a, b| number_from_word(a).cmp(&number_from_word(b)));\n\
    \  |                                 ^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `number_from_word` in this scope\n --> /tmp/tmpl6mzsqw1.rs:8:58\n\
    \  |\n8 |     number_words.sort_by(|a, b| number_from_word(a).cmp(&number_from_word(b)));\n\
    \  |                                                          ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // TODO\n\
    \    \"\".to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"three\"`', /tmp/tmpc2axadac.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<u32> = vec![];\n    for word in numbers.split_whitespace() {\n        num_vec.push(word_to_number(word));\n\
    \    }\n    num_vec.sort();\n    let mut new_string = String::new();\n    for\
    \ num in num_vec {\n        new_string.push_str(&number_to_word(num));\n     \
    \   new_string.push(' ');\n    }\n    new_string.pop();\n    new_string\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_number` in this scope\n -->\
    \ /tmp/tmpy4yx6kos.rs:9:22\n  |\n9 |         num_vec.push(word_to_number(word));\n\
    \  |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_word` in this scope\n  --> /tmp/tmpy4yx6kos.rs:14:30\n\
    \   |\n14 |         new_string.push_str(&number_to_word(num));\n   |         \
    \                     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    let mut num_strings: Vec<String> = Vec::new();\n\
    \    let mut sorted_numbers: Vec<String> = Vec::new();\n\n    for num in numbers.split_whitespace()\
    \ {\n        num_strings.push(num.to_string());\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input to sort_numbers: {}\", num),\n        });\n    }\n\n    nums.sort();\n\
    \n    for num in nums {\n        sorted_numbers.push(match num {\n           \
    \ 0 => \"zero\".to_string(),\n            1 => \"one\".to_string(),\n        \
    \    2 => \"two\".to_string(),\n            3 => \"three\".to_string(),\n    \
    \        4 => \"four\".to_string(),\n            5 => \"five\".to_string(),\n\
    \            6 => \"six\".to_string(),\n            7 => \"seven\".to_string(),\n\
    \            8 => \"eight\".to_string(),\n            9 => \"nine\".to_string(),\n\
    \            _ => panic!(\"Invalid num in sort_numbers: {}\", num),\n        });\n\
    \    }\n\n    sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    unexpected input: {}\", num),\n        })\n        .collect();\n    numbers.sort();\n\
    \    let answer: Vec<String> = numbers\n        .iter()\n        .map(|n| match\
    \ n {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\"\
    ,\n        })\n        .collect();\n    answer.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpmj0hntki.rs:39:10\n     |\n39\
    \   |         .collect();\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    invalid numberal\"),\n        })\n        .collect();\n    numbers.sort();\n \
    \   let numbers: Vec<String> = numbers\n        .iter()\n        .map(|i| match\
    \ i {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    invalid numberal\"),\n        })\n        .map(String::from)\n        .collect();\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|word| match word\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n \
    \       })\n        .collect();\n    numbers.sort();\n    let words: Vec<String>\
    \ = numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => \"zero\",\n        })\n      \
    \  .map(|word| String::from(word))\n        .collect();\n    words.join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // !!! IMPLEMENT\
    \ ME !!!\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpj54m__n9.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .map(|n| {\n            match n {\n    \
    \            \"zero\" => 0,\n                \"one\" => 1,\n                \"\
    two\" => 2,\n                \"three\" => 3,\n                \"four\" => 4,\n\
    \                \"five\" => 5,\n                \"six\" => 6,\n             \
    \   \"seven\" => 7,\n                \"eight\" => 8,\n                \"nine\"\
    \ => 9,\n                _ => panic!(\"Not a valid number\"),\n            }\n\
    \        })\n        .collect::<Vec<i32>>()\n        .sort();\n    let mut sorted\
    \ = String::new();\n    for n in &numbers {\n        match n {\n            0\
    \ => sorted.push_str(\"zero\"),\n            1 => sorted.push_str(\"one\"),\n\
    \            2 => sorted.push_str(\"two\"),\n            3 => sorted.push_str(\"\
    three\"),\n            4 => sorted.push_str(\"four\"),\n            5 => sorted.push_str(\"\
    five\"),\n            6 => sorted.push_str(\"six\"),\n            7 => sorted.push_str(\"\
    seven\"),\n            8 => sorted.push_str(\"eight\"),\n            9 => sorted.push_str(\"\
    nine\"),\n            _ => panic!(\"Not a valid number\"),\n        }\n    }\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&String` is not an iterator\n  --> /tmp/tmpliy8goho.rs:27:14\n\
    \   |\n27 |     for n in &numbers {\n   |              ^^^^^^^^ `&String` is not\
    \ an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `&String`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut map:\
    \ HashMap<u8, usize> = HashMap::new();\n    for number in numbers.split_whitespace()\
    \ {\n        let number = match number {\n            \"zero\" => 0,\n       \
    \     \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n\
    \            \"four\" => 4,\n            \"five\" => 5,\n            \"six\" =>\
    \ 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"\
    nine\" => 9,\n            _ => panic!(\"Unknown number\"),\n        };\n     \
    \   *map.entry(number).or_insert(0) += 1;\n    }\n    (0..10)\n        .map(|number|\
    \ map.get(&number).map(|&v| repeat_number(number, v)).unwrap_or(String::new()))\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpptxkdw4e.rs:7:18\n\
    \  |\n7 |     let mut map: HashMap<u8, usize> = HashMap::new();\n  |         \
    \         ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpptxkdw4e.rs:7:39\n\
    \  |\n7 |     let mut map: HashMap<u8, usize> = HashMap::new();\n  |         \
    \                              ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]:\
    \ cannot find function `repeat_number` in this scope\n  --> /tmp/tmpptxkdw4e.rs:25:49\n\
    \   |\n25 |         .map(|number| map.get(&number).map(|&v| repeat_number(number,\
    \ v)).unwrap_or(String::new()))\n   |                                        \
    \         ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `join` found for struct `Map` in the current scope\n  --> /tmp/tmpptxkdw4e.rs:26:10\n\
    \   |\n26 |         .join(\" \")\n   |          ^^^^ method not found in `Map<std::ops::Range<{integer}>,\
    \ _>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0425, E0433, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut values:\
    \ Vec<u8> = numbers\n        .split(' ')\n        .map(|n| match n {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"invalid number\
    \ {}\", n),\n        })\n        .collect();\n    values.sort();\n    values\n\
    \        .iter()\n        .map(|v| match v {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"invalid value {}\", v),\n        })\n\
    \        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''invalid number '', /tmp/tmpdsvo7z7m.rs:20:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut split\
    \ = numbers.split_whitespace();\n    let mut str_nums: Vec<&str> = vec![];\n \
    \   let mut nums: Vec<i32> = vec![];\n    for number in split {\n        str_nums.push(number);\n\
    \        let num = num_from_string(number);\n        nums.push(num);\n    }\n\
    \    nums.sort();\n    let mut sorted = String::new();\n    for num in nums {\n\
    \        let num_str = string_from_num(num);\n        sorted.push_str(num_str);\n\
    \        sorted.push(' ');\n    }\n    sorted\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_from_string` in this scope\n  -->\
    \ /tmp/tmps9zwwwsl.rs:12:19\n   |\n12 |         let num = num_from_string(number);\n\
    \   |                   ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `string_from_num` in this scope\n  --> /tmp/tmps9zwwwsl.rs:18:23\n\
    \   |\n18 |         let num_str = string_from_num(num);\n   |                \
    \       ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = vec![];\n    let num_lookup = get_num_lookup();\n    for num in numbers.split_whitespace()\
    \ {\n        nums.push(num_lookup[num]);\n    }\n    nums.sort();\n    let mut\
    \ strs: Vec<String> = vec![];\n    for num in nums {\n        for (key, value)\
    \ in num_lookup.iter() {\n            if *value == num {\n                strs.push(key.to_string());\n\
    \            }\n        }\n    }\n    strs.join(\" \")\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_num_lookup` in this scope\n -->\
    \ /tmp/tmp7uwh_5jx.rs:8:22\n  |\n8 |     let num_lookup = get_num_lookup();\n\
    \  |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vector:\
    \ Vec<i32> = Vec::new();\n    for string in numbers.split(\" \") {\n        match\
    \ string {\n            \"zero\" => numbers_vector.push(0),\n            \"one\"\
    \ => numbers_vector.push(1),\n            \"two\" => numbers_vector.push(2),\n\
    \            \"three\" => numbers_vector.push(3),\n            \"four\" => numbers_vector.push(4),\n\
    \            \"five\" => numbers_vector.push(5),\n            \"six\" => numbers_vector.push(6),\n\
    \            \"seven\" => numbers_vector.push(7),\n            \"eight\" => numbers_vector.push(8),\n\
    \            \"nine\" => numbers_vector.push(9),\n            _ => panic!(\"You\
    \ told me to sort a string but gave me something else! I don't know how to deal\
    \ with that. Try again\"),\n        }\n    }\n    numbers_vector.sort();\n   \
    \ let mut sorted_string = String::new();\n    for i in 0..numbers_vector.len()\
    \ {\n        sorted_string.push_str(numeral_to_string(numbers_vector[i]).as_str());\n\
    \        if i != numbers_vector.len() - 1 {\n            sorted_string.push_str(\"\
    \ \");\n        }\n    }\n    sorted_string\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_string` in this scope\n\
    \  --> /tmp/tmpaakwjv4e.rs:26:32\n   |\n26 |         sorted_string.push_str(numeral_to_string(numbers_vector[i]).as_str());\n\
    \   |                                ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let num_to_int:\
    \ HashMap<&str, u8> = [\n        (\"zero\", 0),\n        (\"one\", 1),\n     \
    \   (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"\
    five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\"\
    , 8),\n        (\"nine\", 9),\n    ]\n    .iter()\n    .cloned()\n    .collect();\n\
    \n    let mut input_numbers: Vec<u8> = numbers\n        .split_whitespace()\n\
    \        .map(|numeral| *num_to_int.get(numeral).unwrap())\n        .collect();\n\
    \n    input_numbers.sort();\n\n    let mut sorted_numbers = String::new();\n \
    \   for num in input_numbers {\n        for (numeral, num_u8) in num_to_int.iter()\
    \ {\n            if num == *num_u8 {\n                sorted_numbers.push_str(&numeral);\n\
    \                sorted_numbers.push(' ');\n            }\n        }\n    }\n\n\
    \    sorted_numbers.trim().to_string()\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp856nor32.rs:7:21\n\
    \  |\n7 |     let num_to_int: HashMap<&str, u8> = [\n  |                     ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashMap;\n  |\n\nerror[E0277]: the size for values of\
    \ type `str` cannot be known at compilation time\n  --> /tmp/tmp856nor32.rs:32:14\n\
    \   |\n32 |         for (numeral, num_u8) in num_to_int.iter() {\n   |       \
    \       ^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the\
    \ trait `Sized` is not implemented for `str`\n   = note: all local variables must\
    \ have a statically known size\n   = help: unsized locals are gated as an unstable\
    \ feature\n\nerror[E0277]: the size for values of type `str` cannot be known at\
    \ compilation time\n  --> /tmp/tmp856nor32.rs:32:34\n   |\n32 |         for (numeral,\
    \ num_u8) in num_to_int.iter() {\n   |                                  ^^^^^^^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `str`\n   = note: only the last element of a tuple may\
    \ have a dynamically sized type\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0412.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for c in numbers.split(' ') {\n        nums.push(get_numeral(c));\n\
    \    }\n    nums.sort();\n    let mut nums_str: Vec<String> = Vec::new();\n  \
    \  for n in nums {\n        nums_str.push(get_numeral_str(n));\n    }\n    nums_str.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_numeral` in this scope\n --> /tmp/tmpy6rp344b.rs:9:19\n\
    \  |\n9 |         nums.push(get_numeral(c));\n  |                   ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `get_numeral_str`\
    \ in this scope\n  --> /tmp/tmpy6rp344b.rs:14:23\n   |\n14 |         nums_str.push(get_numeral_str(n));\n\
    \   |                       ^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut xs:\
    \ Vec<u32> = vec![];\n    for s in numbers.split_whitespace() {\n        xs.push(match\
    \ s {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n \
    \       });\n    }\n    xs.sort();\n    let mut result = String::new();\n    for\
    \ x in xs {\n        result.push_str(match x {\n            0 => \"zero\",\n \
    \           1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"unknown\",\n        });\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut split\
    \ = numbers.split_whitespace();\n    let mut vec: Vec<&str> = vec![];\n    while\
    \ let Some(n) = split.next() {\n        vec.push(n);\n    }\n    vec.sort();\n\
    \    let mut result = String::new();\n    for n in vec {\n        result.push_str(n);\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpojefpj79.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976048
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let number_mapping\
    \ = vec![\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n\
    \        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n   \
    \     (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n      \
    \  (\"nine\", 9),\n    ];\n\n    let numbers_sorted: Vec<String> = numbers\n \
    \       .split_whitespace()\n        .map(|s| {\n            let found = number_mapping\n\
    \                .into_iter()\n                .find(|(word, _)| word == s)\n\
    \                .unwrap();\n            String::from(found.0)\n        })\n \
    \       .collect();\n\n    numbers_sorted.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&str` with `str`\n  --> /tmp/tmpd6wt9ed2.rs:25:40\n\
    \   |\n25 |                 .find(|(word, _)| word == s)\n   |               \
    \                         ^^ no implementation for `&str == str`\n   |\n   = help:\
    \ the trait `PartialEq<str>` is not implemented for `&str`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n\
    \             <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n   = note: required because of the requirements on the\
    \ impl of `PartialEq<&str>` for `&&str`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let choices\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"];\n    let mut nums: Vec<usize> = vec![];\n    for num in\
    \ numbers.split_whitespace() {\n        let n = choices.iter().position(|&r| r\
    \ == num).unwrap();\n        nums.push(n);\n    }\n    nums.sort();\n    let mut\
    \ result = String::new();\n    for num in nums {\n        result.push_str(choices[num]);\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976048
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = vec![];\n    for number in numbers.split_whitespace() {\n        let numeral\
    \ = number_to_numeral(number);\n        sorted.push(numeral);\n    }\n    sorted.sort();\n\
    \    sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_numeral` in this scope\n\
    \ --> /tmp/tmpqknfomr_.rs:9:23\n  |\n9 |         let numeral = number_to_numeral(number);\n\
    \  |                       ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut splitted_numbers:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    splitted_numbers.sort();\n\
    \    let joined_numbers: String = splitted_numbers.join(\" \");\n    joined_numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp2d3qscpa.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976048
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers_vec.sort();\n\
    \    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp032qw66b.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<usize> = Vec::new();\n    for number in numbers.split(\" \") {\n       \
    \ match number {\n            \"zero\" => sorted_numbers.push(0),\n          \
    \  \"one\" => sorted_numbers.push(1),\n            \"two\" => sorted_numbers.push(2),\n\
    \            \"three\" => sorted_numbers.push(3),\n            \"four\" => sorted_numbers.push(4),\n\
    \            \"five\" => sorted_numbers.push(5),\n            \"six\" => sorted_numbers.push(6),\n\
    \            \"seven\" => sorted_numbers.push(7),\n            \"eight\" => sorted_numbers.push(8),\n\
    \            \"nine\" => sorted_numbers.push(9),\n            _ => panic!(\"Expected\
    \ numberal string but got {}\", number),\n        }\n    }\n    sorted_numbers.sort();\n\
    \    let mut sorted_string = String::new();\n    for number in sorted_numbers\
    \ {\n        sorted_string.push_str(match number {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"number is not in range 0..10\"),\n\
    \        });\n        sorted_string.push(' ');\n    }\n    sorted_string.pop();\n\
    \    sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Expected numberal string but got '', /tmp/tmpx530spnl.rs:20:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976048
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers_vec:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    let mut result = String::new();\n\
    \    for i in 0..numbers_vec.len() {\n        let mut min_index = i;\n       \
    \ for j in i + 1..numbers_vec.len() {\n            if numbers_vec[j] < numbers_vec[min_index]\
    \ {\n                min_index = j;\n            }\n        }\n        if min_index\
    \ != i {\n            let temp = numbers_vec[i];\n            numbers_vec[i] =\
    \ numbers_vec[min_index];\n            numbers_vec[min_index] = temp;\n      \
    \  }\n        result += numbers_vec[i];\n        result += \" \";\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `numbers_vec` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpxjse5pwm.rs:18:13\n   |\n7  |     let numbers_vec:\
    \ Vec<&str> = numbers.split(\" \").collect();\n   |         ----------- help:\
    \ consider changing this to be mutable: `mut numbers_vec`\n...\n18 |         \
    \    numbers_vec[i] = numbers_vec[min_index];\n   |             ^^^^^^^^^^^ cannot\
    \ borrow as mutable\n\nerror[E0596]: cannot borrow `numbers_vec` as mutable, as\
    \ it is not declared as mutable\n  --> /tmp/tmpxjse5pwm.rs:19:13\n   |\n7  | \
    \    let numbers_vec: Vec<&str> = numbers.split(\" \").collect();\n   |      \
    \   ----------- help: consider changing this to be mutable: `mut numbers_vec`\n\
    ...\n19 |             numbers_vec[min_index] = temp;\n   |             ^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Bad input: {}\", s),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Bad number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976048
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|&a,\
    \ &b| {\n        let a_int = nato_to_int(a);\n        let b_int = nato_to_int(b);\n\
    \        a_int.cmp(&b_int)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `nato_to_int` in this scope\n --> /tmp/tmp9_b_d_oc.rs:9:21\n\
    \  |\n9 |         let a_int = nato_to_int(a);\n  |                     ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `nato_to_int`\
    \ in this scope\n  --> /tmp/tmp9_b_d_oc.rs:10:21\n   |\n10 |         let b_int\
    \ = nato_to_int(b);\n   |                     ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_map:\
    \ HashMap<&str, i32> = HashMap::new();\n    num_map.insert(\"zero\", 0);\n   \
    \ num_map.insert(\"one\", 1);\n    num_map.insert(\"two\", 2);\n    num_map.insert(\"\
    three\", 3);\n    num_map.insert(\"four\", 4);\n    num_map.insert(\"five\", 5);\n\
    \    num_map.insert(\"six\", 6);\n    num_map.insert(\"seven\", 7);\n    num_map.insert(\"\
    eight\", 8);\n    num_map.insert(\"nine\", 9);\n\n    let mut numbers_vec: Vec<i32>\
    \ = Vec::new();\n    for num in numbers.split_whitespace() {\n        numbers_vec.push(num_map.get(num).unwrap().clone());\n\
    \    }\n    numbers_vec.sort();\n\n    let mut sorted_numbers: String = String::new();\n\
    \    for num in numbers_vec {\n        for (word, val) in num_map.iter() {\n \
    \           if num == *val {\n                sorted_numbers.push_str(word);\n\
    \                sorted_numbers.push(' ');\n            }\n        }\n    }\n\
    \    sorted_numbers.pop();\n    sorted_numbers\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp_whfteuo.rs:7:22\n\
    \  |\n7 |     let mut num_map: HashMap<&str, i32> = HashMap::new();\n  |     \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_whfteuo.rs:7:43\n\
    \  |\n7 |     let mut num_map: HashMap<&str, i32> = HashMap::new();\n  |     \
    \                                      ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split_whitespace().map(|n| match n {\n        \"zero\" => 0,\n   \
    \     \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"\
    four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\"\
    \ => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => panic!(\"\
    Invalid input: {}\", n),\n    });\n    let mut nums_sorted = nums.collect::<Vec<u32>>();\n\
    \    nums_sorted.sort();\n    nums_sorted\n        .iter()\n        .map(|n| match\
    \ n {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n      \
    \  .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976048
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let sorted\
    \ = numbers\n        .split(' ')\n        .map(|s| &s[..])\n        .map(|s| match\
    \ s {\n            \"zero\" => \"0\",\n            \"one\" => \"1\",\n       \
    \     \"two\" => \"2\",\n            \"three\" => \"3\",\n            \"four\"\
    \ => \"4\",\n            \"five\" => \"5\",\n            \"six\" => \"6\",\n \
    \           \"seven\" => \"7\",\n            \"eight\" => \"8\",\n           \
    \ \"nine\" => \"9\",\n            _ => s,\n        })\n        .collect::<Vec<&str>>();\n\
    \    let sorted_numbers = sort_array(&sorted);\n    let result = sorted_numbers\n\
    \        .iter()\n        .map(|s| match s {\n            \"0\" => \"zero\",\n\
    \            \"1\" => \"one\",\n            \"2\" => \"two\",\n            \"\
    3\" => \"three\",\n            \"4\" => \"four\",\n            \"5\" => \"five\"\
    ,\n            \"6\" => \"six\",\n            \"7\" => \"seven\",\n          \
    \  \"8\" => \"eight\",\n            \"9\" => \"nine\",\n            _ => s,\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \");\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_array` in this scope\n  --> /tmp/tmpwvx3t6j2.rs:24:26\n\
    \   |\n24 |     let sorted_numbers = sort_array(&sorted);\n   |              \
    \            ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|s| match s\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Unexpected input\"),\n        })\n        .collect();\n    numbers.sort();\n \
    \   numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Unexpected input\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976048
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|number| number_to_usize(number))\n\
    \        .collect();\n    numbers.sort();\n    numbers.iter().map(|number| usize_to_number(*number)).collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_usize` in this scope\n -->\
    \ /tmp/tmp2yab2nql.rs:9:23\n  |\n9 |         .map(|number| number_to_usize(number))\n\
    \  |                       ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `usize_to_number` in this scope\n  --> /tmp/tmp2yab2nql.rs:12:33\n\
    \   |\n12 |     numbers.iter().map(|number| usize_to_number(*number)).collect::<Vec<_>>().join(\"\
    \ \")\n   |                                 ^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = numbers.split_whitespace().map(str_to_int).collect::<Vec<u32>>();\n    sorted.sort();\n\
    \    sorted.iter().map(|i| int_to_str(*i)).collect::<Vec<String>>().join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `str_to_int` in this scope\n --> /tmp/tmpomgil8c_.rs:7:53\n\
    \  |\n7 |     let mut sorted = numbers.split_whitespace().map(str_to_int).collect::<Vec<u32>>();\n\
    \  |                                                     ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `int_to_str` in this scope\n\
    \ --> /tmp/tmpomgil8c_.rs:9:27\n  |\n9 |     sorted.iter().map(|i| int_to_str(*i)).collect::<Vec<String>>().join(\"\
    \ \")\n  |                           ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976047
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp762jupbw.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976048
