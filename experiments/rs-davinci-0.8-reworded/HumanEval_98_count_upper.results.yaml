language: rs
name: HumanEval_98_count_upper
results:
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut counter = 0;\n\
    \    let uppercase_vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    let s_chars: Vec<char>\
    \ = s.chars().collect();\n    for i in 0..s_chars.len() {\n        if uppercase_vowels.contains(&s_chars[i])\
    \ && i % 2 == 0 {\n            counter += 1;\n        }\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // Implement your solution\
    \ here\n    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjm7klf1q.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    return 0;\n}\n\nfn\
    \ main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp30k71lov.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // REPLACE VOWELS WITH\
    \ *\n    let s = s.replace(|c: char| c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U', \"*\");\n    let mut n = 0;\n    let mut i = 0;\n    for c\
    \ in s.chars() {\n        if i % 2 == 0 && c == '*' {\n            n += 1;\n \
    \       }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp6i4hk_z.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let mut up_vowel = 0;\n    let uppercase_vowels = ['A', 'E', 'I', 'O', 'U'];\n\
    \    for c in s.chars() {\n        if up_vowel == 1 {\n            if uppercase_vowels.contains(&c)\
    \ {\n                count += 1;\n            }\n        }\n        up_vowel +=\
    \ 1;\n        up_vowel %= 2;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8zrasgsn.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    0\n}\n\
    \nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpq_nnzr2r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i,c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper` in this scope\n  --> /tmp/tmpr8gviq0s.rs:12:26\n\
    \   |\n12 |         if i % 2 == 0 && is_upper(c) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823088
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && is_upper_vowel(*c))\n \
    \       .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper_vowel` in this scope\n  -->\
    \ /tmp/tmpkas0jdic.rs:12:40\n   |\n12 |         .filter(|(i, c)| i % 2 == 0 &&\
    \ is_upper_vowel(*c))\n   |                                        ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823088
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut res = 0;\n\
    \    let vowels = String::from(\"AEIOU\");\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if vowels.contains(c) && i % 2 == 0 {\n            res += 1;\n  \
    \      }\n    }\n    res\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    return 0;\n}\n\nfn\
    \ main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp30k71lov.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n   \
    \     .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz6w7alin.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // Code here!\n   \
    \ unimplemented!();\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2gxy_u5q.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1e4m92hh.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let s = s.into_bytes();\n\
    \    let mut count = 0;\n    for i in 0..s.len() {\n        if i % 2 == 0 {\n\
    \            let n = s[i] as char;\n            if n == 'A' || n == 'E' || n ==\
    \ 'I' || n == 'O' || n == 'U' {\n                count += 1;\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // Type annotations\
    \ are required for closures.\n    s.chars().filter(|x| x.is_uppercase()).fold(0,\
    \ |acc, _| acc + 1)\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmph8m81uh2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpatzy5a3q.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO implement\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp21sguloy.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = ['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: replace this\
    \ with something meaningful\n    0\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpi5676934.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let mut iter = s.chars();\n    loop {\n        let c = iter.next();\n   \
    \     if c.is_none() {\n            break;\n        }\n        if c.unwrap().is_uppercase()\
    \ {\n            count += 1;\n        }\n        if iter.next().is_none() {\n\
    \            break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5q1kjmm4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = ['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut counter = 0;\n    for (i, ch) in s.chars().enumerate()\
    \ {\n        if vowels.contains(&ch) && i % 2 == 0 {\n            counter += 1;\n\
    \        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    for c in s.chars() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp77j2cw5z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    return 0;\n}\n\nfn\
    \ main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp30k71lov.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    let mut\
    \ count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if is_upper_vowel(c)\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper_vowel` in this scope\n  -->\
    \ /tmp/tmpocxwsdr2.rs:13:12\n   |\n13 |         if is_upper_vowel(c) && i % 2\
    \ == 0 {\n   |            ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if c.is_ascii_uppercase()\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpzx5qnpxn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n   \
    \     .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz6w7alin.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut sum = 0;\n\
    \    for (idx, c) in s.chars().enumerate() {\n        if idx % 2 == 0 && c.is_uppercase()\
    \ {\n            sum += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")),\
    \ 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpgws5j201.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut result = 0;\n\
    \    for i in 0..s.len() {\n        if i % 2 == 0 {\n            if s.chars().nth(i).unwrap().is_uppercase()\
    \ {\n                result += 1;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpltyq0akl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut iter = s.char_indices();\n\
    \    let mut count = 0;\n    while let Some((index, c)) = iter.next() {\n    \
    \    if index % 2 == 0 && c.is_uppercase() {\n            count += 1;\n      \
    \  }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n \
    \   assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpt6spyoj7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // Initialize a counter.\n\
    \    let mut counter = 0;\n    // Iterate over the string, character by character.\n\
    \    for (i, c) in s.chars().enumerate() {\n        // If the character is an\
    \ uppercase vowel and the index is even, increase the counter.\n        if i %\
    \ 2 == 0 && c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n     \
    \       counter += 1;\n        }\n    }\n    // Return the counter.\n    counter\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsm8x9u4p.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut result = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp4h_mtkja.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (index, character) in s.chars().enumerate() {\n        if index % 2 ==\
    \ 0 && character.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsaur73uy.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Write your\
    \ code here!\n    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpiblooij2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n  \
    \      .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj_f9fq_w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| *i % 2 == 0 && c.is_uppercase())\n  \
    \      .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpucqrhdzx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = &['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // count uppercase\
    \ vowels in even indices (0, 2, 4, ...)\n    s.chars()\n        .enumerate()\n\
    \        .filter(|(i, c)| c.is_uppercase() && i % 2 == 0)\n        .count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpt32uzkyl.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let chars: Vec<char> = s.chars().collect();\n    for i in 0..chars.len()\
    \ {\n        if (i % 2 == 0) && chars[i].is_uppercase() {\n            count +=\
    \ 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpb3f5c2pq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .filter(|&c| c.is_ascii_uppercase())\n        .filter(|_| {\n            static\
    \ mut X: bool = true;\n            unsafe {\n                let y = X;\n    \
    \            X = !X;\n                y\n            }\n        })\n        .count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxi9i2zub.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n  \
    \      .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj_f9fq_w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (index, ch) in s.chars().enumerate() {\n        if index % 2 == 0 &&\
    \ ch.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpubthvy_u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Implement\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpo0or4jlm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper` in this scope\n  --> /tmp/tmp6hrzpuni.rs:12:26\n\
    \   |\n12 |         if i % 2 == 0 && is_upper(c) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .zip(0..)\n        .map(|(c, i)| if i % 2 == 0 && c.is_uppercase() { 1 } else\
    \ { 0 })\n        .sum()\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmppxu8ua7c.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Implement\
    \ this function.\n    // Uncomment this macro to use the given test cases.\n \
    \   test_case!(count_upper, [(\"aBCdEf\", 1), (\"abcdefg\", 0), (\"dBBE\", 0)]);\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_upper;\n  \
    \  assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `test_case` in this scope\n  --> /tmp/tmpznt8885r.rs:12:5\n\
    \   |\n12 |     test_case!(count_upper, [(\"aBCdEf\", 1), (\"abcdefg\", 0), (\"\
    dBBE\", 0)]);\n   |     ^^^^^^^^^\n   |\n   = note: `test_case` is in scope, but\
    \ it is an attribute: `#[test_case]`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Implement\
    \ me\n    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp25rzqs8x.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // BEGIN_CODE\n   \
    \ let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase()\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n    //\
    \ END_CODE\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9cdsddw6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, letter) in s.chars().enumerate() {\n        if letter.is_uppercase()\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpl8wrfmtv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n  \
    \      .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj_f9fq_w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .filter(|c| c.is_uppercase())\n        .filter(|c| is_vowel(*c))\n        .filter(|c|\
    \ s.find(*c).unwrap() % 2 == 0)\n        .count() as isize\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp2nisg9d8.rs:12:21\n\
    \   |\n12 |         .filter(|c| is_vowel(*c))\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1e4m92hh.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut acc = 0;\n\
    \    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            acc += 1;\n \
    \       }\n    }\n    acc\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: implement\
    \ this function, then call it with a string literal.\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp64nw7q8q.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n  \
    \      .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj_f9fq_w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut vowel_count = 0;\n    for (idx, ch) in s.chars().enumerate()\
    \ {\n        if idx % 2 == 0 && vowels.contains(&ch) {\n            vowel_count\
    \ += 1;\n        }\n    }\n    vowel_count\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut cnt = 0;\n\
    \    for (i, ch) in s.chars().enumerate() {\n        if i % 2 == 0 && ch.is_uppercase()\
    \ {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let\
    \ candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")),\
    \ 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpvhxxcnyf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper` in this scope\n  --> /tmp/tmp6hrzpuni.rs:12:26\n\
    \   |\n12 |         if i % 2 == 0 && is_upper(c) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpatzy5a3q.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    0\n}\n\
    \nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpq_nnzr2r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .map(|(i, c)| if i % 2 == 0 && c.is_uppercase() { 1 }\
    \ else { 0 })\n        .sum()\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpgr42vbo3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n  \
    \      .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj_f9fq_w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut n = 0;\n  \
    \  for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase() && i % 2\
    \ == 0 {\n            n += 1;\n        }\n    }\n    n\n}\n\nfn main() {\n   \
    \ let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpthf9a8z3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: return the\
    \ number of uppercase vowels in even index\n    let mut count = 0;\n    for i\
    \ in 0..s.len() {\n        if i % 2 == 0 {\n            if &s[i..i+1] == \"A\"\
    \ || &s[i..i+1] == \"E\" || &s[i..i+1] == \"I\" || &s[i..i+1] == \"O\" || &s[i..i+1]\
    \ == \"U\" {\n                count += 1;\n            }\n        }\n    }\n \
    \   count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut i = 0;\n  \
    \  let mut count = 0;\n    for c in s.chars() {\n        if c.is_uppercase() &&\
    \ i % 2 == 0 {\n            count += 1;\n        }\n        i += 1;\n    }\n \
    \   count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpq3tagczz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = \"AEIOU\"\
    ;\n    let mut count = 0;\n    for (i, ch) in s.chars().enumerate() {\n      \
    \  if vowels.contains(ch) && i % 2 == 0 {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpatzy5a3q.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009007
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut i = 0;\n  \
    \  let mut count = 0;\n    let vowels = \"AEIOU\";\n    for c in s.chars() {\n\
    \        if vowels.contains(c) && i % 2 == 0 {\n            count += 1;\n    \
    \    }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let v = vec!['A', 'E',\
    \ 'I', 'O', 'U'];\n    let mut i = 0;\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if i % 2 == 0 && v.contains(&c) {\n            count += 1;\n    \
    \    }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, ch) in s.chars().enumerate() {\n        if (i % 2 == 0) && ch.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmps92kik2p.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    return (0..s.len())\n\
    \        .filter(|&i| i % 2 == 0)\n        .map(|i| s.chars().nth(i).unwrap())\n\
    \        .filter(|ch| ch.is_uppercase())\n        .filter(|ch| ch.is_vowel())\n\
    \        .count() as isize;\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpqxusf0nq.rs:14:25\n   |\n14 |         .filter(|ch|\
    \ ch.is_vowel())\n   |                         ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpedal4yuh.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    0\n}\n\
    \nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpq_nnzr2r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, ch) in s.chars().enumerate() {\n        if i % 2 == 0 && ch.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpcc67kwgn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut counter = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if (i % 2 == 0) && (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            counter += 1;\n\
    \        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper` in this scope\n  --> /tmp/tmp6hrzpuni.rs:12:26\n\
    \   |\n12 |         if i % 2 == 0 && is_upper(c) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Fix this\n\
    \    s.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmp1y635v6q.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // your code here\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpls_ttm67.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let chars: Vec<char>\
    \ = s.chars().collect();\n    let mut counter = 0;\n    for (i, c) in chars.iter().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            counter += 1;\n\
    \        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmppaaxebv4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpatzy5a3q.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009007
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let uppercase_vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (index, c) in\
    \ s.chars().enumerate() {\n        if index % 2 == 0 && uppercase_vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n   \
    \     .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz6w7alin.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Convert s\
    \ to a Vec<char> and use a for loop to count the\n    // number of uppercase vowels\
    \ in even indices.\n    //\n    // Note: isize is the type used to represent index\
    \ values.\n    //\n    // Hint: Use the is_ascii_uppercase function to determine\
    \ if a\n    // character is uppercase.\n    //\n    // Exercise: Add a bonus feature\
    \ to only count vowels. You'll\n    // need to first make a set containing the\
    \ vowels.\n    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpmboawgu4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase() && i %\
    \ 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpu2i4rqlw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let upper = \"AEIOU\"\
    ;\n    let lower = \"aeiou\";\n    let mut count = 0;\n    for (i, x) in s.chars().enumerate()\
    \ {\n        if (i % 2 == 0) && (upper.contains(x)) {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .map(|(index, c)| {\n            if index % 2 == 0 &&\
    \ c.is_ascii_uppercase() {\n                1\n            } else {\n        \
    \        0\n            }\n        })\n        .sum()\n}\n\nfn main() {\n    let\
    \ candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")),\
    \ 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz_d0nzji.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Your code\
    \ here\n    s.chars().enumerate().filter(|&(idx, c)| idx % 2 == 0 && c.is_uppercase()).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpn9jo__ss.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO - implement\
    \ the body of this function\n    // return 0\n    let mut count = 0;\n    for\
    \ (i, v) in s.chars().enumerate() {\n        if i % 2 == 0 && v.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpru_t77rl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp6i4hk_z.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    0\n}\n\
    \nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpq_nnzr2r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1e4m92hh.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // unimplemented!()\n\
    \    let chars: Vec<char> = s.chars().collect();\n    let mut count = 0;\n   \
    \ for (index, char) in chars.iter().enumerate() {\n        if index % 2 == 0 &&\
    \ char.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj0ixo88v.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .filter(|c| c.is_uppercase())\n        .filter(|c| c.is_ascii_vowel())\n   \
    \     .filter(|c| (c.len_utf8() % 2) == 0)\n        .count() as isize\n}\n\nfn\
    \ main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_vowel` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp0avmxht6.rs:12:23\n   |\n12 |         .filter(|c|\
    \ c.is_ascii_vowel())\n   |                       ^^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `is_ascii`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = ['A',\
    \ 'E', 'I', 'O', 'U'];\n    s.chars()\n        .enumerate()\n        .filter(|(i,\
    \ ch)| vowels.contains(ch) && *i % 2 == 0)\n        .count() as isize\n}\n\nfn\
    \ main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // This is a little\
    \ wonky.\n    // String.chars() is an iterator of chars in the string.\n    //\
    \ .enumerate() also returns an iterator, but this one is\n    // a tuple of the\
    \ index, and the value.\n    // .filter() is a method that returns an iterator.\n\
    \    // It filters the data based on a function, which is given\n    // the value\
    \ (and index) as the first argument.\n    // In this case we are filtering for\
    \ the index being even\n    // (divisible by 2), and the value being uppercase.\n\
    \    // We then use the .count() method to count how many tuples\n    // there\
    \ are matching the filter.\n    s.chars().enumerate().filter(|(i, c)| i % 2 ==\
    \ 0 && c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp2kxmzs5q.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_7oqlh0_.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, ch)| i % 2 == 0 && ch.is_uppercase())\n \
    \       .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpl2r1za7c.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let mut iter = s.chars();\n    while let Some(c) = iter.next() {\n      \
    \  match c {\n            'A' | 'E' | 'I' | 'O' | 'U' => count += 1,\n       \
    \     _ => (),\n        }\n        match iter.next() {\n            None => break,\n\
    \            Some(_) => (),\n        }\n    }\n    count\n}\n\nfn main() {\n \
    \   let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut n: isize =\
    \ 0;\n    let n = s.as_bytes().iter().enumerate().filter(|&(i, &c)| {\n      \
    \  (c == b'A' || c == b'E' || c == b'I' || c == b'O' || c == b'U') && (i % 2 ==\
    \ 0)\n    }).count();\n    return n as isize;\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (index, character) in s.chars().enumerate() {\n        if character.is_uppercase()\
    \ && index % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpykvt387z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008980
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    0\n}\n\
    \nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpq_nnzr2r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .map(|(idx, c)| (idx, c))\n        .filter(|&(idx, c)|\
    \ idx % 2 == 0 && c.is_uppercase())\n        .count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpquqh940y.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.as_bytes()\n    \
    \    .iter()\n        .filter(|&c| is_vowel(c))\n        .filter(|&c| is_even_index(&s,\
    \ c))\n        .filter(|&c| is_uppercase(c))\n        .count() as isize\n}\n\n\
    fn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpfiq_zj0j.rs:12:22\n\
    \   |\n12 |         .filter(|&c| is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `is_even_index`\
    \ in this scope\n  --> /tmp/tmpfiq_zj0j.rs:13:22\n   |\n13 |         .filter(|&c|\
    \ is_even_index(&s, c))\n   |                      ^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_uppercase` in this scope\n\
    \  --> /tmp/tmpfiq_zj0j.rs:14:22\n   |\n14 |         .filter(|&c| is_uppercase(c))\n\
    \   |                      ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(index, value)| index % 2 == 0 && value.is_uppercase())\n\
    \        .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp45zg2vrw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // I'm just guessing\
    \ on `VOWELS` here\n    let VOWELS = ['A', 'E', 'I', 'O', 'U'];\n    let mut count\
    \ = 0;\n    for (index, letter) in s.chars().enumerate() {\n        if VOWELS.contains(&letter)\
    \ && index % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // Your code here!\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp5yzzft0i.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let chars: Vec<char>\
    \ = s.chars().collect();\n    let num_chars = chars.len();\n    let mut count\
    \ = 0;\n    for i in 0..num_chars {\n        if i % 2 == 0 {\n            continue;\n\
    \        }\n        if is_upper_vowel(chars[i]) {\n            count += 1;\n \
    \       }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper_vowel` in this scope\n  -->\
    \ /tmp/tmp30w8il_s.rs:17:12\n   |\n17 |         if is_upper_vowel(chars[i]) {\n\
    \   |            ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n  \
    \      .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj_f9fq_w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // Your code here\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1izabs7j.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (idx, ch) in s.chars().enumerate() {\n        if idx % 2 == 0 && ch.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5r8ln4hg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut cnt = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if (i % 2 == 0) && is_upper(c)\
    \ {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let\
    \ candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")),\
    \ 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper` in this scope\n  --> /tmp/tmptyset_nz.rs:12:28\n\
    \   |\n12 |         if (i % 2 == 0) && is_upper(c) {\n   |                   \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut c = 0;\n  \
    \  for (i, a) in s.chars().enumerate() {\n        if i % 2 == 0 && a.is_uppercase()\
    \ {\n            c += 1;\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpjw_78vb0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // Write the function\
    \ body here\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp5mpeoo50.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n  \
    \      .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj_f9fq_w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Implement\
    \ your solution here\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpoud66bt6.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.bytes()\n       \
    \ .enumerate()\n        .filter(|&(i, b)| i % 2 == 0 && b.is_ascii_uppercase())\n\
    \        .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpws8fdco_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // YOUR CODE HERE\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpmd1q1m9t.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let v: Vec<char> = s.chars().collect();\n    for i in 0..v.len() {\n    \
    \    let ch: char = v[i];\n        if (ch == 'A' || ch == 'E' || ch == 'I' ||\
    \ ch == 'O' || ch == 'U') && i % 2 == 0 {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut result = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp4h_mtkja.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut result = 0;\n\
    \    for (idx, ch) in s.chars().enumerate() {\n        if idx % 2 == 0 && ch.is_uppercase()\
    \ {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmppi3ytjjn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n   \
    \     .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz6w7alin.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let mut upper = String::from(\"AEIOU\");\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && upper.contains(c) {\n            count += 1;\n \
    \       }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009009
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // YOUR CODE HERE\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_upper;\n  \
    \  assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp7mwajys3.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpatzy5a3q.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    let mut\
    \ count: isize = 0;\n    for (i, c) in s.chars().enumerate() {\n        if (i\
    \ % 2 == 0) && c.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpp2r6mgxb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let count: isize =\
    \ s.chars()\n        .enumerate()\n        .filter(|(idx, ch)| idx % 2 == 0 &&\
    \ ch.is_uppercase())\n        .count() as isize;\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp69c7e5bs.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1e4m92hh.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut res = 0;\n\
    \    let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c.to_string().as_str()) {\n   \
    \         res += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n   \
    \     .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz6w7alin.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .filter(|c| c.is_uppercase())\n        .zip(0..)\n        .filter(|(_, i)| i\
    \ % 2 == 0)\n        .count() as isize\n}\n\nfn main() {\n    let candidate =\
    \ count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0mx6pnyf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let mut index = 0;\n    for ch in s.chars() {\n        if index % 2 == 0\
    \ && ch.is_uppercase() {\n            count += 1;\n        }\n        index +=\
    \ 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n \
    \   assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpr_mip61n.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper` in this scope\n  --> /tmp/tmp6hrzpuni.rs:12:26\n\
    \   |\n12 |         if i % 2 == 0 && is_upper(c) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| c.is_uppercase() && i % 2 == 0)\n   \
    \     .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp46dzs2zl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let mut n = 0;\n    for c in s.chars() {\n        if n % 2 == 0 && is_vowel(c)\
    \ && is_upper(c) {\n            count += 1;\n        }\n        n += 1;\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp3nyf2iry.rs:13:26\n\
    \   |\n13 |         if n % 2 == 0 && is_vowel(c) && is_upper(c) {\n   |      \
    \                    ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `is_upper` in this scope\n  --> /tmp/tmp3nyf2iry.rs:13:41\n  \
    \ |\n13 |         if n % 2 == 0 && is_vowel(c) && is_upper(c) {\n   |        \
    \                                 ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // YOUR CODE HERE\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpmd1q1m9t.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let mut iter = s.chars();\n    while let Some(c) = iter.next() {\n      \
    \  if is_upper_vowel(c) {\n            count += 1;\n        }\n        iter.next();\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper_vowel` in this scope\n  -->\
    \ /tmp/tmpu1m0r4g8.rs:13:12\n   |\n13 |         if is_upper_vowel(c) {\n   | \
    \           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut i = 0;\n  \
    \  let mut count = 0;\n    for c in s.chars() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpfedcbn9f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase() && i %\
    \ 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpu2i4rqlw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut num = 0;\n\
    \    let up_vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if up_vowels.contains(&c) && i % 2 == 0 {\n            num += 1;\n\
    \        }\n    }\n    num\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| *i % 2 == 0 && c.is_uppercase())\n  \
    \      .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpucqrhdzx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009007
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = \"AEIOU\"\
    ;\n    let mut count = 0;\n    for (i, letter) in s.chars().enumerate() {\n  \
    \      if vowels.contains(letter) && i % 2 == 0 {\n            count += 1;\n \
    \       }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut upper = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            upper += 1;\n        }\n    }\n    upper\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpzjxjq3qa.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| c.is_uppercase() && i % 2 == 0)\n   \
    \     .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp46dzs2zl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (index, letter) in s.chars().enumerate() {\n        if letter.is_uppercase()\
    \ && index % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpd7fafldf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n   \
    \     .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz6w7alin.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1e4m92hh.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1e4m92hh.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .filter(|&(i, _)| i % 2 == 0)\n        .map(|(_, c)| c)\n\
    \        .filter(|c| c.is_uppercase())\n        .count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpegcgltp4.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Complete me\n\
    \    0\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpz2jlxaot.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    for (i, letter) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&letter) {\n            count +=\
    \ 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // Write the code that\
    \ goes here.\n    // Do not write anything else.\n    let mut count: isize = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmporcyo10b.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1e4m92hh.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut res = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            res += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")),\
    \ 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpmku6m41u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp6i4hk_z.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp6i4hk_z.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut c = 0;\n  \
    \  for (i, ch) in s.chars().enumerate() {\n        if (i % 2 == 0) && ch.is_uppercase()\
    \ {\n            c += 1;\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp4d4tmg66.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp6i4hk_z.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut cnt = 0;\n\
    \    for i in s.bytes().enumerate() {\n        if i.0 % 2 == 0 && i.1.is_ascii_uppercase()\
    \ {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let\
    \ candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")),\
    \ 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmps3j8axp4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpatzy5a3q.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009007
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp6i4hk_z.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp6i4hk_z.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = \"AEIOU\"\
    ;\n    let mut count = 0;\n    for (i, ch) in s.chars().enumerate() {\n      \
    \  if i % 2 == 0 && vowels.contains(ch) {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut c = 0;\n  \
    \  for (i, ch) in s.chars().enumerate() {\n        if (i % 2 == 0) && ch.is_uppercase()\
    \ {\n            c += 1;\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp4d4tmg66.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1e4m92hh.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009008
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.bytes()\n       \
    \ .enumerate()\n        .filter(|&(i, c)| {\n            if i % 2 == 0 {\n   \
    \             match c {\n                    b'A' | b'E' | b'I' | b'O' | b'U'\
    \ => true,\n                    _ => false,\n                }\n            }\
    \ else {\n                false\n            }\n        })\n        .count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO\n    0\n}\n\
    \nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpq_nnzr2r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut s = s.chars();\n\
    \    let mut count = 0;\n    while let Some(c) = s.next() {\n        if c.is_uppercase()\
    \ && c.is_vowel() {\n            count += 1;\n        }\n        s.next();\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpnxv2265c.rs:13:34\n   |\n13 |         if c.is_uppercase()\
    \ && c.is_vowel() {\n   |                                  ^^^^^^^^ method not\
    \ found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    if s.len() == 0 {\n\
    \        return 0;\n    }\n    let mut sum = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        let x = i as isize % 2;\n        if x == 0 && c.is_uppercase() {\n\
    \            sum += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp3qcsrzye.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    // TODO: Implement\
    \ solution here\n    unimplemented!();\n}\n\nfn main() {\n    let candidate =\
    \ count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_6053nh0.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, v) in s.chars().enumerate() {\n        if i % 2 == 0 && v.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpk6lmi72s.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp6i4hk_z.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let s = s.chars();\n    for (i, c) in s.enumerate() {\n        if i % 2 ==\
    \ 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxpevl_ul.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .filter(|&c| c.is_alphabetic())\n        .enumerate()\n        .map(|(i, c)|\
    \ if i % 2 == 0 && c.is_uppercase() { 1 } else { 0 })\n        .sum()\n}\n\nfn\
    \ main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp73r32xl1.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let chars: Vec<char> = s.chars().collect();\n    for (i, c) in chars.iter().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp2u6sdwsi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    s.chars()\n       \
    \ .enumerate()\n        .map(|(i, c)| if i % 2 == 0 && c.is_uppercase() { 1 }\
    \ else { 0 })\n        .sum()\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpgr42vbo3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009008
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut n = 0;\n  \
    \  for (i, c) in s.chars().enumerate() {\n        if (i % 2 == 0) && c.is_uppercase()\
    \ {\n            n += 1;\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_nq6muey.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsvzd0r8n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut counter = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if (i % 2 == 0) && is_upper_vowel(c)\
    \ {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper_vowel` in this scope\n  -->\
    \ /tmp/tmp11d2ocwq.rs:12:28\n   |\n12 |         if (i % 2 == 0) && is_upper_vowel(c)\
    \ {\n   |                            ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let mut count = 0;\n\
    \    let mut i = 0;\n    for c in s.chars() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp77j2cw5z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    let v: Vec<char> =\
    \ s.chars().collect();\n    let mut i = 0;\n    let mut count = 0;\n    while\
    \ i < v.len() {\n        if v[i].is_uppercase() && i % 2 == 0 {\n            count\
    \ += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")),\
    \ 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0wqewr8k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009009
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
    \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
    dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp6i4hk_z.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823089
