name: HumanEval_143_words_in_sentence
language: rs
prompt: "/// You are given a string representing a sentence,\n/// the sentence contains\
  \ some words separated by a space,\n/// and you have to return a string that contains\
  \ the words from the original sentence,\n/// whose lengths are prime numbers,\n\
  /// the order of the words in the new string should be the same as the original\
  \ one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"This is a test\"\
  ))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
  lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n/// *\
  \ 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
  This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
  lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
  there is no place available here\")), String::from(\"there is no place\"));\n  \
  \  assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"Hi am\
  \ Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
  go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
  ));\n}\n"
completions: ["    let mut result = String::new();\n    for w in sentence.split_whitespace()\
    \ {\n        if is_prime(w.len()) {\n            result.push_str(w);\n       \
    \     result.push(' ');\n        }\n    }\n    result.trim().to_string()", '    unimplemented!("string
    of words with prime length from sentence: {}", sentence);', "    let words: Vec<&str>\
    \ = sentence.split(\" \").collect();\n    let primes: Vec<usize> = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37].to_vec();\n    let mut result = String::new();\n\
    \    for word in words {\n        if primes.contains(&word.len()) {\n        \
    \    result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    if result.is_empty() {\n        result\n    } else {\n        result.trim_end().to_string()\n\
    \    }", "    sentence\n        .split_whitespace()\n        .filter(|word| is_prime(word.len()))\n\
    \        .collect::<Vec<&str>>()\n        .join(\" \")", "    let is_prime_number\
    \ = |number: &u32| -> bool {\n        if number < &2 {\n            return false;\n\
    \        }\n        for i in 2..(*number / 2 + 1) {\n            if number % i\
    \ == 0 {\n                return false;\n            }\n        }\n        true\n\
    \    };\n    let mut sentence = sentence;\n    sentence.push(' ');\n    let mut\
    \ ans = String::new();\n    let mut start = 0;\n    let mut end = 0;\n    while\
    \ start < sentence.len() {\n        if sentence.chars().nth(start).unwrap() ==\
    \ ' ' {\n            if is_prime_number(&(end - start - 1)) {\n              \
    \  ans.push_str(&sentence[start..end + 1]);\n            }\n            start\
    \ = end + 1;\n        }\n        end += 1;\n    }\n    ans", "    let words: Vec<&str>\
    \ = sentence.split(' ').collect();\n    let mut prime_words = String::new();\n\
    \    for word in words {\n        if is_prime(word.len()) {\n            prime_words.push_str(word);\n\
    \            prime_words.push(' ');\n        }\n    }\n    prime_words.trim().to_string()",
  "    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    if result.is_empty() {\n\
    \        result\n    } else {\n        result.pop();\n        result\n    }",
  "    let mut result = String::new();\n    for word in sentence.split(' ') {\n  \
    \      if word.len() > 1 && is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut res = String::new();\n    let mut words = sentence.split(\" \");\n\
    \    while let Some(word) = words.next() {\n        if word.len() > 1 && is_prime(word.len())\
    \ {\n            res.push_str(word);\n            res.push(' ');\n        }\n\
    \    }\n    res.trim().to_string()", "    let is_prime = |x: usize| {\n      \
    \  if x <= 1 {\n            return false;\n        }\n        if x <= 3 {\n  \
    \          return true;\n        }\n        if x % 2 == 0 || x % 3 == 0 {\n  \
    \          return false;\n        }\n        let mut i = 5;\n        while i *\
    \ i <= x {\n            if x % i == 0 || x % (i + 2) == 0 {\n                return\
    \ false;\n            }\n            i += 6;\n        }\n        true\n    };\n\
    \    sentence\n        .split(' ')\n        .filter(|x| is_prime(x.len()))\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")", "    let mut res = String::new();\n\
    \    for w in sentence.split(' ') {\n        if is_prime(w.len()) {\n        \
    \    res.push_str(w);\n            res.push(' ');\n        }\n    }\n    res.trim().to_string()",
  "    let sentence: Vec<&str> = sentence.split(\" \").collect();\n    let mut result\
    \ = String::new();\n    for word in sentence {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()", "    sentence\n        .split_whitespace()\n\
    \        .filter(|word| is_prime(word.len()))\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let mut res = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            res.push_str(word);\n    \
    \        res.push(' ');\n        }\n    }\n    res.trim().to_string()", "    let\
    \ mut primes: Vec<_> = (2..50).filter(|&x| is_prime(x)).collect();\n    let mut\
    \ output = String::new();\n    let mut first = true;\n    for word in sentence.split('\
    \ ') {\n        if primes.contains(&word.len()) {\n            if first {\n  \
    \              first = false;\n            } else {\n                output.push('\
    \ ');\n            }\n            output.push_str(word);\n        }\n    }\n \
    \   output", '    unimplemented!()', "    let mut result = String::new();\n  \
    \  for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    for word in sentence.split(' ') {\n        if is_prime(word.len()) {\n  \
    \          result += &format!(\"{} \", word);\n        }\n    }\n    result.trim().to_string()",
  "    sentence\n        .split_whitespace()\n        .filter(|w| is_prime(w.len()))\n\
    \        .collect::<Vec<&str>>()\n        .join(\" \")", "    sentence\n     \
    \   .split_whitespace()\n        .filter(|word| is_prime(word.len()))\n      \
    \  .collect::<Vec<&str>>()\n        .join(\" \")"]
stop_tokens:
- "\n}"
