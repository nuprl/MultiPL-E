name: HumanEval_35_max_element
language: rs
prompt: "/// Return maximum element in the vector.\n/// >>> max_element(vec![1, 2,\
  \ 3])\n/// 3\n/// >>> max_element(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  /// 123\nfn max_element(l: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
  \ 124);\n}\n"
completions: ["    let mut max = l[0];\n    for i in 0..l.len() {\n        if l[i]\
    \ > max {\n            max = l[i];\n        }\n    }\n    max", "    let mut max\
    \ = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n            max\
    \ = l[i];\n        }\n    }\n    max", "    let mut max = l[0];\n    for &x in\
    \ l.iter() {\n        if x > max {\n            max = x;\n        }\n    }\n \
    \   max", "    let mut res = l[0];\n    for i in l {\n        if i > res {\n \
    \           res = i;\n        }\n    }\n    res", "    let mut result = l[0];\n\
    \    for i in l.iter() {\n        if *i > result {\n            result = *i;\n\
    \        }\n    }\n    result", "    let mut max = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max",
  "    let mut max = l[0];\n    for el in l.iter() {\n        if el > &max {\n   \
    \         max = *el;\n        }\n    }\n    max", '    *l.iter().max().unwrap()',
  "    let mut max = l[0];\n    for &x in l.iter() {\n        if x > max {\n     \
    \       max = x;\n        }\n    }\n    max", "    let mut max = l[0];\n    for\
    \ i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n      \
    \  }\n    }\n    max", '    l.iter().fold(std::isize::MIN, |acc, x| std::cmp::max(acc,
    *x))', "    // Insert your code here\n    let mut max_value = isize::min_value();\n\
    \    for i in l.iter() {\n        if *i > max_value {\n            max_value =\
    \ *i;\n        }\n    }\n    max_value", '    l.iter().fold(std::isize::MIN, |a,
    x| a.max(*x))', "    let mut m: isize = l[0];\n    for i in 1..l.len() {\n   \
    \     if l[i] > m {\n            m = l[i];\n        }\n    }\n    m", "    let\
    \ mut best = std::isize::MIN;\n    for num in l {\n        if num > best {\n \
    \           best = num;\n        }\n    }\n    best", "    let mut max = l[0];\n\
    \    for i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n\
    \        }\n    }\n    max", "    let mut max = l[0];\n    for e in l {\n    \
    \    if e > max {\n            max = e;\n        }\n    }\n    max", '    l.iter().fold(0,
    |a, &b| if a > b { a } else { b })', "    let mut m = None;\n    for x in l {\n\
    \        match m {\n            None => m = Some(x),\n            Some(y) => if\
    \ x > y { m = Some(x) }\n        }\n    }\n    match m {\n        None => 0,\n\
    \        Some(x) => x\n    }", "    // Your code here\n    0"]
stop_tokens:
- "\n}"
