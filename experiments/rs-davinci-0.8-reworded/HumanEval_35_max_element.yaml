name: HumanEval_35_max_element
language: rs
prompt: "/// Return maximum element in the vector.\n/// >>> max_element(vec![1, 2,\
  \ 3])\n/// 3\n/// >>> max_element(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  /// 123\nfn max_element(l: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
  \ 124);\n}\n"
completions: ["    let mut max = l[0];\n    for i in 0..l.len() {\n        if l[i]\
    \ > max {\n            max = l[i];\n        }\n    }\n    max", "    let mut max\
    \ = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n            max\
    \ = l[i];\n        }\n    }\n    max", "    let mut max = l[0];\n    for &x in\
    \ l.iter() {\n        if x > max {\n            max = x;\n        }\n    }\n \
    \   max", "    let mut res = l[0];\n    for i in l {\n        if i > res {\n \
    \           res = i;\n        }\n    }\n    res", "    let mut result = l[0];\n\
    \    for i in l.iter() {\n        if *i > result {\n            result = *i;\n\
    \        }\n    }\n    result", "    let mut max = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max",
  "    let mut max = l[0];\n    for el in l.iter() {\n        if el > &max {\n   \
    \         max = *el;\n        }\n    }\n    max", '    *l.iter().max().unwrap()',
  "    let mut max = l[0];\n    for &x in l.iter() {\n        if x > max {\n     \
    \       max = x;\n        }\n    }\n    max", "    let mut max = l[0];\n    for\
    \ i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n      \
    \  }\n    }\n    max", '    l.iter().fold(std::isize::MIN, |acc, x| std::cmp::max(acc,
    *x))', "    // Insert your code here\n    let mut max_value = isize::min_value();\n\
    \    for i in l.iter() {\n        if *i > max_value {\n            max_value =\
    \ *i;\n        }\n    }\n    max_value", '    l.iter().fold(std::isize::MIN, |a,
    x| a.max(*x))', "    let mut m: isize = l[0];\n    for i in 1..l.len() {\n   \
    \     if l[i] > m {\n            m = l[i];\n        }\n    }\n    m", "    let\
    \ mut best = std::isize::MIN;\n    for num in l {\n        if num > best {\n \
    \           best = num;\n        }\n    }\n    best", "    let mut max = l[0];\n\
    \    for i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n\
    \        }\n    }\n    max", "    let mut max = l[0];\n    for e in l {\n    \
    \    if e > max {\n            max = e;\n        }\n    }\n    max", '    l.iter().fold(0,
    |a, &b| if a > b { a } else { b })', "    let mut m = None;\n    for x in l {\n\
    \        match m {\n            None => m = Some(x),\n            Some(y) => if\
    \ x > y { m = Some(x) }\n        }\n    }\n    match m {\n        None => 0,\n\
    \        Some(x) => x\n    }", "    // Your code here\n    0", "    // Todo\n\
    \    0", '    l.iter().fold(l[0], |acc, &x| if x > acc { x } else { acc })', " \
    \   let mut max = l[0];\n    for i in l {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", "    let mut max: isize = l[0];\n    for n\
    \ in l.iter() {\n        if n > &max {\n            max = *n;\n        }\n   \
    \ }\n    max", "    let mut m = std::isize::MIN;\n    for i in l {\n        if\
    \ i > m {\n            m = i;\n        }\n    }\n    m", "    // Sum all the elements\
    \ in vector l\n    // l.iter().fold(0, |sum, &n| sum + n)\n    // l.iter().sum()\n\
    \    l.iter().max().unwrap()", "    let mut max = isize::min_value();\n    for\
    \ x in l {\n        if x > max {\n            max = x;\n        }\n    }\n   \
    \ max", '    return l.iter().fold(std::isize::MIN, |a, b| if a > *b { a } else
    { *b });', "    let mut max = isize::min_value();\n    for x in l {\n        if\
    \ x > max {\n            max = x;\n        }\n    }\n    max", "    let mut l\
    \ = l;\n    let mut max = std::isize::MIN;\n    for _ in 0..l.len() {\n      \
    \  max = std::cmp::max(max, l.pop().unwrap());\n    }\n    max", "    let mut\
    \ m = l[0];\n    for i in l {\n        if i > m {\n            m = i;\n      \
    \  }\n    }\n    m", "    let mut max = isize::min_value();\n    for i in l {\n\
    \        if i > max {\n            max = i;\n        }\n    }\n    max", "   \
    \ let mut max: isize = l[0];\n    for &x in l.iter() {\n        if x > max {\n\
    \            max = x;\n        }\n    }\n    max", "    let mut max = l[0];\n\
    \    for i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n\
    \        }\n    }\n    max", "    let mut v = l;\n    // Initialize with last\
    \ element.\n    let mut m = v.pop().unwrap();\n    for i in v {\n        if i\
    \ > m {\n            m = i;\n        }\n    }\n    m", "    let mut max = l[0];\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max", '    l.iter().max().unwrap()', "    let mut max = l[0];\n    for\
    \ i in l {\n        if i > max {\n            max = i;\n        }\n    }\n   \
    \ max", "    let mut m = l[0];\n    for x in l.iter() {\n        if x > &m {\n\
    \            m = *x;\n        }\n    }\n    m", '    unimplemented!()', "    let\
    \ mut max = l[0];\n    for &i in l.iter() {\n        if i > max {\n          \
    \  max = i;\n        }\n    }\n    max", "    let mut max = std::isize::MIN;\n\
    \    for x in l {\n        if x > max {\n            max = x;\n        }\n   \
    \ }\n    max", '    l.iter().fold(std::isize::MIN, |acc, &x| std::cmp::max(acc,
    x))', "    let mut m: isize = l[0];\n    for i in 1..l.len() {\n        if l[i]\
    \ > m {\n            m = l[i];\n        }\n    }\n    m", '    unimplemented!()',
  "    let mut max = l[0];\n    for i in 0..l.len() {\n        if l[i] > max {\n \
    \           max = l[i];\n        }\n    }\n    max", "    let mut max = l[0];\n\
    \    for i in 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n\
    \        }\n    }\n    max", "    let mut m = l[0];\n    for i in 1..l.len() {\n\
    \        if l[i] > m {\n            m = l[i];\n        }\n    }\n    m", "   \
    \ let mut max = l[0];\n    for i in l {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", "    let mut _l = l;\n    _l.sort();\n   \
    \ _l[_l.len() - 1]", "    let mut l = l;\n    l.sort();\n    l.last().unwrap().clone()",
  '    l.iter().fold(std::isize::MIN, |r, &x| std::cmp::max(r, x))', "    let mut\
    \ maximum = l[0];\n    for i in l {\n        if i > maximum {\n            maximum\
    \ = i;\n        }\n    }\n    maximum", "    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max",
  "    // TODO your code here\n\n    // for testing purpose\n    return 0;", "   \
    \ let mut max = l[0];\n    for i in l {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", "    let mut max = l[0];\n    for i in l.iter()\
    \ {\n        if *i > max {\n            max = *i;\n        }\n    }\n    max",
  '    l.iter().max().unwrap()', "    let mut max = l[0];\n    for x in l {\n    \
    \    if x > max {\n            max = x;\n        }\n    }\n    max", '    l.iter().fold(l[0],
    |a, b| if a > *b { a } else { *b })', "    let mut max = -1_000_000_000;\n   \
    \ for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max", "  let mut result = std::isize::MIN;\n  for val in l {\n    if val\
    \ > result {\n      result = val;\n    }\n  }\n  result", "    let mut max: isize\
    \ = 0;\n    for i in l {\n        if i > max {\n            max = i;\n       \
    \ }\n    }\n    max", "    let mut max = l[0];\n    for i in 1..l.len() {\n  \
    \      if l[i] > max {\n            max = l[i];\n        }\n    }\n    max", '    l.iter().fold(l[0],
    |x, y| if x > *y { x } else { *y })', '    l.iter().max().unwrap()', '    unimplemented!()',
  '    return l.iter().max().unwrap().clone();', "    let mut max = l[0];\n    for\
    \ x in l {\n        if x > max {\n            max = x;\n        }\n    }\n   \
    \ max", '    unimplemented!()', '    unimplemented!();', '    max(l)', "    let\
    \ mut m = l[0];\n    for element in l {\n        if element > m {\n          \
    \  m = element;\n        }\n    }\n    m", "    let mut max = std::isize::MIN;\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    let mut max = l[0];\n    for i in l {\n        if i > max\
    \ {\n            max = i;\n        }\n    }\n    max", "    let mut l = l;\n \
    \   let mut max = l[0];\n    l.remove(0);\n    for i in l {\n        if i > max\
    \ {\n            max = i;\n        }\n    }\n    max", "    let mut current_max\
    \ = l[0];\n    for i in l {\n        if i > current_max {\n            current_max\
    \ = i;\n        }\n    }\n    current_max", '    l.iter().fold(isize::min_value(),
    |a, &b| a.max(b))', "    let mut max: isize = std::isize::MIN;\n    for i in l\
    \ {\n        if i > max {\n            max = i;\n        }\n    }\n    max", " \
    \   let mut max = isize::min_value();\n    for i in l {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    max", "    let mut max = l[0];\n\
    \    for &i in l.iter() {\n        if i > max {\n            max = i;\n      \
    \  }\n    }\n    max", "    if l.len() == 0 {\n        panic!(\"empty vector!\"\
    );\n    }\n    let mut result = l[0];\n    for n in l.iter() {\n        if n >\
    \ &result {\n            result = *n;\n        }\n    }\n    result", "    let\
    \ mut m = -isize::max_value();\n    for e in l {\n        if e > m {\n       \
    \     m = e;\n        }\n    }\n    m", "    let mut max = 0;\n    for i in l\
    \ {\n        if i > max {\n            max = i;\n        }\n    }\n    max", " \
    \   let mut max = l[0];\n    for i in l {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", "    let mut max: isize = l[0];\n    for num\
    \ in l {\n        if num > max {\n            max = num;\n        }\n    }\n \
    \   max", "    let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i]\
    \ > max {\n            max = l[i];\n        }\n    }\n    max", "    let mut current_max\
    \ = l[0];\n    for elem in l {\n        if elem > current_max {\n            current_max\
    \ = elem;\n        }\n    }\n    current_max", "    let mut max = l[0];\n    for\
    \ i in l {\n        if i > max {\n            max = i;\n        }\n    }\n   \
    \ max", "    let mut max = l[0];\n    for v in l {\n        if v > max {\n   \
    \         max = v;\n        }\n    }\n    max", '    l.iter().fold(i32::min_value()
    as isize, |acc, x| max(acc, *x))', "    let mut max: isize = l[0];\n    for i\
    \ in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max", "    let mut m: isize = l[0];\n    for i in 0..l.len() {\n \
    \       if l[i] > m {\n            m = l[i];\n        }\n    }\n    m", "    let\
    \ mut max = l[0];\n    for x in l {\n        if x > max {\n            max = x;\n\
    \        }\n    }\n    max", "    let mut m = isize::min_value();\n    for i in\
    \ l {\n        if i > m {\n            m = i;\n        }\n    }\n    m", '    unimplemented!()',
  "    // write code here\n    let mut m = l[0];\n    for i in l.iter() {\n      \
    \  if m < *i {\n            m = *i;\n        }\n    }\n    m", "    let mut max:\
    \ isize = l[0];\n    for i in l {\n        if i > max {\n            max = i;\n\
    \        }\n    }\n    max", "    let mut max = 0;\n    for i in l {\n       \
    \ if i > max {\n            max = i;\n        }\n    }\n    max", "    let mut\
    \ max: isize = l[0];\n    for &x in l.iter() {\n        if x > max {\n       \
    \     max = x;\n        }\n    }\n    max", '    l.iter().max().unwrap().clone()',
  "    let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n \
    \           max = l[i];\n        }\n    }\n    max", "    let mut largest = l[0];\n\
    \    for i in l {\n        if i > largest {\n            largest = i;\n      \
    \  }\n    }\n    largest", "    let mut max = l[0];\n    for i in 1..l.len() {\n\
    \        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max",
  "    let mut max: isize = l[0];\n    for n in l {\n        if n > max {\n      \
    \      max = n;\n        }\n    }\n    max", "    let mut max = std::isize::MIN;\n\
    \    for x in l {\n        if x > max {\n            max = x;\n        }\n   \
    \ }\n    max", "    let mut max = 0;\n    for i in l {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    max", "    let mut max = l[0];\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    let mut max = l[0];\n    for e in l {\n        if e > max\
    \ {\n            max = e;\n        }\n    }\n    max", "  let mut max = 0;\n \
    \ for i in l {\n    if i > max {\n      max = i;\n    }\n  }\n  max", "    let\
    \ mut max = l[0];\n    for i in l {\n        if i > max {\n            max = i;\n\
    \        }\n    }\n    max", "    let mut ret = l[0];\n    for e in l.iter() {\n\
    \        if ret < *e {\n            ret = *e;\n        }\n    }\n    ret", '    return
    l.iter().fold(0, |acc, x| if *x > acc { *x } else { acc });', "    let mut result\
    \ = std::isize::MIN;\n    for i in l {\n        if i > result {\n            result\
    \ = i;\n        }\n    }\n    result", '    unimplemented!()', "    let mut max\
    \ = l[0];\n    for n in l.iter() {\n        if n > &max {\n            max = *n;\n\
    \        }\n    }\n    max", '    return l.iter().fold(0, |max, &x| if x > max
    { x } else { max });', "    let mut max: isize = l[0];\n    for x in l {\n   \
    \     if x > max {\n            max = x;\n        }\n    }\n    max", "    let\
    \ mut max = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n      \
    \      max = l[i];\n        }\n    }\n    max", "    assert!(l.len() > 0);\n \
    \   let mut max = l[0];\n    for elem in l {\n        if elem > max {\n      \
    \      max = elem;\n        }\n    }\n    max", '    return *l.iter().max().unwrap();',
  "    let mut max: isize = l[0];\n    for i in 0..l.len() {\n        if l[i] > max\
    \ {\n            max = l[i];\n        }\n    }\n    max", "    // TODO\n    0",
  "    let mut ret = l[0];\n    for v in l {\n        if v > ret {\n            ret\
    \ = v;\n        }\n    }\n    ret", '    max_min_element(l).1', "    let mut max\
    \ = l[0];\n    for i in l {\n        if i > max {\n            max = i;\n    \
    \    }\n    }\n    max", "    if l.len() == 0 {\n        return 0;\n    }\n  \
    \  let mut maximum = l[0];\n    for i in l {\n        if i > maximum {\n     \
    \       maximum = i;\n        }\n    }\n    maximum", "    let mut max = l[0];\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    // TODO: Implement this function.\n    let mut max = std::isize::MIN;\n\
    \    for elem in l {\n        if elem > max {\n            max = elem;\n     \
    \   }\n    }\n    max", '    l.iter().fold(std::isize::MIN, |m, e| std::cmp::max(m,
    *e))', "    // TODO\n    0", "    let mut max = -10000000000;\n    for e in l\
    \ {\n        if e > max {\n            max = e;\n        }\n    }\n    max", " \
    \   let mut res = l[0];\n    for i in 1..l.len() {\n        if l[i] > res {\n\
    \            res = l[i];\n        }\n    }\n    res", "    let mut v = l.clone();\n\
    \    let mut curr_max = 0;\n    while !v.is_empty() {\n        curr_max = max(curr_max,\
    \ v.pop().unwrap());\n    }\n    curr_max", "    let mut max = l[0];\n    for\
    \ i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n      \
    \  }\n    }\n    max", "    assert!(l.len() > 0);\n    let mut max = l[0];\n \
    \   for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max", "    let mut max = l[0];\n    for i in l {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    max", "    // fixme\n    l.iter().fold(isize::min_value(),\
    \ |a, &b| a.max(b))", '    0', "    let mut max = isize::min_value();\n    for\
    \ item in l {\n        if item > max {\n            max = item;\n        }\n \
    \   }\n    max", "    let mut max = l[0];\n    for i in 1..l.len() {\n       \
    \ if l[i] > max {\n            max = l[i];\n        }\n    }\n    max", '    unimplemented!();',
  "    let mut curr_max = isize::min_value();\n    for i in l {\n        if i > curr_max\
    \ {\n            curr_max = i;\n        }\n    }\n    curr_max", "    let mut\
    \ m = l[0];\n    for i in l {\n        if i > m {\n            m = i;\n      \
    \  }\n    }\n    m", "    // If there is no element, return -infinity.\n    if\
    \ l.len() == 0 {\n        return isize::min_value();\n    }\n\n    // If there\
    \ is only one element, return it.\n    if l.len() == 1 {\n        return l[0];\n\
    \    }\n\n    // If there are at least two elements, compare them.\n    let v1\
    \ = l[0];\n    let v2 = l[1];\n    let max_rest = max_element(l[1..].to_vec());\n\
    \n    if v1 > v2 {\n        if v1 > max_rest {\n            return v1;\n     \
    \   } else {\n            return max_rest;\n        }\n    } else {\n        if\
    \ v2 > max_rest {\n            return v2;\n        } else {\n            return\
    \ max_rest;\n        }\n    }", '    return l.iter().fold(0, |a, &b| a.max(b));',
  "    let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n \
    \           max = l[i];\n        }\n    }\n    max", "    let mut max = isize::min_value();\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    let mut max = l[0];\n    for i in 0..l.len() {\n        if\
    \ l[i] > max {\n            max = l[i];\n        }\n    }\n    max", "    let\
    \ mut max = l[0];\n    for i in l {\n        if i > max {\n            max = i;\n\
    \        }\n    }\n    max", "    let mut max = isize::min_value();\n    for e\
    \ in l {\n        if e > max {\n            max = e;\n        }\n    }\n    max",
  "    let mut max = l[0];\n    for &i in l.iter() {\n        if i > max {\n     \
    \       max = i;\n        }\n    }\n    max", "    let mut max = l[0];\n    for\
    \ n in l {\n        if n > max {\n            max = n;\n        }\n    }\n   \
    \ max", "  let mut max: isize = 0;\n  for i in l {\n    if i > max {\n      max\
    \ = i;\n    }\n  }\n  max", "    let mut acc = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] > acc {\n            acc = l[i];\n        }\n    }\n    acc",
  "    let mut max = 0;\n    for i in l {\n        if i > max {\n            max =\
    \ i;\n        }\n    }\n    max", "    // TODO: Write your code here\n    unimplemented!()",
  "    let mut max = l[0];\n    for x in l.iter() {\n        if x > &max {\n     \
    \       max = *x;\n        }\n    }\n    max", "    let mut m = l[0];\n    for\
    \ v in l {\n        if v > m {\n            m = v;\n        }\n    }\n    m",
  '    l.iter().fold(0, |a, x| if *x > a { *x } else { a })', "    // Write your code\
    \ here\n    let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i] >\
    \ max {\n            max = l[i];\n        }\n    }\n    max", '    l.iter().fold(std::isize::MIN,
    |a, b| if a > *b { a } else { *b })', "    let mut max = l[0];\n    for i in l.iter()\
    \ {\n        if *i > max {\n            max = *i;\n        }\n    }\n    max",
  "    l.iter().fold(0, |acc, x| {\n        if *x > acc {\n            *x\n      \
    \  } else {\n            acc\n        }\n    })", "    let mut result = l[0];\n\
    \    for &x in l.iter() {\n        if x > result {\n            result = x;\n\
    \        }\n    }\n    result", "    let mut max = l[0];\n    for el in l.iter()\
    \ {\n        if *el > max {\n            max = *el;\n        }\n    }\n    max",
  "    let mut m = l[0];\n    for i in l {\n        if i > m {\n            m = i;\n\
    \        }\n    }\n    m", "    let mut max = l[0];\n    for element in l {\n\
    \        if element > max {\n            max = element;\n        }\n    }\n  \
    \  max", '    l.iter().fold(l[0], |acc, &item| if item > acc { item } else { acc
    })', "    let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i] > max\
    \ {\n            max = l[i];\n        }\n    }\n    max", "    let mut m = -1000000;\n\
    \    for num in l {\n        if num > m {\n            m = num;\n        }\n \
    \   }\n    m", "    let mut m = l[0];\n    for i in l {\n        if i > m {\n\
    \            m = i;\n        }\n    }\n    m", "    let mut max: isize = l[0];\n\
    \    for i in 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n\
    \        }\n    }\n    max", "    let mut max = l[0];\n    for i in l {\n    \
    \    if i > max {\n            max = i;\n        }\n    }\n    max", '    l.iter().fold(0,
    |acc, v| if *v > acc { *v } else { acc })', "    let mut max = std::isize::MIN;\n\
    \    for el in l {\n        if el > max {\n            max = el;\n        }\n\
    \    }\n    max", "    l.iter().fold(None, |acc, x| match acc {\n        None\
    \ => Some(*x),\n        Some(curr) => Some(std::cmp::max(curr, *x)),\n    }).unwrap()",
  "    let mut max = 0;\n    for i in l {\n        if i > max {\n            max =\
    \ i;\n        }\n    }\n    max", "    let mut res = isize::min_value();\n   \
    \ for i in l {\n        if i > res {\n            res = i;\n        }\n    }\n\
    \    res", "    let mut max = 0;\n    for i in l {\n        if i > max {\n   \
    \         max = i;\n        }\n    }\n    max", "    let mut vec = l;\n    vec.sort();\n\
    \    vec.pop().unwrap()", "    let mut m = l[0];\n    for x in l {\n        if\
    \ x > m {\n            m = x;\n        }\n    }\n    m", "    let mut m = l[0];\n\
    \    for item in l {\n        if item > m {\n            m = item;\n        }\n\
    \    }\n    m", '  l.iter().max().unwrap().clone()', "    let mut max: isize =\
    \ l[0];\n    for e in l.iter() {\n        if *e > max {\n            max = *e;\n\
    \        }\n    }\n    max", "    let mut max = l[0];\n    for i in l.iter() {\n\
    \        if i > &max {\n            max = *i;\n        }\n    }\n    max", " \
    \   let mut max = l[0];\n    for n in l {\n        if n > max {\n            max\
    \ = n;\n        }\n    }\n    max", "    let mut max = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max",
  "    let mut max = l[0];\n    for i in l {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", "    let mut max = l[0];\n    for i in l {\n\
    \        if i > max {\n            max = i;\n        }\n    }\n    max", "   \
    \ let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n  \
    \          max = l[i];\n        }\n    }\n    max", "    let mut max: isize =\
    \ l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n            max =\
    \ l[i];\n        }\n    }\n    max", "    let mut max = std::isize::MIN;\n   \
    \ for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max", "    let mut m = l[0];\n    for i in l {\n        if i > m {\n    \
    \        m = i;\n        }\n    }\n    m", "    l.iter().fold(std::isize::MIN,\
    \ |acc, v| {\n        std::cmp::max(acc, *v)\n    })", '    *l.iter().max().unwrap()',
  "    let mut max = *l.first().unwrap();\n    for i in l {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    max", '    l.iter().fold(std::isize::MIN,
    |a, b| std::cmp::max(a, *b))', "    let mut max = l[0];\n    for x in l.iter()\
    \ {\n        if x > &max {\n            max = *x;\n        }\n    }\n    max",
  "  let mut m: isize = l[0];\n  for i in l {\n    if i > m {\n      m = i;\n    }\n\
    \  }\n  m"]
stop_tokens:
- "\n}"
