name: HumanEval_140_fix_spaces
language: rs
prompt: "/// Given a string text, replace all spaces in it with underscores, \n///\
  \ and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"\
  Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"\
  Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"\
  _Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"\
  _Example-3\")\nfn fix_spaces(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
  Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
  Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
  Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
  ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
  ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
  -Exa_1_2_2_mple\"));\n}\n"
completions: ['    text.replace(" ", "_")', "    // return text.split_whitespace().collect::<Vec<&str>>().join(\"\
    _\");\n    // return text.replace(\" \", \"_\");\n    return text.replace(\" \
    \ \", \"-\");", "\ttext.replace(\" \", \"_\")", "    let mut new_text = String::new();\n\
    \    let mut need_space = false;\n    let mut num_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            num_spaces += 1;\n            if num_spaces\
    \ == 2 {\n                need_space = true;\n            }\n        } else {\n\
    \            if need_space {\n                new_text.push('-');\n          \
    \      need_space = false;\n            }\n            if num_spaces > 0 {\n \
    \               new_text.push('_');\n            }\n            new_text.push(c);\n\
    \            num_spaces = 0;\n        }\n    }\n    if need_space {\n        new_text.push('-');\n\
    \    }\n    if num_spaces > 0 {\n        new_text.push('_');\n    }\n    new_text",
  "    // Implement me!\n    let n = text.len();\n    let mut res = String::with_capacity(n);\n\
    \    let mut iter = text.trim().chars();\n    let mut i = 0;\n    while let Some(ch)\
    \ = iter.next() {\n        if ch == ' ' {\n            i += 1;\n            if\
    \ i > 2 {\n                res.push('-');\n            } else {\n            \
    \    res.push('_');\n            }\n        } else {\n            i = 0;\n   \
    \         res.push(ch);\n        }\n    }\n    res", "    let mut out_string =\
    \ String::new();\n    let mut buffer = String::new();\n    let mut is_first_space\
    \ = true;\n    let mut is_second_space = false;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if is_first_space {\n                out_string.push('_');\n\
    \                is_first_space = false;\n                is_second_space = true;\n\
    \            } else if is_second_space {\n                buffer.push('-');\n\
    \                is_second_space = false;\n            } else {\n            \
    \    buffer.push('-');\n            }\n        } else {\n            out_string.push_str(&buffer);\n\
    \            out_string.push(c);\n            buffer.clear();\n            is_first_space\
    \ = true;\n            is_second_space = false;\n        }\n    }\n    out_string",
  "    let mut b = text.chars().peekable();\n    let mut c_spaces = 0;\n    let mut\
    \ result = String::new();\n    while let Some(c) = b.next() {\n        if c ==\
    \ ' ' {\n            c_spaces += 1;\n            if c_spaces == 1 {\n        \
    \        result.push('_');\n            } else if c_spaces > 2 {\n           \
    \     result.push('-');\n            }\n        } else {\n            c_spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", '    text.replace("
    ", "_")', "    // TODO: Write your code here\n    unimplemented!()", '    text.replace("
    ", "_")', "    let mut result = String::new();\n    let mut prev = ' ';\n    let\
    \ mut count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n       \
    \     if prev == ' ' {\n                count += 1;\n            } else {\n  \
    \              count = 1;\n            }\n            prev = c;\n        } else\
    \ {\n            prev = c;\n            count = 0;\n        }\n        if count\
    \ == 1 {\n            result.push('_');\n        } else if count == 2 {\n    \
    \        result.push('-');\n        } else if count > 2 {\n            continue;\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    result",
  "    let spaces = ' ';\n    let mut space_count = 0;\n    let mut fix_text = String::new();\n\
    \    for letter in text.chars() {\n        if letter == spaces {\n           \
    \ space_count += 1;\n            if space_count == 2 {\n                fix_text.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            fix_text.push(letter);\n\
    \        }\n    }\n    fix_text.replace(' ', \"_\")", '    unimplemented!()',
  '    text.replace("  ", "-").replace(" ", "_")', "    let mut count = 0;\n    let\
    \ mut flag = false;\n    let mut output: String = String::new();\n    for character\
    \ in text.chars() {\n        if character == ' ' {\n            count += 1;\n\
    \            flag = true;\n        } else {\n            if flag {\n         \
    \       if count > 2 {\n                    output.push('-');\n              \
    \  } else {\n                    output.push('_');\n                }\n      \
    \          flag = false;\n            }\n            output.push(character);\n\
    \        }\n    }\n    if flag {\n        if count > 2 {\n            output.push('-');\n\
    \        } else {\n            output.push('_');\n        }\n    }\n    output",
  '    text.replace(" ", "_")', "    let mut prev_char = ' ';\n    let mut count =\
    \ 0;\n    let mut result = String::from(\"\");\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            count += 1;\n            if count > 2 {\n\
    \                result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            if count > 2 {\n               \
    \ result.push('-');\n            }\n            count = 0;\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result", '    text.replace(" ",
    "_")', "    let mut result = String::new();\n    let mut skip = 0;\n    for (index,\
    \ character) in text.chars().enumerate() {\n        if index < skip {\n      \
    \      continue;\n        }\n        if character == ' ' {\n            let next_character\
    \ = text.chars().nth(index + 1);\n            if next_character.is_some() && next_character.unwrap()\
    \ == ' ' {\n                let next_character = text.chars().nth(index + 2);\n\
    \                if next_character.is_some() && next_character.unwrap() == ' '\
    \ {\n                    result.push('-');\n                    skip = index +\
    \ 2;\n                } else {\n                    result.push('_');\n      \
    \              skip = index + 1;\n                }\n            } else {\n  \
    \              result.push('_');\n                skip = index + 1;\n        \
    \    }\n        } else {\n            result.push(character);\n        }\n   \
    \ }\n    result", "    let mut text_vec: Vec<char> = Vec::new();\n    let mut\
    \ spaces_counter = 0;\n    for c in text.chars() {\n        if c == ' ' {\n  \
    \          spaces_counter += 1;\n            if spaces_counter == 2 {\n      \
    \          text_vec.push('-');\n            }\n        } else {\n            spaces_counter\
    \ = 0;\n            text_vec.push(c);\n        }\n    }\n    let mut text_str\
    \ = String::new();\n    for c in text_vec {\n        text_str.push(c);\n    }\n\
    \    text_str"]
stop_tokens:
- "\n}"
