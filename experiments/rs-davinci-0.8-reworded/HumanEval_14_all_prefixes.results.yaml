language: rs
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut output = Vec::new();\n    for i in 0..string.len()\
    \ + 1 {\n        output.push(string[0..i].to_string());\n    }\n    output\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpyangi2io.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzkowxq35.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(String::from(&string[0..i + 1]));\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..=string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmputdsgdtc.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|i| string[0..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpvr3g0naf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut v = Vec::new();\n    let mut s = String::new();\n\
    \    for c in string.chars() {\n        s.push(c);\n        v.push(s.clone());\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .scan(String::new(),\
    \ |acc, c| {\n            acc.push(c);\n            Some(acc.clone())\n      \
    \  })\n        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(\n            string\n                .chars()\n  \
    \              .take(i + 1)\n                .collect::<String>()\n        );\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| string[0..i].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp40kci3go.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec = Vec::new();\n    let len = string.len();\n\
    \    for i in 0..len {\n        vec.push(string[0..=i].to_string());\n    }\n\
    \    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    for i in 0..string.len() {\n        result.push(chars[0..=i].iter().collect());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..=string.len())\n        .map(|i| string[..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpj2cr3lju.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut prefix = String::new();\n\
    \    for character in string.chars() {\n        prefix.push(character);\n    \
    \    result.push(prefix.clone());\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut string = string;\n\
    \    while !string.is_empty() {\n        result.push(string.clone());\n      \
    \  string.pop();\n    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpph_17lxd.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        current_prefix.push(c);\n\
    \        prefixes.push(current_prefix.clone());\n    }\n    prefixes\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut results = Vec::new();\n    for i in 0..string.len()\
    \ {\n        results.push(string[0..i + 1].to_string());\n    }\n    results\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let str_chars: Vec<char> = string.chars().collect();\n\
    \    let mut all_prefixes: Vec<String> = Vec::new();\n    let mut current_prefix:\
    \ String = String::new();\n    for c in str_chars {\n        current_prefix.push(c);\n\
    \        all_prefixes.push(current_prefix.clone());\n    }\n    all_prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
