language: rs
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut output = Vec::new();\n    for i in 0..string.len()\
    \ + 1 {\n        output.push(string[0..i].to_string());\n    }\n    output\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpyangi2io.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzkowxq35.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(String::from(&string[0..i + 1]));\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..=string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmputdsgdtc.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|i| string[0..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpvr3g0naf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut v = Vec::new();\n    let mut s = String::new();\n\
    \    for c in string.chars() {\n        s.push(c);\n        v.push(s.clone());\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .scan(String::new(),\
    \ |acc, c| {\n            acc.push(c);\n            Some(acc.clone())\n      \
    \  })\n        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(\n            string\n                .chars()\n  \
    \              .take(i + 1)\n                .collect::<String>()\n        );\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| string[0..i].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp40kci3go.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec = Vec::new();\n    let len = string.len();\n\
    \    for i in 0..len {\n        vec.push(string[0..=i].to_string());\n    }\n\
    \    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    for i in 0..string.len() {\n        result.push(chars[0..=i].iter().collect());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..=string.len())\n        .map(|i| string[..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpj2cr3lju.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut prefix = String::new();\n\
    \    for character in string.chars() {\n        prefix.push(character);\n    \
    \    result.push(prefix.clone());\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut string = string;\n\
    \    while !string.is_empty() {\n        result.push(string.clone());\n      \
    \  string.pop();\n    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpph_17lxd.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        current_prefix.push(c);\n\
    \        prefixes.push(current_prefix.clone());\n    }\n    prefixes\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut results = Vec::new();\n    for i in 0..string.len()\
    \ {\n        results.push(string[0..i + 1].to_string());\n    }\n    results\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let str_chars: Vec<char> = string.chars().collect();\n\
    \    let mut all_prefixes: Vec<String> = Vec::new();\n    let mut current_prefix:\
    \ String = String::new();\n    for c in str_chars {\n        current_prefix.push(c);\n\
    \        all_prefixes.push(current_prefix.clone());\n    }\n    all_prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|i| string[0..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpvr3g0naf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let len = string.len();\n    let mut v = Vec::with_capacity(len);\n\
    \    for i in 0..len {\n        v.push(string[0..i + 1].to_string());\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .enumerate()\n     \
    \   .map(|(i, _)| &string[..i])\n        .map(|prefix| prefix.to_string())\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpxwg55vi_.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut output = Vec::new();\n    let mut chars = string.chars();\n\
    \    let mut current_prefix = String::new();\n    while let Some(ch) = chars.next()\
    \ {\n        current_prefix.push(ch);\n        output.push(current_prefix.clone());\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzkowxq35.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for len in 1..=string.len()\
    \ {\n        prefixes.push(string[..len].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut string = string;\n    let mut result = Vec::new();\n\
    \    while !string.is_empty() {\n        result.push(string.clone());\n      \
    \  string.pop();\n    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7akkk_ng.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ + 1 {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp0shm9zmo.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let bytes = string.as_bytes();\n\
    \    for i in 0..bytes.len() {\n        prefixes.push(String::from_utf8(bytes[0..=i].to_vec()).unwrap());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let length = string.len();\n    (0..length + 1)\n    \
    \    .map(|n| string[0..n].to_string())\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp2el7zgcv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut results = Vec::new();\n    for index in 0..string.len()\
    \ {\n        results.push(string[0..index].to_string());\n    }\n    results\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpeynhy30h.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut res = Vec::new();\n    for i in 0..string.len()\
    \ {\n        res.push(string[0..i + 1].to_string());\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|i| string[0..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpvr3g0naf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut acc = String::new();\n\
    \    for c in string.chars() {\n        acc.push(c);\n        prefixes.push(acc.clone());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for (i, _) in string.chars().enumerate()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|i| string[0..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpvr3g0naf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    if string.is_empty() {\n        return vec![];\n    }\n\
    \    let mut result = vec![string.clone()];\n    while !string.is_empty() {\n\
    \        string.pop();\n        result.push(string.clone());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `string` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpk5g11j49.rs:10:9\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                 ------ help: consider changing\
    \ this to be mutable: `mut string`\n...\n10 |         string.pop();\n   |    \
    \     ^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976616
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let len = string.len();\n    (0..len)\n        .map(|i|\
    \ string[0..i + 1].to_string())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut chars = string.chars();\n\
    \    while let Some(c) = chars.next() {\n        prefixes.push(String::from(chars.as_str()));\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"sdfgh\", \"dfgh\", \"fgh\", \"gh\", \"h\", \"\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpnkttg0uy.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ + 1 {\n        result.push(string[0..i].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp7u8ar4q0.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut ret = Vec::new();\n    let bytes = string.as_bytes();\n\
    \    for n in 1..bytes.len() + 1 {\n        ret.push(String::from_utf8(bytes[0..n].to_vec()).unwrap());\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..=string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmputdsgdtc.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for (i, _) in string.chars().enumerate()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut rv = Vec::new();\n    for i in 0..string.len()\
    \ + 1 {\n        rv.push(string[0..i].to_string());\n    }\n    rv\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpwjmdhdci.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut index = 0;\n    let mut vec = Vec::new();\n  \
    \  for _ in 0..string.len() {\n        vec.push(string[0..index].to_string());\n\
    \        index += 1;\n    }\n    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp_f5lqahw.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let chars = string.chars();\n\
    \    let mut prev_char = None;\n    for c in chars {\n        match prev_char\
    \ {\n            Some(prev) => {\n                let new_prefix = format!(\"\
    {}{}\", prev, c);\n                prefixes.push(new_prefix);\n              \
    \  prev_char = Some(new_prefix);\n            }\n            None => {\n     \
    \           prefixes.push(format!(\"{}\", c));\n                prev_char = Some(format!(\"\
    {}\", c));\n            }\n        }\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `new_prefix`\n  --> /tmp/tmpb5le7x1x.rs:13:34\n\
    \   |\n11 |                 let new_prefix = format!(\"{}{}\", prev, c);\n   |\
    \                     ---------- move occurs because `new_prefix` has type `String`,\
    \ which does not implement the `Copy` trait\n12 |                 prefixes.push(new_prefix);\n\
    \   |                               ---------- value moved here\n13 |        \
    \         prev_char = Some(new_prefix);\n   |                                \
    \  ^^^^^^^^^^ value used here after move\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976616
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut all_prefixes = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        current_prefix.push(c);\n\
    \        all_prefixes.push(current_prefix.clone());\n    }\n    all_prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let string_chars:\
    \ Vec<char> = string.chars().collect();\n    let length = string_chars.len();\n\
    \    for i in 0..length {\n        let mut prefix = String::new();\n        for\
    \ j in 0..i + 1 {\n            prefix.push(string_chars[j]);\n        }\n    \
    \    prefixes.push(prefix);\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzkowxq35.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix = String::new();\n\
    \    for (i, c) in string.chars().enumerate() {\n        prefix.push(c);\n   \
    \     prefixes.push(prefix.clone());\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vect = Vec::new();\n    for i in 0..string.len()\
    \ {\n        vect.push(string[0..i].to_string());\n    }\n    vect\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp_mg1yi28.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let chars: Vec<char> = string.chars().collect();\n   \
    \ let mut result: Vec<String> = Vec::new();\n    for i in 0..string.len() {\n\
    \        let mut s = String::new();\n        for j in 0..i+1 {\n            s.push(chars[j]);\n\
    \        }\n        result.push(s);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut res = Vec::new();\n    for n in 1..string.len()\
    \ + 1 {\n        res.push(string[0..n].to_string());\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| string[0..i].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp40kci3go.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzkowxq35.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut out = Vec::new();\n    for length in 1..=string.len()\
    \ {\n        out.push(string[..length].to_string());\n    }\n    out\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ + 1 {\n        prefixes.push(String::from(&string[0..i]));\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpyl6a0m85.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut res = Vec::new();\n    for i in 0..string.len()\
    \ {\n        res.push(String::from(&string[0..i + 1]));\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let chars = string.chars();\n\
    \    let mut prefix = String::new();\n    for c in chars {\n        prefix.push(c);\n\
    \        prefixes.push(prefix.clone());\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|i| String::from(&string[..i]))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpwusd00aq.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let result: Vec<String> = (0..string.len() + 1)\n    \
    \    .map(|i| &string[0..i])\n        .map(|v| v.to_string())\n        .collect();\n\
    \    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmptwnwd6gn.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for i in 0..string.len()\
    \ {\n        vec.push(string[0..i].to_string());\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpa4keewi8.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let str_length = string.len();\n    let mut prefixes =\
    \ Vec::new();\n    for i in 0..str_length {\n        prefixes.push(string[0..i\
    \ + 1].to_string());\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec = Vec::new();\n    for i in 0..string.len()\
    \ {\n        vec.push(string[0..=i].to_string());\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut v = Vec::new();\n    for i in 1..=string.len()\
    \ {\n        v.push(string[0..i].to_string());\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| string[0..i].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp40kci3go.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut ret: Vec<String> = Vec::new();\n    for i in 0..string.len()\
    \ {\n        ret.push(string[0..i + 1].to_string());\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .as_bytes()\n        .iter()\n       \
    \ .scan(String::new(), |state, &byte| {\n            state.push(byte as char);\n\
    \            Some(state.clone())\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..=string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmputdsgdtc.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..=string.len()\
    \ {\n        result.push(String::from(&string[0..i]));\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpcw8fzkk4.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefs = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefs.push(string[0..i + 1].to_string());\n    }\n    prefs\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i].to_string());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp2ds634zp.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let length = string.len();\n    if length == 0 {\n   \
    \     return vec![];\n    }\n\n    let mut prefixes = Vec::with_capacity(length);\n\
    \    for i in 0..length {\n        prefixes.push(string[0..i + 1].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let bytes = string.as_bytes();\n\
    \    for index in 0..bytes.len() {\n        prefixes.push(\n            bytes[0..=index]\n\
    \                .iter()\n                .map(|&b| b as char)\n             \
    \   .collect::<String>(),\n        );\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut all_prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        all_prefixes.push(string[0..i + 1].to_string());\n    }\n    all_prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut ret_vec = Vec::new();\n    let mut prefix = String::new();\n\
    \    for character in string.chars() {\n        prefix.push(character);\n    \
    \    ret_vec.push(prefix.clone());\n    }\n    ret_vec\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    // TODO (Issue 2): Implement function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp77s356n5.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..=i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for prefix_len in\
    \ 1..string.len() + 1 {\n        prefixes.push(string[0..prefix_len].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let chars: Vec<char> = string.chars().collect();\n   \
    \ let mut prefixes: Vec<String> = Vec::new();\n    let mut cur_prefix: String\
    \ = String::new();\n    for c in chars {\n        cur_prefix.push(c);\n      \
    \  prefixes.push(cur_prefix.clone());\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    //if string.len() == 0 {\n    //    return vec![];\n \
    \   //}\n    //else {\n    //    return [string.clone()].to_vec() + &all_prefixes(string[1..].to_string());\n\
    \    //}\n    string.chars().scan(String::new(), |state, x| {\n        state.push(x);\n\
    \        Some(state.clone())\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..=i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    if string.is_empty() {\n        return vec![];\n    }\n\
    \n    let mut prefixes = vec![];\n    for (i, _) in string.char_indices() {\n\
    \        prefixes.push(string[..i + 1].to_string());\n    }\n\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).fold(vec![], |mut acc, x| {\n      \
    \  acc.push(String::from(&string[..=x]));\n        acc\n    })\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i].to_string());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp2ds634zp.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut cur_str = String::new();\n    let mut prefixes\
    \ = Vec::new();\n    for c in string.chars() {\n        cur_str.push(c);\n   \
    \     prefixes.push(cur_str.clone());\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| string[0..i].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp40kci3go.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut res = Vec::new();\n    for i in 0..string.len()\
    \ {\n        res.push(string[0..=i].to_string());\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let chars: Vec<char> = string.chars().collect();\n   \
    \ let mut prefixes: Vec<String> = Vec::new();\n    for i in 0..string.len() {\n\
    \        let mut prefix: String = String::new();\n        for j in 0..i + 1 {\n\
    \            prefix.push(chars[j]);\n        }\n        prefixes.push(prefix);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|i| string[0..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpvr3g0naf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|x| string[0..x].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp_13o746i.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let size = string.len();\n\
    \    for i in 0..size {\n        prefixes.push(string[0..i + 1].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(String::from(&string[0..i + 1]));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut results = Vec::new();\n    for position in 0..string.len()\
    \ {\n        results.push(string[0..=position].to_string());\n    }\n    results\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut str_vec = Vec::new();\n    for i in 0..string.len()\
    \ {\n        str_vec.push(string[0..i + 1].to_string());\n    }\n    str_vec\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..=string.len())\n        .map(|i| &string[..i])\n \
    \       .map(|prefix| prefix.to_string())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpypybjmp1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let len = string.len();\n    let mut result = Vec::new();\n\
    \    for i in 0..len {\n        result.push(string[0..i].to_string());\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp2jvmr181.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzkowxq35.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut output = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        current_prefix.push(c);\n\
    \        output.push(current_prefix.clone());\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(String::from(&string[0..i + 1]));\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let chars = string.chars();\n\
    \    let (prefix, rest) = chars.clone().split_at(1);\n    prefixes.push(prefix.iter().collect());\n\
    \    let rest = rest.iter().collect();\n    prefixes.append(&mut all_prefixes(rest));\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `split_at` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp05l73_dj.rs:7:40\n  |\n7 |     let (prefix, rest)\
    \ = chars.clone().split_at(1);\n  |                                        ^^^^^^^^\
    \ method not found in `Chars<'_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).fold(Vec::new(), |mut acc, i| {\n  \
    \      acc.push(string[..=i].to_string());\n        acc\n    })\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let s_bytes = string.into_bytes();\n    (0..=s_bytes.len())\n\
    \        .map(|i| String::from_utf8(s_bytes[..i].to_vec()).unwrap())\n       \
    \ .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpc8fa820g.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(String::from(&string[0..i + 1]));\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut r = Vec::new();\n    for i in 1..=string.len()\
    \ {\n        r.push(string[0..i].to_string());\n    }\n    r\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let len = string.len();\n    (0..len).map(|x| string[0..x].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpfrqg2nqv.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| &string[..i + 1]).map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let length = string.len();\n    (0..length).map(|i| string[0..i].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpq9zco_tw.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..=i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for n in 1..string.len()\
    \ + 1 {\n        prefixes.push(string[0..n].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..=string.len()\
    \ {\n        result.push(string[0..i].to_string());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp01571gdt.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let bytes = string.as_bytes();\n\
    \    for idx in 0..bytes.len() {\n        prefixes.push(std::str::from_utf8(&bytes[0..idx]).unwrap().to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpbwq4nfwu.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..=string.len())\n        .map(|i| &string[..i])\n \
    \       .map(|s| s.to_string())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp9s9duax2.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut v = Vec::new();\n    for i in 1..string.len()+1\
    \ {\n        v.push(String::from(&string[0..i]));\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix = String::new();\n\
    \    for (i, c) in string.chars().enumerate() {\n        prefix.push(c);\n   \
    \     prefixes.push(prefix.clone());\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let l = string.len();\n\
    \    for i in 0..l {\n        prefixes.push(string[0..i].to_string());\n    }\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpglffqsrn.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(String::from(&string[0..i + 1]));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec = Vec::new();\n    let mut prefix = String::new();\n\
    \    for char in string.chars() {\n        prefix.push(char);\n        vec.push(prefix.clone());\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| string[0..i + 1].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let prefixes = (0..=string.len())\n        .map(|i| string.get(0..i).unwrap())\n\
    \        .collect::<Vec<&str>>();\n    prefixes.iter().map(|&s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp2770v5xm.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| &string[..i]).map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpt3n_odu7.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    // Start with a vector with one element - an empty string.\n\
    \    let mut prefixes = vec![String::from(\"\")];\n\n    // As long as the first\
    \ element of the vector isn't the same as the input string,\n    // push a new\
    \ prefix onto the vector.\n    while prefixes[0] != string {\n        // Prepare\
    \ the next prefix by converting the first element of the vector\n        // to\
    \ a String, and adding a trailing character.\n        let next_prefix = String::from(&prefixes[0])\
    \ + &string[prefixes[0].len()..prefixes[0].len() + 1];\n\n        // Push the\
    \ next prefix onto the vector.\n        prefixes.insert(0, next_prefix);\n   \
    \ }\n\n    // Return the vector.\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmph2cniejd.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..=i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ + 1 {\n        result.push(string[0..i].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp7u8ar4q0.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..=i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut res = Vec::new();\n    for i in 0..string.len()\
    \ {\n        res.push(string[0..i + 1].to_string());\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let chars: Vec<char> = string.chars().collect();\n   \
    \ let mut result: Vec<String> = Vec::new();\n    let mut s = String::new();\n\
    \    for (i, char) in chars.iter().enumerate() {\n        s.push(*char);\n   \
    \     result.push(s.clone());\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..=i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    // Idea: let's try to go backwards, that might be easier\n\
    \    let mut result = Vec::<String>::new();\n    let mut temp = String::new();\n\
    \    for c in string.chars().rev() {\n        temp.insert(0, c);\n        result.push(temp.clone());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"h\", \"gh\", \"fgh\", \"dfgh\", \"sdfgh\", \"asdfgh\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpwq2mc9v0.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    all_prefixes_recursive(string, Vec::new())\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `all_prefixes_recursive` in this scope\n\
    \ --> /tmp/tmpxpo75qfh.rs:5:5\n  |\n5 |     all_prefixes_recursive(string, Vec::new())\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    // Create vector with all string chars\n    let vec: Vec<char>\
    \ = string.chars().collect();\n    // Create vector of strings with all prefixes\n\
    \    let mut prefixes: Vec<String> = Vec::new();\n    // Iterate over all chars\
    \ and use them to create all possible prefixes\n    for i in 0..vec.len() {\n\
    \        let prefix = vec[0..i].iter().collect();\n        prefixes.push(prefix);\n\
    \    }\n    // Return vector with all prefixes of the input string\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmba0tlng.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let bytes = string.as_bytes();\n\
    \    for i in 0..bytes.len() {\n        prefixes.push(String::from_utf8(bytes[0..=i].to_vec()).unwrap());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(String::from(&string[0..i + 1]));\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut res = Vec::new();\n    for i in 0..string.len()\
    \ {\n        res.push(string[0..i].to_string());\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp59ztd1pb.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .scan(String::new(),\
    \ |prefix, c| {\n            *prefix += &c.to_string();\n            Some(prefix.clone())\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let len = string.len();\n    let mut prefixes = Vec::with_capacity(len);\n\
    \    for i in 0..len {\n        prefixes.push(String::from(&string[0..i+1]));\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .scan(String::new(),\
    \ |prefix, ch| {\n            prefix.push(ch);\n            Some(prefix.clone())\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let chars: Vec<char> = string.chars().collect();\n   \
    \ let mut vec = Vec::new();\n    for (i, _) in chars.iter().enumerate() {\n  \
    \      vec.push(chars[0..i + 1].iter().collect());\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .scan(0, |state, _|\
    \ {\n            *state += 1;\n            Some(*state)\n        })\n        .map(|idx|\
    \ string[..idx].to_string())\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    let mut current_string = String::new();\n \
    \   for c in chars {\n        current_string.push(c);\n        result.push(current_string.clone());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    for i in 0..chars.len() {\n        result.push(chars[0..=i].iter().collect::<String>());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec = Vec::new();\n    for i in 0..string.len()\
    \ {\n        vec.push(string[0..i + 1].to_string());\n    }\n    vec\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut out: Vec<String> = Vec::new();\n    let mut chars\
    \ = string.chars();\n    let mut prefix = String::new();\n    while let Some(c)\
    \ = chars.next() {\n        prefix.push(c);\n        out.push(prefix.clone());\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    let bytes\
    \ = string.as_bytes();\n    for i in 0..bytes.len() {\n        vec.push(String::from_utf8(bytes[0..i\
    \ + 1].to_vec()).unwrap());\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let char_vec: Vec<char>\
    \ = string.chars().collect();\n    let len = char_vec.len();\n    for i in 0..len\
    \ {\n        let prefix = char_vec[0..i].iter().collect();\n        prefixes.push(prefix);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpgywyg8_t.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for index in 0..string.len()\
    \ {\n        prefixes.push(String::from(&string[0..index + 1]));\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .scan(String::new(),\
    \ |acc, ch| {\n            acc.push(ch);\n            Some(acc.clone())\n    \
    \    })\n        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let str_vec: Vec<char> = string.chars().collect();\n \
    \   let mut prefixes: Vec<String> = Vec::new();\n    for i in 0..str_vec.len()\
    \ {\n        let mut new_prefix = String::new();\n        for j in 0..i + 1 {\n\
    \            new_prefix.push(str_vec[j]);\n        }\n        prefixes.push(new_prefix);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for character in string.chars() {\n        current_prefix.push(character);\n\
    \        result.push(current_prefix.clone());\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let chars: Vec<char> = string.chars().collect();\n   \
    \ (0..=chars.len())\n        .map(|n| chars[0..n].iter().collect())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpdnc4vkbq.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut all_prefixes: Vec<String> = Vec::new();\n    let\
    \ mut char_count = 0;\n    for character in string.chars() {\n        char_count\
    \ += 1;\n        all_prefixes.push(string[0..char_count].to_string());\n    }\n\
    \    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|i| string[0..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpvr3g0naf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    // Initialise with empty vector\n    let mut vec: Vec<String>\
    \ = Vec::new();\n    // Iterate through string by character\n    for (index, _)\
    \ in string.char_indices() {\n        // Push substring to vector\n        vec.push(string[..=index].to_string());\n\
    \    }\n    // Return vector\n    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut len = 1;\n \
    \   while len <= string.len() {\n        result.push(string[0..len].to_string());\n\
    \        len += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec = Vec::new();\n    for i in 0..string.len()\
    \ {\n        vec.push(String::from(&string[0..=i]));\n    }\n    vec\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzkowxq35.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..=i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut output = Vec::new();\n    for start in 0..string.len()\
    \ {\n        output.push(String::from(&string[0..=start]));\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec = Vec::new();\n    for i in 0..string.len()\
    \ {\n        vec.push(String::from(&string[0..=i]));\n    }\n    vec\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..=i].to_string());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzkowxq35.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..=i].to_string());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let s = string.as_str();\n\
    \    for i in 0..s.len() {\n        prefixes.push(s[0..i + 1].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut results = Vec::new();\n    for i in 0..string.len()\
    \ {\n        results.push(String::from(&string[0..i+1]));\n    }\n    results\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let string_length = string.len();\n    let mut all_prefixes:\
    \ Vec<String> = Vec::new();\n    for i in 0..string_length {\n        all_prefixes.push(string[0..=i].to_string());\n\
    \    }\n    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ + 1 {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp0shm9zmo.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| string[0..i + 1].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| (&string[..=i]).to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::with_capacity(string.len());\n\
    \    for i in 0..string.len() {\n        prefixes.push(string[0..i + 1].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..=i].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976617
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for index in 0..string.len()\
    \ {\n        prefixes.push(String::from(&string[0..index+1]));\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut vec: Vec<String> = Vec::new();\n    for i in 0..string.len()\
    \ {\n        vec.push(string[0..i + 1].to_string());\n    }\n    vec\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::with_capacity(string.len());\n\
    \    for len in 1..string.len() + 1 {\n        prefixes.push(string[0..len].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| string[0..i].to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp40kci3go.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for prefix_len in 1..string.len()\
    \ + 1 {\n        result.push(string[0..prefix_len].to_string());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for character in string.chars() {\n        current_prefix.push(character);\n\
    \        result.push(current_prefix.clone());\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut v = Vec::new();\n    for i in 1..string.len()\
    \ + 1 {\n        v.push(String::from(&string[0..i]));\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for end in 1..string.len()\
    \ + 1 {\n        prefixes.push(String::from(&string[0..end]));\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut results = Vec::new();\n    for i in 0..string.len()\
    \ {\n        results.push(string[0..i].to_string());\n    }\n    results\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp_cxjah7j.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut res = Vec::new();\n    let mut curr = String::new();\n\
    \    for ch in string.chars() {\n        curr.push(ch);\n        res.push(curr.clone());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzkowxq35.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let chars = string.chars();\n\
    \    let mut prev_prefix = String::new();\n    for c in chars {\n        prev_prefix.push(c);\n\
    \        prefixes.push(prev_prefix.clone());\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 0
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len()).map(|i| &string[..i + 1]).map(String::from).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let len = string.len();\n    let mut result = Vec::with_capacity(len);\n\
    \    for i in 0..len {\n        result.push(string[0..i].to_string());\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpwtxta5vq.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976618
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    (0..string.len() + 1)\n        .map(|i| string[0..i].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpvr3g0naf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822564
