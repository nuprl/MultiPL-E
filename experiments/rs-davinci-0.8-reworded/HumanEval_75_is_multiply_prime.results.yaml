name: HumanEval_75_is_multiply_prime
language: rs
results:
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut\
    \ num_primes = 0;\n    let mut prime = 2;\n    let mut is_prime;\n    loop {\n\
    \        is_prime = true;\n        for i in 2..prime {\n            if prime %\
    \ i == 0 {\n                is_prime = false;\n                break;\n      \
    \      }\n        }\n        if is_prime {\n            if b % prime == 0 {\n\
    \                b /= prime;\n                num_primes += 1;\n            }\
    \ else {\n                prime += 1;\n            }\n        } else {\n     \
    \       prime += 1;\n        }\n        if num_primes == 3 && b == 1 {\n     \
    \       return true;\n        } else if b == 1 {\n            return false;\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut counter: isize =\
    \ 2;\n    let mut b: isize = 1;\n    let mut d: isize = 1;\n    let mut e: isize\
    \ = 1;\n    let mut f: isize = 0;\n    let mut g: isize = 0;\n    let mut h: isize\
    \ = 0;\n    while counter <= a {\n        if a % counter == 0 {\n            b\
    \ = counter;\n            counter += 1;\n            if b % 2 != 0 && b % 3 !=\
    \ 0 && b % 5 != 0 && b % 7 != 0 {\n                if g == 0 {\n             \
    \       d = b;\n                    g += 1;\n                } else if h == 0\
    \ {\n                    e = b;\n                    h += 1;\n               \
    \ } else {\n                    f = b;\n                }\n            }\n   \
    \     } else {\n            counter += 1;\n        }\n    }\n    if d * e * f\
    \ == a {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoznha1pu.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut temp = a;\n    let\
    \ div = 2;\n    let mut primes = Vec::new();\n    while temp > 1 {\n        if\
    \ temp % div == 0 {\n            primes.push(div);\n            temp /= div;\n\
    \        } else {\n            div += 1;\n        }\n    }\n    primes.len() ==\
    \ 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `div`\n  --> /tmp/tmp5tjwjkra.rs:17:13\n\
    \   |\n10 |     let div = 2;\n   |         ---\n   |         |\n   |         first\
    \ assignment to `div`\n   |         help: consider making this binding mutable:\
    \ `mut div`\n...\n17 |             div += 1;\n   |             ^^^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let primes: Vec<isize> =\
    \ (2..a).filter(|i| is_prime(*i)).collect();\n    let l = primes.len();\n    primes.iter().enumerate().any(|(i,\
    \ f)| {\n        let r = a - f;\n        (i+1..l).any(|j| {\n            let mut\
    \ m = f * primes[j];\n            (j+1..l).any(|k| {\n                let s =\
    \ m * primes[k];\n                if s == a {\n                    return true;\n\
    \                }\n                m = s;\n                false\n          \
    \  })\n        })\n    })\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpigrq7z53.rs:9:48\n\
    \  |\n9 |     let primes: Vec<isize> = (2..a).filter(|i| is_prime(*i)).collect();\n\
    \  |                                                ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    for i in 2..a {\n       \
    \ if a % i == 0 {\n            let b = a / i;\n            for j in 2..b {\n \
    \               if b % j == 0 {\n                    let c = b / j;\n        \
    \            for k in 2..c {\n                        if c % k == 0 {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    // Write your code here\n\
    \    // &str, <'a>, &'a str\n    let res = Vec::new();\n    for i in 2..a + 1\
    \ {\n        if a % i == 0 {\n            res.push(i);\n        }\n    }\n   \
    \ if res.len() == 3 {\n        for j in &res {\n            if j != 2 || j !=\
    \ 3 || j != 5 {\n                return false;\n            }\n        }\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp80j5df3a.rs:19:18\n\
    \   |\n19 |             if j != 2 || j != 3 || j != 5 {\n   |                \
    \  ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmp80j5df3a.rs:19:28\n \
    \  |\n19 |             if j != 2 || j != 3 || j != 5 {\n   |                 \
    \           ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp80j5df3a.rs:19:38\n\
    \   |\n19 |             if j != 2 || j != 3 || j != 5 {\n   |                \
    \                      ^^ no implementation for `&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a < 2 {\n        return\
    \ false;\n    }\n    let primes: Vec<isize> = (2..100).filter(|&x| is_prime(x)).collect();\n\
    \    primes.iter().any(|&prime1| {\n        primes.iter().any(|&prime2| {\n  \
    \          primes.iter().any(|&prime3| {\n                prime1 * prime2 * prime3\
    \ == a\n            })\n        })\n    })\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp3oh29di7.rs:12:51\n\
    \   |\n12 |     let primes: Vec<isize> = (2..100).filter(|&x| is_prime(x)).collect();\n\
    \   |                                                   ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    // let mut is_prime = true;\n\
    \    // for i in a {\n    //     if i % 2 == 0 {\n    //         is_prime = false;\n\
    \    //     } else {\n    //         is_prime = true;\n    //     }\n    // }\n\
    \    let b = vec![1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99];\n\
    \    let b = b.iter().map(|x| x.to_string()).collect::<Vec<String>>();\n    let\
    \ a = format!(\"{}\", a);\n    let a = a.to_string();\n    if b.contains(&a) {\n\
    \        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpoxmdvi2_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n\tlet mut a1 = a;\n\tlet mut\
    \ n = 2;\n\tlet mut prime = true;\n\twhile a1 > 1 {\n\t\twhile a1 % n == 0 {\n\
    \t\t\tprime = is_prime(n);\n\t\t\tif prime == false {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\ta1 = a1 / n;\n\t\t}\n\t\tn += 1;\n\t}\n\ttrue\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp4hezi9vf.rs:14:12\n\
    \   |\n14 |             prime = is_prime(n);\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    for prime in get_primes_in_range(1,\
    \ a) {\n        for prime2 in get_primes_in_range(prime, a - prime) {\n      \
    \      for prime3 in get_primes_in_range(prime2, a - prime - prime2) {\n     \
    \           if prime * prime2 * prime3 == a {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_primes_in_range` in this scope\n\
    \ --> /tmp/tmp_6bbqaap.rs:9:18\n  |\n9 |     for prime in get_primes_in_range(1,\
    \ a) {\n  |                  ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `get_primes_in_range` in this scope\n  --> /tmp/tmp_6bbqaap.rs:10:23\n\
    \   |\n10 |         for prime2 in get_primes_in_range(prime, a - prime) {\n  \
    \ |                       ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `get_primes_in_range` in this scope\n  --> /tmp/tmp_6bbqaap.rs:11:27\n\
    \   |\n11 |             for prime3 in get_primes_in_range(prime2, a - prime -\
    \ prime2) {\n   |                           ^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpv3bat5r1.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp181uztls.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    for x in 2..a {\n       \
    \ for y in 2..a {\n            for z in 2..a {\n                if x * y * z ==\
    \ a {\n                    return true;\n                }\n            }\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpowjta524.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut sum = 2;\n    let\
    \ mut i = 2;\n    let mut m = a;\n    let mut x = a - 1;\n    let mut prime_numbers\
    \ = vec![];\n    while m >= i {\n        let mut b = 0;\n        for n in 2..x\
    \ {\n            if x % n == 0 {\n                b += 1;\n            }\n   \
    \     }\n        if b == 0 {\n            sum *= x;\n            prime_numbers.push(x);\n\
    \            i += 1;\n        }\n        x -= 1;\n    }\n    if sum == a {\n \
    \       return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd6ase3h2.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ prime_mult = Vec::new();\n    let mut div = 2;\n    while a != 1 {\n       \
    \ while a % div == 0 {\n            prime_mult.push(div);\n            a /= div;\n\
    \        }\n        div += 1;\n    }\n    prime_mult.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut return_bool = false;\n\
    \    for i in 2..101 {\n        if a % i == 0 {\n            let y = a / i;\n\
    \            for x in 2..101 {\n                if y % x == 0 {\n            \
    \        let z = y / x;\n                    for w in 2..101 {\n             \
    \           if z % w == 0 {\n                            let v = z / w;\n    \
    \                        if v == 1 {\n                                return_bool\
    \ = true;\n                            }\n                        }\n        \
    \            }\n                }\n            }\n        }\n    }\n    return_bool\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi04059go.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let f = PrimeIter::new();\n\
    \    let s = f.take_while(|x| x < &(a as f64)).filter(|x| a % x == 0).collect::<Vec<_>>();\n\
    \    let b = s.len();\n    if b < 3 {\n        return false;\n    } else {\n \
    \       return true;\n    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `PrimeIter`\n -->\
    \ /tmp/tmp338nvhue.rs:9:13\n  |\n9 |     let f = PrimeIter::new();\n  |      \
    \       ^^^^^^^^^ use of undeclared type `PrimeIter`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let primes = is_prime::get_primes(a);\n\
    \    let mut v = Vec::new();\n    for i in primes {\n        let rem = a % i;\n\
    \        if rem == 0 {\n            v.push(i);\n        }\n    }\n    let fst\
    \ = v[0];\n    let snd = v[1];\n    let trd = v[2];\n    if fst * snd * trd ==\
    \ a {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `is_prime`\n\
    \ --> /tmp/tmp1i836ut8.rs:9:18\n  |\n9 |     let primes = is_prime::get_primes(a);\n\
    \  |                  ^^^^^^^^ use of undeclared crate or module `is_prime`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt4cmwyio.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    for i in 1..a {\n       \
    \ if a % i == 0 {\n            if is_prime(i) {\n                for j in i..a\
    \ {\n                    if a % j == 0 {\n                        if is_prime(j)\
    \ {\n                            if a % (a / i / j) == 0 {\n                 \
    \               if is_prime(a / i / j) {\n                                   \
    \ return true;\n                                }\n                          \
    \  }\n                        }\n                    }\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwa6_nw2i.rs:11:16\n\
    \   |\n11 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpwa6_nw2i.rs:14:28\n   |\n14 |                         if is_prime(j)\
    \ {\n   |                            ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmpwa6_nw2i.rs:16:36\n\
    \   |\n16 | ...                   if is_prime(a / i / j) {\n   |             \
    \             ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
