language: rs
name: HumanEval_27_flip_case
results:
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|ch|\
    \ {\n        if ch.is_uppercase() {\n            ch.to_lowercase().next().unwrap()\n\
    \        } else {\n            ch.to_uppercase().next().unwrap()\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        x if x.is_ascii_lowercase() => x.to_ascii_uppercase(),\n\
    \        x if x.is_ascii_uppercase() => x.to_ascii_lowercase(),\n        _ =>\
    \ c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // TODO\n    String::new()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"hELLO!\"`', /tmp/tmpowamrjkh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        let up_case = c.to_uppercase().to_string();\n\
    \        let lo_case = c.to_lowercase().to_string();\n        if c == up_case.chars().next().unwrap()\
    \ {\n            flipped_string.push(lo_case.chars().next().unwrap());\n     \
    \   } else {\n            flipped_string.push(up_case.chars().next().unwrap());\n\
    \        }\n    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|x|\
    \ {\n        if x.is_ascii_uppercase() {\n            x.to_ascii_lowercase()\n\
    \        } else {\n            x.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|x|\
    \ {\n        if x.is_ascii_uppercase() {\n            x.to_ascii_lowercase()\n\
    \        } else {\n            x.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' ... 'z' => c.to_ascii_uppercase(),\n        'A' ... 'Z'\
    \ => c.to_ascii_lowercase(),\n        _ => c\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut new_string = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            new_string.push(c.to_uppercase().nth(0).unwrap());\n\
    \        } else if c.is_uppercase() {\n            new_string.push(c.to_lowercase().nth(0).unwrap());\n\
    \        } else {\n            new_string.push(c);\n        }\n    }\n    new_string\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|x|\
    \ {\n        if x.is_uppercase() {\n            x.to_lowercase().next().unwrap()\n\
    \        } else {\n            x.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for ch in string.chars() {\n        if ch.is_lowercase() {\n            flipped.push(ch.to_uppercase().next().unwrap());\n\
    \        } else if ch.is_uppercase() {\n            flipped.push(ch.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(ch);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::new();\n\
    \    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n        \
    \    result.push(c.to_ascii_lowercase());\n        } else {\n            result.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut new_string = String::new();\n\
    \    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n        \
    \    new_string.push(c.to_ascii_uppercase());\n        } else {\n            new_string.push(c.to_ascii_lowercase());\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().collect::<String>()\n\
    \        } else {\n            c.to_lowercase().collect::<String>()\n        }\n\
    \    }).collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // TODO: Implement\n \
    \   string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmp_n8gce5a.rs:12:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        ch @ 'a'..='z' => ch.to_ascii_uppercase(),\n        ch @\
    \ 'A'..='Z' => ch.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().to_string());\n\
    \        } else {\n            flipped.push(c.to_uppercase().to_string());\n \
    \       }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjiiensvb.rs:8:26\n  |\n8 |\
    \             flipped.push(c.to_lowercase().to_string());\n  |               \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjiiensvb.rs:10:26\n   |\n10 |\
    \             flipped.push(c.to_uppercase().to_string());\n   |              \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|ch|\
    \ {\n        if ch.is_ascii_lowercase() {\n            ch.to_ascii_uppercase()\n\
    \        } else {\n            ch.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut return_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            return_string.push(c.to_ascii_lowercase());\n        } else {\n\
    \            return_string.push(c.to_ascii_uppercase());\n        }\n    }\n \
    \   return_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976063
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut output = String::with_capacity(string.len());\n\
    \    for c in string.chars() {\n        output.push(c.toggle_case());\n    }\n\
    \    output\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `toggle_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpn3st6pcu.rs:7:23\n  |\n7 |         output.push(c.toggle_case());\n\
    \  |                       ^^^^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut char_array: Vec<char>\
    \ = string.chars().collect();\n    for c in char_array.iter_mut() {\n        if\
    \ c.is_ascii_uppercase() {\n            *c = c.to_ascii_lowercase();\n       \
    \ } else if c.is_ascii_lowercase() {\n            *c = c.to_ascii_uppercase();\n\
    \        }\n    }\n    char_array.into_iter().collect()\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n  // Don't use map, it will\
    \ duplicate the string\n  let mut flipped_string = String::new();\n  for c in\
    \ string.chars() {\n    if c.is_uppercase() {\n      flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \    } else {\n      flipped_string.push(c.to_uppercase().next().unwrap());\n\
    \    }\n  }\n  flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_lowercase().next().unwrap()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpbf949aiq.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut output = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            output.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            output.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            output.push(c);\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n\
    \        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n        _ =>\
    \ c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for character in string.chars() {\n        if character.is_uppercase()\
    \ {\n            flipped_string.push(character.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(character.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|character|\
    \ match character {\n        character if character.is_lowercase() => character.to_ascii_uppercase(),\n\
    \        character if character.is_uppercase() => character.to_ascii_lowercase(),\n\
    \        _ => character,\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase().next().unwrap(),\n\
    \        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n        _\
    \ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_uppercase()\
    \ {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n    \
    \    } else {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for character in string.chars() {\n        if character.is_lowercase()\
    \ {\n            flipped_string.push(character.to_uppercase().next().unwrap());\n\
    \        } else if character.is_uppercase() {\n            flipped_string.push(character.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(character);\n        }\n  \
    \  }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|char|\
    \ {\n        if char.is_lowercase() {\n            char.to_uppercase().next().unwrap()\n\
    \        } else {\n            char.to_lowercase().next().unwrap()\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|x|\
    \ x.is_uppercase()? x.to_lowercase().next().unwrap(): x.to_uppercase().next().unwrap()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: casts cannot be followed by a method call\n --> /tmp/tmpkh4j1feh.rs:5:46\n\
    \  |\n5 |     string.chars().map(|x| x.is_uppercase()? x.to_lowercase().next().unwrap():\
    \ x.to_uppercase().next().unwrap()).collect()\n  |                           \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n  |                 \
    \                                                             |\n  |         \
    \                                                                     help: remove\
    \ the type ascription\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator,\
    \ found `x`\n --> /tmp/tmpkh4j1feh.rs:5:46\n  |\n5 |     string.chars().map(|x|\
    \ x.is_uppercase()? x.to_lowercase().next().unwrap(): x.to_uppercase().next().unwrap()).collect()\n\
    \  |                                             -^ expected one of `)`, `,`,\
    \ `.`, `?`, or an operator\n  |                                             |\n\
    \  |                                             help: missing `,`\n\nerror[E0425]:\
    \ cannot find value `x` in this scope\n --> /tmp/tmpkh4j1feh.rs:5:46\n  |\n5 |\
    \     string.chars().map(|x| x.is_uppercase()? x.to_lowercase().next().unwrap():\
    \ x.to_uppercase().next().unwrap()).collect()\n  |                           \
    \                   ^ expecting a type here because of type ascription\n\nerror[E0412]:\
    \ cannot find type `x` in this scope\n --> /tmp/tmpkh4j1feh.rs:5:80\n  |\n5 |\
    \     string.chars().map(|x| x.is_uppercase()? x.to_lowercase().next().unwrap():\
    \ x.to_uppercase().next().unwrap()).collect()\n  |                           \
    \                                                     ^ expecting a type here\
    \ because of type ascription\n\nerror[E0061]: this function takes 1 argument but\
    \ 2 arguments were supplied\n   --> /tmp/tmpkh4j1feh.rs:5:20\n    |\n5   |   \
    \  string.chars().map(|x| x.is_uppercase()? x.to_lowercase().next().unwrap():\
    \ x.to_uppercase().next().unwrap()).collect()\n    |                    ^^^ ---------------------\
    \ ------------------------------------------------------------------ supplied\
    \ 2 arguments\n    |                    |\n    |                    expected 1\
    \ argum"
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n  let mut chars = string.chars();\n\
    \  let mut flip_string = String::from(\"\");\n  for c in chars {\n    if c.is_uppercase()\
    \ {\n      flip_string.push(c.to_lowercase().to_string());\n    } else {\n   \
    \   flip_string.push(c.to_uppercase().to_string());\n    }\n  }\n  flip_string\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp62yn5ko8.rs:9:24\n  |\n9 |\
    \       flip_string.push(c.to_lowercase().to_string());\n  |                 \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp62yn5ko8.rs:11:24\n   |\n11 |  \
    \     flip_string.push(c.to_uppercase().to_string());\n   |                  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // TODO: Implement this\n\
    \    string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpigo0lt__.rs:12:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut string = string;\n\
    \    string.make_ascii_lowercase();\n    string\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpidovflys.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|ch|\
    \ {\n        if ch.is_uppercase() {\n            ch.to_lowercase().to_string()\n\
    \        } else {\n            ch.to_uppercase().to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else\
    \ {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut chars = string.chars();\n\
    \    String::from_iter(chars.map(|c| c.to_ascii_uppercase()))\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `String` in the current scope\n --> /tmp/tmpkh7vpgee.rs:6:13\n  |\n6\
    \ |     String::from_iter(chars.map(|c| c.to_ascii_uppercase()))\n  |        \
    \     ^^^^^^^^^ function or associated item not found in `String`\n  |\n  = help:\
    \ items from traits can only be used if the trait is in scope\nhelp: the following\
    \ trait is implemented but not in scope; perhaps add a `use` for it:\n  |\n1 |\
    \ use std::iter::FromIterator;\n  |\nhelp: there is an associated function with\
    \ a similar name\n  |\n6 |     String::from_utf8(chars.map(|c| c.to_ascii_uppercase()))\n\
    \  |             ~~~~~~~~~\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // create an empty vector\
    \ to store the flipped characters\n    let mut result: Vec<char> = Vec::new();\n\
    \    // loop through the string and flip the cases\n    for ch in string.chars()\
    \ {\n        if ch.is_ascii_lowercase() {\n            result.push(ch.to_ascii_uppercase());\n\
    \        } else {\n            result.push(ch.to_ascii_lowercase());\n       \
    \ }\n    }\n    // collect the result into a string and return\n    result.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|character|\
    \ {\n        if character.is_uppercase() {\n            character.to_lowercase().next().unwrap()\n\
    \        } else {\n            character.to_uppercase().next().unwrap()\n    \
    \    }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().to_string());\n\
    \        } else {\n            result.push(c.to_uppercase().to_string());\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf3h80e4m.rs:8:25\n  |\n8 |\
    \             result.push(c.to_lowercase().to_string());\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf3h80e4m.rs:10:25\n   |\n10 |\
    \             result.push(c.to_uppercase().to_string());\n   |               \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        flipped.push(match c {\n            'a'..='z'\
    \ => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        });\n    }\n    flipped\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for character in string.chars() {\n        if character.is_uppercase() {\n\
    \            flipped.push(character.to_lowercase().to_string());\n        } else\
    \ {\n            flipped.push(character.to_uppercase().to_string());\n       \
    \ }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0iqud51b.rs:8:26\n  |\n8 |\
    \             flipped.push(character.to_lowercase().to_string());\n  |       \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0iqud51b.rs:10:26\n\
    \   |\n10 |             flipped.push(character.to_uppercase().to_string());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        let mut a = c.to_ascii_lowercase();\n\
    \        let mut b = c.to_ascii_uppercase();\n        if c == a {\n          \
    \  flipped.push(b);\n        } else {\n            flipped.push(a);\n        }\n\
    \    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_case_string\
    \ = String::new();\n    for i in string.chars() {\n        if i.is_ascii_uppercase()\
    \ {\n            flipped_case_string.push(i.to_ascii_lowercase());\n        }\
    \ else {\n            flipped_case_string.push(i.to_ascii_uppercase());\n    \
    \    }\n    }\n    flipped_case_string\n}\n\nfn main() {\n    let candidate =\
    \ flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|char|\
    \ if char.is_uppercase() { char.to_lowercase().next().unwrap() } else { char.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // TODO: Add your code\
    \ here\n    let mut new_string = String::new();\n    for c in string.chars() {\n\
    \        new_string.push(match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n\
    \            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n     \
    \   });\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let bytes = string.into_bytes();\n\
    \    bytes\n        .iter()\n        .map(|c| {\n            if c.is_ascii_uppercase()\
    \ {\n                c.to_ascii_lowercase()\n            } else {\n          \
    \      c.to_ascii_uppercase()\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `u8`\n    --> /tmp/tmp5c3j1njx.rs:15:10\n     |\n15  \
    \ |         .collect()\n     |          ^^^^^^^ value of type `String` cannot\
    \ be built from `std::iter::Iterator<Item=u8>`\n     |\n     = help: the trait\
    \ `FromIterator<u8>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            result.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // String implements FromIterator<char>,\
    \ so this is equivalent to\n    // string.chars().map(...).collect()\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else\
    \ {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => (c as u8 + 'A' as u8 - 'a' as u8) as char,\n\
    \        'A'...'Z' => (c as u8 + 'a' as u8 - 'A' as u8) as char,\n        _ =>\
    \ c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::new();\n\
    \    for letter in string.chars() {\n        match letter {\n            'a'...'z'\
    \ => result.push(letter.to_ascii_uppercase()),\n            'A'...'Z' => result.push(letter.to_ascii_lowercase()),\n\
    \            _ => result.push(letter),\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => (c as u8 - b'a' + b'A') as char,\n\
    \            'A'...'Z' => (c as u8 - b'A' + b'a') as char,\n            _ => c,\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut new_string = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_case =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped_case.push(c.to_uppercase().next().unwrap());\n      \
    \  } else if c.is_uppercase() {\n            flipped_case.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_case.push(c);\n        }\n    }\n    flipped_case\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().collect::<String>()\n    } else\
    \ {\n        c.to_uppercase().collect::<String>()\n    }).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n   \
    \         'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // Note that this code\
    \ is ugly and can be made much simpler\n    let mut output = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            output.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            output.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            output.push(c);\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else\
    \ {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp1in8rtcn.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // For now, only works\
    \ for ASCII\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n\
    \            c.to_ascii_uppercase()\n        } else if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().to_string());\n\
    \        } else {\n            result.push(c.to_lowercase().to_string());\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi2b8t9u0.rs:8:25\n  |\n8 |\
    \             result.push(c.to_uppercase().to_string());\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi2b8t9u0.rs:10:25\n   |\n10 |\
    \             result.push(c.to_lowercase().to_string());\n   |               \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            flipped_string.push(c.to_ascii_uppercase());\n        } else\
    \ if c.is_ascii_uppercase() {\n            flipped_string.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut ret = String::new();\n\
    \    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n        \
    \    ret.push(c.to_ascii_lowercase());\n        } else {\n            ret.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else\
    \ {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|x|\
    \ x.to_lowercase().to_string()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpxa3t9g3p.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let result = string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   });\n    result.collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // string.into_bytes()\
    \ return Vec<u8>\n    // we can do .map() on Vec<u8> because .map() is implemented\
    \ for Vec<T>\n    // we need to return Vec<u8>\n    // Vec<u8> does not implement\
    \ Display but Vec<char> does\n    string\n        .into_bytes()\n        .map(|byte|\
    \ {\n            // byte is of type u8\n            if byte >= 65 && byte <= 90\
    \ {\n                byte + 32\n            } else if byte >= 97 && byte <= 122\
    \ {\n                byte - 32\n            } else {\n                byte\n \
    \           }\n        })\n        .collect::<Vec<u8>>()\n        .iter()\n  \
    \      .map(|byte| *byte as char)\n        .collect::<Vec<char>>()\n        .iter()\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<u8>` is not an iterator\n   --> /tmp/tmpcttzw1sl.rs:11:10\n\
    \    |\n11  |           .map(|byte| {\n    |            ^^^ `Vec<u8>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<u8>: Iterator`\n            which is required by `&mut Vec<u8>:\
    \ Iterator`\n            `[u8]: Iterator`\n            which is required by `&mut\
    \ [u8]: Iterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::with_capacity(string.len());\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().collect::<String>());\n\
    \        } else {\n            result.push(c.to_uppercase().collect::<String>());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1gt9bx5s.rs:8:25\n  |\n8 |\
    \             result.push(c.to_lowercase().collect::<String>());\n  |        \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1gt9bx5s.rs:10:25\n\
    \   |\n10 |             result.push(c.to_uppercase().collect::<String>());\n \
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for ch in string.chars() {\n        if ch.is_lowercase() {\n            flipped.push(ch.to_uppercase().next().unwrap());\n\
    \        } else if ch.is_uppercase() {\n            flipped.push(ch.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(ch);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|char|\
    \ {\n        if char.is_ascii_lowercase() {\n            char.to_ascii_uppercase()\n\
    \        } else {\n            char.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|character|\
    \ {\n        match character {\n            'a'...'z' => character.to_ascii_uppercase(),\n\
    \            'A'...'Z' => character.to_ascii_lowercase(),\n            _ => character,\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // FILL THIS IN!\n   \
    \ unimplemented!()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2mgaoti6.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // Note that for strings,\
    \ ASCII characters may be encoded as two bytes. This function\n    // only works\
    \ if all characters are ASCII characters.\n    string.chars().map(|ch| match ch\
    \ {\n        'a' ... 'z' => ch.to_ascii_uppercase(),\n        'A' ... 'Z' => ch.to_ascii_lowercase(),\n\
    \        _ => ch,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n\
    \            c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n        \
    \    _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().to_string());\n\
    \        } else {\n            result.push(c.to_lowercase().to_string());\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi2b8t9u0.rs:8:25\n  |\n8 |\
    \             result.push(c.to_uppercase().to_string());\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi2b8t9u0.rs:10:25\n   |\n10 |\
    \             result.push(c.to_lowercase().to_string());\n   |               \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::with_capacity(string.len());\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // TODO: Complete this\
    \ function\n    let mut output = String::new();\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            output.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            output.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // Place your code here\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxtxvuvll.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().to_string() } else { c.to_lowercase().to_string()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut new_string = String::new();\n\
    \    for ch in string.chars() {\n        if ch.is_lowercase() {\n            new_string.push(ch.to_uppercase().next().unwrap());\n\
    \        } else {\n            new_string.push(ch.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|x|\
    \ {\n        if x.is_ascii_uppercase() {\n            x.to_ascii_lowercase()\n\
    \        } else {\n            x.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() { c.to_lowercase().to_string() } else { c.to_uppercase().to_string()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n   \
    \         'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().to_string()\n\
    \        } else {\n            c.to_lowercase().to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    return string.chars().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect::<String>();\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::from(\"\");\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n    \
    \    } else if c.is_uppercase() {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for character in string.chars() {\n        if character.is_ascii_lowercase()\
    \ {\n            flipped.push(character.to_ascii_uppercase());\n        } else\
    \ if character.is_ascii_uppercase() {\n            flipped.push(character.to_ascii_lowercase());\n\
    \        } else {\n            flipped.push(character);\n        }\n    }\n  \
    \  flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_case =\
    \ String::new();\n    for c in string.chars() {\n        match c {\n         \
    \   'a'..='z' => flipped_case.push(c.to_ascii_uppercase()),\n            'A'..='Z'\
    \ => flipped_case.push(c.to_ascii_lowercase()),\n            _ => flipped_case.push(c),\n\
    \        }\n    }\n    flipped_case\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // Make string mutable.\n\
    \    let mut flipped = String::from(\"\");\n    for c in string.chars() {\n  \
    \      match c {\n            // Flip case.\n            'a'...'z' => flipped.push(c.to_ascii_uppercase()),\n\
    \            'A'...'Z' => flipped.push(c.to_ascii_lowercase()),\n            _\
    \ => flipped.push(c),\n        }\n    }\n    flipped\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|character|\
    \ match character {\n        'a'...'z' => character.to_ascii_uppercase(),\n  \
    \      'A'...'Z' => character.to_ascii_lowercase(),\n        _ => character,\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|character|\
    \ {\n        if character.is_lowercase() {\n            character.to_uppercase().collect::<String>()\n\
    \        } else {\n            character.to_lowercase().collect::<String>()\n\
    \        }\n    }).collect::<String>()\n}\n\nfn main() {\n    let candidate =\
    \ flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut new_string = String::new();\n\
    \    for ch in string.chars() {\n        if ch.is_uppercase() {\n            new_string.push(ch.to_lowercase().to_string());\n\
    \        } else {\n            new_string.push(ch.to_uppercase().to_string());\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5zab6ivt.rs:8:29\n  |\n8 |\
    \             new_string.push(ch.to_lowercase().to_string());\n  |           \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zab6ivt.rs:10:29\n\
    \   |\n10 |             new_string.push(ch.to_uppercase().to_string());\n   |\
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => (c as u8 - 'a' as u8 + 'A' as u8) as char,\n\
    \        'A'...'Z' => (c as u8 - 'A' as u8 + 'a' as u8) as char,\n        _ =>\
    \ c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut new_string = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else\
    \ {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut chars = string.chars();\n\
    \    let mut flipped = String::new();\n    while let Some(c) = chars.next() {\n\
    \        flipped.push(if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        });\n\
    \    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().collect::<String>()\n    } else\
    \ {\n        c.to_lowercase().collect::<String>()\n    }).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n  unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4m_z4883.rs:5:3

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let bytes = string.into_bytes();\n\
    \    let mut flipped = String::new();\n    for byte in bytes {\n        if byte.is_ascii_uppercase()\
    \ {\n            flipped.push_str(&byte.to_ascii_lowercase().to_string());\n \
    \       } else if byte.is_ascii_lowercase() {\n            flipped.push_str(&byte.to_ascii_uppercase().to_string());\n\
    \        } else {\n            flipped.push_str(&byte.to_string());\n        }\n\
    \    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1046976767933\"`,\n right: `\"hELLO!\"`', /tmp/tmpw1bw4yc7.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_case =\
    \ String::new();\n    for ch in string.chars() {\n        match ch.is_uppercase()\
    \ {\n            true => flipped_case.push(ch.to_lowercase().next().unwrap()),\n\
    \            false => flipped_case.push(ch.to_uppercase().next().unwrap()),\n\
    \        }\n    }\n    flipped_case\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|ch|\
    \ {\n        match ch {\n            'a'...'z' => ch.to_ascii_uppercase(),\n \
    \           'A'...'Z' => ch.to_ascii_lowercase(),\n            _ => ch,\n    \
    \    }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => (c as u8 - b'a' + b'A') as char,\n        'A'...'Z'\
    \ => (c as u8 - b'A' + b'a') as char,\n        _ => c,\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|x|\
    \ if x.is_ascii_lowercase() {\n        x.to_ascii_uppercase()\n    } else {\n\
    \        x.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // TODO: Fill this in\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpzod2yd6b.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // TODO!\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6_ka0tqp.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|char|\
    \ {\n        if char.is_lowercase() {\n            char.to_uppercase().next().unwrap()\n\
    \        } else {\n            char.to_lowercase().next().unwrap()\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    // unimplemented!()\n\
    \    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' ... 'z' => (c as u8 + b'A' - b'a') as char,\n       \
    \ 'A' ... 'Z' => (c as u8 + b'a' - b'A') as char,\n        _ => c,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n\
    \        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n        _ =>\
    \ c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let chars: Vec<char> =\
    \ string.chars().collect();\n    let mut result: String = String::new();\n   \
    \ for c in chars {\n        if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n\
    \        } else {\n            result.push(c.to_ascii_uppercase());\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            // Flip from lowercase to uppercase\n    \
    \        'a'...'z' => std::char::from_u32(c as u32 - 32).unwrap(),\n         \
    \   // Flip from uppercase to lowercase\n            'A'...'Z' => std::char::from_u32(c\
    \ as u32 + 32).unwrap(),\n            // Leave unchanged\n            _ => c,\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().collect::<String>()\n\
    \        } else {\n            c.to_uppercase().collect::<String>()\n        }\n\
    \    }).collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|x|\
    \ x.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp6l1ci135.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!();\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnb4bqbk1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976063
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|x|\
    \ match x {\n        x if x.is_lowercase() => x.to_uppercase().next().unwrap(),\n\
    \        x if x.is_uppercase() => x.to_lowercase().next().unwrap(),\n        _\
    \ => x,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx82uuhz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    return string\n      \
    \  .chars()\n        .map(|x| match x {\n            'a'...'z' => x.to_ascii_uppercase(),\n\
    \            'A'...'Z' => x.to_ascii_lowercase(),\n            _ => x,\n     \
    \   })\n        .collect();\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976065
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut string = string;\n\
    \    string.make_ascii_lowercase();\n    string\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpidovflys.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
