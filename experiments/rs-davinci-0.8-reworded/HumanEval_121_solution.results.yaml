language: rs
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res\
    \ = 0;\n    for i in 1..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0\
    \ {\n            res += lst[i];\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `12`', /tmp/tmphr2wqqy0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (idx, el)| {\n        if (idx % 2 == 0) && (*el % 2 != 0) {\n        \
    \    acc + el\n        } else {\n            acc\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpp6l33o2i.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822476
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            result += v;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0\
    \ {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x|\
    \ x.0 % 2 == 0).map(|x| x.1).filter(|x| x % 2 != 0).sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpivobv9w7.rs:10:79\n\
    \   |\n10 |     lst.iter().enumerate().filter(|x| x.0 % 2 == 0).map(|x| x.1).filter(|x|\
    \ x % 2 != 0).sum()\n   |                                                    \
    \                         - ^ - {integer}\n   |                              \
    \                                               |\n   |                      \
    \                                                       &&isize\n   |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|x|\
    \ x.0 % 2 == 0).map(|x| x.1).filter(|x| *x % 2 != 0).sum()\n   |             \
    \                                                                +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659822476
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0\
    \ {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut x\
    \ = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0\
    \ {\n            x += lst[i];\n        }\n    }\n    x\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp93w1451u.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822476
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|(i,\
    \ e)| i % 2 == 0 && e % 2 != 0).map(|(_, e)| e).sum();\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpejjgywcv.rs:10:67\n\
    \   |\n10 |     return lst.iter().enumerate().filter(|(i, e)| i % 2 == 0 && e\
    \ % 2 != 0).map(|(_, e)| e).sum();\n   |                                     \
    \                            - ^ - {integer}\n   |                           \
    \                                      |\n   |                               \
    \                                  &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `e`\n   |\n10 |     return lst.iter().enumerate().filter(|(i,\
    \ e)| i % 2 == 0 && *e % 2 != 0).map(|(_, e)| e).sum();\n   |                \
    \                                                 +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659822476
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let (a, b)\
    \ = lst.iter().enumerate().partition(|(i, _)| i % 2 == 0);\n    a.into_iter().map(|(_,\
    \ v)| v).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `(B, B)`\n  --> /tmp/tmpowyewcd0.rs:11:5\n\
    \   |\n10 |     let (a, b) = lst.iter().enumerate().partition(|(i, _)| i % 2 ==\
    \ 0);\n   |         ------ consider giving this pattern the explicit type `(B,\
    \ B)`, with the type parameters specified\n11 |     a.into_iter().map(|(_, v)|\
    \ v).sum::<isize>()\n   |     ^ cannot infer type\n   |\n   = note: type must\
    \ be known at this point\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822476
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            odd_sum += x;\n        }\n    }\n    odd_sum\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| acc + if i % 2 == 0 { *x } else { 0 })\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp37aia251.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e\
    \ % 2 != 0 {\n            sum += e;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let even_nums\
    \ = lst.into_iter().enumerate().filter(|(i, _)| i % 2 == 0);\n    even_nums.filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |a, (i, &v)| {\n        if i % 2 == 0 && v % 2 != 0 {\n            a + v\n \
    \       } else {\n            a\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp93w1451u.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822476
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res\
    \ = 0;\n    for (i, &v) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ v % 2 != 0 {\n            res += v;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, el)| {\n        if i % 2 == 0 && el % 2 != 0 {\n            acc +\
    \ el\n        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = 0;\n    for n in 0..lst.len() {\n        if lst[n] % 2 != 0 && n % 2 == 0\
    \ {\n            result += lst[n];\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, x| {\n        let (i, v) = x;\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            acc + v\n        } else {\n            acc\n        }\n    })\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let res =\
    \ lst.into_iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)| x %\
    \ 2 != 0).map(|(_, x)| x).sum();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|(i,\
    \ x)| (i % 2 == 0) && (x % 2 != 0)).map(|(i, x)| *x).sum();\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp0leyel6y.rs:10:70\n\
    \   |\n10 |     return lst.iter().enumerate().filter(|(i, x)| (i % 2 == 0) &&\
    \ (x % 2 != 0)).map(|(i, x)| *x).sum();\n   |                                \
    \                                    - ^ - {integer}\n   |                   \
    \                                                 |\n   |                    \
    \                                                &&isize\n   |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `x`\n   |\n10 |     return lst.iter().enumerate().filter(|(i,\
    \ x)| (i % 2 == 0) && (*x % 2 != 0)).map(|(i, x)| *x).sum();\n   |           \
    \                                                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976058
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            total += x;\n        }\n    }\n    total\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (idx, elem)| {\n        if idx % 2 == 0 && elem % 2 != 0 {\n         \
    \   acc + elem\n        } else {\n            acc\n        }\n    })\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, a)| a % 2 != 0).map(|(_, a)| a).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum();\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut idx\
    \ = 0;\n    let mut res = 0;\n    for i in lst {\n        if idx % 2 == 0 && i\
    \ % 2 != 0 {\n            res += i;\n        }\n        idx += 1;\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &item)| {\n        if i % 2 == 0 && item % 2 != 0 {\n            acc\
    \ + item\n        } else {\n            acc\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpmwn9p9zj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ x)| (i % 2 == 0) && x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpsgcwqbqc.rs:10:62\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, x)| (i % 2 == 0) && x % 2 !=\
    \ 0).map(|(_, x)| x).sum()\n   |                                             \
    \               - ^ - {integer}\n   |                                        \
    \                    |\n   |                                                 \
    \           &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i, x)| (i % 2 == 0) && *x\
    \ % 2 != 0).map(|(_, x)| x).sum()\n   |                                      \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976058
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut total = 0;\n    for (index, item)\
    \ in lst.iter().enumerate() {\n        if index % 2 == 0 && item % 2 != 0 {\n\
    \            total += item;\n        }\n    }\n    total\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ x)| i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(index,\
    \ _)| index % 2 == 0).map(|(_, elem)| elem).filter(|elem| elem % 2 != 0).sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpvo7wixyx.rs:10:105\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(index, _)| index % 2 == 0).map(|(_,\
    \ elem)| elem).filter(|elem| elem % 2 != 0).sum()\n   |                      \
    \                                                                            \
    \  ---- ^ - {integer}\n   |                                                  \
    \                                                  |\n   |                   \
    \                                                                            \
    \     &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `elem`\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(index, _)| index % 2 == 0).map(|(_,\
    \ elem)| elem).filter(|elem| *elem % 2 != 0).sum()\n   |                     \
    \                                                                            \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976058
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    // Your solution\
    \ goes here.\n    0\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpktva_ywm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, j) in lst.iter().enumerate() {\n        if i % 2 == 0 && j\
    \ % 2 != 0 {\n            sum += j;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, n)| {\n        if i % 2 == 0 && n % 2 != 0 {\n            acc + n\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(x,\
    \ _)| x % 2 == 0).map(|(_, y)| y).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpzutaq64m.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    // your solution\
    \ here!\n    0\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp3wsg5_w2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total\
    \ = 0;\n    for (index, item) in lst.iter().enumerate() {\n        if index %\
    \ 2 == 0 && item % 2 != 0 {\n            total += item;\n        }\n    }\n  \
    \  total\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut lst\
    \ = lst;\n    lst.drain(..)\n        .enumerate()\n        .filter(|&(i, _)| i\
    \ % 2 == 0)\n        .filter(|&(_, x)| x % 2 == 1)\n        .map(|(_, x)| x)\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut ans = 0;\n    for (i, elem) in\
    \ lst.iter().enumerate() {\n        if i % 2 == 0 && elem % 2 != 0 {\n       \
    \     ans += elem;\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp7os4k2se.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &n)| if i % 2 == 0 { acc + n } else { acc })\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpcbb7ti9i.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0\
    \ {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x|\
    \ x.0 % 2 == 0).filter(|x| x.1 % 2 != 0).map(|x| x.1).sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp7os4k2se.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).fold(0, |acc, (_, n)| acc + n)\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpako_6a9v.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).fold(0, |acc, (_, n)| acc + n)\n   |                       \
    \                                                 - ^ - {integer}\n   |      \
    \                                                                  |\n   |   \
    \                                                                     &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `n`\n   |\n10 | \
    \    lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)| *n % 2\
    \ != 0).fold(0, |acc, (_, n)| acc + n)\n   |                                 \
    \                                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp93w1451u.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822476
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|(i,\
    \ x)| (*i % 2 == 0) && (*x % 2 != 0)).map(|(_, x)| *x).sum();\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &item)| {\n        if i % 2 == 0 && item % 2 != 0 {\n            acc\
    \ + item\n        } else {\n            acc\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmprd1zwilb.rs:10:60\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, x)| i % 2 == 0 && x % 2 !=\
    \ 0).map(|(_, &x)| x).sum()\n   |                                            \
    \              - ^ - {integer}\n   |                                         \
    \                 |\n   |                                                    \
    \      &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, x)| i % 2 == 0 && *x % 2 !=\
    \ 0).map(|(_, &x)| x).sum()\n   |                                            \
    \              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ v)| v % 2 != 0 && i % 2 == 0).map(|(_, v)| v).sum()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp0_ucgavj.rs:10:46\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, v)| v % 2 != 0 && i % 2 ==\
    \ 0).map(|(_, v)| v).sum()\n   |                                            -\
    \ ^ - {integer}\n   |                                            |\n   |     \
    \                                       &&isize\n   |\nhelp: `%` can be used on\
    \ `isize`, you can dereference `v`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ v)| *v % 2 != 0 && i % 2 == 0).map(|(_, v)| v).sum()\n   |                 \
    \                           +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (idx, &x)| {\n        if idx % 2 == 0 && x % 2 != 0 {\n            acc\
    \ + x\n        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (index, &value)| {\n        if index % 2 == 0 && value % 2 != 0 {\n  \
    \          acc + value\n        } else {\n            acc\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_even_sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            odd_even_sum += n;\n        }\n    }\n    odd_even_sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total\
    \ = 0;\n    for (index, num) in lst.iter().enumerate() {\n        if index % 2\
    \ == 0 && num % 2 != 0 {\n            total += num;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len()\
    \ < 2 {\n        return 0;\n    }\n    let mut sum = 0;\n    for (index, num)\
    \ in lst.iter().enumerate() {\n        if index % 2 == 0 && num % 2 != 0 {\n \
    \           sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, v)| {\n        if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(index,\
    \ _)| *index % 2 == 0).map(|(_, item)| item).sum()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpq0rz_1zp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,_)|\
    \ i % 2 == 0).filter(|(_,n)| n % 2 != 0).map(|(_,n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmplo17k69k.rs:10:72\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i,_)| i % 2 == 0).filter(|(_,n)|\
    \ n % 2 != 0).map(|(_,n)| n).sum()\n   |                                     \
    \                                 - ^ - {integer}\n   |                      \
    \                                                |\n   |                     \
    \                                                 &&isize\n   |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,_)|\
    \ i % 2 == 0).filter(|(_,n)| *n % 2 != 0).map(|(_,n)| n).sum()\n   |         \
    \                                                             +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &n) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ n % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp7os4k2se.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            res += v;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x|\
    \ x % 2 != 0).enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp517ehouq.rs:10:29\n\
    \   |\n10 |     lst.iter().filter(|x| x % 2 != 0).enumerate().filter(|(i, _)|\
    \ i % 2 == 0).map(|(_, x)| x).sum()\n   |                           - ^ - {integer}\n\
    \   |                           |\n   |                           &&isize\n  \
    \ |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n10 |   \
    \  lst.iter().filter(|x| *x % 2 != 0).enumerate().filter(|(i, _)| i % 2 == 0).map(|(_,\
    \ x)| x).sum()\n   |                           +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &item) in lst.iter().enumerate() {\n        if i % 2 == 0\
    \ && item % 2 != 0 {\n            sum += item;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0\
    \ {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|&(i,x)|\
    \ i % 2 == 0 && x % 2 != 0).map(|(_,x)| x).sum();\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, n)| n).filter(|&n| n % 2 == 1).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut ans\
    \ = 0;\n    for (i, a) in lst.iter().enumerate() {\n        if i % 2 == 0 && a\
    \ % 2 == 1 {\n            ans += a;\n        }\n    }\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |sum, (i, &e)| {\n        if i % 2 == 0 && e % 2 != 0 {\n            sum + e\n\
    \        } else {\n            sum\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    // TODO\n\
    \    0\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpd25dmzgi.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (idx, num) in lst.iter().enumerate() {\n        if (idx & 1) ==\
    \ 0 && (num & 1) == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    //let mut\
    \ answer = 0;\n    //for (i, x) in lst.iter().enumerate() {\n    //    if i %\
    \ 2 == 0 && x % 2 != 0 {\n    //        answer += x;\n    //    }\n    //}\n \
    \   //answer\n    lst.iter().enumerate().filter(|(i, x)| i % 2 == 0 && x % 2 !=\
    \ 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpgr2hni2b.rs:17:60\n\
    \   |\n17 |     lst.iter().enumerate().filter(|(i, x)| i % 2 == 0 && x % 2 !=\
    \ 0).map(|(_, x)| x).sum()\n   |                                             \
    \             - ^ - {integer}\n   |                                          \
    \                |\n   |                                                     \
    \     &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |     lst.iter().enumerate().filter(|(i, x)| i % 2 == 0 && *x % 2 !=\
    \ 0).map(|(_, x)| x).sum()\n   |                                             \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let res =\
    \ lst.iter().enumerate().filter(|(x, y)| x % 2 == 0 && y % 2 != 0).map(|(_, y)|\
    \ y).sum();\n    return res;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2sobu__2.rs:10:70\n\
    \   |\n10 |     let res = lst.iter().enumerate().filter(|(x, y)| x % 2 == 0 &&\
    \ y % 2 != 0).map(|(_, y)| y).sum();\n   |                                   \
    \                                 - ^ - {integer}\n   |                      \
    \                                              |\n   |                       \
    \                                             &&isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `y`\n   |\n10 |     let res = lst.iter().enumerate().filter(|(x,\
    \ y)| x % 2 == 0 && *y % 2 != 0).map(|(_, y)| y).sum();\n   |                \
    \                                                    +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x|\
    \ x.0 % 2 == 0).filter(|x| x.1 % 2 != 0).map(|x| x.1).sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, num) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ num % 2 != 0 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, v)| v % 2 != 0).map(|(_, v)| v).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpv6s2h_2f.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ v)| v % 2 != 0).map(|(_, v)| v).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `v`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, v)| *v % 2 != 0).map(|(_, v)| v).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (idx, elem) in lst.iter().enumerate() {\n        if idx % 2 ==\
    \ 0 && elem % 2 != 0 {\n            sum += elem;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|a|\
    \ (a & 1) == 1 && (a - 1) % 2 == 0).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: no implementation for `&&isize & {integer}`\n  --> /tmp/tmp9m7cot9m.rs:10:30\n\
    \   |\n10 |     lst.iter().filter(|a| (a & 1) == 1 && (a - 1) % 2 == 0).sum()\n\
    \   |                            - ^ - {integer}\n   |                       \
    \     |\n   |                            &&isize\n   |\nhelp: `&` can be used\
    \ on `isize`, you can dereference `a`\n   |\n10 |     lst.iter().filter(|a| (*a\
    \ & 1) == 1 && (a - 1) % 2 == 0).sum()\n   |                            +\n\n\
    error[E0369]: cannot subtract `{integer}` from `&&isize`\n  --> /tmp/tmp9m7cot9m.rs:10:46\n\
    \   |\n10 |     lst.iter().filter(|a| (a & 1) == 1 && (a - 1) % 2 == 0).sum()\n\
    \   |                                            - ^ - {integer}\n   |       \
    \                                     |\n   |                                \
    \            &&isize\n   |\nhelp: `-` can be used on `isize`, you can dereference\
    \ `a`\n   |\n10 |     lst.iter().filter(|a| (a & 1) == 1 && (*a - 1) % 2 == 0).sum()\n\
    \   |                                            +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let sum:\
    \ isize = lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, x)| x).sum();\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjfscj5bk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).filter(|x| x % 2 == 1).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp0uxb20h8.rs:10:85\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, x)|\
    \ x).filter(|x| x % 2 == 1).sum()\n   |                                      \
    \                                             - ^ - {integer}\n   |          \
    \                                                                         |\n\
    \   |                                                                        \
    \           &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_,\
    \ x)| x).filter(|x| *x % 2 == 1).sum()\n   |                                 \
    \                                                  +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if (i % 2) == 0 &&\
    \ n % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, n)| n % 2).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `12`', /tmp/tmpm39diyn_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, v)| v).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpa1mbm386.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &v)| v % 2 == 1).map(|(_, &v)| v).sum();\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, e)| e % 2 != 0).map(|(_, e)| e).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpvinrtuua.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ e)| e % 2 != 0).map(|(_, e)| e).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `e`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, e)| *e % 2 != 0).map(|(_, e)| e).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (idx, el)| if idx % 2 == 0 { acc + el } else { acc })\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp_4c7j5bl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &val)| acc + if i % 2 == 0 && val % 2 != 0 { val } else { 0 })\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in (0..lst.len()).step_by(2) {\n        if lst[i] % 2 != 0 {\n\
    \            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, el) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ el % 2 != 0 {\n            sum += el;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, e)| e % 2 != 0).map(|(_, e)| e).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpvinrtuua.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ e)| e % 2 != 0).map(|(_, e)| e).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `e`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, e)| *e % 2 != 0).map(|(_, e)| e).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ &x)| i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|(i,\
    \ v)| (i % 2) == 0 && v % 2 != 0).map(|(i, v)| v).sum();\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp27nnqo1k.rs:10:69\n\
    \   |\n10 |     return lst.iter().enumerate().filter(|(i, v)| (i % 2) == 0 &&\
    \ v % 2 != 0).map(|(i, v)| v).sum();\n   |                                   \
    \                                - ^ - {integer}\n   |                       \
    \                                            |\n   |                         \
    \                                          &&isize\n   |\nhelp: `%` can be used\
    \ on `isize`, you can dereference `v`\n   |\n10 |     return lst.iter().enumerate().filter(|(i,\
    \ v)| (i % 2) == 0 && *v % 2 != 0).map(|(i, v)| v).sum();\n   |              \
    \                                                     +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ item % 2 != 0 {\n            result += item;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &v)| {\n        if i % 2 == 0 && v % 2 != 0 {\n            acc + v\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res\
    \ = 0;\n    for i in 1..lst.len() {\n        if lst[i] % 2 != 0 {\n          \
    \  res += lst[i]\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpjk_bnj9h.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            res += x;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpmwn9p9zj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    // your solution\
    \ goes here\n    let mut sum = 0;\n    for (i, num) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && num % 2 != 0 {\n            sum += num;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(idx,\
    \ e)| e % 2 == 1 && idx % 2 == 0).map(|(_, e)| e).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpo120dv5r.rs:10:48\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(idx, e)| e % 2 == 1 && idx % 2\
    \ == 0).map(|(_, e)| e).sum()\n   |                                          \
    \    - ^ - {integer}\n   |                                              |\n  \
    \ |                                              &&isize\n   |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `e`\n   |\n10 |     lst.iter().enumerate().filter(|(idx,\
    \ e)| *e % 2 == 1 && idx % 2 == 0).map(|(_, e)| e).sum()\n   |               \
    \                               +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| if i % 2 == 0 && x % 2 != 0 { acc + x } else { acc })\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &v)| v % 2 == 1).map(|(_, &v)| v).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            result += v;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in 0..lst.len() {\n        if lst[i] % 2 != 0 && i % 2 == 0\
    \ {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &v)| acc + if i % 2 == 0 { v } else { 0 })\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpdqfy_hfr.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res\
    \ = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e\
    \ % 2 != 0 {\n            res += e;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpd52cqcq9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &v)| if i % 2 == 0 && v % 2 != 0 { acc + v } else { acc })\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res\
    \ = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ item % 2 != 0 {\n            res += item;\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |sum, (i, num)| {\n        if i % 2 == 0 && num % 2 != 0 {\n            sum\
    \ + num\n        } else {\n            sum\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ x)| *i % 2 == 0 && x % 2 != 0).map(|(_, y)| *y).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpcyc5vfta.rs:10:61\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, x)| *i % 2 == 0 && x % 2 !=\
    \ 0).map(|(_, y)| *y).sum()\n   |                                            \
    \               - ^ - {integer}\n   |                                        \
    \                   |\n   |                                                  \
    \         &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i, x)| *i % 2 == 0 && *x\
    \ % 2 != 0).map(|(_, y)| *y).sum()\n   |                                     \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmphf8s0tlh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |sum, (i, &n)| if i % 2 == 0 && n % 2 != 0 { sum + n } else { sum })\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &e)| acc + (e % 2) * (i % 2))\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph3ogmp69.rs:10:67\n   |\n\
    10 |     lst.iter().enumerate().fold(0, |acc, (i, &e)| acc + (e % 2) * (i % 2))\n\
    \   |                                                                   ^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize` by\
    \ `usize`\n  --> /tmp/tmph3ogmp69.rs:10:65\n   |\n10 |     lst.iter().enumerate().fold(0,\
    \ |acc, (i, &e)| acc + (e % 2) * (i % 2))\n   |                              \
    \                                   ^ no implementation for `isize * usize`\n\
    \   |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    // Write\
    \ your code here\n    lst.iter().enumerate().filter(|(x, _)| x % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpo4cfsnsy.rs:11:74\n\
    \   |\n11 |     lst.iter().enumerate().filter(|(x, _)| x % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n11 |     lst.iter().enumerate().filter(|(x,\
    \ _)| x % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    // your answer\
    \ here\n    let mut out = 0;\n    for i in (0..lst.len()).step_by(2) {\n     \
    \   let x = lst[i];\n        if x & 1 == 1 {\n            out += x;\n        }\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (index, &num)| {\n        if index % 2 == 0 && num % 2 != 0 {\n      \
    \      acc + num\n        } else {\n            acc\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (index, num)| {\n        if index % 2 == 0 && num % 2 != 0 {\n       \
    \     acc + num\n        } else {\n            acc\n        }\n    })\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ &x)| x % 2 == 1 && i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    return lst.iter().enumerate().fold(0,\
    \ |acc, (i, &e)| acc + (i % 2 == 0 && e % 2 != 0) as isize * e);\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmphf8s0tlh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpmwn9p9zj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut acc\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            acc += x;\n        }\n    }\n    acc\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = 0;\n    for (idx, val) in lst.iter().enumerate() {\n        if idx % 2 ==\
    \ 0 && val % 2 != 0 {\n            result += val;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut s\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            s += x;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    // code here\n\
    \    lst.iter().enumerate().fold(0, |acc, (i, &x)| {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            acc + x\n        } else {\n            acc\n     \
    \   }\n    })\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |sum, (i, v)| if i % 2 == 0 { sum + v.clone() } else { sum })\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpveukyvd2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, num) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ num % 2 != 0 {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &n)| {\n        if i % 2 == 0 && n % 2 != 0 {\n            acc + n\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, v)| {\n        if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, val) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ val % 2 != 0 {\n            sum += val;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    // Place\
    \ your code here\n    lst.iter().enumerate().filter(|(i, _)| *i % 2 == 0).filter(|(_,\
    \ v)| *v % 2 != 0).map(|(_, v)| *v).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ x)| i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in 0..lst.len() {\n        if lst[i] % 2 != 0 && i % 2 == 0\
    \ {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut idx\
    \ = 1;\n    let mut sum = 0;\n    for i in lst {\n        if idx % 2 == 0 && i\
    \ % 2 != 0 {\n            sum += i;\n        }\n        idx += 1;\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmpuszry2cd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp7os4k2se.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            result += x;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if n % 2 != 0 && i\
    \ % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if (i % 2) == 0 &&\
    \ (e % 2) != 0 {\n            sum += e;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0)\n        .map(|(_, x)| x).filter(|&x| x % 2 == 1)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, v)| v).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpoe37yxkd.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut i\
    \ = 1;\n    let mut sum = 0;\n    while i < lst.len() {\n        sum += lst[i];\n\
    \        i += 2;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmps60pbhqu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e\
    \ % 2 != 0 {\n            result += e;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(idx,\
    \ _)| idx % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmps0q_dqrk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).filter(|x| x % 2 == 1).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp0uxb20h8.rs:10:85\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, x)|\
    \ x).filter(|x| x % 2 == 1).sum()\n   |                                      \
    \                                             - ^ - {integer}\n   |          \
    \                                                                         |\n\
    \   |                                                                        \
    \           &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_,\
    \ x)| x).filter(|x| *x % 2 == 1).sum()\n   |                                 \
    \                                                  +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &n)| {\n        if i % 2 == 0 && n % 2 != 0 {\n            acc + n\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (idx, x)| acc + (x & 0x1) * ((idx & 0x1) << 1))\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz_oksfm8.rs:10:70\n   |\n\
    10 |     lst.iter().enumerate().fold(0, |acc, (idx, x)| acc + (x & 0x1) * ((idx\
    \ & 0x1) << 1))\n   |                                                        \
    \              ^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot multiply `isize` by `usize`\n  --> /tmp/tmpz_oksfm8.rs:10:68\n   |\n\
    10 |     lst.iter().enumerate().fold(0, |acc, (idx, x)| acc + (x & 0x1) * ((idx\
    \ & 0x1) << 1))\n   |                                                        \
    \            ^ no implementation for `isize * usize`\n   |\n   = help: the trait\
    \ `Mul<usize>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &v)| v).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpdvij7nl0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, v)| {\n        if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ &v)| (i + 1) % 2 == 0 && v % 2 == 1).map(|(_, &v)| v).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmpi249p425.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (idx, val) in lst.iter().enumerate() {\n        if idx % 2 ==\
    \ 0 && val % 2 != 0 {\n            sum += val;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, n)| if i % 2 == 0 { acc + n } else { acc })\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmphaa769yv.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (index, element) in lst.iter().enumerate() {\n        if index\
    \ % 2 == 0 && element % 2 != 0 {\n            sum += element;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res\
    \ = 0;\n    for (i, el) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ el % 2 != 0 {\n            res += el;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(x,_)|\
    \ (*x as isize) % 2 == 0).map(|(_,x)| *x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp8306gctx.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822477
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpmwn9p9zj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (index, number) in lst.iter().enumerate() {\n        if index\
    \ % 2 == 0 && number % 2 != 0 {\n            sum += number;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp93w1451u.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822476
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (idx, el) in lst.iter().enumerate() {\n        if idx % 2 == 0\
    \ && el % 2 != 0 {\n            sum += el;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, v)| v).filter(|v| v % 2 != 0).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpb1a2trpp.rs:10:85\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, v)|\
    \ v).filter(|v| v % 2 != 0).sum()\n   |                                      \
    \                                             - ^ - {integer}\n   |          \
    \                                                                         |\n\
    \   |                                                                        \
    \           &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `v`\n   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_,\
    \ v)| v).filter(|v| *v % 2 != 0).sum()\n   |                                 \
    \                                                  +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ item % 2 != 0 {\n            sum += item;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in 0..lst.len() {\n        if lst[i] % 2 != 0 && i % 2 == 0\
    \ {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976060
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, v)| acc + if i % 2 == 0 && v % 2 != 0 { v } else { 0 })\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpxqnp_jcc.rs:10:97\n\
    \   |\n10 |     lst.iter().enumerate().fold(0, |acc, (i, v)| acc + if i % 2 ==\
    \ 0 && v % 2 != 0 { v } else { 0 })\n   |                                    \
    \                                                  -          ^ expected `&isize`,\
    \ found integer\n   |                                                        \
    \                              |\n   |                                       \
    \                                               expected because of this\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976060
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |sum, (i, x)| if i % 2 == 0 && x % 2 != 0 { sum + x } else { sum })\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, j) in lst.iter().enumerate() {\n        if i % 2 == 0 && j\
    \ % 2 != 0 {\n            sum += j;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976059
- exit_code: 0
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _x)| *i % 2 == 0).filter(|(_i, x)| *x % 2 == 1).map(|(_i, x)| *x).sum()\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
