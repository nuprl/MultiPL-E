language: rs
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for el in operations {\n  \
    \      sum += el;\n        if sum < 0 {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().try_fold(0, |acc, x| {\n      \
    \  if acc + x < 0 {\n            Err(())\n        } else {\n            Ok(acc\
    \ + x)\n        }\n    }).is_err()\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut acc = 0;\n    for op in operations {\n  \
    \      acc += op;\n        if acc < 0 {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, &v| acc + v) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwlam5nt4.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in 0..operations.len()\
    \ {\n        balance += operations[i];\n        if balance < 0 {\n           \
    \ return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut account = 0;\n    for operation in operations\
    \ {\n        account += operation;\n        if account < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    // TODO: implement below_zero function\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt83ez_sf.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut total = 0;\n    for i in operations {\n \
    \       total += i;\n        if total < 0 {\n            return true;\n      \
    \  }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, i| acc + i) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5v79wnuw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    for op in operations {\n        let mut account =\
    \ 0;\n        account += op;\n        if account < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpks2_ygto.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for item in operations\
    \ {\n        balance += item;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, &x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz6wtfcbh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut total = 0;\n    for op in operations {\n\
    \        total += op;\n        if total < 0 {\n            return true;\n    \
    \    }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    // AFAIK reduce is not stable yet.\n    operations.iter().fold(0,\
    \ |acc, &x| {\n        if acc + x < 0 {\n            true\n        } else {\n\
    \            acc + x\n        }\n    })\n}\n\nfn main() {\n    let candidate =\
    \ below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm2cinv36.rs:10:28\n   |\n\
    10 |     operations.iter().fold(0, |acc, &x| {\n   |                         \
    \   ^ expected `bool`, found integer\n\nerror[E0369]: cannot add `isize` to `bool`\n\
    \  --> /tmp/tmpm2cinv36.rs:11:16\n   |\n11 |         if acc + x < 0 {\n   |  \
    \          --- ^ - isize\n   |            |\n   |            bool\n\nerror[E0369]:\
    \ cannot add `isize` to `bool`\n  --> /tmp/tmpm2cinv36.rs:14:17\n   |\n14 |  \
    \           acc + x\n   |             --- ^ - isize\n   |             |\n   |\
    \             bool\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut result = 0;\n    for operation in operations\
    \ {\n        result += operation;\n        if result < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |sum, x| sum + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpql7d08bh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbcvumxv7.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for item in operations {\n\
    \        sum += item;\n        if sum < 0 {\n            return true;\n      \
    \  }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    //### Write your code below ###//\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp92zpt7d4.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |sum, el| sum + el) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzm3n0j_c.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, &x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz6wtfcbh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, &x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz6wtfcbh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut account = 0;\n    for op in operations {\n\
    \        account += op;\n        if account < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in operations {\n\
    \        balance += i;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, &i| {\n        if\
    \ acc + i < 0 {\n            return true;\n        } else {\n            return\
    \ acc + i;\n        }\n    }) >= 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm_n6ju3e.rs:11:20\n   |\n\
    11 |             return true;\n   |                    ^^^^ expected `isize`,\
    \ found `bool`\n   |\nnote: return type inferred to be `isize` here\n  --> /tmp/tmpm_n6ju3e.rs:11:20\n\
    \   |\n11 |             return true;\n   |                    ^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |sum, n| {\n        if\
    \ sum < 0 {\n            return true;\n        }\n        sum + n\n    }) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeaf58cmb.rs:11:20\n   |\n\
    11 |             return true;\n   |                    ^^^^ expected integer,\
    \ found `bool`\n   |\nnote: return type inferred to be `{integer}` here\n  -->\
    \ /tmp/tmpeaf58cmb.rs:11:20\n   |\n11 |             return true;\n   |       \
    \             ^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    if operations.is_empty() {\n        return false;\n\
    \    }\n    let mut balance = 0;\n    for i in operations {\n        balance +=\
    \ i;\n        if balance < 0 {\n            return true;\n        }\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in operations {\n\
    \        balance += i;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    // impl \n    // for (i, j) in operations.iter().enumerate()\
    \ {\n    //     if operations[0..i].iter().sum::<isize>() + j < 0 {\n    //  \
    \       return true;\n    //     }\n    // }\n    // false\n    // impl with for_each\n\
    \    let mut account_balance = 0;\n    operations.iter().for_each(|&x| {\n   \
    \     account_balance += x;\n        if account_balance < 0 {\n            panic!();\n\
    \        }\n    });\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''explicit panic'', /tmp/tmpxdrq95_m.rs:21:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |x, y| x + y) < 0\n}\n\n\
    fn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9pjrmskr.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    operations.iter().any(|&op|\
    \ {\n        balance += op;\n        balance < 0\n    })\n}\n\nfn main() {\n \
    \   let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in operations {\n\
    \        balance += i;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    for (acc, op) in operations.iter().scan(0, |acc,\
    \ x| {\n        *acc += x;\n        Some(*acc)\n    }) {\n        if acc < 0 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe72fgx5a.rs:9:9\n   |\n9\
    \  |       for (acc, op) in operations.iter().scan(0, |acc, x| {\n   |  _________^^^^^^^^^____-\n\
    \   | |         |\n   | |         expected `isize`, found tuple\n10 | |      \
    \   *acc += x;\n11 | |         Some(*acc)\n12 | |     }) {\n   | |______- this\
    \ expression has type `Option<isize>`\n   |\n   = note: expected type `isize`\n\
    \             found tuple `(_, _)`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in operations {\n   \
    \     sum += x;\n        if sum < 0 {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for o in operations {\n\
    \        balance += o;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in 0..operations.len()\
    \ {\n        balance += operations[i];\n        if balance < 0 {\n           \
    \ return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in operations {\n\
    \        balance += i;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for num in operations {\n\
    \        balance += num;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut res = 0;\n    for i in operations {\n   \
    \     res += i;\n        if res < 0 {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in operations {\n   \
    \     sum += i;\n        if sum < 0 {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for operation in operations\
    \ {\n        sum += operation;\n        if sum < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for op in operations {\n  \
    \      sum += op;\n        if sum < 0 {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    for i in operations {\n        let mut current_balance\
    \ = 0;\n        if (current_balance += i) < 0 {\n            return true;\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_wbtvjm_.rs:11:37\n   |\n\
    11 |         if (current_balance += i) < 0 {\n   |                           \
    \          ^ expected `()`, found integer\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |sum, x| sum + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpql7d08bh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in 0..operations.len()\
    \ {\n        balance += operations[i];\n        if balance < 0 {\n           \
    \ return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for item in operations\
    \ {\n        balance += item;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    // Sum operations and check if negative at any point\n\
    \    operations.iter().fold(0, |acc, x| if acc + x < 0 { return true } else {\
    \ acc + x })\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztxn79r_.rs:10:28\n   |\n\
    10 |     operations.iter().fold(0, |acc, x| if acc + x < 0 { return true } else\
    \ { acc + x })\n   |                            ^ expected `bool`, found integer\n\
    \nerror[E0369]: cannot add `&isize` to `bool`\n  --> /tmp/tmpztxn79r_.rs:10:47\n\
    \   |\n10 |     operations.iter().fold(0, |acc, x| if acc + x < 0 { return true\
    \ } else { acc + x })\n   |                                           --- ^ -\
    \ &isize\n   |                                           |\n   |             \
    \                              bool\n\nerror[E0369]: cannot add `&isize` to `bool`\n\
    \  --> /tmp/tmpztxn79r_.rs:10:82\n   |\n10 |     operations.iter().fold(0, |acc,\
    \ x| if acc + x < 0 { return true } else { acc + x })\n   |                  \
    \                                                            --- ^ - &isize\n\
    \   |                                                                        \
    \      |\n   |                                                               \
    \               bool\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut result = 0;\n    for x in operations {\n\
    \        result += x;\n        if result < 0 {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| {\n        if\
    \ acc < 0 {\n            return true;\n        }\n        acc + x\n    }) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprfdyywt_.rs:11:20\n   |\n\
    11 |             return true;\n   |                    ^^^^ expected integer,\
    \ found `bool`\n   |\nnote: return type inferred to be `{integer}` here\n  -->\
    \ /tmp/tmprfdyywt_.rs:11:20\n   |\n11 |             return true;\n   |       \
    \             ^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |a, b| a + b) < 0\n}\n\n\
    fn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1_4ol0d1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in 0..operations.len()\
    \ {\n        balance += operations[i];\n        if balance < 0 {\n           \
    \ return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, n| {\n        let\
    \ sum = acc + n;\n        if sum < 0 {\n            return true;\n        }\n\
    \        sum\n    }) < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr5eeqqq4.rs:12:20\n   |\n\
    12 |             return true;\n   |                    ^^^^ expected `isize`,\
    \ found `bool`\n   |\nnote: return type inferred to be `isize` here\n  --> /tmp/tmpr5eeqqq4.rs:12:20\n\
    \   |\n12 |             return true;\n   |                    ^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in operations {\n   \
    \     sum += i;\n        if sum < 0 {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut zero = 0;\n    for i in operations {\n  \
    \      zero += i;\n        if zero < 0 {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, i| acc + i) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5v79wnuw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for amount in operations\
    \ {\n        balance += amount;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for &op in &operations\
    \ {\n        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for value in operations {\n\
    \        sum += value;\n        if sum < 0 {\n            return true;\n     \
    \   }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut account = 0;\n    for &op in &operations\
    \ {\n        account += op;\n        if account < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let (sum, _) = operations.iter().fold((0, false),\
    \ |(acc, flag), &x| {\n        (acc + x, flag || acc + x < 0)\n    });\n    sum\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvjjabb0r.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |balance, i| balance +\
    \ i) < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyhzxcjl1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for n in operations {\n   \
    \     sum += n;\n        if sum < 0 {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut account_balance = 0;\n    for op in operations\
    \ {\n        account_balance += op;\n        if account_balance < 0 {\n      \
    \      return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    if operations.len() == 0 {\n        return false;\n\
    \    }\n    let mut sum = 0;\n    for &x in operations.iter() {\n        sum +=\
    \ x;\n        if sum < 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| {\n        if\
    \ acc + x < 0 {\n            return true;\n        }\n        acc + x\n    })\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo38d3rg2.rs:9:28\n  |\n9 |\
    \     operations.iter().fold(0, |acc, x| {\n  |                            ^ expected\
    \ `bool`, found integer\n\nerror[E0369]: cannot add `&isize` to `bool`\n  -->\
    \ /tmp/tmpo38d3rg2.rs:10:16\n   |\n10 |         if acc + x < 0 {\n   |       \
    \     --- ^ - &isize\n   |            |\n   |            bool\n\nerror[E0369]:\
    \ cannot add `&isize` to `bool`\n  --> /tmp/tmpo38d3rg2.rs:13:13\n   |\n13 | \
    \        acc + x\n   |         --- ^ - &isize\n   |         |\n   |         bool\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, &x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz6wtfcbh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    // TODO implement this function\n    // Hint: use\
    \ .fold() method\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpzpzngf8t.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, &x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz6wtfcbh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |a, &b| a + b) < 0\n}\n\
    \nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpch04i2um.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in operations {\n   \
    \     sum += i;\n        if sum < 0 {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    // let mut sum = 0;\n    // for element in operations\
    \ {\n    //     sum += element;\n    //     if sum < 0 {\n    //         return\
    \ true;\n    //     }\n    // }\n    // false\n    operations.iter().fold(0, |mut\
    \ sum, &op| {\n        sum += op;\n        if sum < 0 {\n            return true;\n\
    \        }\n        sum\n    }) == 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpndpbsfmf.rs:20:20\n   |\n\
    20 |             return true;\n   |                    ^^^^ expected `isize`,\
    \ found `bool`\n   |\nnote: return type inferred to be `isize` here\n  --> /tmp/tmpndpbsfmf.rs:20:20\n\
    \   |\n20 |             return true;\n   |                    ^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |sum, x| sum + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpql7d08bh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |balance, &op| {\n    \
    \    if balance + op < 0 {\n            return true;\n        }\n        balance\
    \ + op\n    })\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpie9ljk1d.rs:9:28\n  |\n9 |\
    \     operations.iter().fold(0, |balance, &op| {\n  |                        \
    \    ^ expected `bool`, found integer\n\nerror[E0369]: cannot add `isize` to `bool`\n\
    \  --> /tmp/tmpie9ljk1d.rs:10:20\n   |\n10 |         if balance + op < 0 {\n \
    \  |            ------- ^ -- isize\n   |            |\n   |            bool\n\n\
    error[E0369]: cannot add `isize` to `bool`\n  --> /tmp/tmpie9ljk1d.rs:13:17\n\
    \   |\n13 |         balance + op\n   |         ------- ^ -- isize\n   |      \
    \   |\n   |         bool\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for oper in operations\
    \ {\n        balance += oper;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, operation| acc +\
    \ operation) < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbpqtuwv5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in operations {\n\
    \        balance += i;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut current_balance = 0;\n    for operation in\
    \ operations {\n        current_balance += operation;\n        if current_balance\
    \ < 0 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for o in operations {\n\
    \        balance += o;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut bank_account = 0;\n    for op in operations\
    \ {\n        bank_account += op;\n        if bank_account < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |mut state, x| {\n    \
    \    state += x;\n        if state < 0 {\n            return true;\n        }\n\
    \        false\n    })\n}\n\nfn main() {\n    let candidate = below_zero;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdsjtqqrn.rs:9:28\n  |\n9 |\
    \     operations.iter().fold(0, |mut state, x| {\n  |                        \
    \    ^ expected `bool`, found integer\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `bool`\n  --> /tmp/tmpdsjtqqrn.rs:10:9\n   |\n\
    10 |         state += x;\n   |         -----^^^^^\n   |         |\n   |      \
    \   cannot use `+=` on type `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdsjtqqrn.rs:11:20\n\
    \   |\n11 |         if state < 0 {\n   |                    ^ expected `bool`,\
    \ found integer\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0368.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbcvumxv7.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut acc = 0;\n    for value in operations {\n\
    \        acc += value;\n        if acc < 0 {\n            return true;\n     \
    \   }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for &operation in &operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in operations {\n\
    \        balance += i;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976648
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, &next| acc + next)\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpy3w05zcx.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut bal = 0;\n    for i in operations {\n   \
    \     bal += i;\n        if bal < 0 {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpamno81o5.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976648
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    operations.iter().any(|&x|\
    \ {\n        balance += x;\n        balance < 0\n    })\n}\n\nfn main() {\n  \
    \  let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |a, b| a + b) < 0\n}\n\n\
    fn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1_4ol0d1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |balance, &operation| {\n\
    \        let new_balance = balance + operation;\n        if new_balance < 0 {\n\
    \            return true;\n        }\n        new_balance\n    }) < 0\n}\n\nfn\
    \ main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyfktb3rg.rs:12:20\n   |\n\
    12 |             return true;\n   |                    ^^^^ expected `isize`,\
    \ found `bool`\n   |\nnote: return type inferred to be `isize` here\n  --> /tmp/tmpyfktb3rg.rs:12:20\n\
    \   |\n12 |             return true;\n   |                    ^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, op| acc + op) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdoa_w3ro.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut acc = 0;\n    for val in operations {\n \
    \       acc += val;\n        if acc < 0 {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    // TODO: write your code here\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxxe6xrna.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklxfry3y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in 0..operations.len()\
    \ {\n        balance += operations[i];\n        if balance < 0 {\n           \
    \ return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822544
- exit_code: 0
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut acc = 0;\n    operations.iter().any(|x| {\n\
    \        acc += x;\n        acc < 0\n    })\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976649
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, item| {\n       \
    \ return if acc + item < 0 {\n            true\n        } else {\n           \
    \ acc + item\n        };\n    })\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6fqm8d0d.rs:9:28\n  |\n9 |\
    \     operations.iter().fold(0, |acc, item| {\n  |                           \
    \ ^ expected `bool`, found integer\n\nerror[E0369]: cannot add `&isize` to `bool`\n\
    \  --> /tmp/tmp6fqm8d0d.rs:10:23\n   |\n10 |         return if acc + item < 0\
    \ {\n   |                   --- ^ ---- &isize\n   |                   |\n   |\
    \                   bool\n\nerror[E0369]: cannot add `&isize` to `bool`\n  -->\
    \ /tmp/tmp6fqm8d0d.rs:13:17\n   |\n13 |             acc + item\n   |         \
    \    --- ^ ---- &isize\n   |             |\n   |             bool\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976649
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmpplmgxt.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822544
