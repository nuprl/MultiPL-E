language: rs
name: HumanEval_155_even_odd_count
results:
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_cnt = 0;\n    let mut odd_cnt = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        let dig = num % 10;\n        if dig %\
    \ 2 == 0 {\n            even_cnt += 1;\n        } else {\n            odd_cnt\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even_cnt, odd_cnt)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpsn7nw1ah.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp5g6dds8n.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    let\
    \ mut num = num;\n    if num < 0 {\n        num = -num;\n    }\n    let mut n\
    \ = num;\n    while n > 0 {\n        let modulo = n % 10;\n        if modulo %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9ldjwz71.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpb61k0wdq.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for digit\
    \ in num.to_string().chars() {\n        let digit_value = digit.to_digit(10).unwrap()\
    \ as isize;\n        if digit_value % 2 == 0 {\n            even_count += 1;\n\
    \        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpju3_2dt4.rs:11:46

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut num = num;\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpyb4a33f0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    if n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        let d = n\
    \ % 10;\n        if d % 2 == 0 {\n            even += 1;\n        } else {\n \
    \           odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpmqcjt404.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    while num != 0 {\n        let digit = num % 10;\n        if\
    \ digit % 2 == 0 {\n            even_count += 1;\n        } else {\n         \
    \   odd_count += 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp2_1n2s2g.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // This can be broken down into a series of steps:\n    // - convert\
    \ num to a string.\n    // - iterate over the string, counting odd and even digits.\n\
    \    // - return the numbers as a tuple.\n    (0, 0)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmp_mub1mfs.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpb61k0wdq.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let str_num = format!(\"{}\", num);\n    let mut even = 0;\n \
    \   let mut odd = 0;\n    for c in str_num.chars() {\n        let n = c.to_digit(10).unwrap();\n\
    \        if n % 2 == 0 {\n            even += 1;\n        } else {\n         \
    \   odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpqfntk_th.rs:12:32

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n       \
    \ } else {\n            odd += 1;\n        }\n        n /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmph3_1j_5q.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n != 0 {\n        let digit = n % 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpm6b3yqgh.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let num\
    \ = num.abs();\n    let num_str = num.to_string();\n    for c in num_str.chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 0 {\n\
    \            even_count += 1;\n        } else {\n            odd_count += 1;\n\
    \        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpdntcuj3c.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpb61k0wdq.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ n = num;\n    while n != 0 {\n        if n % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        n /=\
    \ 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpwfxdigew.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut e_count = 0;\n    let mut o_count = 0;\n    let mut num_cpy\
    \ = num;\n    if num < 0 {\n        num_cpy = -num;\n    }\n    while num_cpy\
    \ > 0 {\n        let digit = num_cpy % 10;\n        if digit % 2 == 0 {\n    \
    \        e_count += 1;\n        } else {\n            o_count += 1;\n        }\n\
    \        num_cpy /= 10;\n    }\n    (e_count, o_count)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkxlvbo22.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ num = num;\n    if num < 0 {\n        num = -num;\n    }\n    loop {\n     \
    \   if num == 0 {\n            break;\n        }\n        let remainder = num\
    \ % 10;\n        if remainder % 2 == 0 {\n            even_count += 1;\n     \
    \   } else {\n            odd_count += 1;\n        }\n        num /= 10;\n   \
    \ }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpema0rkf8.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpdntcuj3c.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823239
