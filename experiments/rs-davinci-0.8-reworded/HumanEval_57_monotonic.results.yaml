language: rs
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.windows(2).all(|x| x[0] <= x[1]) || l.windows(2).all(|x|\
    \ x[0] >= x[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    for (i, j) in l.iter().zip(l.iter().skip(1)) {\n        if i <\
    \ j {\n            decreasing = false;\n        } else if i > j {\n          \
    \  increasing = false;\n        }\n    }\n    increasing || decreasing\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // todo\n    let mut i = 1;\n    let mut sign = 0;\n\
    \    for i in 1..l.len() {\n        let current_sign = (l[i] - l[i - 1]).signum();\n\
    \        if current_sign == 0 {\n            i += 1;\n            continue;\n\
    \        }\n        if sign == 0 {\n            sign = current_sign;\n       \
    \ } else if sign * current_sign < 0 {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmp4ygf4vh1.rs:10:13\n   |\n\
    10 |     let mut i = 1;\n   |             ^ help: if this is intentional, prefix\
    \ it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on\
    \ by default\n\nwarning: value assigned to `i` is never read\n  --> /tmp/tmp4ygf4vh1.rs:15:13\n\
    \   |\n15 |             i += 1;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ variable does not need to be mutable\n  --> /tmp/tmp4ygf4vh1.rs:10:9\n   |\n\
    10 |     let mut i = 1;\n   |         ----^\n   |         |\n   |         help:\
    \ remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n\
    error[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp4ygf4vh1.rs:15:13\n\
    \   |\n12 |     for i in 1..l.len() {\n   |         -\n   |         |\n   |  \
    \       first assignment to `i`\n   |         help: consider making this binding\
    \ mutable: `mut i`\n...\n15 |             i += 1;\n   |             ^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to previous error;\
    \ 3 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659821633
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut is_decreasing = false;\n    let mut is_increasing\
    \ = false;\n    let mut last_value = l[0];\n    for i in 1..l.len() {\n      \
    \  if l[i] < last_value {\n            is_decreasing = true;\n        } else if\
    \ l[i] > last_value {\n            is_increasing = true;\n        }\n        last_value\
    \ = l[i];\n    }\n    !(is_decreasing && is_increasing)\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut ascending = true;\n    let mut descending\
    \ = true;\n    let mut i = 0;\n    let mut j = 0;\n    while ascending || descending\
    \ {\n        if ascending {\n            if i == l.len() - 1 {\n             \
    \   break;\n            }\n            if l[i] > l[i + 1] {\n                ascending\
    \ = false;\n            }\n            i += 1;\n        }\n        if descending\
    \ {\n            if j == l.len() - 1 {\n                break;\n            }\n\
    \            if l[j] < l[j + 1] {\n                descending = false;\n     \
    \       }\n            j += 1;\n        }\n    }\n    ascending || descending\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut vec = l.clone();\n    vec.sort();\n    vec\
    \ == l || vec.iter().rev().collect::<Vec<_>>() == l\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp6elffn22.rs:11:54\n\
    \   |\n11 |     vec == l || vec.iter().rev().collect::<Vec<_>>() == l\n   |  \
    \                                                    ^^ no implementation for\
    \ `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = note: required because of the requirements on the impl of\
    \ `PartialEq<Vec<isize>>` for `Vec<&isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821633
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut c = None;\n    for v in l {\n        match\
    \ c {\n            None => c = Some(v),\n            Some(b) => {\n          \
    \      if v < b {\n                    return false;\n                }\n    \
    \            c = Some(v);\n            }\n        }\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi9j70vvm.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut mono_increasing = true;\n    let mut mono_decreasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   mono_increasing = false;\n        }\n        if l[i] > l[i - 1] {\n      \
    \      mono_decreasing = false;\n        }\n    }\n    mono_increasing || mono_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // TODO\n    if l.len() <= 1 {\n        return true;\n\
    \    }\n    let mut list = l.to_vec();\n    let mut first = list.remove(0);\n\
    \    let mut inc: bool = true;\n    let mut dec: bool = true;\n    for i in list\
    \ {\n        if i < first {\n            inc = false;\n        }\n        if i\
    \ > first {\n            dec = false;\n        }\n        first = i;\n    }\n\
    \    if inc || dec {\n        return true;\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut b = true;\n    let mut c = 0;\n    let mut\
    \ d = 0;\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] > 0 {\n      \
    \      c += 1;\n        } else if l[i] - l[i - 1] < 0 {\n            d += 1;\n\
    \        }\n    }\n    if d != 0 && c != 0 {\n        b = false;\n    }\n    b\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut up = false;\n    let mut down = false;\n\
    \    let mut last = l[0];\n    for i in l {\n        if i > last {\n         \
    \   if down {\n                return false;\n            }\n            up =\
    \ true;\n        } else if i < last {\n            if up {\n                return\
    \ false;\n            }\n            down = true;\n        }\n        last = i;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut result = true;\n    for i in 1..l.len() {\n\
    \        if l[i - 1] > l[i] {\n            result = false;\n            break;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvj784qys.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut incr = true;\n    let mut decr = true;\n\
    \    for i in 1..l.len() {\n        incr = incr && l[i] >= l[i - 1];\n       \
    \ decr = decr && l[i] <= l[i - 1];\n    }\n    incr || decr\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut prev = None;\n    for current in l {\n  \
    \      if let Some(prev) = prev {\n            if current < prev {\n         \
    \       return false;\n            }\n        }\n        prev = Some(current);\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprsfybrz8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut cur = l[0];\n    let mut asc = true;\n  \
    \  let mut des = true;\n    for &i in l.iter().skip(1) {\n        if i > cur {\n\
    \            des = false;\n        } else if i < cur {\n            asc = false;\n\
    \        }\n        cur = i;\n    }\n    asc || des\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    let mut increasing = l[0] < l[1];\n    for i in 0..l.len() - 1 {\n      \
    \  if l[i] == l[i + 1] {\n            return false;\n        }\n        if increasing\
    \ {\n            if l[i] > l[i + 1] {\n                return false;\n       \
    \     }\n        } else {\n            if l[i] < l[i + 1] {\n                return\
    \ false;\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk6fr54_5.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821634
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    for i in 1..l.len() {\n        if (l[i - 1] - l[i]).abs()\
    \ < l[i - 1].abs() {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxfn5xyq5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821634
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut inc = false;\n    let\
    \ mut dec = false;\n    for item in l {\n        if item < l[i] {\n          \
    \  inc = true;\n        } else if item > l[i] {\n            dec = true;\n   \
    \     }\n        i += 1;\n    }\n    inc && dec\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpxnb71w07.rs:13:19\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n12  |     for item in l {\n    |                 -\n    |      \
    \           |\n    |                 `l` moved due to this implicit call to `.into_iter()`\n\
    \    |                 help: consider borrowing to avoid moving into the for loop:\
    \ `&l`\n13  |         if item < l[i] {\n    |                   ^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821633
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut incr = false;\n    let mut decr = false;\n\
    \    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            incr = true;\n\
    \        } else if l[i] < l[i - 1] {\n            decr = true;\n        }\n  \
    \      if incr && decr {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    match l.len() {\n        0 => false,\n        1 =>\
    \ true,\n        _ => {\n            let mut increasing = true;\n            let\
    \ mut decreasing = true;\n            for i in 1..l.len() {\n                increasing\
    \ = increasing && l[i] >= l[i - 1];\n                decreasing = decreasing &&\
    \ l[i] <= l[i - 1];\n            }\n            increasing || decreasing\n   \
    \     }\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // (1)\n    // let mut previous = std::isize::MIN;\n\
    \    // let mut mono = true;\n    // for i in l {\n    //     if i >= previous\
    \ {\n    //         previous = i;\n    //     } else {\n    //         mono =\
    \ false;\n    //         break;\n    //     }\n    // }\n    // return mono;\n\
    \n    // (2)\n    // return l.windows(2).all(|w| w[0] <= w[1]);\n\n    // (3)\n\
    \    // l.windows(2).all(|w| w[0] <= w[1])\n    //     || l.windows(2).all(|w|\
    \ w[0] >= w[1])\n\n    // (4)\n    l.windows(2).all(|w| w[0] <= w[1])\n      \
    \  || l.windows(2).all(|w| w[0] >= w[1])\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    for i in 1..l.len() {\n        increasing = increasing && l[i]\
    \ >= l[i - 1];\n        decreasing = decreasing && l[i] <= l[i - 1];\n    }\n\
    \    increasing || decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  for n in 1..l.len() {\n        if l[n] < l[n - 1] {\n            inc = false;\n\
    \        }\n        if l[n] > l[n - 1] {\n            dec = false;\n        }\n\
    \    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    for i in 1..l.len() {\n        if l[i] - l[i - 1]\
    \ < 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmhb3dno3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe5p130u_.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976428
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    l == l.clone().into_iter().rev()\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `Vec<isize>` with `Rev<std::vec::IntoIter<isize>>`\n\
    \  --> /tmp/tmp3z2djk36.rs:11:7\n   |\n11 |     l == l.clone().into_iter().rev()\n\
    \   |       ^^ no implementation for `Vec<isize> == Rev<std::vec::IntoIter<isize>>`\n\
    \   |\n   = help: the trait `PartialEq<Rev<std::vec::IntoIter<isize>>>` is not\
    \ implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n\
    \    let mut prev = l[0];\n    let mut increasing = true;\n    for i in l {\n\
    \        if i == prev {\n            continue;\n        }\n        if (i > prev)\
    \ != increasing {\n            return false;\n        }\n        increasing =\
    \ i > prev;\n        prev = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmeakivum.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut length = l.len();\n    let mut i = 0;\n \
    \   while i < length - 1 {\n        if (l[i] - l[i + 1]).abs() > 0 {\n       \
    \     length = i + 1;\n            break;\n        }\n        i += 1;\n    }\n\
    \    length == 1\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkbfezodo.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    for i in 1..l.len() {\n        increasing = increasing && l[i]\
    \ >= l[i - 1];\n        decreasing = decreasing && l[i] <= l[i - 1];\n    }\n\
    \    increasing || decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  for i in 1..l.len() {\n        if l[i - 1] > l[i] {\n            inc = false;\n\
    \        }\n        if l[i - 1] < l[i] {\n            dec = false;\n        }\n\
    \    }\n    return inc || dec;\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let inc = l[0] < l[1];\n    l.windows(2).all(|w| inc == (w[0] < w[1]))\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = 0;\n    let l = &l;\n    for i in 1..l.len()\
    \ {\n        if l[i] > l[i - 1] {\n            if m == -1 {\n                return\
    \ false;\n            }\n            m = 1;\n        } else if l[i] < l[i - 1]\
    \ {\n            if m == 1 {\n                return false;\n            }\n \
    \           m = -1;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let m = l.len();\n    if m == 0 {\n        return\
    \ true;\n    }\n    let mut i = 0;\n    let mut strictly_increasing = false;\n\
    \    let mut strictly_decreasing = false;\n    while i < m - 1 {\n        if l[i]\
    \ > l[i + 1] {\n            strictly_increasing = true;\n        } else if l[i]\
    \ < l[i + 1] {\n            strictly_decreasing = true;\n        }\n        if\
    \ strictly_increasing && strictly_decreasing {\n            return false;\n  \
    \      }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  for i in 1..l.len() {\n        inc &= l[i - 1] <= l[i];\n        dec &= l[i\
    \ - 1] >= l[i];\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut x = l[0];\n    let mut inc = true;\n    let\
    \ mut dec = true;\n    for y in l.iter().skip(1) {\n        if *y > x {\n    \
    \        dec = false;\n        } else if *y < x {\n            inc = false;\n\
    \        }\n        x = *y;\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut direction = None;\n    for (a, b) in l.iter().tuple_windows()\
    \ {\n        let new_direction = if a < b {\n            Direction::Ascending\n\
    \        } else if a > b {\n            Direction::Descending\n        } else\
    \ {\n            Direction::Equal\n        };\n        match direction {\n   \
    \         None => direction = Some(new_direction),\n            Some(d) => {\n\
    \                if d != new_direction && new_direction != Direction::Equal {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Direction`\n \
    \ --> /tmp/tmpreh5ahym.rs:12:13\n   |\n12 |             Direction::Ascending\n\
    \   |             ^^^^^^^^^ use of undeclared type `Direction`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpreh5ahym.rs:14:13\n\
    \   |\n14 |             Direction::Descending\n   |             ^^^^^^^^^ use\
    \ of undeclared type `Direction`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Direction`\n  --> /tmp/tmpreh5ahym.rs:16:13\n   |\n16 |             Direction::Equal\n\
    \   |             ^^^^^^^^^ use of undeclared type `Direction`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpreh5ahym.rs:21:59\n\
    \   |\n21 |                 if d != new_direction && new_direction != Direction::Equal\
    \ {\n   |                                                           ^^^^^^^^^\
    \ use of undeclared type `Direction`\n\nerror[E0599]: no method named `tuple_windows`\
    \ found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmpreh5ahym.rs:10:28\n\
    \   |\n10 |     for (a, b) in l.iter().tuple_windows() {\n   |               \
    \             ^^^^^^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    for i in 1..l.len() {\n        let a = l[i - 1];\n\
    \        let b = l[i];\n        if a.signum() != b.signum() {\n            return\
    \ false;\n        }\n        if (a - b).abs() > 1 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_tt2890v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut acc = l[0];\n    let mut negative = false;\n    for (i, e) in l.iter().enumerate()\
    \ {\n        if i == 0 {\n            continue;\n        }\n        if e < &acc\
    \ {\n            if negative {\n                return false;\n            }\n\
    \            negative = true;\n        } else if e > &acc {\n            if !negative\
    \ {\n                return false;\n            }\n            negative = false;\n\
    \        }\n        acc = *e;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsttc304q.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let mut reversed = l.clone();\n    reversed.sort_by(|a, b| b.cmp(a));\n \
    \   l == sorted || l == reversed\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    for idx in 1..l.len() {\n        if l[idx - 1] > l[idx] {\n   \
    \         increasing = false;\n        }\n        if l[idx - 1] < l[idx] {\n \
    \           decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut state = None;\n    for i in 1..l.len() {\n\
    \        let curr = l[i] - l[i - 1];\n        if curr == 0 {\n            continue;\n\
    \        }\n        if state.is_none() {\n            state = Some(curr > 0);\n\
    \        } else if curr > 0 != state.unwrap() {\n            return false;\n \
    \       }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpd_obm_3g.rs:17:24\n\
    \   |\n17 |         } else if curr > 0 != state.unwrap() {\n   |             \
    \           ^   ^^\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut asc = true;\n    let mut desc = true;\n \
    \   let mut i = 0;\n    while i < l.len() - 1 {\n        if l[i] > l[i + 1] {\n\
    \            asc = false;\n        }\n        if l[i] < l[i + 1] {\n         \
    \   desc = false;\n        }\n        i += 1;\n    }\n    asc || desc\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut it = l.iter();\n    let mut m = it.next().unwrap();\n\
    \    let mut ok = true;\n    for i in it {\n        ok = ok && m <= i;\n     \
    \   m = i;\n    }\n    ok\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd1nb2g58.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut is_increasing =\
    \ true;\n    for n in l {\n        if n != prev {\n            if n < prev {\n\
    \                is_increasing = false;\n            }\n            prev = n;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprrb0cslk.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let l = l.iter().collect::<Vec<_>>();\n    let mut\
    \ a = *l[0];\n    let mut b = *l[1];\n    let mut x = false;\n    let mut y =\
    \ false;\n    if a < b {\n        x = true;\n    } else if a > b {\n        y\
    \ = true;\n    }\n    for i in 2..l.len() {\n        if x && *l[i] < a {\n   \
    \         return false;\n        } else if y && *l[i] > a {\n            return\
    \ false;\n        }\n        a = b;\n        b = *l[i];\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6a2x4g58.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    if l[0] == l[1] {\n        return monotonic(l[1..].to_vec());\n    }\n  \
    \  let mut dir = l[0] < l[1];\n    for i in 1..l.len() - 1 {\n        if dir &&\
    \ l[i] > l[i + 1] {\n            return false;\n        }\n        if !dir &&\
    \ l[i] < l[i + 1] {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    match l.iter().fold((0, 0), |acc, x| {\n        if\
    \ acc.0 == 0 {\n            (x.signum(), x.signum())\n        } else if (acc.0\
    \ < 0 && acc.1 >= 0) || (acc.0 > 0 && acc.1 <= 0) {\n            return (2, 2);\n\
    \        } else {\n            (x.signum(), acc.0)\n        }\n    }) {\n    \
    \    (0, _) => true,\n        (1, _) => true,\n        (-1, _) => true,\n    \
    \    _ => false,\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkfyq6930.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut c = l[0];\n    let mut d = true;\n    for\
    \ x in l {\n        if x > c {\n            d = true;\n        } else if x < c\
    \ {\n            d = false;\n        }\n        c = x;\n    }\n    d\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk34c38bt.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n\
    \    let mut r = l[0];\n    let mut d = false;\n    for v in l {\n        if r\
    \ == v {\n            continue;\n        }\n        if !d {\n            d = true;\n\
    \        } else {\n            if v > r {\n                return false;\n   \
    \         }\n        }\n        r = v;\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpim65nm2n.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    while j <\
    \ l.len() {\n        if l[i] < l[j] {\n            while j < l.len() && l[j -\
    \ 1] < l[j] {\n                j += 1;\n            }\n        } else if l[i]\
    \ > l[j] {\n            while j < l.len() && l[j - 1] > l[j] {\n             \
    \   j += 1;\n            }\n        } else {\n            return false;\n    \
    \    }\n        i = j;\n        j += 1;\n    }\n    true\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbd2bmmww.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n \
    \   return l.len() == 1;\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7m_27gcl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    let mut ok = true;\n    while\
    \ ok && l.len() > 1 {\n        let first = l.remove(0);\n        let second =\
    \ l.remove(0);\n        if first < second {\n            ok = !l.iter().any(|x|\
    \ *x < second);\n        } else if first > second {\n            ok = !l.iter().any(|x|\
    \ *x > second);\n        }\n    }\n    ok\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut d = None;\n    for i in 1..l.len() {\n  \
    \      let j = l[i] - l[i - 1];\n        match d {\n            None => d = Some(j),\n\
    \            Some(k) => {\n                if (k < 0 && j > 0) || (k > 0 && j\
    \ < 0) {\n                    return false;\n                }\n            }\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let len = l.len();\n    if len < 2 {\n        return\
    \ true;\n    }\n    let mut increasing = l[0] < l[1];\n    for i in 0..len - 1\
    \ {\n        if increasing {\n            if l[i] > l[i + 1] {\n             \
    \   return false;\n            }\n        } else {\n            if l[i] < l[i\
    \ + 1] {\n                return false;\n            }\n        }\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    let mut n = l.len();\n    if n == 0 {\n        return true;\n \
    \   }\n    let mut prev = l[0];\n    for i in 1..n {\n        let e = l[i];\n\
    \        if e < prev {\n            increasing = false;\n        }\n        if\
    \ e > prev {\n            decreasing = false;\n        }\n        prev = e;\n\
    \    }\n    return increasing || decreasing;\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let (_, m) = l.iter().fold((0, 0), |(acc, dir), &next|\
    \ {\n        let new_dir = next - acc;\n        if dir == 0 {\n            (next,\
    \ new_dir)\n        } else if dir > 0 && new_dir < 0 {\n            (next, new_dir)\n\
    \        } else if dir < 0 && new_dir > 0 {\n            (next, new_dir)\n   \
    \     } else {\n            (next, dir)\n        }\n    });\n    m == 0\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo9onb6au.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = l[0];\n    let mut is_increasing = false;\n\
    \    for i in l {\n        if i > m {\n            if is_increasing {\n      \
    \          return false;\n            }\n            is_increasing = true;\n \
    \       } else if i < m {\n            if !is_increasing {\n                return\
    \ false;\n            }\n            is_increasing = false;\n        }\n     \
    \   m = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbu3j7lo2.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut upward = false;\n    let mut downward = false;\n\
    \    let mut i = 0;\n    while i < l.len() - 1 {\n        if l[i] < l[i + 1] {\n\
    \            upward = true;\n        } else if l[i] > l[i + 1] {\n           \
    \ downward = true;\n        }\n        if upward && downward {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut dir = if l[0] < l[1] { 1 } else { -1 };\n\
    \    for i in 1..l.len() - 1 {\n        let new_dir = if l[i] < l[i + 1] { 1 }\
    \ else { -1 };\n        if new_dir != dir {\n            return false;\n     \
    \   }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut is_monotonic = true;\n    let mut dir: isize\
    \ = 0;\n    for i in 0..l.len() - 1 {\n        if dir == 0 {\n            if l[i]\
    \ > l[i + 1] {\n                dir = -1;\n            } else if l[i] < l[i +\
    \ 1] {\n                dir = 1;\n            }\n        } else if (dir > 0 &&\
    \ l[i] > l[i + 1]) || (dir < 0 && l[i] < l[i + 1]) {\n            is_monotonic\
    \ = false;\n            break;\n        }\n    }\n    is_monotonic\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut up = true;\n  \
    \  let mut down = true;\n    for i in l {\n        if i < prev {\n           \
    \ up = false;\n        }\n        if i > prev {\n            down = false;\n \
    \       }\n        prev = i;\n    }\n    up || down\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut v = l.clone();\n    v.sort();\n    v == l\
    \ || v.iter().rev().collect::<Vec<_>>() == l\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmplt63rl5o.rs:11:50\n\
    \   |\n11 |     v == l || v.iter().rev().collect::<Vec<_>>() == l\n   |      \
    \                                            ^^ no implementation for `&isize\
    \ == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n   = note: required because of the requirements on the impl\
    \ of `PartialEq<Vec<isize>>` for `Vec<&isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    match l.as_slice() {\n        [] => true,\n     \
    \   [a] => true,\n        [a, b] => a != b,\n        [a, b, .., x, y] => a < b\
    \ && monotonic(l[1..].to_vec()) || a > b && monotonic(l[1..].to_vec())\n    }\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0004]: non-exhaustive patterns: `&[_, _, _]` not covered\n --> /tmp/tmpx7bvpz43.rs:9:11\n\
    \  |\n9 |     match l.as_slice() {\n  |           ^^^^^^^^^^^^ pattern `&[_, _,\
    \ _]` not covered\n  |\n  = note: the matched value is of type `&[isize]`\nhelp:\
    \ ensure that all possible cases are being handled by adding a match arm with\
    \ a wildcard pattern or an explicit pattern as shown\n  |\n13~         [a, b,\
    \ .., x, y] => a < b && monotonic(l[1..].to_vec()) || a > b && monotonic(l[1..].to_vec()),\n\
    14+         &[_, _, _] => todo!()\n  |\n\nwarning: unused variable: `a`\n  -->\
    \ /tmp/tmpx7bvpz43.rs:11:10\n   |\n11 |         [a] => true,\n   |          ^\
    \ help: if this is intentional, prefix it with an underscore: `_a`\n   |\n   =\
    \ note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable:\
    \ `x`\n  --> /tmp/tmpx7bvpz43.rs:13:20\n   |\n13 |         [a, b, .., x, y] =>\
    \ a < b && monotonic(l[1..].to_vec()) || a > b && monotonic(l[1..].to_vec())\n\
    \   |                    ^ help: if this is intentional, prefix it with an underscore:\
    \ `_x`\n\nwarning: unused variable: `y`\n  --> /tmp/tmpx7bvpz43.rs:13:23\n   |\n\
    13 |         [a, b, .., x, y] => a < b && monotonic(l[1..].to_vec()) || a > b\
    \ && monotonic(l[1..].to_vec())\n   |                       ^ help: if this is\
    \ intentional, prefix it with an underscore: `_y`\n\nerror: aborting due to previous\
    \ error; 3 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0004`.\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut i = 0;\n    let mut j = 1;\n    while j < l.len() {\n        if l[i]\
    \ > l[j] {\n            break;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    if j == l.len() {\n        return true;\n    }\n    while j < l.len()\
    \ {\n        if l[i] < l[j] {\n            return false;\n        }\n        i\
    \ += 1;\n        j += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut monotonic = true;\n    let mut prev = l[0];\n\
    \    for i in l {\n        if i < prev {\n            monotonic = false;\n   \
    \         break;\n        }\n        prev = i;\n    }\n    monotonic\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe5w0bn8n.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut is_monotonic = true;\n    let first = l[0];\n\
    \    let length = l.len();\n    for i in 1..length {\n        let second = l[i];\n\
    \        is_monotonic = if first < second {\n            i == length - 1 || second\
    \ >= l[i + 1]\n        } else {\n            i == length - 1 || second <= l[i\
    \ + 1]\n        };\n        if !is_monotonic {\n            break;\n        }\n\
    \    }\n    is_monotonic\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7l49wzjm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut (st, base) = (0, l[0]);\n    for i in l.iter()\
    \ {\n        if st == 0 {\n            st = if i > &base { 1 } else if i < &base\
    \ { -1 } else { 0 };\n            base = *i;\n        } else if st == 1 {\n  \
    \          if i < &base {\n                return false;\n            }\n    \
    \        base = *i;\n        } else if st == -1 {\n            if i > &base {\n\
    \                return false;\n            }\n            base = *i;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error: `mut` must be attached to each individual binding\n --> /tmp/tmpwa0edvaq.rs:9:9\n\
    \  |\n9 |     let mut (st, base) = (0, l[0]);\n  |         ^^^^^^^^^^^^^^ help:\
    \ add `mut` to each binding: `(mut st, mut base)`\n  |\n  = note: `mut` may be\
    \ followed by `variable` and `variable @ pattern`\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut inc = true;\n    let\
    \ mut dec = true;\n    while i < l.len() - 1 {\n        if l[i] > l[i + 1] {\n\
    \            inc = false;\n        }\n        if l[i] < l[i + 1] {\n         \
    \   dec = false;\n        }\n        i += 1;\n    }\n    inc || dec\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    if l[0] < l[1] {\n        for i in 0..l.len() - 1 {\n            if l[i]\
    \ > l[i + 1] {\n                return false;\n            }\n        }\n    }\
    \ else {\n        for i in 0..l.len() - 1 {\n            if l[i] < l[i + 1] {\n\
    \                return false;\n            }\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut dir = None;\n    for i in 0..l.len() - 1\
    \ {\n        let diff = l[i + 1] - l[i];\n        match dir {\n            None\
    \ => dir = Some(diff),\n            Some(d) => {\n                if d * diff\
    \ < 0 {\n                    return false;\n                }\n            }\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n         \
    \   decreasing = false;\n        } else if l[i] < l[i - 1] {\n            increasing\
    \ = false;\n        }\n    }\n    increasing || decreasing\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut is_increasing = l[0] < l[1];\n    for i in 1..l.len() - 1 {\n    \
    \    if l[i] < l[i + 1] != is_increasing {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpij2cvrsp.rs:14:17\n\
    \   |\n14 |         if l[i] < l[i + 1] != is_increasing {\n   |              \
    \   ^          ^^\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut flag = None;\n    for i in 1..l.len() {\n\
    \        let d = l[i] - l[i - 1];\n        if flag == None {\n            flag\
    \ = Some(d);\n        } else if flag != Some(d) {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpeb9gv3qz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut mono = true;\n    let mut prev = l[0];\n\
    \    for x in l {\n        if (x - prev).abs() == 1 {\n            prev = x;\n\
    \        } else {\n            mono = false;\n            break;\n        }\n\
    \    }\n    mono\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwoov1l19.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut sign = None;\n    for (i, v) in l.into_iter().enumerate()\
    \ {\n        if i == 0 {\n            continue;\n        }\n        let s = if\
    \ l[i - 1] > v {\n            -1\n        } else if l[i - 1] < v {\n         \
    \   1\n        } else {\n            continue;\n        };\n        if sign.is_none()\
    \ {\n            sign = Some(s);\n        } else if sign.unwrap() != s {\n   \
    \         return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpnvyjyh87.rs:14:20\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9   |     let mut sign = None;\n10  |     for (i, v) in l.into_iter().enumerate()\
    \ {\n    |                     ----------- `l` moved due to this method call\n\
    ...\n14  |         let s = if l[i - 1] > v {\n    |                    ^ value\
    \ borrowed here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `l`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = true;\n    let mut s = false;\n    for\
    \ i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            if s {\n      \
    \          return false;\n            }\n            m = true;\n        } else\
    \ if l[i] < l[i - 1] {\n            if m {\n                return false;\n  \
    \          }\n            s = true;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps7rg57pk.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let (start, end) = l.split_at(2);\n    let mut direction = start[1] - start[0];\n\
    \    for e in end {\n        let diff = *e - start[start.len() - 1];\n       \
    \ if direction * diff < 0 {\n            return false;\n        }\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv34t_1ij.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut curr = l[0];\n    let mut last = l[0];\n\
    \    let mut order = 0;\n\n    for e in l.iter() {\n        if e < &curr {\n \
    \           curr = *e;\n            order -= 1;\n        } else if e > &curr {\n\
    \            curr = *e;\n            order += 1;\n        }\n    }\n\n    if order\
    \ == 0 || (order > 0 && last < l[l.len() - 1]) || (order < 0 && last > l[l.len()\
    \ - 1]) {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8h6a984a.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut incr = true;\n    let mut decr = true;\n\
    \    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            incr = false;\n\
    \        }\n        if l[i] > l[i - 1] {\n            decr = false;\n        }\n\
    \    }\n    incr || decr\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    let mut inc = true;\n    let mut dec = true;\n    for (x, y) in l.iter().zip(l.iter().skip(1))\
    \ {\n        if x < y {\n            dec = false;\n        } else if x > y {\n\
    \            inc = false;\n        }\n    }\n    inc || dec\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    let mut result = true;\n    for i in 1..l.len() {\n        if l[i] > l[i\
    \ - 1] {\n            result = result && monotonic_increasing(l[i - 1], l[i]);\n\
    \        } else if l[i] < l[i - 1] {\n            result = result && monotonic_decreasing(l[i\
    \ - 1], l[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `monotonic_increasing` in this scope\n\
    \  --> /tmp/tmph3kjm6z2.rs:15:32\n   |\n15 |             result = result && monotonic_increasing(l[i\
    \ - 1], l[i]);\n   |                                ^^^^^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `monotonic_decreasing` in\
    \ this scope\n  --> /tmp/tmph3kjm6z2.rs:17:32\n   |\n17 |             result =\
    \ result && monotonic_decreasing(l[i - 1], l[i]);\n   |                      \
    \          ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut prev: isize = 0;\n    let mut direction:\
    \ isize = 0;\n    for item in l {\n        if direction == 0 {\n            direction\
    \ = item - prev;\n        } else if (item - prev) * direction < 0 {\n        \
    \    return false;\n        }\n        prev = item;\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6r7_d1_v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut last = std::isize::MIN;\n    let mut is_increasing\
    \ = true;\n    for e in l {\n        if e > last {\n            if !is_increasing\
    \ {\n                return false;\n            }\n        } else if e < last\
    \ {\n            if is_increasing {\n                is_increasing = false;\n\
    \            }\n        }\n        last = e;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut count = 0;\n    for j in 1..l.len() {\n \
    \       if l[j] > l[j - 1] {\n            count += 1;\n        } else if l[j]\
    \ < l[j - 1] {\n            count -= 1;\n        }\n    }\n    count != -(l.len()\
    \ as isize) && count != l.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfoen_5ai.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        true\n    } else {\n \
    \       let s = l[0] < l[1];\n        l.windows(2).all(|w| s == (w[0] < w[1]))\n\
    \    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut decrease = false;\n    let mut increase =\
    \ false;\n    let mut prev = isize::MAX;\n    for i in l {\n        if i > prev\
    \ {\n            if decrease {\n                return false;\n            }\n\
    \            increase = true;\n        } else if i < prev {\n            if increase\
    \ {\n                return false;\n            }\n            decrease = true;\n\
    \        }\n        prev = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpeu9iwio1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    for i in 1..l.len() {\n        if l[i] - l[i - 1]\
    \ > 0 {\n            for j in i + 1..l.len() {\n                if l[j] - l[j\
    \ - 1] < 0 {\n                    return false;\n                }\n         \
    \   }\n        } else if l[i] - l[i - 1] < 0 {\n            for j in i + 1..l.len()\
    \ {\n                if l[j] - l[j - 1] > 0 {\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut is_increasing = false;\n    let mut is_decreasing\
    \ = false;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n        \
    \    is_increasing = true;\n        } else if l[i] < l[i - 1] {\n            is_decreasing\
    \ = true;\n        }\n        if is_increasing && is_decreasing {\n          \
    \  return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = l[0];\n    let mut positive = None;\n\
    \    for i in l.iter() {\n        if positive.is_none() {\n            positive\
    \ = i.cmp(&m) == Ordering::Greater;\n        }\n        if positive.unwrap() &&\
    \ i.cmp(&m) == Ordering::Less {\n            return false;\n        }\n      \
    \  if !positive.unwrap() && i.cmp(&m) == Ordering::Greater {\n            return\
    \ false;\n        }\n        m = *i;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmppi_nhvvl.rs:13:37\n   |\n13 |             positive = i.cmp(&m) == Ordering::Greater;\n\
    \   |                                     ^^^^^^^^ use of undeclared type `Ordering`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmppi_nhvvl.rs:15:46\n\
    \   |\n15 |         if positive.unwrap() && i.cmp(&m) == Ordering::Less {\n  \
    \ |                                              ^^^^^^^^ use of undeclared type\
    \ `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmppi_nhvvl.rs:18:47\n   |\n18 |         if !positive.unwrap() &&\
    \ i.cmp(&m) == Ordering::Greater {\n   |                                     \
    \          ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppi_nhvvl.rs:13:24\n   |\n10 |     let mut positive = None;\n\
    \   |                        ---- expected due to this value\n...\n13 |      \
    \       positive = i.cmp(&m) == Ordering::Greater;\n   |                     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `bool`\n   |\n\
    \   = note: expected enum `Option<_>`\n              found type `bool`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n13 |             positive = Some(i.cmp(&m)\
    \ == Ordering::Greater);\n   |                        +++++                  \
    \            +\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut trend = 0;\n\n    for (i, v) in l.iter().enumerate()\
    \ {\n        if i == 0 {\n            continue;\n        }\n\n        if l[i -\
    \ 1] == *v {\n            continue;\n        }\n\n        let new_trend = l[i\
    \ - 1] - *v;\n\n        if trend == 0 {\n            trend = new_trend;\n    \
    \    } else if trend != new_trend {\n            return false;\n        }\n  \
    \  }\n\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgkb0_pc_.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = l[0];\n    let mut a = true;\n    for\
    \ v in l {\n        if m < v {\n            m = v;\n        } else if m > v {\n\
    \            m = v;\n            a = false;\n        }\n    }\n    a\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpybzex123.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut last = l[0];\n    let mut increasing = true;\n    for x in l.iter().skip(1)\
    \ {\n        if last > *x {\n            increasing = false;\n        }\n    \
    \    if (increasing && last > *x) || (!increasing && last < *x) {\n          \
    \  return false;\n        }\n        last = *x;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    let mut inc = true;\n    let mut dec = true;\n    for i in 1..l.len() {\n\
    \        if l[i] > l[i - 1] {\n            dec = false;\n        }\n        if\
    \ l[i] < l[i - 1] {\n            inc = false;\n        }\n    }\n    return inc\
    \ || dec;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut a = l.iter();\n    let mut v = a.next().unwrap();\n\
    \    let mut incr = true;\n    for i in a {\n        if v > i {\n            incr\
    \ = false;\n        }\n        if (incr && v > i) || (!incr && v < i) {\n    \
    \        return false;\n        }\n        v = i;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let diff = l[1] - l[0];\n    for i in 1..l.len() {\n        if (l[i] - l[i\
    \ - 1]) * diff < 0 {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // TODO\n    let mut m_t: bool = false;\n    let\
    \ mut m_f: bool = false;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1]\
    \ {\n            m_t = true;\n        } else if l[i] < l[i - 1] {\n          \
    \  m_f = true;\n        }\n    }\n    if m_t && m_f {\n        return false;\n\
    \    } else {\n        return true;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i - 1] > l[i] {\n         \
    \   increasing = false;\n        }\n        if l[i - 1] < l[i] {\n           \
    \ decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let (dir, _) = l.iter().fold((0, l[0]), |(dir, prev),\
    \ &curr| {\n        if prev < curr {\n            (1, curr)\n        } else if\
    \ prev > curr {\n            (-1, curr)\n        } else {\n            (dir, curr)\n\
    \        }\n    });\n    dir == 0 || dir == 1 || dir == -1\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8hrgos42.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut iter = l.iter();\n    let first = iter.next().unwrap_or(&0);\n\
    \    let inc = iter.fold(true, |acc, x| acc && x >= first);\n    let dec = iter.fold(true,\
    \ |acc, x| acc && x <= first);\n    return inc || dec;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `iter`\n    --> /tmp/tmpl3y_h9v3.rs:12:15\n\
    \     |\n9    |     let mut iter = l.iter();\n     |         -------- move occurs\
    \ because `iter` has type `std::slice::Iter<'_, isize>`, which does not implement\
    \ the `Copy` trait\n10   |     let first = iter.next().unwrap_or(&0);\n11   |\
    \     let inc = iter.fold(true, |acc, x| acc && x >= first);\n     |         \
    \           -------------------------------------- `iter` moved due to this method\
    \ call\n12   |     let dec = iter.fold(true, |acc, x| acc && x <= first);\n  \
    \   |               ^^^^ value used here after move\n     |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `iter`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    match l {\n        [] => true,\n        [x] => true,\n\
    \        [x, y] => x <= y,\n        [x, y, z, ..] => x <= y && y <= z,\n    }\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpywr9xzmd.rs:10:9\n\
    \   |\n9  |     match l {\n   |           - help: consider slicing here: `l[..]`\n\
    10 |         [] => true,\n   |         ^^ pattern cannot match with input type\
    \ `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n\
    \  --> /tmp/tmpywr9xzmd.rs:11:9\n   |\n9  |     match l {\n   |           - help:\
    \ consider slicing here: `l[..]`\n10 |         [] => true,\n11 |         [x] =>\
    \ true,\n   |         ^^^ pattern cannot match with input type `Vec<isize>`\n\n\
    error[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpywr9xzmd.rs:12:9\n\
    \   |\n9  |     match l {\n   |           - help: consider slicing here: `l[..]`\n\
    ...\n12 |         [x, y] => x <= y,\n   |         ^^^^^^ pattern cannot match\
    \ with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found\
    \ `Vec<isize>`\n  --> /tmp/tmpywr9xzmd.rs:13:9\n   |\n9  |     match l {\n   |\
    \           - help: consider slicing here: `l[..]`\n...\n13 |         [x, y, z,\
    \ ..] => x <= y && y <= z,\n   |         ^^^^^^^^^^^^^ pattern cannot match with\
    \ input type `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0529`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut increasing = true;\n\
    \    let mut decreasing = true;\n    for n in l {\n        increasing = increasing\
    \ && i <= n;\n        decreasing = decreasing && i >= n;\n        i = n;\n   \
    \ }\n    increasing || decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu14jw58i.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut z = l.clone();\n    z.sort();\n    l == z\
    \ || l == z.iter().rev().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0283]: type annotations needed\n  --> /tmp/tmpz03w7mxm.rs:11:17\n\
    \   |\n11 |     l == z || l == z.iter().rev().cloned().collect()\n   |       \
    \          ^^ cannot infer type\n   |\n   = note: multiple `impl`s satisfying\
    \ `Vec<isize>: PartialEq<_>` found in the `alloc` crate:\n           - impl<T,\
    \ U, A, N> PartialEq<&[U; N]> for Vec<T, A>\n             where A: Allocator,\
    \ T: PartialEq<U>;\n           - impl<T, U, A, N> PartialEq<[U; N]> for Vec<T,\
    \ A>\n             where A: Allocator, T: PartialEq<U>;\n           - impl<T,\
    \ U, A1, A2> PartialEq<Vec<U, A2>> for Vec<T, A1>\n             where A1: Allocator,\
    \ A2: Allocator, T: PartialEq<U>;\n           - impl<T, U, A> PartialEq<&[U]>\
    \ for Vec<T, A>\n             where A: Allocator, T: PartialEq<U>;\n         \
    \  and 2 more\nhelp: consider specifying the type argument in the method call\n\
    \   |\n11 |     l == z || l == z.iter().rev().cloned().collect::<B>()\n   |  \
    \                                                 +++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0283`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  let mut last = l[0];\n    for &v in l.iter().skip(1) {\n        if v < last\
    \ {\n            inc = false;\n        }\n        if v > last {\n            dec\
    \ = false;\n        }\n        last = v;\n    }\n    inc || dec\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    loop {\n        if i == l.len()\
    \ - 1 {\n            return true;\n        } else if l[i] > l[i + 1] {\n     \
    \       break;\n        }\n        i += 1;\n    }\n    let mut i = 0;\n    loop\
    \ {\n        if i == l.len() - 1 {\n            return true;\n        } else if\
    \ l[i] < l[i + 1] {\n            break;\n        }\n        i += 1;\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut l_iter = l.iter();\n    match l_iter.next()\
    \ {\n        None => true,\n        Some(f) => l_iter.fold((true, f), |(res, prev),\
    \ &curr| {\n            (res & prev.cmp(&curr) != std::cmp::Ordering::Greater,\
    \ curr)\n        }).0,\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: no implementation for `bool & std::cmp::Ordering`\n  -->\
    \ /tmp/tmpjz1mp9hi.rs:13:18\n   |\n13 |             (res & prev.cmp(&curr) !=\
    \ std::cmp::Ordering::Greater, curr)\n   |                  ^ no implementation\
    \ for `bool & std::cmp::Ordering`\n   |\n   = help: the trait `BitAnd<std::cmp::Ordering>`\
    \ is not implemented for `bool`\n   = help: the following other types implement\
    \ trait `BitAnd<Rhs>`:\n             <&'a bool as BitAnd<bool>>\n            \
    \ <&bool as BitAnd<&bool>>\n             <bool as BitAnd<&bool>>\n           \
    \  <bool as BitAnd<Mask<T, LANES>>>\n             <bool as BitAnd>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjz1mp9hi.rs:13:68\n   |\n13 |             (res\
    \ & prev.cmp(&curr) != std::cmp::Ordering::Greater, curr)\n   |              \
    \                                                      ^^^^\n   |            \
    \                                                        |\n   |             \
    \                                                       expected `&isize`, found\
    \ `isize`\n   |                                                              \
    \      help: consider borrowing here: `&curr`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut s = l.iter().enumerate().skip(1);\n    let\
    \ mut up = false;\n    let mut down = false;\n    for (i, e) in s {\n        if\
    \ l[i - 1] > *e {\n            down = true;\n        } else if l[i - 1] < *e {\n\
    \            up = true;\n        }\n        if up && down {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut direction = None;\n    for i in 1..l.len()\
    \ {\n        if l[i - 1] < l[i] {\n            if direction == Some(false) {\n\
    \                return false;\n            }\n            direction = Some(true);\n\
    \        } else if l[i - 1] > l[i] {\n            if direction == Some(true) {\n\
    \                return false;\n            }\n            direction = Some(false);\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        } else if l[i] < l[i - 1] {\n            inc = false;\n        }\n  \
    \  }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  for i in 1..l.len() {\n        if l[i - 1] > l[i] {\n            inc = false;\n\
    \        }\n        if l[i - 1] < l[i] {\n            dec = false;\n        }\n\
    \    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        } else if l[i] < l[i - 1] {\n            inc = false;\n        }\n  \
    \  }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut s = l[0];\n    let mut p = s;\n    for n\
    \ in l {\n        if p > n {\n            if s > 0 {\n                return false;\n\
    \            }\n            s = -1;\n        } else if p < n {\n            if\
    \ s < 0 {\n                return false;\n            }\n            s = 1;\n\
    \        }\n        p = n;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8lltfq64.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.windows(2).fold(\n        Ok(Incr(0)),\n      \
    \  |acc, &[a, b]| match acc {\n            Ok(Incr(ref s)) if a < b => Ok(Incr(s\
    \ + 1)),\n            Ok(Decr(ref s)) if a > b => Ok(Decr(s + 1)),\n         \
    \   Ok(Incr(ref s)) if a > b => Ok(Decr(s)),\n            Ok(Decr(ref s)) if a\
    \ < b => Ok(Incr(s)),\n            Ok(Incr(ref s)) if a == b => Ok(Incr(s)),\n\
    \            Ok(Decr(ref s)) if a == b => Ok(Decr(s)),\n            Err(s) =>\
    \ Err(s),\n            _ => Err(l.len()),\n        },\n    )\n    .is_ok()\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function, tuple struct or tuple variant `Incr`\
    \ in this scope\n  --> /tmp/tmpjqtuq46x.rs:10:12\n   |\n10 |         Ok(Incr(0)),\n\
    \   |            ^^^^ not found in this scope\n\nerror[E0531]: cannot find tuple\
    \ struct or tuple variant `Incr` in this scope\n  --> /tmp/tmpjqtuq46x.rs:12:16\n\
    \   |\n12 |             Ok(Incr(ref s)) if a < b => Ok(Incr(s + 1)),\n   |   \
    \             ^^^^ not found in this scope\n\nerror[E0425]: cannot find function,\
    \ tuple struct or tuple variant `Incr` in this scope\n  --> /tmp/tmpjqtuq46x.rs:12:44\n\
    \   |\n12 |             Ok(Incr(ref s)) if a < b => Ok(Incr(s + 1)),\n   |   \
    \                                         ^^^^ not found in this scope\n\nerror[E0531]:\
    \ cannot find tuple struct or tuple variant `Decr` in this scope\n  --> /tmp/tmpjqtuq46x.rs:13:16\n\
    \   |\n13 |             Ok(Decr(ref s)) if a > b => Ok(Decr(s + 1)),\n   |   \
    \             ^^^^ not found in this scope\n\nerror[E0425]: cannot find function,\
    \ tuple struct or tuple variant `Decr` in this scope\n  --> /tmp/tmpjqtuq46x.rs:13:44\n\
    \   |\n13 |             Ok(Decr(ref s)) if a > b => Ok(Decr(s + 1)),\n   |   \
    \                                         ^^^^ not found in this scope\n\nerror[E0531]:\
    \ cannot find tuple struct or tuple variant `Incr` in this scope\n  --> /tmp/tmpjqtuq46x.rs:14:16\n\
    \   |\n14 |             Ok(Incr(ref s)) if a > b => Ok(Decr(s)),\n   |       \
    \         ^^^^ not found in this scope\n\nerror[E0425]: cannot find function,\
    \ tuple struct or tuple variant `Decr` in this scope\n  --> /tmp/tmpjqtuq46x.rs:14:44\n\
    \   |\n14 |             Ok(Incr(ref s)) if a > b => Ok(Decr(s)),\n   |       \
    \                                     ^^^^ not found in this scope\n\nerror[E0531]:\
    \ cannot find tuple struct or tuple variant `Decr` in this scope\n  --> /tmp/tmpjqtuq46x.rs:15:16\n\
    \   |\n15 |             Ok(Decr(ref s)) if a < b => Ok(Incr(s)),\n   |       \
    \         ^^^^ not found in this scope\n\nerror[E0425]: cannot find function,\
    \ tuple struct or tuple variant `Incr` in this scope\n  --> /tmp/tmpjqtuq46x.rs:15:44\n\
    \   |\n15 |             Ok(Decr(ref s)) if a < b =>"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = l[0];\n    let mut sign = 0;\n    for\
    \ n in l.iter() {\n        if n > &m {\n            if sign == -1 {\n        \
    \        return false;\n            }\n            sign = 1;\n        } else if\
    \ n < &m {\n            if sign == 1 {\n                return false;\n      \
    \      }\n            sign = -1;\n        }\n        m = *n;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // TODO: complete this\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8hz64l4d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut tmp = l[0];\n    let mut asc = true;\n  \
    \  let mut des = true;\n    for i in l {\n        if i >= tmp {\n            des\
    \ = false;\n        } else {\n            asc = false;\n        }\n        tmp\
    \ = i;\n    }\n    if asc || des {\n        return true;\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklwd8v3k.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let f = l[0];\n    let r = l[1];\n    let mut d = 0;\n    for x in l {\n \
    \       if d == 0 {\n            if x == f {\n                continue;\n    \
    \        }\n            if x > f {\n                d = 1;\n            } else\
    \ {\n                d = -1;\n            }\n        } else if d > 0 {\n     \
    \       if x < f {\n                return false;\n            }\n        } else\
    \ {\n            if x > f {\n                return false;\n            }\n  \
    \      }\n        f = x;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `r`\n  --> /tmp/tmprrak7pcl.rs:13:9\n   |\n13\
    \ |     let r = l[1];\n   |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_r`\n   |\n   = note: `#[warn(unused_variables)]` on by\
    \ default\n\nerror[E0384]: cannot assign twice to immutable variable `f`\n  -->\
    \ /tmp/tmprrak7pcl.rs:34:9\n   |\n12 |     let f = l[0];\n   |         -\n   |\
    \         |\n   |         first assignment to `f`\n   |         help: consider\
    \ making this binding mutable: `mut f`\n...\n34 |         f = x;\n   |       \
    \  ^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = 0;\n    let mut dec = 0;\n    for i\
    \ in 0..l.len() - 1 {\n        if l[i] < l[i + 1] {\n            inc += 1;\n \
    \       } else if l[i] > l[i + 1] {\n            dec += 1;\n        }\n    }\n\
    \    if inc == l.len() - 1 || dec == l.len() - 1 {\n        true\n    } else {\n\
    \        false\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxr_9odvw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut trend = 0;\n    for (i, n) in l.iter().enumerate()\
    \ {\n        if i == 0 {\n            continue;\n        }\n        let ntrend\
    \ = n - &l[i - 1];\n        if ntrend == 0 {\n            return false;\n    \
    \    }\n        if trend == 0 {\n            trend = ntrend;\n        } else if\
    \ trend * ntrend < 0 {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptdxp7qtc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut is_inc = true;\n    let mut is_dec = true;\n\
    \    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            is_inc =\
    \ false;\n        }\n        if l[i] > l[i - 1] {\n            is_dec = false;\n\
    \        }\n    }\n    is_inc || is_dec\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = 0;\n    let mut dec = 0;\n    let mut\
    \ last = l[0];\n    for item in l {\n        if item > last {\n            inc\
    \ += 1;\n        } else if item < last {\n            dec += 1;\n        }\n \
    \       last = item;\n    }\n    (inc == 0 || dec == 0)\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    let (first, second) = (l[0], l[1]);\n    let increasing = first < second;\n\
    \    let decreasing = first > second;\n    l.iter().skip(1).all(|x| increasing\
    \ && x >= first || decreasing && x <= first)\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8xomd4d1.rs:15:49\n   |\n\
    15 |     l.iter().skip(1).all(|x| increasing && x >= first || decreasing && x\
    \ <= first)\n   |                                                 ^^^^^\n   |\
    \                                                 |\n   |                    \
    \                             expected `&isize`, found `isize`\n   |         \
    \                                        help: consider borrowing here: `&first`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8xomd4d1.rs:15:77\n   |\n15 |\
    \     l.iter().skip(1).all(|x| increasing && x >= first || decreasing && x <=\
    \ first)\n   |                                                               \
    \              ^^^^^\n   |                                                   \
    \                          |\n   |                                           \
    \                                  expected `&isize`, found `isize`\n   |    \
    \                                                                         help:\
    \ consider borrowing here: `&first`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut is_increasing =\
    \ l[0] < l[1];\n    for e in l {\n        if (e > prev) != is_increasing {\n \
    \           return false;\n        }\n        prev = e;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvn8hxbnl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    for idx in 1..l.len() {\n        if l[idx] < l[idx - 1] {\n   \
    \         increasing = false;\n        }\n        if l[idx] > l[idx - 1] {\n \
    \           decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let (mut inc, mut dec) = (true, true);\n    for i\
    \ in 1..l.len() {\n        if l[i] > l[i - 1] {\n            dec = false;\n  \
    \      } else if l[i] < l[i - 1] {\n            inc = false;\n        }\n    }\n\
    \    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut pos = false;\n    let mut neg = false;\n\
    \    for i in 1..l.len() {\n        let diff = l[i] - l[i - 1];\n        if diff\
    \ == 0 {\n            continue;\n        }\n        match diff.signum() {\n  \
    \          1 => {\n                if pos {\n                    continue;\n \
    \               }\n                if neg {\n                    return false;\n\
    \                }\n                pos = true;\n            }\n            -1\
    \ => {\n                if neg {\n                    continue;\n            \
    \    }\n                if pos {\n                    return false;\n        \
    \        }\n                neg = true;\n            }\n            _ => (),\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: -1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    let mut decreasing = false;\n\
    \    let mut increasing = false;\n    let mut check = true;\n    while check {\n\
    \        check = false;\n        if l.len() > 1 {\n            let x = l.pop().unwrap();\n\
    \            let y = l.pop().unwrap();\n            if x < y {\n             \
    \   decreasing = true;\n            } else if x > y {\n                increasing\
    \ = true;\n            }\n            l.push(y);\n            l.push(x);\n   \
    \         check = true;\n        }\n    }\n    return decreasing ^ increasing;\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976434
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut is_monotonic = true;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    for i in 1..l.len() {\n    \
    \    if l[i] > l[i - 1] {\n            is_decreasing = false;\n        } else\
    \ if l[i] < l[i - 1] {\n            is_increasing = false;\n        }\n    }\n\
    \    is_monotonic = is_increasing || is_decreasing;\n    is_monotonic\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // TODO: change false to the correct answer\n   \
    \ let mut up = false;\n    let mut down = false;\n    for i in 0..l.len()-1 {\n\
    \        if l[i] < l[i+1] {\n            up = true;\n        }\n        if l[i]\
    \ > l[i+1] {\n            down = true;\n        }\n    }\n    !(up && down)\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // Your code goes here\n    let mut temp = l[0];\n\
    \    let mut is_incre = true;\n    for i in l {\n        if i != temp {\n    \
    \        if i < temp {\n                is_incre = false;\n            }\n   \
    \         break;\n        }\n    }\n    if is_incre {\n        for i in l {\n\
    \            if i < temp {\n                return false;\n            }\n   \
    \         temp = i;\n        }\n    } else {\n        for i in l {\n         \
    \   if i > temp {\n                return false;\n            }\n            temp\
    \ = i;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmppzzdwbup.rs:21:18\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n12  |     for i in l {\n    |              - `l` moved due to this\
    \ implicit call to `.into_iter()`\n...\n21  |         for i in l {\n    |    \
    \              ^ value used here after move\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `l`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n12  |     for i in &l {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.windows(2).all(|x| x[0] <= x[1]) || l.windows(2).all(|x|\
    \ x[0] >= x[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821634
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut d = 0;\n    for i in 1..l.len() {\n     \
    \   let delta = l[i] - l[i - 1];\n        if delta * d < 0 {\n            return\
    \ false;\n        }\n        if delta != 0 {\n            d = delta;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut incr = true;\n    let mut decr = true;\n\
    \    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            decr = false;\n\
    \        } else if l[i] < l[i - 1] {\n            incr = false;\n        }\n \
    \   }\n    incr || decr\n}\n\nfn main() {\n    let candidate = monotonic;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut result = true;\n    let mut direction = 0;\n\
    \    for i in 1..l.len() {\n        let diff = l[i] - l[i - 1];\n        if direction\
    \ == 0 {\n            direction = diff;\n        } else if diff * direction <\
    \ 0 {\n            result = false;\n            break;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    let mut i = 0;\n    while i < l.len() - 1 {\n        increasing\
    \ = increasing && l[i] <= l[i + 1];\n        decreasing = decreasing && l[i] >=\
    \ l[i + 1];\n        i += 1;\n    }\n    increasing || decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // let mut sorted_list = l.clone();\n    // sorted_list.sort();\n\
    \    // sorted_list == l\n    let mut direction = None;\n    let mut was_direction_set\
    \ = false;\n    for (i, num) in l.iter().enumerate() {\n        if i == 0 {\n\
    \            continue;\n        }\n        let current_direction = num - &l[i\
    \ - 1];\n        if was_direction_set {\n            if current_direction * direction.unwrap()\
    \ < 0 {\n                return false;\n            }\n        } else {\n    \
    \        direction = Some(current_direction);\n            was_direction_set =\
    \ true;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut last = l[0];\n    let mut increasing = true;\n\
    \    for &x in l.iter().skip(1) {\n        if x != last {\n            increasing\
    \ = x > last;\n            break;\n        }\n    }\n    for &x in l.iter().skip(1)\
    \ {\n        if x != last {\n            if increasing && x < last {\n       \
    \         return false;\n            }\n            if !increasing && x > last\
    \ {\n                return false;\n            }\n        }\n        last = x;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = false;\n    let mut dec = false;\n\
    \    let mut prev = 0;\n    for i in l {\n        if i < prev {\n            dec\
    \ = true;\n        } else if i > prev {\n            inc = true;\n        }\n\
    \        prev = i;\n    }\n    return !(inc && dec);\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphcc4b_8c.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().rfold((true, None), |(is_increasing, last),\
    \ &el| {\n        (\n            is_increasing && last.map_or(true, |x| x <= el),\n\
    \            Some(el),\n        )\n    })\n    .0\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo7c_n_iv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpar14wlh2.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.windows(2).all(|a| (a[0] - a[1]).abs() <= 1)\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpupr3s7u1.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 1;\n    let mut dir = 0;\n    while i\
    \ < l.len() {\n        if l[i - 1] == l[i] {\n            return false;\n    \
    \    }\n        if dir == 0 {\n            dir = l[i - 1] - l[i];\n        } else\
    \ if dir * (l[i - 1] - l[i]) < 0 {\n            return false;\n        }\n   \
    \     i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5x4f42hx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let (first, rest) = l.split_first().unwrap();\n \
    \   match rest.iter().fold((true, *first), |(mono, prev), &curr| {\n        if\
    \ (curr - prev) * (curr - *first) <= 0 {\n            (mono, curr)\n        }\
    \ else {\n            (false, curr)\n        }\n    }) {\n        (true, _) =>\
    \ true,\n        _ => false,\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp12ms2d4_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut max = l[0];\n    let mut min = l[0];\n  \
    \  let mut prev = l[0];\n    let mut increasing = true;\n    let mut decreasing\
    \ = true;\n    for x in l {\n        max = max.max(x);\n        min = min.min(x);\n\
    \        increasing = increasing && x >= prev;\n        decreasing = decreasing\
    \ && x <= prev;\n        prev = x;\n    }\n    return (max == l[l.len() - 1] &&\
    \ increasing) || (min == l[l.len() - 1] && decreasing);\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpznoub79w.rs:21:20\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n14  |     for x in l {\n    |              - `l` moved due to this\
    \ implicit call to `.into_iter()`\n...\n21  |     return (max == l[l.len() - 1]\
    \ && increasing) || (min == l[l.len() - 1] && decreasing);\n    |            \
    \        ^ value borrowed here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n14\
    \  |     for x in &l {\n    |              +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = 0;\n    let mut count = 0;\n    let mut is_mono = true;\n    let mut mono_type\
    \ = false;\n    let mut is_asc = false;\n    let mut is_desc = false;\n    for\
    \ i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            is_asc = true;\n\
    \        } else if l[i] < l[i - 1] {\n            is_desc = true;\n        }\n\
    \    }\n    if is_asc && is_desc {\n        return false;\n    }\n    if is_asc\
    \ {\n        mono_type = true;\n    }\n    if is_desc {\n        mono_type = false;\n\
    \    }\n    while i < l.len() {\n        count = 0;\n        while j < l.len()\
    \ {\n            while k < l.len() {\n                if i != j && j != k && i\
    \ != k {\n                    if mono_type {\n                        if l[i]\
    \ < l[j] && l[j] < l[k] {\n                            count += 1;\n         \
    \               }\n                    } else {\n                        if l[i]\
    \ > l[j] && l[j] > l[k] {\n                            count += 1;\n         \
    \               }\n                    }\n                }\n                k\
    \ += 1;\n            }\n            k = 0;\n            j += 1;\n        }\n \
    \       j = 0;\n        if count == 0 {\n            is_mono = false;\n      \
    \      break;\n        }\n        i += 1;\n    }\n    is_mono\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkmpm9h9j.rs:65:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut new_list = l.clone();\n    new_list.sort();\n\
    \    new_list == l || new_list.into_iter().rev().collect::<Vec<isize>>() == l\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let direction = l.windows(2).fold(0, |acc, p| match\
    \ (acc, p[0].cmp(&p[1])) {\n        (0, Ordering::Equal) => 0,\n        (0, Ordering::Less)\
    \ => 1,\n        (0, Ordering::Greater) => -1,\n        (1, Ordering::Less) =>\
    \ 1,\n        (-1, Ordering::Greater) => -1,\n        _ => return false,\n   \
    \ });\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpeestyupy.rs:10:13\n   |\n10 |         (0, Ordering::Equal) => 0,\n \
    \  |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpeestyupy.rs:11:13\n\
    \   |\n11 |         (0, Ordering::Less) => 1,\n   |             ^^^^^^^^ use of\
    \ undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Ordering`\n  --> /tmp/tmpeestyupy.rs:12:13\n   |\n12 |         (0, Ordering::Greater)\
    \ => -1,\n   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpeestyupy.rs:13:13\n\
    \   |\n13 |         (1, Ordering::Less) => 1,\n   |             ^^^^^^^^ use of\
    \ undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Ordering`\n  --> /tmp/tmpeestyupy.rs:14:14\n   |\n14 |         (-1, Ordering::Greater)\
    \ => -1,\n   |              ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeestyupy.rs:15:21\n   |\n15 |         _ => return\
    \ false,\n   |                     ^^^^^ expected integer, found `bool`\n   |\n\
    note: return type inferred to be `{integer}` here\n  --> /tmp/tmpeestyupy.rs:15:21\n\
    \   |\n15 |         _ => return false,\n   |                     ^^^^^\n\nerror:\
    \ aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut d = 0;\n    let mut dd = 0;\n    let mut\
    \ is_decreasing = false;\n    let mut is_increasing = false;\n    let len = l.len();\n\
    \    for i in 0..len {\n        d = l[i] - l[i + 1];\n        dd = d - dd;\n \
    \       if dd < 0 {\n            is_decreasing = true;\n        }\n        if\
    \ dd > 0 {\n            is_increasing = true;\n        }\n    }\n    is_decreasing\
    \ || is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpb6m8ruo_.rs:15:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let (first, rest) = l.split_first().unwrap();\n \
    \   rest.windows(2).all(|pair| pair[0] < pair[1]) || rest.windows(2).all(|pair|\
    \ pair[0] > pair[1])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdph2lago.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = 0;\n    let mut flag = true;\n    for\
    \ i in 1..l.len() {\n        if l[i] - l[i - 1] > 0 {\n            if m == -1\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \          m = 1;\n        } else if l[i] - l[i - 1] < 0 {\n            if m ==\
    \ 1 {\n                flag = false;\n                break;\n            }\n\
    \            m = -1;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let dir = l[1] - l[0];\n    if dir == 0 {\n        return monotonic(l[1..].to_vec());\n\
    \    }\n    let dirs = l[1..].iter().map(|x| x - l[0]).collect::<Vec<isize>>();\n\
    \    dirs.iter().all(|x| x == 0 || x == dir)\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp0kirmofb.rs:17:27\n\
    \   |\n17 |     dirs.iter().all(|x| x == 0 || x == dir)\n   |                \
    \           ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp0kirmofb.rs:17:37\n\
    \   |\n17 |     dirs.iter().all(|x| x == 0 || x == dir)\n   |                \
    \                     ^^ no implementation for `&isize == isize`\n   |\n   = help:\
    \ the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut up = true;\n    let mut down = true;\n  \
    \  for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            down = false;\n\
    \        }\n        if l[i] < l[i - 1] {\n            up = false;\n        }\n\
    \    }\n    up || down\n}\n\nfn main() {\n    let candidate = monotonic;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut asc = true;\n    let mut dsc = true;\n  \
    \  for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            asc = false;\n\
    \        }\n        if l[i] > l[i - 1] {\n            dsc = false;\n        }\n\
    \    }\n    asc || dsc\n}\n\nfn main() {\n    let candidate = monotonic;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut prev = l[0];\n    let mut increasing = true;\n    for i in 1..l.len()\
    \ {\n        if l[i] > prev {\n            if !increasing {\n                return\
    \ false;\n            }\n        } else if l[i] < prev {\n            increasing\
    \ = false;\n        } else {\n            return false;\n        }\n        prev\
    \ = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0htb0hnp.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpar14wlh2.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let l = l.into_iter().enumerate().map(|(i, x)| x\
    \ - i as isize).collect::<Vec<_>>();\n    l.windows(2).map(|window| window[0]\
    \ - window[1]).all(|x| x == 0)\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5fjm4cfg.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().zip(l.iter().skip(1)).all(|(x, y)| x < y\
    \ || x > y)\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7ed_6htr.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  for i in 1..l.len() {\n        if l[i - 1] > l[i] {\n            inc = false;\n\
    \        }\n        if l[i - 1] < l[i] {\n            dec = false;\n        }\n\
    \    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n\
    \    let first = l[0];\n    let last = l[l.len() - 1];\n    if first > last {\n\
    \        for i in 1..l.len() {\n            if l[i] > l[i - 1] {\n           \
    \     return false;\n            }\n        }\n    } else {\n        for i in\
    \ 1..l.len() {\n            if l[i] < l[i - 1] {\n                return false;\n\
    \            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    for i in 1..l.len() {\n        if l[i] - l[i - 1]\
    \ < 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmhb3dno3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    let mut inc = true;\n    let mut dec = true;\n    for i in 1..l.len() {\n\
    \        if l[i - 1] < l[i] {\n            dec = false;\n        }\n        if\
    \ l[i - 1] > l[i] {\n            inc = false;\n        }\n    }\n    return inc\
    \ || dec;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut flag = true;\n    let mut sign = 0;\n   \
    \ for (i, j) in l.iter().enumerate() {\n        if i == 0 {\n            sign\
    \ = j;\n        } else {\n            if j != &sign {\n                if flag\
    \ {\n                    flag = false;\n                    if j > &sign {\n \
    \                       sign = 1;\n                    } else {\n            \
    \            sign = -1;\n                    }\n                } else {\n   \
    \                 if j > &sign {\n                        if sign != 1 {\n   \
    \                         return false;\n                        }\n         \
    \           } else {\n                        if sign != -1 {\n              \
    \              return false;\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb2hfzswz.rs:13:20\n   |\n\
    10 |     let mut sign = 0;\n   |                    - expected due to this value\n\
    ...\n13 |             sign = j;\n   |                    ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \     sign = *j;\n   |                    +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n        dec &= l[i]\
    \ <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut iter = l.iter();\n    let mut prev = iter.next();\n\
    \    let mut increasing = None;\n    for val in iter {\n        if prev.is_none()\
    \ {\n            return false;\n        }\n        if increasing.is_none() {\n\
    \            increasing = Some(val > prev.unwrap());\n        } else if increasing.unwrap()\
    \ && val < prev.unwrap() {\n            return false;\n        } else if !increasing.unwrap()\
    \ && val > prev.unwrap() {\n            return false;\n        }\n        prev\
    \ = Some(val);\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut sl = l.clone();\n    sl.sort();\n    if sl == l {\n        return\
    \ true;\n    }\n    sl.reverse();\n    if sl == l {\n        return true;\n  \
    \  }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut first = l[0];\n    let mut monotonic = true;\n\
    \    for &v in l.iter().skip(1) {\n        if v > first {\n            first =\
    \ v;\n        } else if v < first {\n            first = v;\n        } else {\n\
    \            monotonic = false;\n            break;\n        }\n    }\n    monotonic\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp38ysf3ay.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut l2 = l.clone();\n    l2.sort();\n    l ==\
    \ l2 || l.reverse() == l2\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjnje86zy.rs:11:31\n   |\n\
    11 |     l == l2 || l.reverse() == l2\n   |                               ^^ expected\
    \ `()`, found struct `Vec`\n   |\n   = note: expected unit type `()`\n       \
    \          found struct `Vec<isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    for i in 1..l.len() {\n        let s = l[i] - l[i\
    \ - 1];\n        if s == 0 {\n            return false;\n        }\n        if\
    \ i > 1 && s.signum() != (l[i - 1] - l[i - 2]).signum() {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp174cde8j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    let mut d = l[1] - l[0];\n    for i in 1..l.len() {\n        if (l[i] - l[i\
    \ - 1]) * d < 0 {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut is_increasing = true;\n    let mut is_decreasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   is_increasing = false;\n        }\n        if l[i] > l[i - 1] {\n        \
    \    is_decreasing = false;\n        }\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = Monotonic::Unknown;\n    for i in 1..l.len()\
    \ {\n        let a = l[i - 1];\n        let b = l[i];\n        if b > a {\n  \
    \          if m == Monotonic::Decreasing {\n                return false;\n  \
    \          }\n            m = Monotonic::Increasing;\n        } else if b < a\
    \ {\n            if m == Monotonic::Increasing {\n                return false;\n\
    \            }\n            m = Monotonic::Decreasing;\n        }\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Monotonic`\n -->\
    \ /tmp/tmpxxja0low.rs:9:17\n  |\n9 |     let mut m = Monotonic::Unknown;\n  |\
    \                 ^^^^^^^^^ use of undeclared type `Monotonic`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Monotonic`\n  --> /tmp/tmpxxja0low.rs:14:21\n\
    \   |\n14 |             if m == Monotonic::Decreasing {\n   |                \
    \     ^^^^^^^^^ use of undeclared type `Monotonic`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Monotonic`\n  --> /tmp/tmpxxja0low.rs:17:17\n\
    \   |\n17 |             m = Monotonic::Increasing;\n   |                 ^^^^^^^^^\
    \ use of undeclared type `Monotonic`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Monotonic`\n  --> /tmp/tmpxxja0low.rs:19:21\n   |\n19 |   \
    \          if m == Monotonic::Increasing {\n   |                     ^^^^^^^^^\
    \ use of undeclared type `Monotonic`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Monotonic`\n  --> /tmp/tmpxxja0low.rs:22:17\n   |\n22 |   \
    \          m = Monotonic::Decreasing;\n   |                 ^^^^^^^^^ use of undeclared\
    \ type `Monotonic`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n\
    \    let mut prev = l[0];\n    let mut increasing = true;\n    for x in l {\n\
    \        if prev < x {\n            if !increasing {\n                return false;\n\
    \            }\n        } else if prev > x {\n            if increasing {\n  \
    \              increasing = false;\n            }\n        }\n        prev = x;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().zip(l.iter().skip(1)).all(|(x, y)| x <=\
    \ y) ||\n    l.iter().zip(l.iter().skip(1)).all(|(x, y)| x >= y)\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    let mut i = 0;\n    while i < l.len() - 1 {\n        if l[i] == l[i + 1]\
    \ {\n            i += 1;\n            continue;\n        }\n        if (l[i] <\
    \ l[i + 1] && i > 0 && l[i - 1] > l[i])\n            || (l[i] > l[i + 1] && i\
    \ > 0 && l[i - 1] < l[i])\n        {\n            return false;\n        }\n \
    \       i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.windows(2).all(|p| (p[0] - p[1]).abs() == 1)\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0z04av7j.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut decreasing = true;\n    let mut increasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   increasing = false;\n        }\n        if l[i] > l[i - 1] {\n           \
    \ decreasing = false;\n        }\n    }\n    increasing || decreasing\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut decreasing = true;\n    let mut increasing\
    \ = true;\n    for (i, &p) in l.iter().enumerate() {\n        if i > 0 {\n   \
    \         let &q = &l[i - 1];\n            if p < q {\n                increasing\
    \ = false;\n            } else if p > q {\n                decreasing = false;\n\
    \            }\n        }\n    }\n    increasing || decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   for i in 1..l.len() {\n        if l[i - 1] < l[i] {\n            continue;\n\
    \        } else if l[i - 1] > l[i] {\n            break;\n        } else {\n \
    \           return false;\n        }\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxdpdsm5p.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    match l {\n        [] => true,\n        [x] => true,\n\
    \        [a, b] => a <= b,\n        _ => {\n            let mut m = l[0] <= l[1];\n\
    \            l.windows(2).all(|w| {\n                let res = m && (w[0] <= w[1]);\n\
    \                m = res;\n                res\n            })\n        }\n  \
    \  }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmphc6s277s.rs:10:9\n\
    \   |\n9  |     match l {\n   |           - help: consider slicing here: `l[..]`\n\
    10 |         [] => true,\n   |         ^^ pattern cannot match with input type\
    \ `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n\
    \  --> /tmp/tmphc6s277s.rs:11:9\n   |\n9  |     match l {\n   |           - help:\
    \ consider slicing here: `l[..]`\n10 |         [] => true,\n11 |         [x] =>\
    \ true,\n   |         ^^^ pattern cannot match with input type `Vec<isize>`\n\n\
    error[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmphc6s277s.rs:12:9\n\
    \   |\n9  |     match l {\n   |           - help: consider slicing here: `l[..]`\n\
    ...\n12 |         [a, b] => a <= b,\n   |         ^^^^^^ pattern cannot match\
    \ with input type `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0529`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  let mut previous = l[0];\n    for i in 1..l.len() {\n        if l[i] < previous\
    \ {\n            inc = false;\n        }\n        if l[i] > previous {\n     \
    \       dec = false;\n        }\n        previous = l[i];\n    }\n    inc || dec\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut inc = None;\n    for i in 1..l.len() {\n        if l[i - 1] < l[i]\
    \ {\n            if inc.is_some() && inc.unwrap() {\n                continue;\n\
    \            }\n            inc = Some(true);\n        } else if l[i - 1] > l[i]\
    \ {\n            if inc.is_some() && !inc.unwrap() {\n                continue;\n\
    \            }\n            inc = Some(false);\n        } else {\n           \
    \ continue;\n        }\n        return false;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbfzfl182.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut prev = l[0];\n    let mut is_monotonic = true;\n    for x in l {\n\
    \        if x != prev {\n            if (x - prev).abs() > 1 {\n             \
    \   is_monotonic = false;\n                break;\n            }\n           \
    \ prev = x;\n        }\n    }\n    is_monotonic\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpobhpa6j4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let (mut increasing, mut decreasing) = (true, true);\n\
    \    let mut i = 0;\n    while i < l.len() - 1 {\n        increasing &= l[i] <=\
    \ l[i + 1];\n        decreasing &= l[i] >= l[i + 1];\n        i += 1;\n    }\n\
    \    increasing || decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    for i in 1..l.len() {\n        if (l[i] > l[i - 1])\
    \ != (l[0] < l[1]) {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = None;\n    for i in 1..l.len() {\n  \
    \      if l[i] != l[i - 1] {\n            if m.is_none() {\n                m\
    \ = Some(l[i] > l[i - 1]);\n            } else if m.unwrap() != (l[i] > l[i -\
    \ 1]) {\n                return false;\n            }\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // your code here\n    let mut inc = true;\n    let\
    \ mut dec = true;\n    for i in 0..l.len()-1 {\n        if l[i] > l[i+1] {\n \
    \           inc = false;\n        }\n        if l[i] < l[i+1] {\n            dec\
    \ = false;\n        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut is_increasing = l[0] < l[1];\n    for i in\
    \ 1..l.len() {\n        if l[i - 1] == l[i] {\n            continue;\n       \
    \ }\n        if is_increasing != (l[i - 1] < l[i]) {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut increasing = None;\n    let mut result =\
    \ true;\n    for i in 1..l.len() {\n        let inc = l[i] > l[i - 1];\n     \
    \   if increasing.is_none() {\n            increasing = Some(inc);\n        }\
    \ else if increasing.unwrap() != inc {\n            result = false;\n        \
    \    break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n  \
    \  for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        } else if l[i] < l[i - 1] {\n            inc = false;\n        }\n  \
    \  }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976429
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut result = true;\n    let mut prev = *l.first().unwrap();\n\
    \    for &item in l.iter().skip(1) {\n        if prev > item {\n            if\
    \ result == true {\n                result = false;\n            } else {\n  \
    \              return false;\n            }\n        } else if prev < item {\n\
    \            if result == false {\n                return false;\n           \
    \ }\n        }\n        prev = item;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp58obajuc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut state = 0;\n    for i in 1..l.len() {\n \
    \       let new_state = l[i] - l[i - 1];\n        if state == 0 {\n          \
    \  state = new_state;\n        } else if state * new_state < 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut a = l.clone();\n    a.sort();\n    a == l\
    \ || a.iter().rev().collect::<Vec<_>>() == l\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpdcq41m8k.rs:11:50\n\
    \   |\n11 |     a == l || a.iter().rev().collect::<Vec<_>>() == l\n   |      \
    \                                            ^^ no implementation for `&isize\
    \ == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n   = note: required because of the requirements on the impl\
    \ of `PartialEq<Vec<isize>>` for `Vec<&isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut m = l[0];\n    let mut is_increasing = true;\n\
    \    for i in 1..l.len() {\n        if m == l[i] {\n            continue;\n  \
    \      }\n        if (m < l[i]) == is_increasing {\n            m = l[i];\n  \
    \          continue;\n        }\n        m = l[i];\n        is_increasing = !is_increasing;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7oy04o6y.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut inc = l[0] < l[1];\n    for i in 0..l.len()\
    \ - 1 {\n        if inc != l[i] < l[i + 1] {\n            return false;\n    \
    \    }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmphn9ecg6p.rs:11:16\n\
    \   |\n11 |         if inc != l[i] < l[i + 1] {\n   |                ^^      ^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphn9ecg6p.rs:11:19\n   |\n11 |\
    \         if inc != l[i] < l[i + 1] {\n   |                   ^^^^ expected `bool`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphn9ecg6p.rs:11:26\n\
    \   |\n11 |         if inc != l[i] < l[i + 1] {\n   |                        \
    \  ^^^^^^^^ expected `bool`, found `isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    match l.len() {\n        0 => true,\n        1 =>\
    \ true,\n        2 => l[0] <= l[1],\n        _ => {\n            let mut v = l.to_vec();\n\
    \            v.sort();\n            v == l || v.iter().rev().collect::<Vec<_>>()\
    \ == l\n        }\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpbymto8zg.rs:16:58\n\
    \   |\n16 |             v == l || v.iter().rev().collect::<Vec<_>>() == l\n  \
    \ |                                                          ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n   = note: required because of the requirements\
    \ on the impl of `PartialEq<Vec<isize>>` for `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\
    \    let mut direction = None;\n    for i in 1..l.len() {\n        let d = l[i]\
    \ - l[i - 1];\n        if d == 0 {\n            continue;\n        }\n       \
    \ if direction.is_none() {\n            direction = Some(d);\n        } else if\
    \ d * direction.unwrap() < 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut base = l[0];\n    let mut increasing = true;\n    for i in 1..l.len()\
    \ {\n        if base < l[i] {\n            if !increasing {\n                return\
    \ false;\n            }\n        } else if base > l[i] {\n            if increasing\
    \ {\n                increasing = false;\n            }\n        } else {\n  \
    \          return false;\n        }\n        base = l[i];\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6bg6snuc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut last = l[0];\n    let mut cnt = 1;\n    for\
    \ &n in l.iter().skip(1) {\n        if last != n {\n            cnt += 1;\n  \
    \          last = n;\n        }\n    }\n    cnt == 1\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpljntjiwd.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    // monotonic_increasing(l) || monotonic_decreasing(l)\n\
    \    l == l.into_iter().sorted() || l == l.into_iter().sorted().rev()\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmpwq79e5f3.rs:10:24\n   |\n10 |     l == l.into_iter().sorted()\
    \ || l == l.into_iter().sorted().rev()\n   |                        ^^^^^^ method\
    \ not found in `std::vec::IntoIter<isize>`\n\nerror[E0599]: no method named `sorted`\
    \ found for struct `std::vec::IntoIter` in the current scope\n  --> /tmp/tmpwq79e5f3.rs:10:55\n\
    \   |\n10 |     l == l.into_iter().sorted() || l == l.into_iter().sorted().rev()\n\
    \   |                                                       ^^^^^^ method not\
    \ found in `std::vec::IntoIter<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut is_monotonic = true;\n    let mut prev =\
    \ None;\n    for x in l {\n        if let Some(p) = prev {\n            if (p\
    \ > x && is_monotonic) || (p < x && !is_monotonic) {\n                return false;\n\
    \            }\n        }\n        prev = Some(x);\n        is_monotonic = !is_monotonic;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu40znslb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976430
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        true\n    } else {\n \
    \       let mut increasing = None;\n        for (x, y) in l.iter().zip(l.iter().skip(1))\
    \ {\n            let diff = *y - *x;\n            if increasing.is_none() {\n\
    \                increasing = Some(diff > 0);\n            } else if diff > 0\
    \ != increasing.unwrap() {\n                return false;\n            }\n   \
    \     }\n        true\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp1vt_se6y.rs:17:28\n\
    \   |\n17 |             } else if diff > 0 != increasing.unwrap() {\n   |    \
    \                        ^   ^^\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976430
