name: HumanEval_13_greatest_common_divisor
language: rs
prompt: "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3,\
  \ 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a:\
  \ isize, b: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3,\
  \ 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14),\
  \ 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n"
completions: ["    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n      \
    \  let temp = a % b;\n        a = b;\n        b = temp;\n    }\n    a", "    if\
    \ b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n\
    \    }", "    let abs_a = if a < 0 { -a } else { a };\n    let abs_b = if b <\
    \ 0 { -b } else { b };\n    // Iterate until we find the answer\n    for divisor\
    \ in abs_b..abs_a + 1 {\n        if divisor == 0 {\n            continue;\n  \
    \      }\n        if abs_a % divisor == 0 && abs_b % divisor == 0 {\n        \
    \    return divisor;\n        }\n    }\n    // Should never happen\n    panic!(\"\
    GCD not found\");", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let a = a.abs();\n    let b = b.abs();\n    let mut c =\
    \ a;\n    let mut d = b;\n    while c != 0 && d != 0 {\n        if c > d {\n \
    \           c %= d;\n        } else {\n            d %= c;\n        }\n    }\n\
    \    c + d", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", '    a.abs().gcd(&b.abs())', "    if b == 0 {\n        a\n \
    \   } else {\n        greatest_common_divisor(b, a % b)\n    }", "    let mut\
    \ a = a;\n    let mut b = b;\n    while b != 0 {\n        let t = b;\n       \
    \ b = a % b;\n        a = t;\n    }\n    a", "    if b == 0 {\n        a\n   \
    \ } else {\n        greatest_common_divisor(b, a % b)\n    }", "    if b == 0\
    \ {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }",
  "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n        let c = a %\
    \ b;\n        a = b;\n        b = c;\n    }\n    a", "    let mut a = a;\n   \
    \ let mut b = b;\n    while b != 0 {\n        let t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    a", "    let mut c = b;\n    let mut a = a;\n    let\
    \ mut b = b;\n    while a != 0 {\n        c = a;\n        a = b % a;\n       \
    \ b = c;\n    }\n    return b;", "    let mut a = a;\n    let mut b = b;\n   \
    \ while b != 0 {\n        let temp = a % b;\n        a = b;\n        b = temp;\n\
    \    }\n    a", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a", "    if\
    \ b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n\
    \    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    // if b == 0 -> a is the result,\n    // else -> repeat\
    \ with b and (a % b)\n    match b {\n        0 => a,\n        _ => greatest_common_divisor(b,\
    \ a % b),\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a", "    let\
    \ mut n = a;\n    let mut m = b;\n    while m != 0 {\n        let temp = m;\n\
    \        m = n % m;\n        n = temp;\n    }\n    n.abs()", "    if b == 0 {\n\
    \        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", " \
    \   if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let temp = a % b;\n        a = b;\n        b = temp;\n    }\n    a",
  "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    let mut div = b;\n    let mut a = a;\n    let mut b = b;\n\
    \    while a % b != 0 {\n        div = a % b;\n        a = b;\n        b = div;\n\
    \    }\n    div", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", '    unimplemented!()', "    let mut a_iter = a;\n    let mut\
    \ b_iter = b;\n    while a_iter != b_iter {\n        if a_iter > b_iter {\n  \
    \          a_iter -= b_iter;\n        } else {\n            b_iter -= a_iter;\n\
    \        }\n    }\n    a_iter", "    if b == 0 {\n        a\n    } else {\n  \
    \      greatest_common_divisor(b, a % b)\n    }", '    return gcd(a, b);', " \
    \   let mut a = a;\n    let mut b = b;\n    while b != 0 {\n        let t = b;\n\
    \        b = a % b;\n        a = t;\n    }\n    a", "    if b == 0 {\n       \
    \ a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    let\
    \ mut _a = a;\n    let mut _b = b;\n    while _b != 0 {\n        let temp = _b;\n\
    \        _b = _a % _b;\n        _a = temp;\n    }\n    _a", "    let mut x = a;\n\
    \    let mut y = b;\n    while y != 0 {\n        let z = x % y;\n        x = y;\n\
    \        y = z;\n    }\n    x", "    if b == 0 {\n        a\n    } else {\n  \
    \      greatest_common_divisor(b, a % b)\n    }", "    if b == 0 {\n        a\n\
    \    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    // euclid's\
    \ algorithm\n    // see https://en.wikipedia.org/wiki/Euclidean_algorithm\n  \
    \  let mut x = a;\n    let mut y = b;\n    while y != 0 {\n        let r = x %\
    \ y;\n        x = y;\n        y = r;\n    }\n    x", "    let (a, b) = if a >\
    \ b { (a, b) } else { (b, a) };\n    if b == 0 {\n        a\n    } else {\n  \
    \      greatest_common_divisor(b, a % b)\n    }", "    if b == 0 {\n        a\n\
    \    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    let (mut\
    \ a, mut b) = (a, b);\n    while b != 0 {\n        let tmp = a % b;\n        a\
    \ = b;\n        b = tmp;\n    }\n    a", "    if b == 0 {\n        a\n    } else\
    \ {\n        greatest_common_divisor(b, a % b)\n    }", "    if b == 0 {\n   \
    \     a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", "  \
    \  if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    // Euclidean Algorithm\n    // https://www.geeksforgeeks.org/euclidean-algorithms-basic-and-extended/\n\
    \    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut n = a;\n    let mut m = b;\n    while m != 0 {\n\
    \        let old_m = m;\n        m = n % m;\n        n = old_m;\n    }\n    n.abs()",
  "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    match (a, b) {\n        (a, 0) => a,\n        (a, b) =>\
    \ greatest_common_divisor(b, a % b),\n    }", "    if b == 0 {\n        a\n  \
    \  } else {\n        greatest_common_divisor(b, a % b)\n    }", "    if b == 0\
    \ {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }",
  "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n        let t = b;\n\
    \        b = a % b;\n        a = t;\n    }\n    a", "    let mut _a = a;\n   \
    \ let mut _b = b;\n    let mut tmp;\n    while _b != 0 {\n        tmp = _a % _b;\n\
    \        _a = _b;\n        _b = tmp;\n    }\n    _a", "    if b == 0 {\n     \
    \   a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    while\
    \ b != 0 {\n        let tmp = a % b;\n        a = b;\n        b = tmp;\n    }\n\
    \    a", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let (a, b) = if a < b { (b, a) } else { (a, b) };\n   \
    \ let mut result = 1;\n    for divisor in 1..=b {\n        if a % divisor == 0\
    \ && b % divisor == 0 {\n            result = divisor;\n        }\n    }\n   \
    \ result", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    // TODO: implement\n    0", "    if b == 0 {\n        a\n\
    \    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    if b ==\
    \ 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n  \
    \  }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    match a.cmp(&b) {\n        Ordering::Less => greatest_common_divisor(b,\
    \ a),\n        Ordering::Equal => a,\n        Ordering::Greater => {\n       \
    \     let remainder = a % b;\n            if remainder == 0 {\n              \
    \  b\n            } else {\n                greatest_common_divisor(b, remainder)\n\
    \            }\n        }\n    }", "    let mut x = a;\n    let mut y = b;\n \
    \   while y != 0 {\n        let t = y;\n        y = x % y;\n        x = t;\n \
    \   }\n    x", '    unimplemented!();', '    a.abs().gcd(&b.abs())', "    if b\
    \ == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n\
    \    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a", "    if\
    \ b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n\
    \    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    a", " \
    \   if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    match b {\n        0 => a,\n        _ => greatest_common_divisor(b,\
    \ a % b),\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a", "    //\
    \ implement\n    return 0;", "    if b == 0 {\n        a\n    } else {\n     \
    \   greatest_common_divisor(b, a % b)\n    }", "    if b == 0 {\n        a\n \
    \   } else {\n        greatest_common_divisor(b, a % b)\n    }", "    if b ==\
    \ 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n  \
    \  }", "    let (mut a, mut b) = (a, b);\n    while b != 0 {\n        let temp\
    \ = b;\n        b = a % b;\n        a = temp;\n    }\n    a", "    return if b\
    \ == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n\
    \    };", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a", "    if\
    \ b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n\
    \    }", "    let a = a.abs();\n    let b = b.abs();\n    let mut a = a;\n   \
    \ let mut b = b;\n    while b != 0 {\n        let remainder = a % b;\n       \
    \ a = b;\n        b = remainder;\n    }\n    a", "    if b == 0 {\n        a\n\
    \    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    let mut\
    \ a = a;\n    let mut b = b;\n    while b != 0 {\n        let temp = a;\n    \
    \    a = b;\n        b = temp % b;\n    }\n    a", "    if b == 0 {\n        a\n\
    \    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    let mut\
    \ a = a;\n    let mut b = b;\n    while b != 0 {\n        let t = b;\n       \
    \ b = a % b;\n        a = t;\n    }\n    a", "    if b == 0 {\n        a\n   \
    \ } else {\n        greatest_common_divisor(b, a % b)\n    }", "    let mut a\
    \ = a;\n    let mut b = b;\n    while b != 0 {\n        let t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    a", "    if b == 0 {\n        a\n    }\
    \ else {\n        greatest_common_divisor(b, a % b)\n    }", "    let mut a =\
    \ a;\n    let mut b = b;\n    while b != 0 {\n        let t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    a", "    let mut a = a;\n    let mut b =\
    \ b;\n    while b != 0 {\n        let t = b;\n        b = a % b;\n        a =\
    \ t;\n    }\n    a", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    match (a, b) {\n        (0, b) => b,\n        (a, 0) =>\
    \ a,\n        (a, b) => {\n            if a > b {\n                greatest_common_divisor(a\
    \ % b, b)\n            } else {\n                greatest_common_divisor(a, b\
    \ % a)\n            }\n        }\n    }", "    if b == 0 {\n        a\n    } else\
    \ {\n        greatest_common_divisor(b, a % b)\n    }", "    if b == 0 {\n   \
    \     a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", "  \
    \  if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    // The GCD of two numbers is the largest number that divides\
    \ both of them.\n    // For example, the GCD of 24 and 16 is 8.\n    // First,\
    \ we start with the larger number and divide the smaller number\n    // into it.\
    \ If the remainder is 0, then the smaller number is the GCD.\n    // If the remainder\
    \ is not 0, then we make the smaller number the larger\n    // number and the\
    \ remainder the smaller number. We continue to divide the\n    // larger number\
    \ into the smaller number, and then make the smaller number\n    // the larger\
    \ number and the remainder the smaller number until the\n    // remainder is 0.\n\
    \    if b == 0 {\n        return a;\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let t = min(a, b);\n    for i in (1..t+1).rev() {\n   \
    \     if a % i == 0 && b % i == 0 {\n            return i;\n        }\n    }\n\
    \    1", "    let (mut a, mut b) = (a, b);\n    while b != 0 {\n        let temp\
    \ = b;\n        b = a % b;\n        a = temp;\n    }\n    a", "    if b == 0 {\n\
    \        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", " \
    \   if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    let mut n = a;\n    let mut m = b;\n    while m != 0 {\n\
    \        let old_m = m;\n        m = n % m;\n        n = old_m;\n    }\n    n.abs()",
  "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut m = a;\n    let mut n = b;\n    while m != 0 {\n\
    \        let t = m;\n        m = n % m;\n        n = t;\n    }\n    n", '    unimplemented!()',
  "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    // no need to compute if one of the numbers is zero\n   \
    \ if a == 0 || b == 0 {\n        return a + b;\n    }\n\n    let (mut a, mut b)\
    \ = (a, b);\n    while a != b {\n        if a > b {\n            a -= b;\n   \
    \     } else {\n            b -= a;\n        }\n    }\n    a", "    if b == 0\
    \ {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }",
  "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    match a {\n        0 => b,\n        a => greatest_common_divisor(b\
    \ % a, a),\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    a", " \
    \   if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a", "    let\
    \ mut a = a;\n    let mut b = b;\n    while b != 0 {\n        let r = a % b;\n\
    \        a = b;\n        b = r;\n    }\n    a", "    if b == 0 {\n        a\n\
    \    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    if b ==\
    \ 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n  \
    \  }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n        let\
    \ t = b;\n        b = a % b;\n        a = t;\n    }\n    a", "    if b == 0 {\n\
    \        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", " \
    \   if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    return if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    };", "    let a = a.abs();\n    let b = b.abs();\n    if a == 0\
    \ || b == 0 {\n        return 0;\n    }\n    if a == b {\n        return a;\n\
    \    }\n    if a > b {\n        return greatest_common_divisor(a % b, b);\n  \
    \  }\n    greatest_common_divisor(a, b % a)", "    if b == 0 {\n        a\n  \
    \  } else {\n        greatest_common_divisor(b, a % b)\n    }", "    let (mut\
    \ a, mut b) = (a, b);\n    while b != 0 {\n        let t = b;\n        b = a %\
    \ b;\n        a = t;\n    }\n    a", "    if b == 0 {\n        a\n    } else {\n\
    \        greatest_common_divisor(b, a % b)\n    }", '    unimplemented!();', " \
    \   if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    match (a, b) {\n        (a, 0) => a,\n        (a, b) => greatest_common_divisor(b,\
    \ a % b),\n    }", '    unimplemented!()', "    if b == 0 {\n        a\n    }\
    \ else {\n        greatest_common_divisor(b, a % b)\n    }", "    let mut a =\
    \ a;\n    let mut b = b;\n    while b != 0 {\n        let t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    a", "    if b == 0 {\n        a\n    } else\
    \ {\n        greatest_common_divisor(b, a % b)\n    }", "    if b == 0 {\n   \
    \     a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", "  \
    \  let mut a = a;\n    let mut b = b;\n    while b != 0 {\n        let c = a %\
    \ b;\n        a = b;\n        b = c;\n    }\n    a", "    if b == 0 {\n      \
    \  a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    if\
    \ b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n\
    \    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let a = if a < 0 { -a } else { a };\n    let b = if b <\
    \ 0 { -b } else { b };\n    let mut a = a;\n    let mut b = b;\n    while a !=\
    \ 0 && b != 0 {\n        if a > b {\n            a %= b;\n        } else {\n \
    \           b %= a;\n        }\n    }\n    a + b", "    if b == 0 {\n        a\n\
    \    } else {\n        greatest_common_divisor(b, a % b)\n    }", "    if b ==\
    \ 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n  \
    \  }", "    let mut c = a;\n    let mut d = b;\n    while d != 0 {\n        let\
    \ t = d;\n        d = c % d;\n        c = t;\n    }\n    c", "    let mut a =\
    \ a;\n    let mut b = b;\n    while b != 0 {\n        let temp = a % b;\n    \
    \    a = b;\n        b = temp;\n    }\n    a", "    if b == 0 {\n        a\n \
    \   } else {\n        greatest_common_divisor(b, a % b)\n    }", "    if b ==\
    \ 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n  \
    \  }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    // Euclid's algorithm\n    let mut a = a;\n    let mut\
    \ b = b;\n    while b != 0 {\n        let c = a % b;\n        a = b;\n       \
    \ b = c;\n    }\n    a", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    // Write your code here\n    return 0;", "    if b == 0\
    \ {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }",
  "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a\
    \ % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b,\
    \ a % b)\n    }", "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n\
    \        let tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    a", " \
    \   assert!(a > 0);\n    assert!(b > 0);\n    let a = a.abs();\n    let b = b.abs();\n\
    \    if a == 0 {\n        return b;\n    }\n    if b == 0 {\n        return a;\n\
    \    }\n    if a > b {\n        greatest_common_divisor(a % b, b)\n    } else\
    \ {\n        greatest_common_divisor(a, b % a)\n    }", "    if b == 0 {\n   \
    \     a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", '    unimplemented!();',
  "    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n        let r = a %\
    \ b;\n        a = b;\n        b = r;\n    }\n    a", "    match a {\n        0\
    \ => b,\n        _ => match b {\n            0 => a,\n            _ => {\n   \
    \             if a > b {\n                    greatest_common_divisor(a % b, b)\n\
    \                } else {\n                    greatest_common_divisor(a, b %\
    \ a)\n                }\n            }\n        },\n    }", "    if b == 0 {\n\
    \        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }", " \
    \   let mut a = a;\n    let mut b = b;\n    while b != 0 {\n        let t = b;\n\
    \        b = a % b;\n        a = t;\n    }\n    a", "    let mut a = a;\n    let\
    \ mut b = b;\n    while b != 0 {\n        let t = b;\n        b = a % b;\n   \
    \     a = t;\n    }\n    a", "    let mut a = a;\n    let mut b = b;\n    while\
    \ b != 0 {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n  \
    \  a"]
stop_tokens:
- "\n}"
