language: rs
name: HumanEval_70_strange_sort_list
results:
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut i = 0;\n    let mut j = lst.len() - 1;\n    let mut ret = Vec::new();\n\
    \    while i < j {\n        ret.push(lst[i]);\n        ret.push(lst[j]);\n   \
    \     i += 1;\n        j -= 1;\n    }\n    if lst.len() % 2 == 1 {\n        ret.push(lst[i]);\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpvdfqqgji.rs:15:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    for\
    \ i in (0..lst.len() - 1).step_by(2) {\n        lst.swap(i, i + 1);\n    }\n \
    \   lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 4, 3]`,\n right: `[1, 4, 2, 3]`', /tmp/tmppp06ik2y.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mid = lst.len() / 2;\n    lst.split_off(mid).into_iter().rev().zip(lst.into_iter()).flat_map(|(a,\
    \ b)| vec![a, b]).collect()\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmppj93pwpj.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut working = lst.clone();\n    let mut\
    \ result = Vec::new();\n    while working.len() > 0 {\n        let (min, max)\
    \ = get_min_max(&working);\n        result.push(min);\n        result.push(max);\n\
    \        let mut min_max = Vec::new();\n        min_max.push(min);\n        min_max.push(max);\n\
    \        working = remove_elems(&working, &min_max);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_min_max` in this scope\n  --> /tmp/tmpb930zjp4.rs:15:26\n\
    \   |\n15 |         let (min, max) = get_min_max(&working);\n   |            \
    \              ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `remove_elems` in this scope\n  --> /tmp/tmpb930zjp4.rs:21:19\n   |\n\
    21 |         working = remove_elems(&working, &min_max);\n   |               \
    \    ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut temp\
    \ = lst.clone();\n    temp.sort();\n    let mut direction = 1;\n    while !temp.is_empty()\
    \ {\n        let v = match direction {\n            1 => temp.pop(),\n       \
    \     -1 => temp.remove(0),\n            _ => panic!(\"Something went wrong!\"\
    ),\n        };\n        result.push(v.unwrap());\n        direction *= -1;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpqqlsjcb4.rs:19:19\n\
    \   |\n17 |           let v = match direction {\n   |  _________________-\n18\
    \ | |             1 => temp.pop(),\n   | |                  ---------- this is\
    \ found to be of type `Option<isize>`\n19 | |             -1 => temp.remove(0),\n\
    \   | |                   ^^^^^^^^^^^^^^ expected enum `Option`, found `isize`\n\
    20 | |             _ => panic!(\"Something went wrong!\"),\n21 | |         };\n\
    \   | |_________- `match` arms have incompatible types\n   |\n   = note: expected\
    \ type `Option<isize>`\n              found type `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut min = lst.clone();\n    min.sort();\n\
    \    let mut max = min.clone();\n    max.reverse();\n    let mut res = Vec::new();\n\
    \    let mut take_min = true;\n    while min.len() > 0 {\n        let tmp = if\
    \ take_min { min.remove(0) } else { max.remove(0) };\n        res.push(tmp);\n\
    \        take_min = !take_min;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 2, 3, 3, 2, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp5fo86gpv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ (min, max) = if lst.len() % 2 == 0 {\n        (lst.split_off(lst.len() / 2),\
    \ lst)\n    } else {\n        (lst.split_off(lst.len() / 2 + 1), lst)\n    };\n\
    \    min.into_iter().zip(max.into_iter().rev()).flatten().collect()\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `(isize, isize)` is not an iterator\n  --> /tmp/tmp_0y9v4nm.rs:19:48\n\
    \   |\n19 |     min.into_iter().zip(max.into_iter().rev()).flatten().collect()\n\
    \   |                                                ^^^^^^^ `(isize, isize)`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `(isize, isize)`\n   = note: required because of the requirements on the\
    \ impl of `IntoIterator` for `(isize, isize)`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Flatten<Zip<std::vec::IntoIter<isize>, Rev<std::vec::IntoIter<isize>>>>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmp_0y9v4nm.rs:19:58\n\
    \    |\n19  |       min.into_iter().zip(max.into_iter().rev()).flatten().collect()\n\
    \    |                                                            ^^^^^^^ method\
    \ cannot be called on `Flatten<Zip<std::vec::IntoIter<isize>, Rev<std::vec::IntoIter<isize>>>>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `<(isize, isize) as IntoIterator>::IntoIter\
    \ = _`\n            which is required by `Flatten<Zip<std::vec::IntoIter<isize>,\
    \ Rev<std::vec::IntoIter<isize>>>>: Iterator`\n            `<(isize, isize) as\
    \ IntoIterator>::Item = _`\n            which is required by `Flatten<Zip<std::vec::IntoIter<isize>,\
    \ Rev<std::vec::IntoIter<isize>>>>: Iterator`\n            `(isize, isize): IntoIterator`\n\
    \            which is required by `Flatten<Zip<std::vec::IntoIter<isize>, Rev<std::vec::IntoIter<isize>>>>:\
    \ Iterator`\n            `Flatten<Zip<std::vec::IntoIter<isize>, Rev<std::vec::IntoIter<isize>>>>:\
    \ Iterator`\n            which is required by `&mut Flatten<Zip<std::vec::IntoIter<isize>,\
    \ Rev<std::vec::IntoIter<isize>>>>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut i = 0;\n    let mut j = lst.len() - 1;\n    let mut res = Vec::new();\n\
    \    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n        if i\
    \ <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpu_xkrkzx.rs:15:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() <= 1 {\n        return lst;\n\
    \    }\n    let mut lst = lst;\n    lst.sort();\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    let mut j = lst.len() - 1;\n    loop {\n        if i\
    \ >= j {\n            break;\n        }\n        result.push(lst[i]);\n      \
    \  result.push(lst[j]);\n        i += 1;\n        j -= 1;\n    }\n    if i ==\
    \ j {\n        result.push(lst[i]);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() - 1;\n\
    \    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n        if i\
    \ <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpcm0dpzxt.rs:16:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() <= 1 {\n        return lst;\n\
    \    }\n    let mut lst_mut = lst.clone();\n    lst_mut.sort();\n    let mut res:\
    \ Vec<isize> = Vec::new();\n    let mut step = 1;\n    let mut idx = 0;\n    while\
    \ res.len() < lst.len() {\n        res.push(lst_mut[idx]);\n        idx += step;\n\
    \        step *= -1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpqk99j6mv.rs:23:17\n\
    \   |\n23 |         step *= -1;\n   |                 ^^ the trait `Neg` is not\
    \ implemented for `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut increasing = true;\n    let mut index =\
    \ 0;\n    loop {\n        if let Some(value) = lst.get(index) {\n            result.push(*value);\n\
    \            lst.remove(index);\n            if increasing {\n               \
    \ index += 1;\n            } else {\n                index -= 1;\n           \
    \ }\n            if index >= lst.len() {\n                increasing = false;\n\
    \                index -= 1;\n            } else if index < 0 {\n            \
    \    increasing = true;\n                index += 1;\n            }\n        }\
    \ else {\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp4uti9ysv.rs:24:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4c8bpdpz.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() == 0 {\n        return lst;\n\
    \    }\n    let mut sorted_list = Vec::new();\n    let mut list = lst.clone();\n\
    \    list.sort();\n    let mut to_add: Vec<isize> = Vec::new();\n    for x in\
    \ list {\n        to_add.push(x);\n    }\n    let mut lst_len = to_add.len();\n\
    \    while lst_len > 0 {\n        if lst_len % 2 == 0 {\n            sorted_list.push(to_add.pop().unwrap());\n\
    \        } else {\n            sorted_list.push(to_add.remove(0));\n        }\n\
    \        lst_len -= 1;\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp12jdla3k.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut sorted = vec![];\n    for (min, max) in lst.iter().zip(lst.iter().rev())\
    \ {\n        sorted.push(*min);\n        sorted.push(*max);\n    }\n    let half\
    \ = sorted.len() / 2;\n    sorted.drain(half..);\n    sorted\n}\n\nfn main() {\n\
    \    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823965
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() <= 1 {\n        return lst;\n\
    \    }\n    let mut lst = lst;\n    lst.sort();\n    let mut res = Vec::with_capacity(lst.len());\n\
    \    let mut start = 0;\n    let mut end = lst.len() - 1;\n    while start <=\
    \ end {\n        res.push(lst[start]);\n        start += 1;\n        if start\
    \ <= end {\n            res.push(lst[end]);\n            end -= 1;\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = lst;\n    v.sort();\n    v.reverse();\n\
    \    v\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpx8tx8e27.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut min_max_order = Vec::with_capacity(lst.len());\n\
    \    let mut sorted_lst = lst.clone();\n    sorted_lst.sort();\n    if lst.len()\
    \ % 2 == 0 {\n        for i in 0..lst.len() {\n            min_max_order.push(sorted_lst[i]);\n\
    \            min_max_order.push(sorted_lst[sorted_lst.len() - i - 1]);\n     \
    \   }\n    } else {\n        for i in 0..lst.len() - 1 {\n            min_max_order.push(sorted_lst[i]);\n\
    \            min_max_order.push(sorted_lst[sorted_lst.len() - i - 1]);\n     \
    \   }\n        min_max_order.push(sorted_lst[sorted_lst.len() - 1]);\n    }\n\
    \    min_max_order\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 2, 3, 3, 2, 4, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpjrcknz7a.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> = vec![];\n    let\
    \ mut remaining: Vec<isize> = lst;\n    let mut ascend: bool = true;\n    while\
    \ !remaining.is_empty() {\n        let min_elt = remaining.iter().min().unwrap();\n\
    \        let max_elt = remaining.iter().max().unwrap();\n        let next = if\
    \ ascend { min_elt } else { max_elt };\n        ret.push(*next);\n        remaining.retain(|x|\
    \ x != next);\n        ascend = !ascend;\n    }\n    ret\n}\n\nfn main() {\n \
    \   let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `remaining` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpc47nlmtp.rs:20:9\n   |\n16 |         let min_elt\
    \ = remaining.iter().min().unwrap();\n   |                       --------- immutable\
    \ borrow occurs here\n...\n20 |         remaining.retain(|x| x != next);\n   |\
    \         ^^^^^^^^^^------^^^^^^^^^^^^^^^\n   |         |         |\n   |    \
    \     |         immutable borrow later used by call\n   |         mutable borrow\
    \ occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!(\"sort vector {:?} in strange\
    \ order\", lst);\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: sort vector [1, 2, 3, 4]
    in strange order'', /tmp/tmp9pkaxw9g.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut m: Vec<isize> = lst.clone();\n    m.sort();\n\
    \    let mut n: Vec<isize> = Vec::new();\n    let l = m.len();\n    if l > 0 {\n\
    \        n.push(m[0]);\n        if l > 1 {\n            n.push(m[l - 1]);\n  \
    \          for i in 1..l - 1 {\n                if i % 2 == 0 {\n            \
    \        n.push(m[i]);\n                } else {\n                    n.insert(1,\
    \ m[i]);\n                }\n            }\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 3]`,\n right: `[1, 4, 2, 3]`', /tmp/tmprdhtc8lj.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut min = isize::MAX;\n    let mut new_lst\
    \ = vec![];\n    let mut max = isize::MIN;\n    let mut min_idx = 0;\n    let\
    \ mut max_idx = 0;\n    let mut start = 0;\n    let mut end = lst.len() - 1;\n\
    \    let mut idx = 0;\n    for i in 0..lst.len() {\n        if lst[i] < min {\n\
    \            min = lst[i];\n            min_idx = i;\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i];\n            max_idx = i;\n        }\n  \
    \  }\n    while start <= end {\n        new_lst.push(lst[idx]);\n        if start\
    \ == end {\n            break;\n        }\n        if idx == min_idx {\n     \
    \       idx = max_idx;\n        } else {\n            idx = min_idx;\n       \
    \ }\n        start += 1;\n        end -= 1;\n    }\n    new_lst\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpnqu2jbzq.rs:48:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() < 2 {\n        return lst;\n \
    \   }\n    let mut lst: Vec<isize> = lst;\n    let mut v: Vec<isize> = Vec::new();\n\
    \    while lst.len() > 0 {\n        v.push(lst.iter().min().unwrap().clone());\n\
    \        lst.remove(lst.iter().position(|n| n == lst.iter().min().unwrap()).unwrap());\n\
    \        if lst.len() > 0 {\n            v.push(lst.iter().max().unwrap().clone());\n\
    \            lst.remove(lst.iter().position(|n| n == lst.iter().max().unwrap()).unwrap());\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    use std::cmp::Ordering;\n    fn cmp(a: &isize,\
    \ b: &isize) -> Ordering {\n        if *a < *b {\n            Ordering::Less\n\
    \        } else if *a > *b {\n            Ordering::Greater\n        } else {\n\
    \            Ordering::Equal\n        }\n    }\n    let mut ret = lst.clone();\n\
    \    ret.sort_by(cmp);\n    if ret.len() % 2 == 0 {\n        let (left, right)\
    \ = ret.split_at(ret.len() / 2);\n        left.iter().rev().chain(right.iter()).cloned().collect()\n\
    \    } else {\n        let (left, right) = ret.split_at(ret.len() / 2);\n    \
    \    left.iter().rev().chain(right.iter()).cloned().collect()\n    }\n}\n\nfn\
    \ main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpg_iyxipo.rs:35:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut min = lst.iter().min().unwrap();\n\
    \    let mut max = lst.iter().max().unwrap();\n    let mut new_lst = Vec::new();\n\
    \    let mut count = 0;\n    let size = lst.len();\n    let mut i = 0;\n    while\
    \ i < size {\n        if count % 2 == 0 {\n            new_lst.push(*min);\n \
    \           min = lst.iter().filter(|&x| x != min).min().unwrap();\n        }\
    \ else {\n            new_lst.push(*max);\n            max = lst.iter().filter(|&x|\
    \ x != max).max().unwrap();\n        }\n        count += 1;\n        i += 1;\n\
    \    }\n    new_lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 9, 6, 8, 5]`,\n right: `[5, 9, 6, 8, 7]`', /tmp/tmp4el5xs47.rs:35:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    if\
    \ lst.len() > 1 {\n        let mut v: Vec<isize> = vec![];\n        let mut i\
    \ = 0;\n        let mut j = lst.len() - 1;\n        loop {\n            if i >\
    \ j {\n                break;\n            }\n            v.push(lst[i]);\n  \
    \          if i != j {\n                v.push(lst[j]);\n            }\n     \
    \       i += 1;\n            j -= 1;\n        }\n        return v;\n    }\n  \
    \  lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut range = 0..lst.len();\n    loop {\n     \
    \   let (left, right) = range.split_at(range.len() / 2);\n        if let Some(left)\
    \ = left.max() {\n            res.push(lst[left]);\n        }\n        if let\
    \ Some(right) = right.min() {\n            res.push(lst[right]);\n        }\n\
    \        if range.len() <= 1 {\n            break;\n        }\n        range =\
    \ range.start..left.min(right).unwrap();\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `split_at` found for struct `std::ops::Range`\
    \ in the current scope\n  --> /tmp/tmpplbblu4q.rs:17:35\n   |\n17 |         let\
    \ (left, right) = range.split_at(range.len() / 2);\n   |                     \
    \              ^^^^^^^^ method not found in `std::ops::Range<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::with_capacity(lst.len());\n    while !lst.is_empty() {\n    \
    \    res.push(lst.remove(0));\n        if !lst.is_empty() {\n            res.push(lst.pop().unwrap());\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    let mut new_lst = Vec::new();\n\
    \    let mut min_index: usize;\n    let mut max_index: usize;\n    let mut i =\
    \ 0;\n    while i < lst.len() {\n        min_index = lst.iter().enumerate().min_by_key(|k|\
    \ k.1).unwrap().0;\n        max_index = lst.iter().enumerate().max_by_key(|k|\
    \ k.1).unwrap().0;\n        new_lst.push(lst[min_index]);\n        if min_index\
    \ != max_index {\n            new_lst.push(lst[max_index]);\n        }\n     \
    \   lst.remove(max_index);\n        lst.remove(min_index);\n        i += 2;\n\
    \    }\n    new_lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpas6j4ygs.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // your code here\n    let mut new_list = lst.clone();\n\
    \    new_list.sort();\n    let mut result = vec![];\n    let mut max = new_list.len()\
    \ - 1;\n    let mut min = 0;\n    let mut max_selected = false;\n    let mut min_selected\
    \ = false;\n    for _i in 0..new_list.len() {\n        if !max_selected {\n  \
    \          result.push(new_list[max]);\n            max -= 1;\n            max_selected\
    \ = true;\n            min_selected = false;\n        } else if !min_selected\
    \ {\n            result.push(new_list[min]);\n            min += 1;\n        \
    \    min_selected = true;\n            max_selected = false;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpzhuy5fiw.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut lst\
    \ = lst;\n    while !lst.is_empty() {\n        let min = lst.iter().min().unwrap();\n\
    \        let min_index = lst.iter().position(|&n| n == *min).unwrap();\n     \
    \   result.push(*min);\n        lst.remove(min_index);\n        if !lst.is_empty()\
    \ {\n            let max = lst.iter().max().unwrap();\n            let max_index\
    \ = lst.iter().position(|&n| n == *max).unwrap();\n            result.push(*max);\n\
    \            lst.remove(max_index);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst: Vec<isize> = lst;\n    let mut\
    \ res: Vec<isize> = Vec::new();\n    loop {\n        if lst.len() == 0 {\n   \
    \         break;\n        } else {\n            let min = lst.iter().min().unwrap();\n\
    \            let min_index = lst.iter().position(|x| *x == *min).unwrap();\n \
    \           res.push(*min);\n            lst.remove(min_index);\n            if\
    \ lst.len() == 0 {\n                break;\n            } else {\n           \
    \     let max = lst.iter().max().unwrap();\n                let max_index = lst.iter().position(|x|\
    \ *x == *max).unwrap();\n                res.push(*max);\n                lst.remove(max_index);\n\
    \            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut vec = lst.clone();\n    vec.sort();\n\
    \    let mut counter = 0;\n    let mut helper_vec = vec![];\n    for i in 0..lst.len()\
    \ {\n        if counter % 2 == 0 {\n            helper_vec.push(vec[i]);\n   \
    \     } else {\n            helper_vec.insert(0, vec[i]);\n        }\n       \
    \ counter += 1;\n    }\n    helper_vec\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp2kme73t2.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_lst = Vec::new();\n    for _ in\
    \ 0..lst.len() {\n        new_lst.push(lst.iter().min().unwrap());\n        new_lst.push(lst.iter().max().unwrap());\n\
    \    }\n    new_lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyys6ixck.rs:17:5\n   |\n\
    11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n17 |     new_lst\n   |     ^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = lst;\n    let len = v.len();\n\
    \    let mut new_vec = Vec::with_capacity(len);\n    if len == 0 {\n        return\
    \ v;\n    }\n    if len == 1 {\n        return v;\n    }\n    v.sort();\n    let\
    \ mut i = 0;\n    let mut j = len - 1;\n    let mut c = 0;\n    while c < len\
    \ {\n        new_vec.push(v[i]);\n        new_vec.push(v[j]);\n        i += 1;\n\
    \        j -= 1;\n        c += 2;\n    }\n    if len % 2 == 1 {\n        new_vec.pop();\n\
    \    }\n    new_vec\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted = lst.clone();\n    sorted.sort();\n\
    \    let mut res = Vec::new();\n    let mut min = sorted.remove(0);\n    let mut\
    \ max = sorted.remove(sorted.len() - 1);\n    res.push(min);\n    res.push(max);\n\
    \    for _ in 0..lst.len() - 2 {\n        min = sorted.remove(0);\n        max\
    \ = sorted.remove(sorted.len() - 1);\n        res.push(min);\n        res.push(max);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 0) should be < len (is
    0)'', /tmp/tmpney0x0wx.rs:20:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpglh1fnsx.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst: Vec<isize> = lst;\n    lst.sort();\n\
    \    let mut res: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j\
    \ = lst.len() - 1;\n    while i <= j {\n        res.push(lst[i]);\n        i +=\
    \ 1;\n        if i <= j {\n            res.push(lst[j]);\n            j -= 1;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp46ox5vhe.rs:16:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // Your code here!\n    lst\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp12nio2e5.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ (mut asc, mut desc) = lst.split_at_mut(lst.len() / 2);\n    asc.reverse();\n\
    \    let mut res = Vec::new();\n    loop {\n        if let Some(num) = asc.pop()\
    \ {\n            res.push(num);\n        } else {\n            break;\n      \
    \  }\n        if let Some(num) = desc.pop() {\n            res.push(num);\n  \
    \      } else {\n            break;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pop` found for mutable reference `&mut [isize]`\
    \ in the current scope\n  --> /tmp/tmpexlym19_.rs:18:32\n   |\n18 |         if\
    \ let Some(num) = asc.pop() {\n   |                                ^^^ method\
    \ not found in `&mut [isize]`\n\nerror[E0599]: no method named `pop` found for\
    \ mutable reference `&mut [isize]` in the current scope\n  --> /tmp/tmpexlym19_.rs:23:33\n\
    \   |\n23 |         if let Some(num) = desc.pop() {\n   |                    \
    \             ^^^ method not found in `&mut [isize]`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // Unfolds, go through the list until there\
    \ is one remaining\n    // then keep going\n    lst.into_iter().fold(Vec::new(),\
    \ |mut acc, x| {\n        if acc.len() == 0 {\n            acc.push(x);\n    \
    \    } else {\n            if acc.len() % 2 == 0 {\n                // Even length,\
    \ insert at the front\n                acc.insert(0, x);\n            } else {\n\
    \                // Odd length, insert at the end\n                acc.push(x);\n\
    \            }\n        }\n        acc\n    })\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmg0j18ti.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // your code here!\n    lst\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpuizedzvz.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = lst;\n    v.sort();\n    let mut\
    \ res = Vec::new();\n    while !v.is_empty() {\n        res.push(v.remove(0));\n\
    \        if !v.is_empty() {\n            res.push(v.pop().unwrap());\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut first = 0;\n    let mut last = lst.len()\
    \ - 1;\n    while first < last {\n        res.push(lst[first]);\n        res.push(lst[last]);\n\
    \        first += 1;\n        last -= 1;\n    }\n    if first == last {\n    \
    \    res.push(lst[first]);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpc1b86675.rs:16:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut rv = lst.clone();\n    rv.sort();\n\
    \    let mut i = 0;\n    let mut j = rv.len() - 1;\n    while i != j {\n     \
    \   rv.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    rv\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpcczn7e2e.rs:19:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() == 0 {\n        return vec![];\n\
    \    }\n\n    let mut lst: Vec<isize> = lst;\n    lst.sort();\n    let mut min\
    \ = lst.remove(0);\n    let mut max = lst.pop().unwrap();\n    let mut result\
    \ = vec![min, max];\n\n    while lst.len() > 0 {\n        min = lst.remove(0);\n\
    \        result.push(min);\n        if lst.len() > 0 {\n            max = lst.pop().unwrap();\n\
    \            result.push(max);\n        }\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf9fawv8m.rs:19:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    let mut res = Vec::with_capacity(lst.len());\n\
    \    while lst.len() > 0 {\n        let min = lst.iter().min().unwrap();\n   \
    \     let min_idx = lst.iter().position(|&x| x == *min).unwrap();\n        let\
    \ max = lst.iter().max().unwrap();\n        let max_idx = lst.iter().position(|&x|\
    \ x == *max).unwrap();\n        if min_idx < max_idx {\n            res.push(*min);\n\
    \            res.push(*max);\n            lst.remove(max_idx);\n            lst.remove(min_idx);\n\
    \        } else {\n            res.push(*max);\n            res.push(*min);\n\
    \            lst.remove(min_idx);\n            lst.remove(max_idx);\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 0) should be < len (is
    0)'', /tmp/tmpzpdlbpmw.rs:28:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!(\"Return a vector of integers\
    \ {:?} in strange order\", lst);\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Return a vector of integers
    [1, 2, 3, 4] in strange order'', /tmp/tmpeajdck4i.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    lst\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpxgzjzgcf.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut result = Vec::new();\n    for i in 0..lst.len() / 2 {\n        result.push(lst[i]);\n\
    \        result.push(lst[lst.len() - i - 1]);\n    }\n    if lst.len() % 2 ==\
    \ 1 {\n        result.push(lst[lst.len() / 2]);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut temp\
    \ = lst.clone();\n    if temp.len() < 1 {\n        return result;\n    }\n   \
    \ temp.sort();\n    let mut smallest = temp.remove(0);\n    let mut largest =\
    \ temp.pop().unwrap();\n    loop {\n        result.push(smallest);\n        if\
    \ temp.len() == 0 {\n            break;\n        }\n        smallest = temp.remove(0);\n\
    \        result.push(largest);\n        if temp.len() == 0 {\n            break;\n\
    \        }\n        largest = temp.pop().unwrap();\n    }\n    if temp.len() ==\
    \ 1 {\n        result.push(largest);\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpv5tre7q_.rs:40:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst_clone = lst.clone();\n    lst_clone.sort();\n\
    \    let mut result: Vec<isize> = Vec::new();\n    while lst_clone.len() > 0 {\n\
    \        let max = lst_clone.pop().unwrap();\n        let min = lst_clone.remove(0);\n\
    \        result.push(min);\n        result.push(max);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 0) should be < len (is
    0)'', /tmp/tmpo_n6e9rd.rs:17:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ret = Vec::new();\n    let mut lst\
    \ = lst;\n    while !lst.is_empty() {\n        let min = lst.iter().min().unwrap();\n\
    \        let max = lst.iter().max().unwrap();\n        ret.push(*min);\n     \
    \   ret.push(*max);\n        lst.retain(|&x| x != *min && x != *max);\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `lst` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp5_auctdk.rs:19:9\n   |\n15 |         let min = lst.iter().min().unwrap();\n\
    \   |                   ---------- immutable borrow occurs here\n...\n19 |   \
    \      lst.retain(|&x| x != *min && x != *max);\n   |         ^^^^------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |   |\n   |         |   immutable borrow later used by call\n  \
    \ |         mutable borrow occurs here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = lst.clone();\n    sorted_list.sort();\n\
    \    sorted_list.reverse();\n    sorted_list\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpg7jn5wur.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::with_capacity(lst.len());\n\
    \    let mut lst = lst;\n    while lst.len() > 0 {\n        let min = lst.iter().min().unwrap();\n\
    \        let max = lst.iter().max().unwrap();\n        let pos_min = lst.iter().position(|&x|\
    \ x == *min).unwrap();\n        let pos_max = lst.iter().position(|&x| x == *max).unwrap();\n\
    \        res.push(*min);\n        lst.remove(pos_min);\n        if lst.len() >\
    \ 0 {\n            res.push(*max);\n            lst.remove(pos_max);\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `lst` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp_t6b1cu4.rs:20:9\n   |\n16 |         let max = lst.iter().max().unwrap();\n\
    \   |                   ---------- immutable borrow occurs here\n...\n20 |   \
    \      lst.remove(pos_min);\n   |         ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs\
    \ here\n21 |         if lst.len() > 0 {\n22 |             res.push(*max);\n  \
    \ |                      ---- immutable borrow later used here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0502`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut result = Vec::new();\n    let mut start = 0;\n    let mut end = lst.len()\
    \ - 1;\n    while start <= end {\n        result.push(lst[start]);\n        start\
    \ += 1;\n        if start <= end {\n            result.push(lst[end]);\n     \
    \       end -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpcep8zdm9.rs:16:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    while !lst.is_empty() {\n        res.push(lst.remove(0));\n\
    \        if !lst.is_empty() {\n            res.push(lst.pop().unwrap());\n   \
    \     }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = lst;\n    v.sort();\n    let mut\
    \ x = 0;\n    let mut y = v.len() - 1;\n    let mut r = Vec::with_capacity(v.len());\n\
    \    while x <= y {\n        r.push(v[x]);\n        if x != y {\n            r.push(v[y]);\n\
    \        }\n        x += 1;\n        y -= 1;\n    }\n    r\n}\n\nfn main() {\n\
    \    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp1nz6wjpa.rs:15:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut input = lst;\n    input.sort();\n \
    \   let mut output = Vec::new();\n    while !input.is_empty() {\n        output.push(input.remove(0));\n\
    \        if !input.is_empty() {\n            output.push(input.pop().unwrap());\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut rv = Vec::new();\n    let mut lst =\
    \ lst;\n    let mut min_max = true;\n    while !lst.is_empty() {\n        let\
    \ new_value = if min_max {\n            lst.iter().min().unwrap()\n        } else\
    \ {\n            lst.iter().max().unwrap()\n        };\n        rv.push(*new_value);\n\
    \        lst.retain(|&x| x != *new_value);\n        min_max = !min_max;\n    }\n\
    \    rv\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `lst` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpibk35y89.rs:22:9\n   |\n17 |             lst.iter().min().unwrap()\n\
    \   |             ---------- immutable borrow occurs here\n...\n22 |         lst.retain(|&x|\
    \ x != *new_value);\n   |         ^^^^------^^^^^^^^^^^^^^^^^^^^^^\n   |     \
    \    |   |\n   |         |   immutable borrow later used by call\n   |       \
    \  mutable borrow occurs here\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    let mut result = Vec::with_capacity(lst.len());\n\
    \    loop {\n        if lst.is_empty() {\n            break;\n        }\n    \
    \    let min = lst.iter().min().unwrap();\n        result.push(*min);\n      \
    \  lst.remove_item(min);\n        if lst.is_empty() {\n            break;\n  \
    \      }\n        let max = lst.iter().max().unwrap();\n        result.push(*max);\n\
    \        lst.remove_item(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpxfapijhi.rs:20:13\n   |\n20 |         lst.remove_item(min);\n\
    \   |             ^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `remove`\n\nerror[E0599]: no method named `remove_item` found for struct\
    \ `Vec<isize>` in the current scope\n  --> /tmp/tmpxfapijhi.rs:26:13\n   |\n26\
    \ |         lst.remove_item(max);\n   |             ^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `remove`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() <= 1 {\n        return lst;\n\
    \    }\n    let (min, max) = (lst.iter().min().unwrap(), lst.iter().max().unwrap());\n\
    \    let mut lst: Vec<isize> = lst.iter().filter(|&x| x != min && x != max).cloned().collect();\n\
    \    let mut ans = vec![*min, *max];\n    while !lst.is_empty() {\n        let\
    \ (min, max) = (lst.iter().min().unwrap(), lst.iter().max().unwrap());\n     \
    \   lst = lst.iter().filter(|&x| x != min && x != max).cloned().collect();\n \
    \       ans.push(*min);\n        ans.push(*max);\n    }\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0506]: cannot assign to `lst` because it is borrowed\n    --> /tmp/tmphiaimmoy.rs:20:9\n\
    \     |\n19   |         let (min, max) = (lst.iter().min().unwrap(), lst.iter().max().unwrap());\n\
    \     |                           ---------- borrow of `lst` occurs here\n20 \
    \  |         lst = lst.iter().filter(|&x| x != min && x != max).cloned().collect();\n\
    \     |         ^^^ assignment to borrowed `lst` occurs here\n21   |         ans.push(*min);\n\
    \     |                  ---- borrow later used here\n     |\n     = note: borrow\
    \ occurs due to deref coercion to `[isize]`\nnote: deref defined here\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0506`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() - 1;\n\
    \    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n        if i\
    \ <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpcm0dpzxt.rs:16:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_list = lst.clone();\n    let mut\
    \ sorted_list = Vec::new();\n    while !new_list.is_empty() {\n        let min\
    \ = new_list.iter().min().unwrap();\n        sorted_list.push(*min);\n       \
    \ let index = new_list.iter().position(|&i| i == *min).unwrap();\n        new_list.remove(index);\n\
    \        if !new_list.is_empty() {\n            let max = new_list.iter().max().unwrap();\n\
    \            sorted_list.push(*max);\n            let index = new_list.iter().position(|&i|\
    \ i == *max).unwrap();\n            new_list.remove(index);\n        }\n    }\n\
    \    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v1 = lst.clone();\n    v1.sort();\n\
    \    let mut v2 = lst.clone();\n    v2.sort_by(|a, b| b.cmp(a));\n    // println!(\"\
    {:?} {:?}\", v1, v2);\n    let mut v = Vec::new();\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    while i < v1.len() && j < v2.len() {\n        v.push(v1[i]);\n\
    \        v.push(v2[j]);\n        i += 1;\n        j += 1;\n    }\n    if i < v1.len()\
    \ {\n        for i in i..v1.len() {\n            v.push(v1[i]);\n        }\n \
    \   }\n    if j < v2.len() {\n        for j in j..v2.len() {\n            v.push(v2[j]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 2, 3, 3, 2, 4, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp876cbwb5.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!(\"weird sorting {}\", lst.len())\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: weird sorting 4'', /tmp/tmpow3pmqh6.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut list = lst;\n    let mut sorted_list\
    \ = Vec::with_capacity(list.len());\n    let mut min_max_switch = true;\n    while\
    \ !list.is_empty() {\n        if min_max_switch {\n            sorted_list.push(list.iter().min().unwrap().clone());\n\
    \            list.remove_item(list.iter().min().unwrap());\n        } else {\n\
    \            sorted_list.push(list.iter().max().unwrap().clone());\n         \
    \   list.remove_item(list.iter().max().unwrap());\n        }\n        min_max_switch\
    \ = !min_max_switch;\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp5o_t3fyy.rs:18:18\n   |\n18 |          \
    \   list.remove_item(list.iter().min().unwrap());\n   |                  ^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `remove`\n\nerror[E0599]:\
    \ no method named `remove_item` found for struct `Vec<isize>` in the current scope\n\
    \  --> /tmp/tmp5o_t3fyy.rs:21:18\n   |\n21 |             list.remove_item(list.iter().max().unwrap());\n\
    \   |                  ^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `remove`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::with_capacity(lst.len());\n    let mut i = 0;\n    while lst.len()\
    \ > 0 {\n        if i % 2 == 0 {\n            res.push(lst.remove(0));\n     \
    \   } else {\n            res.push(lst.pop().unwrap());\n        }\n        i\
    \ += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut lst\
    \ = lst;\n    while lst.len() > 0 {\n        let min = lst.iter().cloned().min().unwrap();\n\
    \        let min_index = lst.iter().position(|&x| x == min).unwrap();\n      \
    \  result.push(min);\n        lst.remove(min_index);\n        if lst.len() > 0\
    \ {\n            let max = lst.iter().cloned().max().unwrap();\n            let\
    \ max_index = lst.iter().position(|&x| x == max).unwrap();\n            result.push(max);\n\
    \            lst.remove(max_index);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ half = lst.len() / 2;\n    let mut zipped = lst.split_at(half).0.iter().zip(lst.split_at(half).1.iter());\n\
    \    let mut result = Vec::new();\n    while let Some((a, b)) = zipped.next()\
    \ {\n        result.push(*a);\n        result.push(*b);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 2, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpwfkaop8n.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_lst = lst.clone();\n    sorted_lst.sort();\n\
    \    let mut result = Vec::with_capacity(lst.len());\n    while sorted_lst.len()\
    \ > 0 {\n        result.push(sorted_lst.remove(0));\n        if sorted_lst.len()\
    \ > 0 {\n            result.push(sorted_lst.pop().unwrap());\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_lst = Vec::new();\n    let mut\
    \ lst = lst;\n    let mut min = lst.iter().min().unwrap();\n    let mut max =\
    \ lst.iter().max().unwrap();\n    loop {\n        if lst.len() == 0 {\n      \
    \      break;\n        } else {\n            min = lst.iter().min().unwrap();\n\
    \            new_lst.push(*min);\n            lst.remove_item(min);\n        \
    \    if lst.len() == 0 {\n                break;\n            } else {\n     \
    \           max = lst.iter().max().unwrap();\n                new_lst.push(*max);\n\
    \                lst.remove_item(max);\n            }\n        }\n    }\n    new_lst\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpkwrnatun.rs:22:17\n   |\n22 |          \
    \   lst.remove_item(min);\n   |                 ^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `remove`\n\nerror[E0599]: no method\
    \ named `remove_item` found for struct `Vec<isize>` in the current scope\n  -->\
    \ /tmp/tmpkwrnatun.rs:28:21\n   |\n28 |                 lst.remove_item(max);\n\
    \   |                     ^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `remove`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut min_idx = 0;\n    let mut max_idx =\
    \ 0;\n    let mut lst_idx = 1;\n    let mut min_max = Vec::new();\n    let mut\
    \ lst_len = lst.len();\n    // No input list returns None\n    if lst_len == 0\
    \ {\n        return lst;\n    }\n    // Check if list contains all equal elements\n\
    \    if lst.len() > 1 {\n        if lst[0] == lst[1] {\n            if lst.iter().all(|&x|\
    \ x == lst[0]) {\n                return lst;\n            }\n        }\n    }\n\
    \    // Find initial min and max\n    while lst_idx < lst_len {\n        if lst[min_idx]\
    \ > lst[lst_idx] {\n            min_idx = lst_idx;\n        }\n        if lst[max_idx]\
    \ < lst[lst_idx] {\n            max_idx = lst_idx;\n        }\n        lst_idx\
    \ += 1;\n    }\n    // If min and max are the same, return list\n    if lst[min_idx]\
    \ == lst[max_idx] {\n        return lst;\n    }\n    // Strange sort\n    min_max.push(lst[min_idx]);\n\
    \    min_max.push(lst[max_idx]);\n    lst_len -= 2;\n    while lst_len > 0 {\n\
    \        if lst_len % 2 == 0 {\n            min_idx = 0;\n            while lst_idx\
    \ < lst_len {\n                if lst[min_idx] > lst[lst_idx] {\n            \
    \        min_idx = lst_idx;\n                }\n                lst_idx += 1;\n\
    \            }\n            min_max.push(lst[min_idx]);\n        } else {\n  \
    \          max_idx = 0;\n            while lst_idx < lst_len {\n             \
    \   if lst[max_idx] <\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmphu48f6n0.rs:74:3\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |      \
    \                                               - unclosed delimiter\n...\n47\
    \ |     while lst_len > 0 {\n   |                       - unclosed delimiter\n\
    ...\n57 |         } else {\n   |                - unclosed delimiter\n58 |   \
    \          max_idx = 0;\n59 |             while lst_idx < lst_len {\n   |    \
    \                                 - this delimiter might not be properly closed...\n\
    60 |                 if lst[max_idx] <\n61 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmphu48f6n0.rs:61:1\n   |\n61 | }\n   | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphu48f6n0.rs:47:5\n   |\n11 | \
    \  fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |               \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n47 | /     while lst_len > 0 {\n48 | |         if lst_len % 2 ==\
    \ 0 {\n49 | |             min_idx = 0;\n50 | |             while lst_idx < lst_len\
    \ {\n...  |\n73 | |     assert_eq!(candidate(vec![111111]), vec![111111]);\n74\
    \ | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    let mut list\
    \ = lst.clone();\n    while !list.is_empty() {\n        let mi = list.iter().cloned().min().unwrap();\n\
    \        let ma = list.iter().cloned().max().unwrap();\n        result.push(mi);\n\
    \        result.push(ma);\n        list.retain(|&x| x != mi && x != ma);\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 9, 6, 8, 7, 7]`,\n right: `[5, 9, 6, 8, 7]`', /tmp/tmp3e8utwk8.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut idx = 0;\n    let mut end = lst.len() - 1;\n\
    \    while idx <= end {\n        if idx == end {\n            res.push(lst[idx]);\n\
    \            break;\n        }\n        res.push(lst[idx]);\n        res.push(lst[end]);\n\
    \        idx += 1;\n        end -= 1;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp3wagubtw.rs:16:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut clone = lst.clone();\n    let len =\
    \ clone.len();\n    if len == 0 {\n        return clone;\n    }\n    if len ==\
    \ 1 {\n        return clone;\n    }\n    clone.sort();\n    let mut result = Vec::new();\n\
    \    let mid_index = (len - 1) / 2;\n    let (left, right) = clone.split_at(mid_index\
    \ + 1);\n    for i in 0..left.len() {\n        result.push(left[i]);\n       \
    \ if i < right.len() {\n            result.push(right[i]);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 2, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp1mie1f7f.rs:35:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ret = Vec::new();\n    let mut remaining\
    \ = lst;\n    while remaining.len() > 0 {\n        let mut mn = remaining[0];\n\
    \        let mut mx = remaining[0];\n        let mut mn_i = 0;\n        let mut\
    \ mx_i = 0;\n        for (i, &n) in remaining.iter().enumerate() {\n         \
    \   if n < mn {\n                mn = n;\n                mn_i = i;\n        \
    \    }\n            if n > mx {\n                mx = n;\n                mx_i\
    \ = i;\n            }\n        }\n        ret.push(mn);\n        remaining.remove(mn_i);\n\
    \        if remaining.len() > 0 {\n            ret.push(mx);\n            remaining.remove(mx_i);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 3) should be < len (is
    3)'', /tmp/tmpmyjbmrl3.rs:33:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst_clone = lst.clone();\n    lst_clone.sort();\n\
    \    let mut result: Vec<isize> = Vec::new();\n    let mut first_index = 0;\n\
    \    let mut last_index = lst_clone.len() - 1;\n    while first_index <= last_index\
    \ {\n        result.push(lst_clone[first_index]);\n        first_index += 1;\n\
    \        if first_index <= last_index {\n            result.push(lst_clone[last_index]);\n\
    \            last_index -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpqz2zfh6i.rs:16:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = lst;\n    v.sort();\n    v.reverse();\n\
    \    v\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpx8tx8e27.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut i = 0;\n    let mut lst2 = Vec::new();\n    while lst.len() > 0 {\n    \
    \    let t = lst.remove(i);\n        lst2.push(t);\n        i = if i == 0 {\n\
    \            lst.len() - 1\n        } else {\n            i - 1\n        };\n\
    \    }\n    lst2\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpork2208q.rs:20:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_list = lst.clone();\n    new_list.sort();\n\
    \    let mut min = new_list.clone();\n    let mut max = new_list.clone();\n  \
    \  let mut temp = vec![];\n    if new_list.len() % 2 == 0 {\n        for i in\
    \ 0..(new_list.len() / 2) {\n            temp.push(min.pop().unwrap());\n    \
    \        temp.push(max.pop().unwrap());\n        }\n    } else {\n        for\
    \ i in 0..(new_list.len() / 2) {\n            temp.push(min.pop().unwrap());\n\
    \            temp.push(max.pop().unwrap());\n        }\n        temp.push(min.pop().unwrap());\n\
    \    }\n    temp\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 3, 3]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpuv4_nk5l.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // Initialize the vector to be returned with\
    \ the same size\n    // of the input and fill it with 0s.\n    let mut ret: Vec<isize>\
    \ = vec![0; lst.len()];\n    // Sort the input.\n    let mut sorted = lst.clone();\n\
    \    sorted.sort();\n    // Initialize the indexes to be used.\n    let mut min\
    \ = 0;\n    let mut max = sorted.len() - 1;\n    // For all the items in the input\
    \ do:\n    for i in 0..lst.len() {\n        // If it is in an even position, save\
    \ the minimum\n        // value of the sorted input in the current position\n\
    \        // of the vector to be returned.\n        if i % 2 == 0 {\n         \
    \   ret[i] = sorted[min];\n            min += 1;\n        }\n        // If it\
    \ is in an odd position, save the maximum\n        // value of the sorted input\
    \ in the current position\n        // of the vector to be returned.\n        else\
    \ {\n            ret[i] = sorted[max];\n            max -= 1;\n        }\n   \
    \ }\n    ret\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpm41brhof.rs:20:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut vec = lst.clone();\n    vec.sort();\n\
    \    let mut res = Vec::new();\n    let (mut l, mut r) = (0, vec.len() - 1);\n\
    \    loop {\n        if l < vec.len() {\n            res.push(vec[l]);\n     \
    \       l += 1;\n        }\n        if r >= 0 {\n            res.push(vec[r]);\n\
    \            r -= 1;\n        }\n        if l >= vec.len() && r < 0 {\n      \
    \      break;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpnhbfy7we.rs:23:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() <= 1 {\n        return lst;\n\
    \    }\n    let mut lst = lst;\n    let min = lst.iter().min().unwrap();\n   \
    \ let min_index = lst.iter().position(|&x| x == *min).unwrap();\n    lst.remove(min_index);\n\
    \    let mut new_lst = vec![*min];\n    while lst.len() > 0 {\n        let max\
    \ = lst.iter().max().unwrap();\n        let max_index = lst.iter().position(|&x|\
    \ x == *max).unwrap();\n        lst.remove(max_index);\n        let min = lst.iter().min().unwrap();\n\
    \        let min_index = lst.iter().position(|&x| x == *min).unwrap();\n     \
    \   lst.remove(min_index);\n        new_lst.push(*max);\n        new_lst.push(*min);\n\
    \    }\n    new_lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `lst` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpo33zh42i.rs:18:5\n   |\n16 |     let min = lst.iter().min().unwrap();\n\
    \   |               ---------- immutable borrow occurs here\n17 |     let min_index\
    \ = lst.iter().position(|&x| x == *min).unwrap();\n18 |     lst.remove(min_index);\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n19 |     let mut new_lst\
    \ = vec![*min];\n   |                            ---- immutable borrow later used\
    \ here\n\nerror[E0502]: cannot borrow `lst` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpo33zh42i.rs:23:9\n   |\n21 |         let max = lst.iter().max().unwrap();\n\
    \   |                   ---------- immutable borrow occurs here\n22 |        \
    \ let max_index = lst.iter().position(|&x| x == *max).unwrap();\n23 |        \
    \ lst.remove(max_index);\n   |         ^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs\
    \ here\n...\n27 |         new_lst.push(*max);\n   |                      ----\
    \ immutable borrow later used here\n\nerror[E0502]: cannot borrow `lst` as mutable\
    \ because it is also borrowed as immutable\n  --> /tmp/tmpo33zh42i.rs:26:9\n \
    \  |\n21 |         let max = lst.iter().max().unwrap();\n   |                \
    \   ---------- immutable borrow occurs here\n...\n26 |         lst.remove(min_index);\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n27 |         new_lst.push(*max);\n\
    \   |                      ---- immutable borrow later used here\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted = lst.clone();\n    sorted.sort();\n\
    \    let mut ret = Vec::new();\n    let mut add_max = true;\n    while !sorted.is_empty()\
    \ {\n        if add_max {\n            ret.push(sorted.pop().unwrap());\n    \
    \    } else {\n            ret.push(sorted.remove(0));\n        }\n        add_max\
    \ = !add_max;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpm9921qy1.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = lst;\n    v.sort();\n\
    \    v.reverse();\n    v\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmphs7ssz6_.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::with_capacity(lst.len());\n    while !lst.is_empty() {\n    \
    \    res.push(lst.remove(0));\n        if !lst.is_empty() {\n            res.push(lst.pop().unwrap());\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut min_max_iter = lst.iter().cloned().minmax();\n\
    \    let mut res = Vec::new();\n    if let (Some(min), Some(max)) = min_max_iter\
    \ {\n        res.push(min);\n        res.push(max);\n    }\n    while let (Some(min),\
    \ Some(max)) = min_max_iter {\n        res.push(min);\n        res.push(max);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `minmax` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpj8i3sjs1.rs:12:48\n   |\n12 |     let mut min_max_iter\
    \ = lst.iter().cloned().minmax();\n   |                                      \
    \          ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() <= 1 {\n        return lst;\n\
    \    }\n    let mut sorted = vec![];\n    let mut nums = lst.clone();\n    nums.sort();\n\
    \    let mut left_index = 0;\n    let mut right_index = nums.len() - 1;\n    while\
    \ left_index <= right_index {\n        sorted.push(nums[left_index]);\n      \
    \  left_index += 1;\n        if left_index <= right_index {\n            sorted.push(nums[right_index]);\n\
    \            right_index -= 1;\n        }\n    }\n    sorted\n}\n\nfn main() {\n\
    \    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted = lst.to_vec();\n    sorted.sort();\n\
    \    let mut answer = Vec::new();\n    let mut i = 0;\n    let mut j = sorted.len()\
    \ - 1;\n    while i <= j {\n        answer.push(sorted[i]);\n        i += 1;\n\
    \        if i <= j {\n            answer.push(sorted[j]);\n            j -= 1;\n\
    \        }\n    }\n    answer\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpwyc9gryt.rs:16:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::with_capacity(lst.len());\n    while !lst.is_empty() {\n    \
    \    let min = lst.remove(0);\n        let max = lst.pop().unwrap();\n       \
    \ res.push(min);\n        res.push(max);\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5,\
    \ 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2,\
    \ 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8,\
    \ 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpmibzzwbm.rs:17:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // TODO\n    vec![]\n}\n\nfn main() {\n   \
    \ let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 2, 3]`', /tmp/tmptu_3m8yi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() == 0 {\n        return lst;\n\
    \    }\n    let mut mut_lst = lst.clone();\n    mut_lst.sort();\n    let mut res\
    \ = Vec::new();\n    while mut_lst.len() > 0 {\n        res.push(mut_lst.remove(0));\n\
    \        if mut_lst.len() > 0 {\n            res.push(mut_lst.pop().unwrap());\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4c8bpdpz.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() == 0 {\n        return lst;\n\
    \    }\n    let mut odd_lst: Vec<isize> = Vec::new();\n    let mut even_lst: Vec<isize>\
    \ = Vec::new();\n    let mut tmp_lst = lst.clone();\n    odd_lst.push(tmp_lst.pop().unwrap());\n\
    \    while tmp_lst.len() > 0 {\n        let min = *tmp_lst.iter().min().unwrap();\n\
    \        let mut min_ix = 0;\n        for (i, el) in tmp_lst.iter().enumerate()\
    \ {\n            if el == &min {\n                min_ix = i;\n              \
    \  break;\n            }\n        }\n        even_lst.push(tmp_lst.remove(min_ix));\n\
    \        if tmp_lst.len() > 0 {\n            let max = *tmp_lst.iter().max().unwrap();\n\
    \            let mut max_ix = 0;\n            for (i, el) in tmp_lst.iter().enumerate()\
    \ {\n                if el == &max {\n                    max_ix = i;\n      \
    \              break;\n                }\n            }\n            odd_lst.push(tmp_lst.remove(max_ix));\n\
    \        }\n    }\n    let mut res: Vec<isize> = Vec::new();\n    while even_lst.len()\
    \ > 0 {\n        res.push(even_lst.pop().unwrap());\n        if odd_lst.len()\
    \ > 0 {\n            res.push(odd_lst.pop().unwrap());\n        }\n    }\n   \
    \ if odd_lst.len() > 0 {\n        res.push(odd_lst.pop().unwrap());\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 1, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp7oskht0k.rs:56:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut acc = Vec::new();\n    let mut lst\
    \ = lst;\n    while lst.len() > 0 {\n        acc.push(lst.remove(0));\n      \
    \  if lst.len() > 0 {\n            acc.push(lst.pop().unwrap());\n        }\n\
    \    }\n    acc\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 1, 6, 9, 7, 8]`,\n right: `[1, 9, 5, 8, 6, 7]`', /tmp/tmp2x415n8l.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // TODO add code here\n    let mut lst: Vec<isize>\
    \ = lst;\n    let mut new_lst: Vec<isize> = Vec::new();\n    let mut min: isize\
    \ = lst[0];\n    let mut max: isize = lst[0];\n    let mut index: usize = 0;\n\
    \    let mut index_2: usize = 0;\n    let mut count: isize = 0;\n    while new_lst.len()\
    \ < lst.len() {\n        for i in 0..lst.len() {\n            if lst[i] < min\
    \ {\n                min = lst[i];\n                index = i;\n            }\n\
    \            if lst[i] > max {\n                max = lst[i];\n              \
    \  index_2 = i;\n            }\n        }\n        if count % 2 == 0 {\n     \
    \       new_lst.push(min);\n            lst.remove(index);\n            if lst.len()\
    \ > 0 {\n                min = lst[0];\n            }\n        } else {\n    \
    \        new_lst.push(max);\n            lst.remove(index_2);\n            if\
    \ lst.len() > 0 {\n                max = lst[0];\n            }\n        }\n \
    \       count += 1;\n    }\n    new_lst\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 3) should be < len (is
    3)'', /tmp/tmphcxg0zy8.rs:39:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let len = lst.len();\n    if len < 2 {\n  \
    \      return lst;\n    }\n    let mut ordered_lst = Vec::new();\n    let mut\
    \ sorted_lst = lst.clone();\n    sorted_lst.sort();\n    for i in 0..len {\n \
    \       if i % 2 == 0 {\n            ordered_lst.push(sorted_lst[i / 2]);\n  \
    \      } else {\n            ordered_lst.push(sorted_lst[len - 1 - i / 2]);\n\
    \        }\n    }\n    ordered_lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() < 2 {\n        return lst;\n \
    \   }\n    let mut res = Vec::with_capacity(lst.len());\n    let mut lst = lst;\n\
    \    lst.sort();\n    let mut left = 0;\n    let mut right = lst.len() - 1;\n\
    \    let mut inc = false;\n    while left <= right {\n        if inc {\n     \
    \       res.push(lst[left]);\n            left += 1;\n        } else {\n     \
    \       res.push(lst[right]);\n            right -= 1;\n        }\n        inc\
    \ = !inc;\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpvfj6hmeb.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut idx = 0;\n    while lst.len() > 0 {\n   \
    \     res.push(lst[idx]);\n        lst.remove(idx);\n        if lst.len() > 0\
    \ {\n            idx = lst.len() - 1;\n            res.push(lst[idx]);\n     \
    \       lst.remove(idx);\n            idx = 0;\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut vec = lst.clone();\n    vec.sort();\n\
    \    let mut ret = Vec::new();\n    let mut i = 0;\n    let len = vec.len();\n\
    \    while !vec.is_empty() {\n        if i % 2 == 0 {\n            ret.push(vec.remove(0));\n\
    \        } else {\n            ret.push(vec.pop().unwrap());\n        }\n    \
    \    i += 1;\n        if i >= len {\n            i = 0;\n        }\n    }\n  \
    \  ret\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut result = Vec::new();\n    let mut idx = 0;\n    while !lst.is_empty() {\n\
    \        if idx % 2 == 0 {\n            result.push(lst.remove(0));\n        }\
    \ else {\n            result.push(lst.pop().unwrap());\n        }\n        idx\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    lst\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpxgzjzgcf.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = lst.clone();\n    sorted_list.sort();\n\
    \    let mut answer = Vec::new();\n    let mut temp_list = sorted_list.clone();\n\
    \    while temp_list.len() != 0 {\n        let first = temp_list.pop();\n    \
    \    let last = temp_list.pop();\n        answer.extend_from_slice(&[first.unwrap(),\
    \ last.unwrap()]);\n    }\n    answer\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpd_8ykw54.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.chunks(2).flat_map(|v|\
    \ if v.len() == 2 { vec![v[0], v[1]] } else { v.to_vec() }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpoyozfuy5.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpglh1fnsx.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() <= 1 {\n        return lst;\n\
    \    }\n    let mut result = Vec::new();\n    let mut local_lst = lst.clone();\n\
    \    local_lst.sort();\n    result.push(local_lst[0]);\n    local_lst.remove(0);\n\
    \    while local_lst.len() > 0 {\n        result.push(local_lst[local_lst.len()\
    \ - 1]);\n        local_lst.remove(local_lst.len() - 1);\n        if local_lst.len()\
    \ > 0 {\n            result.push(local_lst[0]);\n            local_lst.remove(0);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut reverse = lst.iter().rev().map(|x| *x).collect::<Vec<isize>>();\n    let\
    \ mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < lst.len() {\n        result.push(lst[i]);\n        i += 1;\n        if j\
    \ < reverse.len() {\n            result.push(reverse[j]);\n            j += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 2, 3, 3, 2, 4, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpnfl1h2c3.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut start = 0;\n    let mut end = lst.len()\
    \ - 1;\n    while start < end {\n        res.push(lst[start]);\n        res.push(lst[end]);\n\
    \        start += 1;\n        end -= 1;\n    }\n    if start == end {\n      \
    \  res.push(lst[start]);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpy3mmxjfb.rs:16:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut i = 0;\n    let len = lst.len();\n    let mut ret = Vec::with_capacity(len);\n\
    \    while len > 0 {\n        if i % 2 == 0 {\n            ret.push(lst.remove(0));\n\
    \        } else {\n            ret.push(lst.pop().unwrap());\n        }\n    \
    \    i += 1;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 0) should be < len (is
    0)'', /tmp/tmp4m3lvzih.rs:19:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut strange_list = Vec::new();\n    let\
    \ mut new_list = lst.clone();\n    if new_list.len() == 0 {\n        return strange_list;\n\
    \    }\n    if new_list.len() == 1 {\n        return new_list;\n    }\n    let\
    \ mut max_index = new_list.len() - 1;\n    let mut min_index = 0;\n    let mut\
    \ add_min = true;\n    while new_list.len() > 0 {\n        if add_min {\n    \
    \        strange_list.push(new_list[min_index]);\n            new_list.remove(min_index);\n\
    \            if new_list.len() > 0 {\n                max_index = new_list.len()\
    \ - 1;\n            }\n            add_min = false;\n        } else {\n      \
    \      strange_list.push(new_list[max_index]);\n            new_list.remove(max_index);\n\
    \            if new_list.len() > 0 {\n                min_index = 0;\n       \
    \     }\n            add_min = true;\n        }\n    }\n    strange_list\n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 1, 6, 9, 7, 8]`,\n right: `[1, 9, 5, 8, 6, 7]`', /tmp/tmpnfb5pmgw.rs:48:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut t = lst.clone();\n    t.sort();\n \
    \   let mut res = Vec::new();\n    let mut b = 0;\n    let mut e = t.len() - 1;\n\
    \    while b <= e {\n        res.push(t[b]);\n        if b != e {\n          \
    \  res.push(t[e]);\n        }\n        b += 1;\n        e -= 1;\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp8j6m5j8s.rs:16:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut out = Vec::new();\n    if lst.len()\
    \ < 2 {\n        return lst;\n    }\n    let mut copy = lst.clone();\n    copy.sort();\n\
    \    for i in 0..lst.len() {\n        if i % 2 == 0 {\n            out.push(copy[i\
    \ / 2]);\n        } else {\n            out.push(copy[lst.len() - 1 - i / 2]);\n\
    \        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst_min_max = min_max_vec(&lst);\n\
    \    let mut result: Vec<isize> = Vec::new();\n    let mut lst_len = lst_min_max.len();\n\
    \    let mut is_descending = true;\n    let mut i = 0;\n    while lst_len > 0\
    \ {\n        if is_descending {\n            result.push(lst_min_max[lst_len -\
    \ 1]);\n            lst_min_max.remove(lst_len - 1);\n            lst_len -= 1;\n\
    \            if i % 2 == 0 {\n                is_descending = false;\n       \
    \     }\n        } else {\n            result.push(lst_min_max[0]);\n        \
    \    lst_min_max.remove(0);\n            lst_len -= 1;\n            if i % 2 ==\
    \ 0 {\n                is_descending = true;\n            }\n        }\n     \
    \   i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min_max_vec` in this scope\n  --> /tmp/tmpetib2y1_.rs:12:27\n\
    \   |\n12 |     let mut lst_min_max = min_max_vec(&lst);\n   |               \
    \            ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n\
    \    lst.iter().step_by(2).chain(lst.iter().rev().step_by(2)).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 4, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp09xktfcp.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    while !lst.is_empty() {\n        res.push(lst.remove(0));\n\
    \        if !lst.is_empty() {\n            res.push(lst.pop().unwrap());\n   \
    \     }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n   \
    \ let mut inner: Vec<isize> = lst.clone();\n    let mut flag = false;\n    let\
    \ mut count = 0;\n    loop {\n        if inner.len() == 0 {\n            break;\n\
    \        }\n        if flag {\n            let min = inner.iter().min().unwrap();\n\
    \            let pos = inner.iter().position(|x| *x == *min).unwrap();\n     \
    \       vec.push(*min);\n            inner.remove(pos);\n            flag = false;\n\
    \        } else {\n            let max = inner.iter().max().unwrap();\n      \
    \      let pos = inner.iter().position(|x| *x == *max).unwrap();\n           \
    \ vec.push(*max);\n            inner.remove(pos);\n            flag = true;\n\
    \        }\n        count += 1;\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp0ncifqzm.rs:40:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::with_capacity(lst.len());\n\
    \    let mut lst = lst;\n    while !lst.is_empty() {\n        if let Some(min)\
    \ = lst.iter().min() {\n            res.push(*min);\n            lst.remove_item(min);\n\
    \        }\n        if let Some(max) = lst.iter().max() {\n            res.push(*max);\n\
    \            lst.remove_item(max);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp3hpwo8jf.rs:17:17\n   |\n17 |          \
    \   lst.remove_item(min);\n   |                 ^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `remove`\n\nerror[E0599]: no method\
    \ named `remove_item` found for struct `Vec<isize>` in the current scope\n  -->\
    \ /tmp/tmp3hpwo8jf.rs:21:17\n   |\n21 |             lst.remove_item(max);\n  \
    \ |                 ^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `remove`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    let mut rlst = Vec::new();\n\
    \    while !lst.is_empty() {\n        rlst.push(lst.remove(0));\n        if !lst.is_empty()\
    \ {\n            rlst.push(lst.pop().unwrap());\n        }\n    }\n    rlst\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 1, 6, 9, 7, 8]`,\n right: `[1, 9, 5, 8, 6, 7]`', /tmp/tmpd4vsczb1.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut ind = 0;\n    let len = lst.len();\n    while\
    \ ind < len {\n        res.push(lst[ind]);\n        if ind < len - 1 {\n     \
    \       res.push(lst[len - ind - 1]);\n        }\n        ind += 1;\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 2, 3, 3, 2, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp3soho5qv.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted = lst.clone();\n    sorted.sort();\n\
    \    let mut result = Vec::new();\n    let mut sign = 1;\n    let mut i = 0;\n\
    \    while i < sorted.len() {\n        result.push(sorted[i]);\n        i += sign;\n\
    \        sign *= -1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp5mz4c8wi.rs:20:17\n\
    \   |\n20 |         sign *= -1;\n   |                 ^^ the trait `Neg` is not\
    \ implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4c8bpdpz.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpglh1fnsx.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    fn str_sort_helper(lst: Vec<isize>, res: Vec<isize>)\
    \ -> Vec<isize> {\n        let mut lst = lst;\n        if lst.len() == 0 {\n \
    \           return res;\n        }\n        let lst_min = lst.iter().cloned().min().unwrap();\n\
    \        let lst_max = lst.iter().cloned().max().unwrap();\n        lst.retain(|x|\
    \ *x != lst_min && *x != lst_max);\n        let mut res = res;\n        res.push(lst_min);\n\
    \        res.push(lst_max);\n        str_sort_helper(lst, res)\n    }\n    str_sort_helper(lst,\
    \ vec![])\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 9, 6, 8, 7, 7]`,\n right: `[5, 9, 6, 8, 7]`', /tmp/tmpw_g6r9k_.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut x = lst;\n    x.sort();\n    x.iter().rev().zip(x.iter()).flat_map(|(a,\
    \ b)| vec![a, b]).collect()\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpa4aflz3x.rs:14:64\n     |\n\
    14   |     x.iter().rev().zip(x.iter()).flat_map(|(a, b)| vec![a, b]).collect()\n\
    \     |                                                                ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut result = Vec::new();\n    let mut turn = 0;\n    while !lst.is_empty() {\n\
    \        result.push(lst.remove(turn));\n        turn = 1 - turn;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 1) should be < len (is
    1)'', /tmp/tmpglolytqf.rs:17:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted = lst.clone();\n    sorted.sort();\n\
    \    let mut res = Vec::new();\n    while !sorted.is_empty() {\n        res.push(sorted.remove(0));\n\
    \        if !sorted.is_empty() {\n            res.push(sorted.pop().unwrap());\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted = lst.clone();\n    sorted.sort();\n\
    \    let mut result = Vec::with_capacity(lst.len());\n    let mut left = 0;\n\
    \    let mut right = sorted.len() - 1;\n    while left <= right {\n        result.push(sorted[left]);\n\
    \        left += 1;\n        if left <= right {\n            result.push(sorted[right]);\n\
    \            right -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpow_2rrjy.rs:16:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // find the minimum and maximum values\n  \
    \  let mut lst = lst;\n    lst.sort();\n    lst.reverse();\n    let lst_len =\
    \ lst.len();\n    let mut sorted_lst = Vec::new();\n    let mut idx = 0;\n   \
    \ while sorted_lst.len() < lst_len {\n        sorted_lst.push(lst[idx]);\n   \
    \     idx += 1;\n        if idx < lst_len {\n            sorted_lst.push(lst[lst_len\
    \ - idx]);\n        }\n    }\n    sorted_lst\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp5w_id7r3.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = lst;\n    v.sort();\n    let mut\
    \ res = Vec::new();\n    let (mut i, mut j) = (0, v.len() - 1);\n    loop {\n\
    \        if j < i {\n            break;\n        }\n        res.push(v[i]);\n\
    \        if j != i {\n            res.push(v[j]);\n        }\n        i += 1;\n\
    \        j -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpxaa6q4te.rs:15:30

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut nlst = lst.clone();\n    nlst.sort();\n\
    \    let mut rlst = Vec::new();\n    let mut min_max = (0, nlst.len() - 1);\n\
    \    loop {\n        rlst.push(nlst[min_max.0]);\n        if min_max.0 == min_max.1\
    \ {\n            break;\n        }\n        rlst.push(nlst[min_max.1]);\n    \
    \    min_max = (min_max.0 + 1, min_max.1 - 1);\n    }\n    rlst\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpe5me2lu7.rs:22:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut out = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() - 1;\n\
    \    while i <= j {\n        out.push(lst[i]);\n        i += 1;\n        if i\
    \ <= j {\n            out.push(lst[j]);\n            j -= 1;\n        }\n    }\n\
    \    out\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpje6r1a6u.rs:16:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> = vec![];\n    let\
    \ mut lst = lst;\n    while !lst.is_empty() {\n        let cur_min = lst.iter().cloned().min().unwrap();\n\
    \        let index = lst.iter().position(|&x| x == cur_min).unwrap();\n      \
    \  ret.push(cur_min);\n        lst.remove(index);\n        if !lst.is_empty()\
    \ {\n            let cur_max = lst.iter().cloned().max().unwrap();\n         \
    \   let index = lst.iter().position(|&x| x == cur_max).unwrap();\n           \
    \ ret.push(cur_max);\n            lst.remove(index);\n        }\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = lst;\n    v.sort();\n    v.reverse();\n\
    \    v\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpx8tx8e27.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut s_lst = lst.len() / 2 + lst.len() % 2;\n\
    \    let mut e_lst = lst.len() - 1;\n    for _ in 0..lst.len() {\n        res.push(lst[s_lst]);\n\
    \        if s_lst == 0 {\n            s_lst = 1;\n        } else {\n         \
    \   s_lst -= 1;\n        }\n        res.push(lst[e_lst]);\n        e_lst -= 1;\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpxvvcvb_q.rs:25:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    fn next_odd(lst: &Vec<isize>, i: usize) ->\
    \ usize {\n        for i in i..lst.len() {\n            if i % 2 == 1 {\n    \
    \            return i;\n            }\n        }\n        return lst.len();\n\
    \    }\n\n    fn next_even(lst: &Vec<isize>, i: usize) -> usize {\n        for\
    \ i in i..lst.len() {\n            if i % 2 == 0 {\n                return i;\n\
    \            }\n        }\n        return lst.len();\n    }\n\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut res = Vec::new();\n    let mut i = 0;\n\
    \    loop {\n        i = next_odd(&lst, i);\n        if i == lst.len() {\n   \
    \         break;\n        }\n        res.push(lst[i]);\n        i += 1;\n    \
    \    i = next_even(&lst, i);\n        if i == lst.len() {\n            break;\n\
    \        }\n        res.push(lst[i]);\n        i += 1;\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp61m8tvhy.rs:53:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_lst = lst.clone();\n    sorted_lst.sort();\n\
    \    let mut odd = true;\n    let mut res = Vec::new();\n    while !sorted_lst.is_empty()\
    \ {\n        if odd {\n            res.push(sorted_lst.remove(0));\n        }\
    \ else {\n            res.push(sorted_lst.pop().unwrap());\n        }\n      \
    \  odd = !odd;\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    while !lst.is_empty() {\n        res.push(lst.remove(0));\n\
    \        if !lst.is_empty() {\n            res.push(lst.pop().unwrap());\n   \
    \     }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::with_capacity(lst.len());\n\
    \    let mut lst = lst;\n    while !lst.is_empty() {\n        let min = lst.iter().min().unwrap();\n\
    \        res.push(*min);\n        lst.remove_item(min);\n        if !lst.is_empty()\
    \ {\n            let max = lst.iter().max().unwrap();\n            res.push(*max);\n\
    \            lst.remove_item(max);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp8cza9fa0.rs:17:13\n   |\n17 |         lst.remove_item(min);\n\
    \   |             ^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `remove`\n\nerror[E0599]: no method named `remove_item` found for struct\
    \ `Vec<isize>` in the current scope\n  --> /tmp/tmp8cza9fa0.rs:21:17\n   |\n21\
    \ |             lst.remove_item(max);\n   |                 ^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `remove`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst_new = lst.clone();\n    lst_new.sort();\n\
    \    let mut lst_reverse = lst_new.clone();\n    lst_reverse.reverse();\n    lst_new.extend(lst_reverse);\n\
    \    lst_new\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpikpxl17a.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut lst_tmp = Vec::new();\n    while lst.len() > 0 {\n        lst_tmp.push(lst.remove(0));\n\
    \        if lst.len() > 0 {\n            lst_tmp.push(lst.pop().unwrap());\n \
    \       }\n    }\n    lst_tmp\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    let mut res = Vec::new();\n\
    \    while !lst.is_empty() {\n        let min = lst.iter().min().unwrap();\n \
    \       let max = lst.iter().max().unwrap();\n        let min_index = lst.iter().position(|&x|\
    \ x == *min).unwrap();\n        let max_index = lst.iter().position(|&x| x ==\
    \ *max).unwrap();\n        res.push(lst.remove(min_index));\n        if !lst.is_empty()\
    \ {\n            res.push(lst.remove(max_index - 1));\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 8, 5, 9, 6, 7]`,\n right: `[1, 9, 5, 8, 6, 7]`', /tmp/tmpzzt1ypm4.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4c8bpdpz.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!(\"strange_sort_list({:?})\"\
    , lst)\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: strange_sort_list([1, 2,
    3, 4])'', /tmp/tmp5xjslhux.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    let mut result = Vec::new();\n\
    \    while lst.len() > 0 {\n        let min = lst.iter().min().unwrap();\n   \
    \     result.push(*min);\n        lst.remove_item(min);\n        if lst.len()\
    \ > 0 {\n            let max = lst.iter().max().unwrap();\n            result.push(*max);\n\
    \            lst.remove_item(max);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp2kqobhi0.rs:17:13\n   |\n17 |         lst.remove_item(min);\n\
    \   |             ^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `remove`\n\nerror[E0599]: no method named `remove_item` found for struct\
    \ `Vec<isize>` in the current scope\n  --> /tmp/tmp2kqobhi0.rs:21:17\n   |\n21\
    \ |             lst.remove_item(max);\n   |                 ^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `remove`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut lst = lst;\n    lst.sort();\n    let mut res = vec![lst[0]];\n\
    \    let mut lst = lst[1..].to_vec();\n    while lst.len() > 0 {\n        let\
    \ elem = lst.pop().unwrap();\n        res.push(elem);\n        if lst.len() >\
    \ 0 {\n            let elem = lst.remove(0);\n            res.push(elem);\n  \
    \      }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.reverse();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpl5ruz1hx.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    lst\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpxgzjzgcf.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    let mut result = Vec::new();\n\
    \    while !lst.is_empty() {\n        result.push(lst.remove(0));\n        result.push(lst.pop().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpqzyraj00.rs:16:31

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpglh1fnsx.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut ret = vec![];\n    let mut lst_2 = lst.clone();\n    let mut\
    \ sorted = false;\n    let mut max_index = 0;\n    let mut min_index = 0;\n  \
    \  while !sorted {\n        if lst_2.len() == 1 {\n            sorted = true;\n\
    \            ret.push(lst_2[0]);\n        } else {\n            max_index = 0;\n\
    \            min_index = 0;\n            for i in 0..lst_2.len() {\n         \
    \       if lst_2[i] > lst_2[max_index] {\n                    max_index = i;\n\
    \                }\n                if lst_2[i] < lst_2[min_index] {\n       \
    \             min_index = i;\n                }\n            }\n            if\
    \ max_index < min_index {\n                ret.push(lst_2[max_index]);\n     \
    \           lst_2.remove(max_index);\n                ret.push(lst_2[min_index\
    \ - 1]);\n                lst_2.remove(min_index - 1);\n            } else {\n\
    \                ret.push(lst_2[min_index]);\n                lst_2.remove(min_index);\n\
    \                ret.push(lst_2[max_index - 1]);\n                lst_2.remove(max_index\
    \ - 1);\n            }\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpaz4v0gfb.rs:41:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::with_capacity(lst.len());\n    while !lst.is_empty() {\n    \
    \    res.push(lst.remove(0));\n        if !lst.is_empty() {\n            res.push(lst.pop().unwrap());\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010582
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut result = Vec::new();\n    let mut left = 0;\n    let mut right = lst.len()\
    \ - 1;\n    loop {\n        if left < right {\n            result.push(lst[left]);\n\
    \            result.push(lst[right]);\n            left += 1;\n            right\
    \ -= 1;\n        } else if left == right {\n            result.push(lst[left]);\n\
    \            break;\n        } else {\n            break;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp3blm3c81.rs:16:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst_clone = lst.clone();\n    lst_clone.sort();\n\
    \    let mut result = Vec::new();\n    let mut idx = 0;\n    let mut start = 0;\n\
    \    while idx < lst_clone.len() {\n        if idx % 2 == 0 {\n            result.push(lst_clone[start]);\n\
    \            start += 1;\n        } else {\n            result.push(lst_clone[lst_clone.len()\
    \ - 1 - start]);\n        }\n        idx += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 2, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpxoi5rtty.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_heap\
    \ = BinaryHeap::new();\n    let mut min_heap = BinaryHeap::new();\n    for num\
    \ in lst {\n        if num > 0 {\n            max_heap.push(num);\n        } else\
    \ {\n            min_heap.push(num);\n        }\n    }\n    let mut count = 0;\n\
    \    while !max_heap.is_empty() || !min_heap.is_empty() {\n        if count %\
    \ 2 == 0 {\n            if let Some(min) = min_heap.pop() {\n                result.push(min);\n\
    \            }\n        } else {\n            if let Some(max) = max_heap.pop()\
    \ {\n                result.push(max);\n            }\n        }\n        count\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n\
    \  --> /tmp/tmpvoa74rml.rs:13:24\n   |\n13 |     let mut max_heap = BinaryHeap::new();\n\
    \   |                        ^^^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::BinaryHeap;\n   |\n\n\
    error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n  --> /tmp/tmpvoa74rml.rs:14:24\n\
    \   |\n14 |     let mut min_heap = BinaryHeap::new();\n   |                  \
    \      ^^^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::BinaryHeap;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    let mut left\
    \ = lst.clone();\n    let mut max = left.iter().max().unwrap();\n    let mut min\
    \ = left.iter().min().unwrap();\n    while left.len() > 0 {\n        result.push(*min);\n\
    \        left.retain(|x| x != min);\n        if left.len() == 0 {\n          \
    \  break;\n        }\n        result.push(*max);\n        left.retain(|x| x !=\
    \ max);\n        max = left.iter().max().unwrap();\n        min = left.iter().min().unwrap();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `left` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpjujcb6vk.rs:18:9\n   |\n14 |     let mut max = left.iter().max().unwrap();\n\
    \   |                   ----------- immutable borrow occurs here\n...\n18 |  \
    \       left.retain(|x| x != min);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ mutable\
    \ borrow occurs here\n...\n22 |         result.push(*max);\n   |             \
    \        ---- immutable borrow later used here\n\nerror[E0502]: cannot borrow\
    \ `left` as mutable because it is also borrowed as immutable\n  --> /tmp/tmpjujcb6vk.rs:23:9\n\
    \   |\n14 |     let mut max = left.iter().max().unwrap();\n   |              \
    \     ----------- immutable borrow occurs here\n...\n23 |         left.retain(|x|\
    \ x != max);\n   |         ^^^^^------^^^^^^^^^^^^^^\n   |         |    |\n  \
    \ |         |    immutable borrow later used by call\n   |         mutable borrow\
    \ occurs here\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    lst\n}\n\nfn main() {\n    let candidate =\
    \ strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpxgzjzgcf.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    let mut result = Vec::new();\n\
    \    let mut max = true;\n    while lst.len() > 0 {\n        if max {\n      \
    \      let m = lst.iter().max().unwrap();\n            result.push(*m);\n    \
    \        lst.remove_item(m);\n        } else {\n            let m = lst.iter().min().unwrap();\n\
    \            result.push(*m);\n            lst.remove_item(m);\n        }\n  \
    \      max = !max;\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpd9kis9my.rs:19:17\n   |\n19 |          \
    \   lst.remove_item(m);\n   |                 ^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `remove`\n\nerror[E0599]: no method named `remove_item`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpd9kis9my.rs:23:17\n\
    \   |\n23 |             lst.remove_item(m);\n   |                 ^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `remove`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut lst = lst;\n    lst.sort();\n    let mut min = lst.remove(0);\n\
    \    let mut max = lst.pop().unwrap();\n    let mut result = vec![min, max];\n\
    \    while lst.len() > 0 {\n        if lst.len() == 1 {\n            result.push(lst.remove(0));\n\
    \            break;\n        }\n        min = lst.remove(0);\n        max = lst.pop().unwrap();\n\
    \        result.push(min);\n        result.push(max);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmptie9emw_.rs:18:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut min_indices = find_min_indices(&lst);\n\
    \    let mut max_indices = find_max_indices(&lst);\n    let mut ret = Vec::new();\n\
    \    while !min_indices.is_empty() || !max_indices.is_empty() {\n        if !min_indices.is_empty()\
    \ {\n            ret.push(lst[min_indices.pop().unwrap()]);\n        }\n     \
    \   if !max_indices.is_empty() {\n            ret.push(lst[max_indices.pop().unwrap()]);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `find_min_indices` in this scope\n \
    \ --> /tmp/tmpfgfxcec3.rs:12:27\n   |\n12 |     let mut min_indices = find_min_indices(&lst);\n\
    \   |                           ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `find_max_indices` in this scope\n  --> /tmp/tmpfgfxcec3.rs:13:27\n\
    \   |\n13 |     let mut max_indices = find_max_indices(&lst);\n   |          \
    \                 ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() < 2 {\n        return lst;\n \
    \   }\n    let mut sorted = lst.clone();\n    sorted.sort();\n    let (l, r) =\
    \ sorted.split_at(sorted.len() / 2);\n    let mut result = Vec::new();\n    for\
    \ i in 0..l.len() {\n        result.push(l[i]);\n        result.push(r[r.len()\
    \ - 1 - i]);\n    }\n    if sorted.len() % 2 == 1 {\n        result.push(sorted[sorted.len()\
    \ / 2]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut evens = lst.clone();\n    let mut odds\
    \ = lst.clone();\n    let mut new_vec = Vec::new();\n    evens.sort();\n    odds.sort();\n\
    \    odds.reverse();\n    for i in 0..lst.len() {\n        if i % 2 == 0 {\n \
    \           new_vec.push(evens[i]);\n        } else {\n            new_vec.push(odds[i]);\n\
    \        }\n    }\n    new_vec\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmprhxqmmcg.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!(\"strange_sort_list({:?})\"\
    , lst)\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: strange_sort_list([1, 2,
    3, 4])'', /tmp/tmp5xjslhux.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() <= 1 {\n        return lst;\n\
    \    }\n    let mut lst = lst;\n    lst.sort();\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    let mut j = lst.len() - 1;\n    loop {\n        if i\
    \ == j {\n            result.push(lst[i]);\n            break;\n        }\n  \
    \      result.push(lst[i]);\n        result.push(lst[j]);\n        i += 1;\n \
    \       j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpxfptqd2e.rs:28:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let mut\
    \ sorted_list = lst.clone();\n    sorted_list.sort();\n    while !sorted_list.is_empty()\
    \ {\n        new_list.push(sorted_list.remove(0));\n        if sorted_list.is_empty()\
    \ {\n            break;\n        }\n        new_list.push(sorted_list.pop().unwrap());\n\
    \    }\n    new_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.reverse();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpl5ruz1hx.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted = Vec::new();\n    let mut min\
    \ = std::isize::MAX;\n    let mut max = std::isize::MIN;\n    let mut min_index\
    \ = 0;\n    let mut max_index = 0;\n    let mut i = 0;\n    while i < lst.len()\
    \ {\n        min = std::isize::MAX;\n        max = std::isize::MIN;\n        min_index\
    \ = 0;\n        max_index = 0;\n        let mut iter = lst.iter().enumerate();\n\
    \        while let Some((j, val)) = iter.next() {\n            if *val > max &&\
    \ *val < max_isize() {\n                max = *val;\n                max_index\
    \ = j;\n            }\n            if *val < min && *val > min_isize() {\n   \
    \             min = *val;\n                min_index = j;\n            }\n   \
    \     }\n        if i % 2 == 0 {\n            sorted.push(min);\n            lst[min_index]\
    \ = max_isize();\n        } else {\n            sorted.push(max);\n          \
    \  lst[max_index] = min_isize();\n        }\n        i += 1;\n    }\n    sorted\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max_isize` in this scope\n  --> /tmp/tmpkzlql9qc.rs:25:37\n\
    \   |\n25 |             if *val > max && *val < max_isize() {\n   |          \
    \                           ^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `min_isize` in this scope\n  --> /tmp/tmpkzlql9qc.rs:29:37\n\
    \   |\n29 |             if *val < min && *val > min_isize() {\n   |          \
    \                           ^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `max_isize` in this scope\n  --> /tmp/tmpkzlql9qc.rs:36:30\n\
    \   |\n36 |             lst[min_index] = max_isize();\n   |                  \
    \            ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `min_isize` in this scope\n  --> /tmp/tmpkzlql9qc.rs:39:30\n   |\n39 |     \
    \        lst[max_index] = min_isize();\n   |                              ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut tmp\
    \ = lst.clone();\n    while !tmp.is_empty() {\n        let min = tmp.iter().min().unwrap();\n\
    \        let max = tmp.iter().max().unwrap();\n        if *min == *max {\n   \
    \         res.push(*min);\n            tmp.retain(|x| x != min);\n        } else\
    \ {\n            res.push(*min);\n            res.push(*max);\n            tmp.retain(|x|\
    \ x != min && x != max);\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `tmp` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp8m0yybch.rs:19:13\n   |\n15 |         let min =\
    \ tmp.iter().min().unwrap();\n   |                   ---------- immutable borrow\
    \ occurs here\n...\n19 |             tmp.retain(|x| x != min);\n   |         \
    \    ^^^^------^^^^^^^^^^^^^^\n   |             |   |\n   |             |   immutable\
    \ borrow later used by call\n   |             mutable borrow occurs here\n\nerror[E0502]:\
    \ cannot borrow `tmp` as mutable because it is also borrowed as immutable\n  -->\
    \ /tmp/tmp8m0yybch.rs:23:13\n   |\n15 |         let min = tmp.iter().min().unwrap();\n\
    \   |                   ---------- immutable borrow occurs here\n...\n23 |   \
    \          tmp.retain(|x| x != min && x != max);\n   |             ^^^^------^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |   |\n   |             |   immutable borrow later used by call\n\
    \   |             mutable borrow occurs here\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // TODO: Complete the function below.\n   \
    \ vec![]\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp56padbca.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut sorted_lst = Vec::new();\n    let mut min_idx = 0;\n    let mut max_idx\
    \ = lst.len() - 1;\n    while min_idx <= max_idx {\n        sorted_lst.push(lst[min_idx]);\n\
    \        min_idx += 1;\n        if min_idx > max_idx {\n            break;\n \
    \       }\n        sorted_lst.push(lst[max_idx]);\n        max_idx -= 1;\n   \
    \ }\n    sorted_lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpasja6jv3.rs:16:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() - 1;\n\
    \    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n        if i\
    \ <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpcm0dpzxt.rs:16:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823965
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut list = lst;\n    list.sort();\n   \
    \ let mut res = Vec::with_capacity(list.len());\n    let mut i = 0;\n    while\
    \ i < list.len() {\n        res.push(list[i]);\n        i += 1;\n        if i\
    \ >= list.len() {\n            break;\n        }\n        res.push(list[list.len()\
    \ - i - 1]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 2, 2, 3, 1, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpxifez7qf.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut last_is_max = false;\n    while !lst.is_empty()\
    \ {\n        if last_is_max {\n            result.push(lst.remove(0));\n     \
    \       last_is_max = false;\n        } else {\n            result.push(lst.pop().unwrap());\n\
    \            last_is_max = true;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpw5jtj8e9.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    if\
    \ lst.len() == 0 {\n        return lst;\n    }\n    let mut temp = Vec::new();\n\
    \    let mut start = 0;\n    let mut end = lst.len() - 1;\n    while start < end\
    \ {\n        temp.push(lst[start]);\n        temp.push(lst[end]);\n        start\
    \ += 1;\n        end -= 1;\n    }\n    if start == end {\n        temp.push(lst[start]);\n\
    \    }\n    temp\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!(\"strange_sort_list({:?})\"\
    , lst)\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: strange_sort_list([1, 2,
    3, 4])'', /tmp/tmp5xjslhux.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut sorted_list = Vec::new();\n    while lst.len() > 0 {\n        sorted_list.push(lst.remove(0));\n\
    \        if lst.len() > 0 {\n            sorted_list.push(lst.pop().unwrap());\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut min_i = 0;\n    let mut max_i = lst.len()\
    \ - 1;\n    while min_i <= max_i {\n        res.push(lst[min_i]);\n        min_i\
    \ += 1;\n        if min_i <= max_i {\n            res.push(lst[max_i]);\n    \
    \        max_i -= 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpipj0a05d.rs:16:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut list = lst;\n    list.sort();\n   \
    \ let mut result = Vec::with_capacity(list.len());\n    let mut index = 0;\n \
    \   let mut step = 1;\n    while !list.is_empty() {\n        let value = list.remove(index);\n\
    \        result.push(value);\n        index = (index + step) % list.len();\n \
    \       step += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmp08gy38kk.rs:20:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst_iter = lst.into_iter();\n    let\
    \ mut new_lst = Vec::new();\n    let mut higher_lst = Vec::new();\n    let mut\
    \ lower_lst = Vec::new();\n    while let Some(number) = lst_iter.next() {\n  \
    \      higher_lst.push(number);\n    }\n    while let Some(number) = higher_lst.pop()\
    \ {\n        new_lst.push(number);\n        lower_lst.push(number);\n    }\n \
    \   while let Some(number) = lower_lst.pop() {\n        new_lst.push(number);\n\
    \    }\n    new_lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1, 1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpzk4az16z.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::with_capacity(lst.len());\n\
    \    let mut lst = lst;\n    while lst.len() > 0 {\n        let min = lst.iter().min().unwrap();\n\
    \        res.push(*min);\n        lst.remove_item(min);\n        if lst.len()\
    \ > 0 {\n            let max = lst.iter().max().unwrap();\n            res.push(*max);\n\
    \            lst.remove_item(max);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpumkt2sop.rs:17:13\n   |\n17 |         lst.remove_item(min);\n\
    \   |             ^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `remove`\n\nerror[E0599]: no method named `remove_item` found for struct\
    \ `Vec<isize>` in the current scope\n  --> /tmp/tmpumkt2sop.rs:21:17\n   |\n21\
    \ |             lst.remove_item(max);\n   |                 ^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `remove`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst_min: Vec<isize> = lst.clone();\n\
    \    let mut lst_max: Vec<isize> = lst.clone();\n    lst_min.sort();\n    lst_max.sort();\n\
    \    lst_max.reverse();\n    let mut lst_ans: Vec<isize> = Vec::new();\n    while\
    \ !lst_min.is_empty() && !lst_max.is_empty() {\n        let a = lst_min.remove(0);\n\
    \        let b = lst_max.remove(0);\n        lst_ans.push(a);\n        lst_ans.push(b);\n\
    \    }\n    if !lst_min.is_empty() {\n        lst_ans.push(lst_min.remove(0));\n\
    \    }\n    lst_ans\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 2, 3, 3, 2, 4, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp_rebh5no.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.reverse();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpl5ruz1hx.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut lst\
    \ = lst;\n    while lst.len() > 0 {\n        res.push(lst.remove(0));\n      \
    \  if lst.len() > 0 {\n            res.push(lst.pop().unwrap());\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 1, 6, 9, 7, 8]`,\n right: `[1, 9, 5, 8, 6, 7]`', /tmp/tmpvy830xzz.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut sorted_list = Vec::new();\n    let mut min_index = 0;\n    let mut max_index\
    \ = lst.len() - 1;\n    while min_index <= max_index {\n        sorted_list.push(lst[min_index]);\n\
    \        min_index += 1;\n        if min_index <= max_index {\n            sorted_list.push(lst[max_index]);\n\
    \            max_index -= 1;\n        }\n    }\n    sorted_list\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpv_sp4a1w.rs:16:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_list = Vec::with_capacity(lst.len());\n\
    \    let mut copy_list = lst.clone();\n    copy_list.sort();\n    while copy_list.len()\
    \ != 0 {\n        new_list.push(copy_list.pop().unwrap());\n        if copy_list.len()\
    \ != 0 {\n            new_list.push(copy_list.remove(0));\n        }\n    }\n\
    \    new_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpq0j5rjd3.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut ret = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() - 1;\n\
    \    loop {\n        if i == j {\n            ret.push(lst[i]);\n            break;\n\
    \        }\n        ret.push(lst[i]);\n        ret.push(lst[j]);\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpcs8gocnp.rs:25:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ (mut min, mut max) = (0, lst.len() - 1);\n    let mut ans = Vec::new();\n  \
    \  while min <= max {\n        ans.push(lst[min]);\n        if min != max {\n\
    \            ans.push(lst[max]);\n        }\n        min += 1;\n        max -=\
    \ 1;\n    }\n    ans\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_hf3xsg1.rs:14:34

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut out = Vec::new();\n    let mut lst\
    \ = lst;\n    loop {\n        if lst.len() > 0 {\n            out.push(lst.iter().min().unwrap().clone());\n\
    \            lst.remove(lst.iter().position(|&x| x == out[out.len() - 1]).unwrap());\n\
    \        } else {\n            break;\n        }\n        if lst.len() > 0 {\n\
    \            out.push(lst.iter().max().unwrap().clone());\n            lst.remove(lst.iter().position(|&x|\
    \ x == out[out.len() - 1]).unwrap());\n        } else {\n            break;\n\
    \        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut sorted\
    \ = lst.clone();\n    sorted.sort();\n    let mut low = 0;\n    let mut high =\
    \ sorted.len() - 1;\n    while low <= high {\n        res.push(sorted[low]);\n\
    \        low += 1;\n        if low <= high {\n            res.push(sorted[high]);\n\
    \            high -= 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]),\
    \ vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9,\
    \ 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6,\
    \ 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmptaokl4qa.rs:16:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut result = Vec::new();\n    while lst.len() > 0 {\n        result.push(lst.remove(0));\n\
    \        if lst.len() > 0 {\n            result.push(lst.pop().unwrap());\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut i = 0;\n    while lst.len() > 0 {\n     \
    \   if i % 2 == 0 {\n            res.push(lst.remove(0));\n        } else {\n\
    \            res.push(lst.pop().unwrap());\n        }\n        i += 1;\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    while !lst.is_empty() {\n        res.push(lst.remove(0));\n\
    \        if !lst.is_empty() {\n            res.push(lst.pop().unwrap());\n   \
    \     }\n    }\n    res\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010583
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut curr = lst.len() - 1;\n    while !lst.is_empty()\
    \ {\n        res.push(lst.pop().unwrap());\n        if curr > 0 {\n          \
    \  res.push(lst.remove(0));\n            curr -= 1;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpms8hchao.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let len = lst.len();\n    if len < 2 {\n  \
    \      return lst;\n    }\n    let mut rv = vec![];\n    let mut lst = lst;\n\
    \    lst.sort();\n    let mut idx = 0;\n    let mut idx_to_rem = 1;\n    while\
    \ rv.len() < len {\n        rv.push(lst[idx]);\n        lst.remove(idx);\n   \
    \     if lst.len() > 0 {\n            idx = lst.len() - idx_to_rem;\n        \
    \    rv.push(lst[idx]);\n            lst.remove(idx);\n            idx_to_rem\
    \ += 1;\n        }\n    }\n    rv\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 2 but the
    index is 2'', /tmp/tmp4hmlkga3.rs:22:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    // if the list is empty or contains one element,\n\
    \    // return the list itself\n    if lst.len() < 2 {\n        return lst;\n\
    \    }\n\n    // sort the list\n    let mut lst = lst;\n    lst.sort();\n\n  \
    \  // two indices of the list: one start, one end\n    let mut start = 0;\n  \
    \  let mut end = lst.len() - 1;\n\n    // vector with the required order\n   \
    \ let mut res = Vec::new();\n\n    // while the start is less than end,\n    //\
    \ collect elements in the required order\n    while start < end {\n        res.push(lst[start]);\n\
    \        res.push(lst[end]);\n        start += 1;\n        end -= 1;\n    }\n\n\
    \    // if the number of elements is odd,\n    // collect the last element\n \
    \   if start == end {\n        res.push(lst[start]);\n    }\n\n    res\n}\n\n\
    fn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    if lst.len() == 0 {\n        return lst;\n\
    \    }\n    let mut v = lst.clone();\n    v.sort();\n    let mut res = Vec::with_capacity(lst.len());\n\
    \    while !v.is_empty() {\n        let min = v.remove(0);\n        let max =\
    \ v.pop();\n        if let Some(m) = max {\n            res.push(m);\n       \
    \ }\n        res.push(min);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 3, 2]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpmlv_w2iq.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut output = Vec::new();\n    let mut li = 0;\n    let mut hi = lst.len() -\
    \ 1;\n    while li <= hi {\n        output.push(lst[li]);\n        li += 1;\n\
    \        if li <= hi {\n            output.push(lst[hi]);\n            hi -= 1;\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpaolvjww1.rs:16:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010584
- exit_code: 101
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.sort();\n    lst.reverse();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpl5ruz1hx.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut input = lst;\n    input.sort();\n \
    \   let mut output = Vec::new();\n    let mut index = 0;\n    let mut direction\
    \ = 1;\n    for _ in 0..input.len() {\n        output.push(input[index]);\n  \
    \      index += direction;\n        if index == 0 || index == input.len() - 1\
    \ {\n            direction *= -1;\n        }\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp6nz1jfqk.rs:21:26\n\
    \   |\n21 |             direction *= -1;\n   |                          ^^ the\
    \ trait `Neg` is not implemented for `usize`\n   |\n   = help: the following other\
    \ types implement trait `Neg`:\n             &f32\n             &f64\n       \
    \      &i128\n             &i16\n             &i32\n             &i64\n      \
    \       &i8\n             &isize\n           and 8 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 0
  program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut lst\
    \ = lst;\n    while lst.len() > 0 {\n        let x = lst.iter().min().unwrap();\n\
    \        let index = lst.iter().position(|&r| r == *x).unwrap();\n        res.push(lst.remove(index));\n\
    \        if lst.len() > 0 {\n            let x = lst.iter().max().unwrap();\n\
    \            let index = lst.iter().position(|&r| r == *x).unwrap();\n       \
    \     res.push(lst.remove(index));\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010584
