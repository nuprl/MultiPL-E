name: HumanEval_57_monotonic
language: rs
prompt: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
  /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4,\
  \ 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
  \ Vec<isize>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
  \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
  \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n \
  \   assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
  \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
completions: ['    l.windows(2).all(|x| x[0] <= x[1]) || l.windows(2).all(|x| x[0]
    >= x[1])', "    let mut increasing = true;\n    let mut decreasing = true;\n \
    \   for (i, j) in l.iter().zip(l.iter().skip(1)) {\n        if i < j {\n     \
    \       decreasing = false;\n        } else if i > j {\n            increasing\
    \ = false;\n        }\n    }\n    increasing || decreasing", "    // todo\n  \
    \  let mut i = 1;\n    let mut sign = 0;\n    for i in 1..l.len() {\n        let\
    \ current_sign = (l[i] - l[i - 1]).signum();\n        if current_sign == 0 {\n\
    \            i += 1;\n            continue;\n        }\n        if sign == 0 {\n\
    \            sign = current_sign;\n        } else if sign * current_sign < 0 {\n\
    \            return false;\n        }\n    }\n    true", "    let mut is_decreasing\
    \ = false;\n    let mut is_increasing = false;\n    let mut last_value = l[0];\n\
    \    for i in 1..l.len() {\n        if l[i] < last_value {\n            is_decreasing\
    \ = true;\n        } else if l[i] > last_value {\n            is_increasing =\
    \ true;\n        }\n        last_value = l[i];\n    }\n    !(is_decreasing &&\
    \ is_increasing)", "    let mut ascending = true;\n    let mut descending = true;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while ascending || descending {\n\
    \        if ascending {\n            if i == l.len() - 1 {\n                break;\n\
    \            }\n            if l[i] > l[i + 1] {\n                ascending =\
    \ false;\n            }\n            i += 1;\n        }\n        if descending\
    \ {\n            if j == l.len() - 1 {\n                break;\n            }\n\
    \            if l[j] < l[j + 1] {\n                descending = false;\n     \
    \       }\n            j += 1;\n        }\n    }\n    ascending || descending",
  "    let mut vec = l.clone();\n    vec.sort();\n    vec == l || vec.iter().rev().collect::<Vec<_>>()\
    \ == l", "    let mut c = None;\n    for v in l {\n        match c {\n       \
    \     None => c = Some(v),\n            Some(b) => {\n                if v < b\
    \ {\n                    return false;\n                }\n                c =\
    \ Some(v);\n            }\n        }\n    }\n    true", "    let mut mono_increasing\
    \ = true;\n    let mut mono_decreasing = true;\n    for i in 1..l.len() {\n  \
    \      if l[i] < l[i - 1] {\n            mono_increasing = false;\n        }\n\
    \        if l[i] > l[i - 1] {\n            mono_decreasing = false;\n        }\n\
    \    }\n    mono_increasing || mono_decreasing", "    // TODO\n    if l.len()\
    \ <= 1 {\n        return true;\n    }\n    let mut list = l.to_vec();\n    let\
    \ mut first = list.remove(0);\n    let mut inc: bool = true;\n    let mut dec:\
    \ bool = true;\n    for i in list {\n        if i < first {\n            inc =\
    \ false;\n        }\n        if i > first {\n            dec = false;\n      \
    \  }\n        first = i;\n    }\n    if inc || dec {\n        return true;\n \
    \   }\n    false", "    let mut b = true;\n    let mut c = 0;\n    let mut d =\
    \ 0;\n    for i in 1..l.len() {\n        if l[i] - l[i - 1] > 0 {\n          \
    \  c += 1;\n        } else if l[i] - l[i - 1] < 0 {\n            d += 1;\n   \
    \     }\n    }\n    if d != 0 && c != 0 {\n        b = false;\n    }\n    b",
  "    let mut up = false;\n    let mut down = false;\n    let mut last = l[0];\n\
    \    for i in l {\n        if i > last {\n            if down {\n            \
    \    return false;\n            }\n            up = true;\n        } else if i\
    \ < last {\n            if up {\n                return false;\n            }\n\
    \            down = true;\n        }\n        last = i;\n    }\n    true", " \
    \   let mut result = true;\n    for i in 1..l.len() {\n        if l[i - 1] > l[i]\
    \ {\n            result = false;\n            break;\n        }\n    }\n    result",
  "    let mut incr = true;\n    let mut decr = true;\n    for i in 1..l.len() {\n\
    \        incr = incr && l[i] >= l[i - 1];\n        decr = decr && l[i] <= l[i\
    \ - 1];\n    }\n    incr || decr", "    let mut prev = None;\n    for current\
    \ in l {\n        if let Some(prev) = prev {\n            if current < prev {\n\
    \                return false;\n            }\n        }\n        prev = Some(current);\n\
    \    }\n    true", "    let mut cur = l[0];\n    let mut asc = true;\n    let\
    \ mut des = true;\n    for &i in l.iter().skip(1) {\n        if i > cur {\n  \
    \          des = false;\n        } else if i < cur {\n            asc = false;\n\
    \        }\n        cur = i;\n    }\n    asc || des", "    if l.len() <= 1 {\n\
    \        return true;\n    }\n    let mut increasing = l[0] < l[1];\n    for i\
    \ in 0..l.len() - 1 {\n        if l[i] == l[i + 1] {\n            return false;\n\
    \        }\n        if increasing {\n            if l[i] > l[i + 1] {\n      \
    \          return false;\n            }\n        } else {\n            if l[i]\
    \ < l[i + 1] {\n                return false;\n            }\n        }\n    }\n\
    \    true", "    for i in 1..l.len() {\n        if (l[i - 1] - l[i]).abs() < l[i\
    \ - 1].abs() {\n            return false;\n        }\n    }\n    true", "    let\
    \ mut i = 0;\n    let mut inc = false;\n    let mut dec = false;\n    for item\
    \ in l {\n        if item < l[i] {\n            inc = true;\n        } else if\
    \ item > l[i] {\n            dec = true;\n        }\n        i += 1;\n    }\n\
    \    inc && dec", "    let mut incr = false;\n    let mut decr = false;\n    for\
    \ i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            incr = true;\n\
    \        } else if l[i] < l[i - 1] {\n            decr = true;\n        }\n  \
    \      if incr && decr {\n            return false;\n        }\n    }\n    true",
  "    match l.len() {\n        0 => false,\n        1 => true,\n        _ => {\n\
    \            let mut increasing = true;\n            let mut decreasing = true;\n\
    \            for i in 1..l.len() {\n                increasing = increasing &&\
    \ l[i] >= l[i - 1];\n                decreasing = decreasing && l[i] <= l[i -\
    \ 1];\n            }\n            increasing || decreasing\n        }\n    }"]
stop_tokens:
- "\n}"
