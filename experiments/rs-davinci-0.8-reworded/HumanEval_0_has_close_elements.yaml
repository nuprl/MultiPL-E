name: HumanEval_0_has_close_elements
language: rs
prompt: "/// Check if in given vector of numbers, are any two numbers closer to each\
  \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0, 3.0],\
  \ 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0, 2.0],\
  \ 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
  \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
  \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),\
  \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n\
  \    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
completions: ["    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    let mut is_close = false;\n    for i in\
    \ 0..sorted_numbers.len() - 1 {\n        if (sorted_numbers[i + 1] - sorted_numbers[i]).abs()\
    \ < threshold {\n            is_close = true;\n            break;\n        }\n\
    \    }\n    is_close", "    let mut sorted = numbers.clone();\n    sorted.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..(sorted.len() - 1) {\n     \
    \   if sorted[i + 1] - sorted[i] < threshold {\n            return true;\n   \
    \     }\n    }\n    false", "    let mut numbers_cloned = numbers.clone();\n \
    \   numbers_cloned.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    for i in 0..numbers_cloned.len()\
    \ - 1 {\n        if numbers_cloned[i + 1] - numbers_cloned[i] < threshold {\n\
    \            return true;\n        }\n    }\n    false", "    for i in 0..numbers.len()\
    \ {\n        for j in (i + 1)..numbers.len() {\n            if (numbers[i] - numbers[j]).abs()\
    \ < threshold {\n                return true;\n            }\n        }\n    }\n\
    \    false", "    let mut numbers_sorted = numbers.clone();\n    numbers_sorted.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..numbers_sorted.len() - 1 {\n\
    \        if numbers_sorted[i + 1] - numbers_sorted[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false", "    for i in 0..numbers.len()\
    \ - 1 {\n        for j in i + 1..numbers.len() {\n            if (numbers[i] -\
    \ numbers[j]).abs() < threshold {\n                return true;\n            }\n\
    \        }\n    }\n    false", "    for (i, x) in numbers.iter().enumerate() {\n\
    \        for y in numbers.iter().skip(i + 1) {\n            if (x - y).abs() <\
    \ threshold {\n                return true;\n            }\n        }\n    }\n\
    \    false", "    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false", "    for (i,\
    \ a) in numbers.iter().enumerate() {\n        for (j, b) in numbers.iter().enumerate()\
    \ {\n            if i == j {\n                continue;\n            }\n     \
    \       if (a - b).abs() < threshold {\n                return true;\n       \
    \     }\n        }\n    }\n    false", "    let mut previous = numbers[0];\n \
    \   for number in numbers.iter().skip(1) {\n        if previous - number.abs()\
    \ < threshold {\n            return true;\n        }\n        previous = *number;\n\
    \    }\n    false", "    for i in 0..numbers.len() - 1 {\n        for j in i +\
    \ 1..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold\
    \ {\n                return true;\n            }\n        }\n    }\n    false",
  "    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n    \
    \        if (numbers[i] - numbers[j]).abs() < threshold {\n                return\
    \ true;\n            }\n        }\n    }\n    false", "    let mut sorted = numbers.clone();\n\
    \    sorted.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let sorted = sorted;\n\
    \    for i in 0..sorted.len() - 1 {\n        if sorted[i + 1] - sorted[i] < threshold\
    \ {\n            return true;\n        }\n    }\n    false", "    for i in 0..numbers.len()\
    \ {\n        for j in i + 1..numbers.len() {\n            if (numbers[i] - numbers[j]).abs()\
    \ < threshold {\n                return true;\n            }\n        }\n    }\n\
    \    false", "    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false", "    numbers.iter().fold(false,\
    \ |acc, x| {\n        if acc {\n            return acc;\n        }\n        numbers.iter().any(|&y|\
    \ (x - y).abs() < threshold)\n    })", "    let mut min_diff = threshold;\n  \
    \  let mut min_diff_el: &f64 = &numbers[0];\n    for n in numbers {\n        if\
    \ let Some(diff) = numbers.iter().map(|a| n - a).filter(|d| d > &0.0).min() {\n\
    \            if diff < min_diff {\n                min_diff = diff;\n        \
    \        min_diff_el = &n;\n            }\n        }\n    }\n    if min_diff >\
    \ threshold {\n        false\n    } else {\n        print!(\"Has two close elements:\
    \ \");\n        for n in numbers {\n            if (n - min_diff_el).abs() < threshold\
    \ {\n                print!(\"{:.2} \", n);\n            }\n        }\n      \
    \  println!(\"({:.2} < {:.2})\", min_diff, threshold);\n        true\n    }",
  "    let mut diffs = vec![];\n    for n in numbers {\n        for m in numbers {\n\
    \            if n == m {\n                continue;\n            }\n         \
    \   diffs.push(f64::abs(n - m));\n        }\n    }\n    for d in diffs {\n   \
    \     if d < threshold {\n            return true;\n        }\n    }\n    false",
  "    if numbers.len() < 2 {\n        return false;\n    }\n\n    let mut sorted_numbers\
    \ = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \n    for i in 0..(sorted_numbers.len() - 1) {\n        if sorted_numbers[i +\
    \ 1] - sorted_numbers[i] < threshold {\n            return true;\n        }\n\
    \    }\n\n    false", "    for i in 0..numbers.len() {\n        for j in (i +\
    \ 1)..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold\
    \ {\n                return true;\n            }\n        }\n    }\n    false"]
stop_tokens:
- "\n}"
