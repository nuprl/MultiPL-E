language: rs
name: HumanEval_31_is_prime
results:
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let prime_vec = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    if prime_vec.contains(&n)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmped7gb8rr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..(n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO: Your code here!\n    if n == 1 { return false;\
    \ }\n    if n < 0 { return false; }\n    let mut prime = true;\n    let mut n_test\
    \ = n - 1;\n    while n_test > 1 {\n        if n % n_test == 0 {\n           \
    \ prime = false;\n            break;\n        }\n        n_test -= 1;\n    }\n\
    \    prime\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpvtp5ksnd.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpvtp5ksnd.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    let mut factor = 2;\n    while factor\
    \ < n {\n        if n % factor == 0 {\n            return false;\n        }\n\
    \        factor += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7h2kak61.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // BEGIN SOLUTION\n    let mut i = 2;\n    while i * i\
    \ <= n {\n        if n % i == 0 {\n            return false;\n        }\n    \
    \    i += 1;\n    }\n    true\n    // END SOLUTION\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplbpgpj0q.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    } else if n % 2\
    \ == 0 || n <= 1 {\n        return false;\n    }\n\n    let mut i = 3;\n    while\
    \ i <= (n as f64).sqrt() as isize {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 2;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // a prime number's only factors are 1 and itself\n  \
    \  // remove even numbers from consideration\n    // you can't divide by a number\
    \ larger than half of itself\n    for i in 3..n/2 {\n        if n % i == 0 {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpju4v0rbh.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7h2kak61.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n < 2\
    \ || n % 2 == 0 {\n        return false;\n    }\n    for i in (3..n).step_by(2)\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp52cdx2n5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    match n {\n        0 => false,\n        1 => false,\n\
    \        _ => {\n            for i in 2..n {\n                if n % i == 0 {\n\
    \                    return false;\n                }\n            }\n       \
    \     true\n        }\n    }\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp52cdx2n5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // the number 1 is not prime\n    if n == 1 {\n      \
    \  return false;\n    }\n\n    // the number 2 is prime\n    if n == 2 {\n   \
    \     return true;\n    }\n\n    // only numbers > 2\n    for i in 2..n {\n  \
    \      if n % i == 0 {\n            return false;\n        }\n    }\n\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // let mut is_prime: bool = true;\n    if n == 1 || n\
    \ == 0 {\n        return false;\n    }\n    for i in 2..n {\n        if n % i\
    \ == 0 {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    let mut is_prime = true;\n    while\
    \ i < n {\n        if n % i == 0 {\n            is_prime = false;\n          \
    \  break;\n        }\n        i += 1;\n    }\n    is_prime\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphurjmftf.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i <= (n as f64).sqrt() as isize\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n        i\
    \ += 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdt6af2lu.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp447zq0yv.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp52cdx2n5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut flag = true;\n    if n == 1 {\n        flag =\
    \ false;\n    }\n    let mut i = 2;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            flag = false;\n            break;\n        }\n        i\
    \ += 1;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut count = 2;\n    let mut is_prime = true;\n   \
    \ let mut result: bool;\n    if n == 1 {\n        result = false;\n    } else\
    \ {\n        while count < n {\n            if n % count == 0 {\n            \
    \    is_prime = false;\n            }\n            count += 1;\n        }\n  \
    \      result = is_prime;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // Your code here\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1m4hgn7m.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let k = (n as f64).sqrt() as isize;\n    if n < 2 {\n\
    \        return false;\n    }\n    for i in 2..k + 1 {\n        if n % i == 0\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    for i\
    \ in 2..n {\n        if n % i == 0 {\n            return false;\n        }\n \
    \   }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut x = 2;\n    let mut prime = true;\n    while x\
    \ < n {\n        if n % x == 0 {\n            prime = false;\n        }\n    \
    \    x += 1;\n    }\n    prime\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpajukb8cl.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    else if\
    \ n <= 3 {\n        return true;\n    }\n    else if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n\
    \        if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n    \
    \    }\n        i += 6;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    match n {\n        0 | 1 => false,\n        2 | 3 => true,\n\
    \        _ => {\n            if n % 2 == 0 || n % 3 == 0 {\n                return\
    \ false;\n            }\n\n            let mut i = 5;\n            while i * i\
    \ <= n {\n                if n % i == 0 || n % (i + 2) == 0 {\n              \
    \      return false;\n                }\n                i += 6;\n           \
    \ }\n            true\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..((n as f64).sqrt() as isize + 1) {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // let mut i = 2;\n    // while i < n {\n    //     if\
    \ n % i == 0 {\n    //         return false;\n    //     }\n    //     i += 1;\n\
    \    // }\n    // return true;\n    for i in 2..n {\n        if n % i == 0 {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp35_6fqvq.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let one = BigInt::from(1);\n    let n = BigInt::from(n);\n\
    \    let n_minus_one = n.clone() - one.clone();\n    let two = BigInt::from(2);\n\
    \    let mut rng = rand::thread_rng();\n    for _ in 1..100 {\n        let a =\
    \ two.clone() + rng.gen_bigint_range(&two, &n_minus_one);\n        let a_pow_n_minus_one\
    \ = mod_exp(&a, &n_minus_one, &n);\n        if a_pow_n_minus_one != one {\n  \
    \          return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BigInt`\n  -->\
    \ /tmp/tmpqlmovzh6.rs:17:15\n   |\n17 |     let one = BigInt::from(1);\n   | \
    \              ^^^^^^ use of undeclared type `BigInt`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `BigInt`\n  --> /tmp/tmpqlmovzh6.rs:18:13\n\
    \   |\n18 |     let n = BigInt::from(n);\n   |             ^^^^^^ use of undeclared\
    \ type `BigInt`\n\nerror[E0433]: failed to resolve: use of undeclared type `BigInt`\n\
    \  --> /tmp/tmpqlmovzh6.rs:20:15\n   |\n20 |     let two = BigInt::from(2);\n\
    \   |               ^^^^^^ use of undeclared type `BigInt`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `rand`\n  --> /tmp/tmpqlmovzh6.rs:21:19\n\
    \   |\n21 |     let mut rng = rand::thread_rng();\n   |                   ^^^^\
    \ use of undeclared crate or module `rand`\n\nerror[E0425]: cannot find function\
    \ `mod_exp` in this scope\n  --> /tmp/tmpqlmovzh6.rs:24:33\n   |\n24 |       \
    \  let a_pow_n_minus_one = mod_exp(&a, &n_minus_one, &n);\n   |              \
    \                   ^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpvtp5ksnd.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // implement is_prime here.\n    if n < 2 {\n        return\
    \ false;\n    }\n    for i in 2..n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb26w00_8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    let mut r = false;\n    while i <\
    \ n {\n        if n % i == 0 {\n            r = false;\n            break;\n \
    \       } else {\n            r = true;\n        }\n        i += 1;\n    }\n \
    \   r\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut\
    \ sqr = (n as f64).sqrt() as isize;\n    while sqr > 1 {\n        if n % sqr ==\
    \ 0 {\n            return false;\n        }\n        sqr -= 1;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n < 2\
    \ || n % 2 == 0 {\n        return false;\n    }\n    for i in (3..((n as f64).sqrt()\
    \ as isize + 1)).step_by(2) {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    assert!(n > 0);\n    let mut i = 2;\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false;\n        }\n       \
    \ i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdinxoor0.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 1 {\n        return false;\n    }\n    if n ==\
    \ 1 {\n        return false;\n    }\n    if n == 2 {\n        return true;\n \
    \   }\n    let mut i = 2;\n    while i < n {\n        if n % i == 0 {\n      \
    \      return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    for i in 3..n / 2 {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    for i\
    \ in 2..n {\n        if n % i == 0 {\n            return false;\n        }\n \
    \   }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // Start at 2, since 1 can be divided by everything, and\
    \ only odd numbers\n    // can be prime, we start at 3\n    if n < 2 {\n     \
    \   return false;\n    }\n\n    for i in (2..n).step_by(2) {\n        if n % i\
    \ == 0 {\n            return false;\n        }\n    }\n\n    return true;\n}\n\
    \nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyafxmojs.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7h2kak61.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    if n ==\
    \ 2 {\n        return true;\n    }\n\n    let mut i = 2;\n    while i * i <= n\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n        i\
    \ += 1;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    let mut i = 3;\n    while i <= n / 2 {\n        if n % i == 0 {\n\
    \            return false;\n        }\n        i += 2;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    } else if n <=\
    \ 1 || n % 2 == 0 {\n        return false;\n    }\n    let max = (n as f64).sqrt()\
    \ as isize;\n    for i in 3..(max + 1) {\n        if n % i == 0 {\n          \
    \  return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpvtp5ksnd.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    return false;\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5ohcknl8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // This is a more efficient algorithm than the naive one,\
    \ but it isn't\n    // guaranteed to work for all inputs.\n    if n <= 1 {\n \
    \       return false;\n    } else if n <= 3 {\n        return true;\n    } else\
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false;\n    }\n    let mut i =\
    \ 5;\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n  \
    \          return false;\n        }\n        i += 6;\n    }\n    return true;\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let limit\
    \ = (n as f64).sqrt() as isize + 1;\n    for i in 2..limit {\n        if n % i\
    \ == 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    let mut\
    \ i = 2;\n    while i < n {\n        if n % i == 0 {\n            return false;\n\
    \        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6qq1q62g.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let x = abs(n);\n    if x == 1 {\n        return false;\n\
    \    }\n    for i in 2..x {\n        if x % i == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpi_ys76hh.rs:17:13\n\
    \   |\n17 |     let x = abs(n);\n   |             ^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let sqrt_n\
    \ = (n as f64).sqrt().ceil() as isize;\n    for i in 2..sqrt_n {\n        if n\
    \ % i == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_vevwjh4.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO\n    if n <= 1 {\n        return false;\n    }\n\
    \    let sqrt_n = (n as f64).sqrt() as isize;\n    for i in 2..sqrt_n+1 {\n  \
    \      if n % i == 0 {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpvtp5ksnd.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    for i\
    \ in 2..(n-1) {\n        if n % i == 0 {\n            return false;\n        }\n\
    \    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    for i\
    \ in 2..n {\n        if n % i == 0 {\n            return false;\n        }\n \
    \   }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8jj5bv0v.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    let n =\
    \ n as usize;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n        i += 1;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    //your code here\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaz25fp3y.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n % 2\
    \ == 0 || n < 2 {\n        return false;\n    }\n    let sqrt = (n as f64).sqrt()\
    \ as isize;\n    for x in (3..=sqrt).step_by(2) {\n        if n % x == 0 {\n \
    \           return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    n <= 2 || n > 2 && prime_factors(n).len() == 1\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `prime_factors` in this scope\n  -->\
    \ /tmp/tmpkkox0csi.rs:17:24\n   |\n17 |     n <= 2 || n > 2 && prime_factors(n).len()\
    \ == 1\n   |                        ^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut flag: bool = true;\n    if n < 2 {\n        flag\
    \ = false;\n    } else {\n        for i in 2..(n/2+1) {\n            if n % i\
    \ == 0 {\n                flag = false;\n                break;\n            }\n\
    \        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // First, let's make sure that the input isn't negative.\n\
    \    if n < 0 {\n        return false;\n    }\n\n    // Next, let's check all\
    \ numbers between 2 and the square root of the input,\n    // and see if any of\
    \ them divide evenly into the input.\n    let bound = (n as f64).sqrt() as isize;\n\
    \    for i in 2..bound {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n\n    // If we get here, then there was no number between 2\
    \ and the square root\n    // of the input that divided evenly into the input.\
    \  This means the input\n    // must be prime.\n    true\n}\n\nfn main() {\n \
    \   let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt5d6vhhg.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut index = 2;\n    let mut result = true;\n    while\
    \ index < n {\n        if n % index == 0 {\n            result = false;\n    \
    \        break;\n        }\n        index += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi2mvz6j5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..(n / 2 + 1) {\n        if n % i == 0 {\n            return false;\n     \
    \   }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..(n / 2 + 1) {\n        if n % i == 0 {\n            return false;\n     \
    \   }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let s = n as f64;\n    let n = n.abs();\n    if n == 0\
    \ || n == 1 {\n        return false;\n    } else if n == 2 {\n        return true;\n\
    \    } else if n % 2 == 0 {\n        return false;\n    }\n    let mut i = 3;\n\
    \    while i <= (s.sqrt() as isize) {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 2;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // Your code here\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyyasf_a0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    let mut max_divisor = (n as f64).sqrt()\
    \ as isize;\n    while i <= max_divisor {\n        if n % i == 0 {\n         \
    \   return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa88_rhbo.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpvtp5ksnd.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    for i in (3..n).step_by(2) {\n        if n % i == 0 {\n          \
    \  return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO\n    if n == 1 {\n        return false;\n    }\
    \ else if n == 2 {\n        return true;\n    } else {\n        for i in 2..n\
    \ {\n            if n % i == 0 {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi7tm4snu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // 1 is not a prime number\n    if n == 1 {\n        return\
    \ false;\n    }\n\n    // 2 is a prime number\n    if n == 2 {\n        return\
    \ true;\n    }\n\n    // Check if `n` is evenly divisible by any number up to,\
    \ but not including,\n    // itself. If it is, then it is not a prime number.\n\
    \    for i in 2..n {\n        if n % i == 0 {\n            return false;\n   \
    \     }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n % 2\
    \ == 0 || n <= 1 {\n        return false;\n    }\n    let mut i = 3;\n    while\
    \ i <= (n as f64).sqrt() as isize {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 2;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n <=\
    \ 1 || n % 2 == 0 {\n        return false;\n    }\n    let sqr = (n as f64).sqrt()\
    \ as isize;\n    for i in (3..sqr + 1).step_by(2) {\n        if n % i == 0 {\n\
    \            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n   \
    \ let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut is_n_prime = true;\n    for x in 2..(n / 2) {\n\
    \        if n % x == 0 {\n            is_n_prime = false;\n            break;\n\
    \        }\n    }\n    is_n_prime\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9c0g4l_c.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n\tlet mut is_prime: bool = true;\n\tlet mut i: isize = 2;\n\
    \tlet mut n1: isize = n - 1;\n\tif n < 2 {\n\t\tis_prime = false;\n\t}\n\telse\
    \ if n == 2 {\n\t\tis_prime = true;\n\t}\n\telse {\n\t\twhile i < n1 {\n\t\t\t\
    if n % i == 0 {\n\t\t\t\tis_prime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tis_prime = true;\n\t\t\t}\n\t\t\ti += 1;\n\t\t}\n\t}\n\treturn is_prime;\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsjzkk8mu.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008866
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // let mut i = 1;\n    // while i <= n {\n    //     if\
    \ (n%i == 0) && (i != 1) && (i != n) {\n    //         return false;\n    // \
    \    }\n    //     i = i + 1;\n    // }\n    // return true;\n    !(2..n).any(|i|\
    \ n % i == 0)\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbwg_p84v.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp52cdx2n5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for p in\
    \ (2..n).rev() {\n        if n % p == 0 {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n % 2\
    \ == 0 || n <= 1 {\n        return false;\n    }\n    if n == 3 {\n        return\
    \ true;\n    }\n    let mut i = 3;\n    while i * i <= n {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n        i += 2;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    if n\
    \ <= 3 {\n        return true;\n    }\n\n    if n % 2 == 0 || n % 3 == 0 {\n \
    \       return false;\n    }\n\n    let mut i = 5;\n    while i * i <= n {\n \
    \       if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n     \
    \   }\n        i += 6;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n ==\
    \ 1 || n % 2 == 0 {\n        return false;\n    }\n    let sqrt_n = (n as f64).sqrt().ceil()\
    \ as isize;\n    for i in (3..=sqrt_n).step_by(2) {\n        if n % i == 0 {\n\
    \            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n   \
    \ let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n < 2\
    \ || n % 2 == 0 {\n        return false;\n    }\n    for i in (3..=(n as f64).sqrt()\
    \ as isize).step_by(2) {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i < n {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n        i += 1;\n    }\n    n > 1\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let limit\
    \ = (n as f64).sqrt() as isize + 1;\n    let mut i = 2;\n    while i < limit {\n\
    \        if n % i == 0 {\n            return false;\n        }\n        i += 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for factor\
    \ in 2..n {\n        if n % factor == 0 {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    n > 1 && (2..n).all(|x| n % x != 0)\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO: complete this function!\n    match n {\n    \
    \    _ if n <= 1 => false,\n        2 | 3 => true,\n        _ if n % 2 == 0 =>\
    \ false,\n        _ => {\n            let sqrt = (n as f64).sqrt() as isize;\n\
    \            let mut i = 3;\n            while i <= sqrt {\n                if\
    \ n % i == 0 {\n                    return false;\n                }\n       \
    \         i += 2;\n            }\n            true\n        }\n    }\n}\n\nfn\
    \ main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut result = true;\n    for i in 2..n {\n        if\
    \ n % i == 0 {\n            result = false;\n            break;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6h66d7rd.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n\n    let upper_bound\
    \ = (n as f64).sqrt() as isize + 1;\n    for x in 2..upper_bound {\n        if\
    \ n % x == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    for x in (3..((n as f64).sqrt() as isize + 1)).step_by(2) {\n    \
    \    if n % x == 0 {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n\n    let max_bound\
    \ = (n as f64).sqrt() as isize + 1;\n    (2..max_bound).all(|i| n % i != 0)\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..(n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    if n ==\
    \ 2 {\n        return true;\n    }\n\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n\n    for i in 3..((n as f64).sqrt() as isize + 1) {\n        if n % i\
    \ == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // YOUR CODE HERE\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpc_tr5mnb.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut counter = 1;\n    let mut divisor = 2;\n    while\
    \ divisor < n {\n        if n % divisor == 0 {\n            counter += 1;\n  \
    \      }\n        divisor += 1;\n    }\n    if counter == 1 {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu970pzpo.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    return n == 1;\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp25yqv1wd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..(n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n < 4\
    \ {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    if n < 9 {\n        return true;\n    }\n    if n % 3 == 0 {\n   \
    \     return false;\n    }\n    if n < 25 {\n        return true;\n    }\n   \
    \ let mut i = 5;\n    while i * i <= n {\n        if n % i == 0 {\n          \
    \  return false;\n        }\n        if n % (i + 2) == 0 {\n            return\
    \ false;\n        }\n        i += 6;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let factor\
    \ = n - 1;\n    factor == n - 1\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppcfyriqr.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO: complete this function\n    let mut n = n;\n\
    \    n = n.abs();\n    for i in 2..n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n    if n == 1 {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    let m =\
    \ ((n as f64).sqrt() + 1.0) as isize;\n    for i in 2..m {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    if n\
    \ % 2 == 0 {\n        return n == 2;\n    }\n\n    let max = (n as f64).sqrt()\
    \ as isize;\n    for i in 3..max + 1 {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let max = (n as f64).sqrt() as isize;\n    for i in 2..max\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphz_22x_x.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut prime = true;\n    let mut i = 2;\n    while i\
    \ < n && prime {\n        if n % i == 0 {\n            prime = false;\n      \
    \  }\n        i += 1;\n    }\n    prime\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpho_reupp.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut divisor = 2;\n    while divisor < n {\n      \
    \  if n % divisor == 0 {\n            return false;\n        }\n        divisor\
    \ += 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb2y28tx9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut result = true;\n    for i in 2..n {\n        if\
    \ n % i == 0 {\n            result = false;\n            break;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6h66d7rd.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    for i in\
    \ 2..n/2 {\n        if n % i == 0 {\n            return false;\n        }\n  \
    \  }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm059qzwi.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let max_divisor = (n as f64).sqrt() as isize;\n    if\
    \ n == 1 {\n        return false;\n    }\n    for i in 2..max_divisor + 1 {\n\
    \        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO\n    let mut flag = true;\n    if n < 2 {\n  \
    \      flag = false;\n    } else {\n        for num in 2..n {\n            if\
    \ n % num == 0 {\n                flag = false;\n                break;\n    \
    \        }\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut x = 2;\n    while x < n {\n        if n % x ==\
    \ 0 {\n            return false;\n        }\n        x += 1;\n    }\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5dstm2l3.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..=(n / 2) {\n        if n % i == 0 {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..=(n - 1) {\n        if n % i == 0 {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz3zicba1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO: Implement me!\n    true\n}\n\nfn main() {\n \
    \   let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzikzu9bs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // your code here\n    if n <= 1 {\n        return false;\n\
    \    }\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsjzkk8mu.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008866
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    return false;\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5ohcknl8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let last = (n as f64).sqrt() as isize;\n    for i in 2..(last\
    \ + 1) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmc8ie__h.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp52cdx2n5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    let mut i = 2;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            return false;\n        }\n        i += 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let is_prime = (2..n).all(|x| n % x != 0);\n    is_prime\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpozk0hzaj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsjzkk8mu.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008866
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    n == 2 || n % 2 != 0 && (3..n / 2).step_by(2).all(|i|\
    \ n % i != 0)\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp33fpmnbx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n\n    if n\
    \ == 2 {\n        return true;\n    }\n\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n\n    if n == 3 {\n        return true;\n    }\n\n    let mut i = 3;\n\
    \    while i < (n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n   \
    \         return false;\n        }\n        i += 2;\n    }\n\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for k in\
    \ 2..n {\n        if n % k == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n == 3 {\n        return true;\n  \
    \  }\n    if n % 2 == 0 {\n        return false;\n    }\n    if n % 3 == 0 {\n\
    \        return false;\n    }\n    let mut i = 5;\n    let mut w = 2;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false;\n        }\n\
    \        i += w;\n        w = 6 - w;\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n <=\
    \ 1 || n % 2 == 0 {\n        return false;\n    }\n    for i in 3..(n as f64).sqrt()\
    \ as isize + 1 {\n        if n % i == 0 {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    //TODO\n    if n <= 1 {\n        return false;\n    }\n\
    \    let mut i = 2;\n    while i*i <= n {\n        if n % i == 0 {\n         \
    \   return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    for k in 2..n-1 {\n        if n % k == 0 {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2_67ha7x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO: implement this function\n    if n < 2 {\n   \
    \     return false;\n    }\n    for i in 2..n {\n        if n % i == 0 {\n   \
    \         return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    for p\
    \ in (2..n).rev() {\n        if n % p == 0 {\n            return false;\n    \
    \    }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n \
    \   assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    for num in 2..(n) {\n        if n % num == 0 {\n     \
    \       return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc_4s537x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 0 {\n        return false;\n    }\n    if n ==\
    \ 1 {\n        return false;\n    }\n    let max_divisor = (n as f64).sqrt() as\
    \ isize;\n    for i in 2..=max_divisor {\n        if n % i == 0 {\n          \
    \  return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7h2kak61.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n\n    if n\
    \ == 2 {\n        return true;\n    }\n\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n\n    if n % 3 == 0 {\n        return false;\n    }\n\n    let mut i =\
    \ 5;\n    let mut w = 2;\n\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false;\n        }\n\n        i += w;\n        w = 6 - w;\n\
    \    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ n > 1\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    let mut\
    \ result = true;\n    for i in 2..n {\n        if n % i == 0 {\n            result\
    \ = false;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // let mut result = true;\n    if n <= 1 {\n        return\
    \ false;\n    }\n    for i in 2..n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i < n {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n        i += 1;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdoz_qbpo.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n < 2\
    \ || n % 2 == 0 {\n        return false;\n    }\n    for i in (3..(n as f64).sqrt()\
    \ as isize + 1).step_by(2) {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..((n as f64).sqrt() as isize + 1) {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut flag = true;\n    if n > 2 {\n        for i in\
    \ 2..(n / 2 + 1) {\n            if n % i == 0 {\n                flag = false;\n\
    \                break;\n            }\n        }\n    } else {\n        flag\
    \ = false;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    for i\
    \ in 2..n {\n        if n % i == 0 {\n            return false;\n        }\n \
    \   }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut is_divisible = false;\n    if n > 1 {\n      \
    \  for i in 2..n {\n            if n % i == 0 {\n                is_divisible\
    \ = true;\n                break;\n            }\n        }\n    }\n    if is_divisible\
    \ {\n        false\n    } else {\n        true\n    }\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgxm32mu8.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // use a function to check if a number is prime.\n   \
    \ // A number is prime if it is 2 or greater, and\n    // not divisible by any\
    \ number except 1 and itself.\n    // (1 is not considered prime because it is\
    \ only divisible by itself)\n    let mut index = 2;\n    // note: the for loop\
    \ goes from index to n.\n    for index in index..n {\n        if n % index ==\
    \ 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk24tzzz9.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..n - 1 {\n        if n % i == 0 {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut num = n;\n    if n == 1 {\n        return false;\n\
    \    }\n    if n == 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n  \
    \      return false;\n    }\n    while num > 0 {\n        if n % num == 0 && num\
    \ != n {\n            return false;\n        }\n        num -= 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9r75wmrj.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    n > 1 && n % 2 != 0 && n % 3 != 0 && n % 5 != 0 && n %\
    \ 7 != 0\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp34thpnku.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO: Implement!\n    let mut i = 2;\n    let mut b\
    \ = true;\n    while i < n{\n        if n % i == 0{\n            b = false;\n\
    \            break;\n        }\n        i += 1;\n    }\n    b\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0ks_now8.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let i:isize = 2;\n    let bound:isize = (n as f64).sqrt()\
    \ as isize + 1;\n    let mut is_prime = true;\n    if n > 1 {\n        while is_prime\
    \ && i < bound {\n            if n % i == 0 {\n                is_prime = false;\n\
    \            }\n            i += 1;\n        }\n    } else {\n        is_prime\
    \ = false;\n    }\n    is_prime\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp8azld8sf.rs:25:13\n\
    \   |\n17 |     let i:isize = 2;\n   |         -\n   |         |\n   |       \
    \  first assignment to `i`\n   |         help: consider making this binding mutable:\
    \ `mut i`\n...\n25 |             i += 1;\n   |             ^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 2 {\n        return true;\n    }\n    if n < 2\
    \ || n % 2 == 0 {\n        return false;\n    }\n    for d in (3..n / 2 + 1).step_by(2)\
    \ {\n        if n % d == 0 {\n            return false;\n        }\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    let upper_bound = (n as f64).sqrt() as\
    \ isize + 1;\n    for i in 2..upper_bound {\n        if n % i == 0 {\n       \
    \     return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO: implement is_prime\n    let mut i: isize = 2;\n\
    \    while i < n {\n        if n % i == 0 {\n            return false;\n     \
    \   }\n        i += 1;\n    }\n    if n == 1 {\n        return false;\n    }\n\
    \    return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i < n / 2 {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjpvr4iqc.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n == 1 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    for i in 3..((n as f64).sqrt() as isize + 1) {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut is_prime = true;\n    for i in 2..n {\n      \
    \  if n % i == 0 {\n            is_prime = false;\n            break;\n      \
    \  }\n    }\n    is_prime\n}\n\nfn main() {\n    let candidate = is_prime;\n \
    \   assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi2a57ouc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    if n\
    \ <= 3 {\n        return true;\n    }\n\n    if n % 2 == 0 || n % 3 == 0 {\n \
    \       return false;\n    }\n\n    let mut i = 5;\n    while i * i <= n {\n \
    \       if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n     \
    \   }\n        i += 6;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008893
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n < 4\
    \ {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    if n < 9 {\n        return true;\n    }\n    if n % 3 == 0 {\n   \
    \     return false;\n    }\n    let r = (n as f64).sqrt().floor() as isize;\n\
    \    let mut f = 5;\n    while f <= r {\n        if n % f == 0 {\n           \
    \ return false;\n        }\n        if n % (f + 2) == 0 {\n            return\
    \ false;\n        }\n        f += 6;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    for p in primes\
    \ {\n        if n == p {\n            return true;\n        }\n        if n <\
    \ p {\n            return false;\n        }\n    }\n    return false;\n}\n\nfn\
    \ main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_se5yoa_.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO: implement me!\n    true\n}\n\nfn main() {\n \
    \   let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8o1hch6c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008866
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    match n {\n        2 | 3 => true,\n        n if n < 2\
    \ || n % 2 == 0 => false,\n        _ => {\n            let mut i = 3;\n      \
    \      while i <= (n as f64).sqrt() as isize {\n                if n % i == 0\
    \ {\n                    return false;\n                }\n                i +=\
    \ 2;\n            }\n            true\n        }\n    }\n}\n\nfn main() {\n  \
    \  let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // your code here\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjge7mbcl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // YOUR CODE HERE\n    let mut i = 2;\n    while i < n\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n        i\
    \ += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0cerhkgc.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n\tif n < 2 {\n\t\treturn false;\n\t}\n\n\tlet mut i = 2;\n\
    \twhile i * i <= n {\n\t\tif n % i == 0 {\n\t\t\treturn false;\n\t\t}\n\t\ti +=\
    \ 1;\n\t}\n\ttrue\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8u_ugcuk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n    // Write your code here\n    if n <= 1 {\n        return\
    \ false;\n    }\n    if n <= 3 {\n        return true;\n    }\n    if n % 2 ==\
    \ 0 || n % 3 == 0 {\n        return false;\n    }\n    let mut i = 5;\n    while\
    \ i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n            return\
    \ false;\n        }\n        i += 6;\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008894
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
    /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n\
    /// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n:\
    \ isize) -> bool {\n\tfor i in 2..n {\n\t\tif n % i == 0 {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8lexm83f.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008894
