name: HumanEval_114_minSubArraySum
language: rs
prompt: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
  \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1,\
  \ 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
  \ Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
  \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n\
  \    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]),\
  \ -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100,\
  \ -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
  \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
completions: ['    nums.into_iter().fold(isize::max_value(), |min, x| isize::min(min,
    x))', "    let mut min_sum = nums[0];\n    let mut curr_sum = nums[0];\n    for\
    \ i in 1..nums.len() {\n        curr_sum = std::cmp::min(nums[i], curr_sum + nums[i]);\n\
    \        min_sum = std::cmp::min(min_sum, curr_sum);\n    }\n    min_sum", " \
    \   let mut min_sub_sum = nums[0];\n    let mut max_sub_sum = nums[0];\n    let\
    \ mut running_sum = nums[0];\n    for (i, x) in nums.iter().enumerate().skip(1)\
    \ {\n        running_sum += x;\n        if running_sum < min_sub_sum {\n     \
    \       min_sub_sum = running_sum;\n        }\n        if running_sum > max_sub_sum\
    \ {\n            max_sub_sum = running_sum;\n        }\n    }\n    return min_sub_sum",
  "    let mut min_sum = ISIZE_MAX;\n    let mut sum = 0;\n    for num in nums {\n\
    \        sum += num;\n        min_sum = isize::min(min_sum, sum);\n        if\
    \ sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min = std::isize::MAX;\n    let mut sum = 0;\n    for num in nums {\n      \
    \  sum += num;\n        if sum < min {\n            min = sum;\n        }\n  \
    \      if sum > 0 {\n            sum = 0;\n        }\n    }\n    min", "    let\
    \ mut res = nums[0];\n    let mut tmp = 0;\n    for i in nums {\n        tmp +=\
    \ i;\n        if tmp < res {\n            res = tmp;\n        }\n        if tmp\
    \ > 0 {\n            tmp = 0;\n        }\n    }\n    res", "    let mut min_sum\
    \ = nums[0];\n    let mut sum = 0;\n    for num in nums {\n        sum += num;\n\
    \        if sum < min_sum {\n            min_sum = sum;\n        }\n        if\
    \ sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min_sum = nums[0];\n    let mut curr_sum = 0;\n    for num in nums {\n     \
    \   curr_sum += num;\n        if curr_sum < min_sum {\n            min_sum = curr_sum;\n\
    \        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n\
    \    }\n    min_sum", "    let mut min_sum = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for &num in nums.iter() {\n        sum += num;\n        min_sum =\
    \ std::cmp::min(min_sum, sum);\n        if sum > 0 {\n            sum = 0;\n \
    \       }\n    }\n    min_sum", "    let mut min = nums[0];\n    let mut sum =\
    \ 0;\n    for num in nums {\n        sum += num;\n        if sum < min {\n   \
    \         min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min", "    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        curr_sum = min(curr_sum +\
    \ nums[i], nums[i]);\n        min_sum = min(min_sum, curr_sum);\n    }\n    min_sum",
  "    let mut min_total = nums[0];\n    let mut sub_total = 0;\n    for num in nums\
    \ {\n        sub_total += num;\n        if sub_total < min_total {\n         \
    \   min_total = sub_total;\n        }\n        if sub_total > 0 {\n          \
    \  sub_total = 0;\n        }\n    }\n    min_total", "    let mut min_sum = nums[0];\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        if sum < min_sum {\n            min_sum = sum;\n        }\n        if\
    \ sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ result = isize::max_value();\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < result {\n            result =\
    \ sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n   \
    \ }\n    result", "    let mut min_sum = isize::MAX;\n    let mut sum = 0;\n \
    \   for num in nums {\n        sum += num;\n        min_sum = cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for num in nums\
    \ {\n        sum += num;\n        min_sum = min_sum.min(sum);\n        if sum\
    \ > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    if nums.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = nums[0];\n    let mut min_sum\
    \ = sum;\n    for i in 1..nums.len() {\n        sum = std::cmp::min(nums[i], sum\
    \ + nums[i]);\n        min_sum = std::cmp::min(min_sum, sum);\n    }\n    min_sum",
  "    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        if sum > 0 {\n            sum = nums[i];\n        } else {\n    \
    \        sum += nums[i];\n        }\n        min_sum = min_sum.min(sum);\n   \
    \ }\n    min_sum", "    let n = nums.len();\n    let mut min_sum = isize::max_value();\n\
    \    let mut prefix_sum = 0;\n    let mut min_prefix_sum = 0;\n    for i in 0..n\
    \ {\n        prefix_sum += nums[i];\n        min_sum = std::cmp::min(min_sum,\
    \ prefix_sum - min_prefix_sum);\n        min_prefix_sum = std::cmp::min(min_prefix_sum,\
    \ prefix_sum);\n    }\n    min_sum", "    use std::cmp::min;\n    let mut min_sum\
    \ = 0;\n    let mut sum = 0;\n    for i in nums {\n        sum += i;\n       \
    \ min_sum = min(min_sum, sum);\n    }\n    min_sum"]
stop_tokens:
- "\n}"
