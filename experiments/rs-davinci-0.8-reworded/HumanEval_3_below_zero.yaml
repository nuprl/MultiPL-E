name: HumanEval_3_below_zero
language: rs
prompt: "/// You're given a vector of deposit and withdrawal operations on a bank\
  \ account that starts with\n/// zero balance. Your task is to detect if at any point\
  \ the balance of account fallls below zero, and\n/// at that point function should\
  \ return true. Otherwise it should return false.\n/// >>> below_zero(vec![1, 2,\
  \ 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
  \ Vec<isize>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
  \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]),\
  \ false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
  \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
completions: ["    let mut sum = 0;\n    for el in operations {\n        sum += el;\n\
    \        if sum < 0 {\n            return true;\n        }\n    }\n    false",
  "    let mut balance = 0;\n    for op in operations {\n        balance += op;\n\
    \        if balance < 0 {\n            return true;\n        }\n    }\n    false",
  "    operations.iter().try_fold(0, |acc, x| {\n        if acc + x < 0 {\n      \
    \      Err(())\n        } else {\n            Ok(acc + x)\n        }\n    }).is_err()",
  '    operations.iter().fold(0, |acc, x| acc + x) < 0', "    let mut balance = 0;\n\
    \    for operation in operations {\n        balance += operation;\n        if\
    \ balance < 0 {\n            return true;\n        }\n    }\n    false", "   \
    \ let mut balance = 0;\n    for op in operations {\n        balance += op;\n \
    \       if balance < 0 {\n            return true;\n        }\n    }\n    false",
  "    let mut acc = 0;\n    for op in operations {\n        acc += op;\n        if\
    \ acc < 0 {\n            return true;\n        }\n    }\n    false", '    operations.iter().fold(0,
    |acc, &v| acc + v) < 0', '    unimplemented!();', "    let mut balance = 0;\n\
    \    for op in operations {\n        balance += op;\n        if balance < 0 {\n\
    \            return true;\n        }\n    }\n    false", "    let mut balance\
    \ = 0;\n    for i in 0..operations.len() {\n        balance += operations[i];\n\
    \        if balance < 0 {\n            return true;\n        }\n    }\n    false",
  "    let mut balance = 0;\n    for op in operations {\n        balance += op;\n\
    \        if balance < 0 {\n            return true;\n        }\n    }\n    false",
  "    let mut account = 0;\n    for operation in operations {\n        account +=\
    \ operation;\n        if account < 0 {\n            return true;\n        }\n\
    \    }\n    false", '    unimplemented!();', "    let mut balance = 0;\n    for\
    \ operation in operations {\n        balance += operation;\n        if balance\
    \ < 0 {\n            return true;\n        }\n    }\n    false", "    let mut\
    \ balance = 0;\n    for op in operations {\n        balance += op;\n        if\
    \ balance < 0 {\n            return true;\n        }\n    }\n    false", "   \
    \ // TODO: implement below_zero function\n    unimplemented!();", "    let mut\
    \ balance = 0;\n    for operation in operations {\n        balance += operation;\n\
    \        if balance < 0 {\n            return true;\n        }\n    }\n    false",
  "    let mut total = 0;\n    for i in operations {\n        total += i;\n      \
    \  if total < 0 {\n            return true;\n        }\n    }\n    false", '    unimplemented!();']
stop_tokens:
- "\n}"
