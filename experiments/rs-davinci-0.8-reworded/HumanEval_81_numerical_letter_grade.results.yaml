language: rs
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|&x| grade_score(x)).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `grade_score` in this scope\n  --> /tmp/tmpe57weggo.rs:24:28\n\
    \   |\n24 |     grades.iter().map(|&x| grade_score(x)).collect()\n   |       \
    \                     ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_to_letters: Vec<String> = Vec::new();\n\
    \    for g in grades {\n        grades_to_letters.push(match g {\n           \
    \ x if x >= 4.0 => \"A+\".to_string(),\n            x if x >= 3.7 => \"A\".to_string(),\n\
    \            x if x >= 3.3 => \"A-\".to_string(),\n            x if x >= 3.0 =>\
    \ \"B+\".to_string(),\n            x if x >= 2.7 => \"B\".to_string(),\n     \
    \       x if x >= 2.3 => \"B-\".to_string(),\n            x if x >= 2.0 => \"\
    C+\".to_string(),\n            x if x >= 1.7 => \"C\".to_string(),\n         \
    \   x if x >= 1.3 => \"C-\".to_string(),\n            x if x >= 1.0 => \"D+\"\
    .to_string(),\n            x if x >= 0.7 => \"D\".to_string(),\n            x\
    \ if x >= 0.0 => \"D-\".to_string(),\n            _ => \"E\".to_string(),\n  \
    \      });\n    }\n    grades_to_letters\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpip07fzsq.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grade_ranges = vec![\n        (\"A+\", 3.7),\n\
    \        (\"A\", 3.3),\n        (\"A-\", 3.0),\n        (\"B+\", 2.7),\n     \
    \   (\"B\", 2.3),\n        (\"B-\", 2.0),\n        (\"C+\", 1.7),\n        (\"\
    C\", 1.3),\n        (\"C-\", 1.0),\n        (\"D+\", 0.7),\n        (\"D\", 0.0),\n\
    \        (\"D-\", 0.0),\n        (\"E\", 0.0),\n    ];\n\n    grades\n       \
    \ .iter()\n        .map(|g| {\n            let mut l_grade = \"E\";\n        \
    \    for (letter, num) in grade_ranges.iter() {\n                if g > num {\n\
    \                    l_grade = letter;\n                    break;\n         \
    \       }\n            }\n            String::from(*l_grade)\n        })\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmpymtecug1.rs:50:26\n    |\n50  |             String::from(*l_grade)\n\
    \    |             ------------ ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |             |\n    |             required by a bound introduced by this\
    \ call\n    |\n    = help: the trait `Sized` is not implemented for `str`\nnote:\
    \ required by a bound in `from`\n\nerror[E0277]: the trait bound `String: From<str>`\
    \ is not satisfied\n  --> /tmp/tmpymtecug1.rs:50:13\n   |\n50 |             String::from(*l_grade)\n\
    \   |             ^^^^^^^^^^^^ the trait `From<str>` is not implemented for `String`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| \n        match *g {\n\
    \            4.0 => String::from(\"A+\"),\n            x if x > 3.7 => String::from(\"\
    A\"),\n            x if x > 3.3 => String::from(\"A-\"),\n            x if x >\
    \ 3.0 => String::from(\"B+\"),\n            x if x > 2.7 => String::from(\"B\"\
    ),\n            x if x > 2.3 => String::from(\"B-\"),\n            x if x > 2.0\
    \ => String::from(\"C+\"),\n            x if x > 1.7 => String::from(\"C\"),\n\
    \            x if x > 1.3 => String::from(\"C-\"),\n            x if x > 1.0 =>\
    \ String::from(\"D+\"),\n            x if x > 0.7 => String::from(\"D\"),\n  \
    \          0.0 => String::from(\"E\"),\n            _ => String::from(\"D-\"),\n\
    \        }\n    ).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|&n| {\n        match n {\n\
    \            _ if n >= 4.0 => String::from(\"A+\"),\n            _ if n >= 3.7\
    \ => String::from(\"A\"),\n            _ if n >= 3.3 => String::from(\"A-\"),\n\
    \            _ if n >= 3.0 => String::from(\"B+\"),\n            _ if n >= 2.7\
    \ => String::from(\"B\"),\n            _ if n >= 2.3 => String::from(\"B-\"),\n\
    \            _ if n >= 2.0 => String::from(\"C+\"),\n            _ if n >= 1.7\
    \ => String::from(\"C\"),\n            _ if n >= 1.3 => String::from(\"C-\"),\n\
    \            _ if n >= 1.0 => String::from(\"D+\"),\n            _ if n >= 0.7\
    \ => String::from(\"D\"),\n            _ if n >= 0.0 => String::from(\"D-\"),\n\
    \            _ => String::from(\"E\"),\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpv41u7ysh.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_map = vec![\n        (4.0, \"A+\"\
    ),\n        (3.7, \"A\"),\n        (3.3, \"A-\"),\n        (3.0, \"B+\"),\n  \
    \      (2.7, \"B\"),\n        (2.3, \"B-\"),\n        (2.0, \"C+\"),\n       \
    \ (1.7, \"C\"),\n        (1.3, \"C-\"),\n        (1.0, \"D+\"),\n        (0.7,\
    \ \"D\"),\n        (0.0, \"D-\"),\n    ];\n    let mut numerical_grade_letter_grade:\
    \ Vec<String> = Vec::new();\n    for grade in grades {\n        let mut last_grade\
    \ = 0.0;\n        for grade_pair in grades_map.iter() {\n            if grade\
    \ >= grade_pair.0 {\n                if grade == last_grade {\n              \
    \      numerical_grade_letter_grade.push(String::from(grade_pair.1));\n      \
    \          } else {\n                    numerical_grade_letter_grade.push(String::from(grade_pair.1));\n\
    \                    break;\n                }\n            }\n            last_grade\
    \ = grade_pair.0;\n        }\n    }\n    numerical_grade_letter_grade\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmptnrwjin_.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(\n        |grade| match *grade\
    \ {\n            4.0 => String::from(\"A+\"),\n            3.7...4.0 => String::from(\"\
    A\"),\n            3.3...3.7 => String::from(\"A-\"),\n            3.0...3.3 =>\
    \ String::from(\"B+\"),\n            2.7...3.0 => String::from(\"B\"),\n     \
    \       2.3...2.7 => String::from(\"B-\"),\n            2.0...2.3 => String::from(\"\
    C+\"),\n            1.7...2.0 => String::from(\"C\"),\n            1.3...1.7 =>\
    \ String::from(\"C-\"),\n            1.0...1.3 => String::from(\"D+\"),\n    \
    \        0.7...1.0 => String::from(\"D\"),\n            0.0...0.7 => String::from(\"\
    D-\"),\n            _ => String::from(\"E\"),\n        }\n    ).collect()\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpumq_offq.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ mut grade in grades {\n        if grade > 4.0 {\n            grade = 4.0;\n\
    \        }\n        if grade < 0.0 {\n            grade = 0.0;\n        }\n  \
    \      if grade > 3.7 {\n            letter_grades.push(String::from(\"A+\"));\n\
    \        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp275i_zfm.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    //\n    let mut gpa_to_letter = HashMap::new();\n\
    \    gpa_to_letter.insert(4.0, \"+A\");\n    gpa_to_letter.insert(3.7, \"A\");\n\
    \    gpa_to_letter.insert(3.3, \"-A\");\n    gpa_to_letter.insert(3.0, \"+B\"\
    );\n    gpa_to_letter.insert(2.7, \"B\");\n    gpa_to_letter.insert(2.3, \"-B\"\
    );\n    gpa_to_letter.insert(2.0, \"+C\");\n    gpa_to_letter.insert(1.7, \"C\"\
    );\n    gpa_to_letter.insert(1.3, \"-C\");\n    gpa_to_letter.insert(1.0, \"+D\"\
    );\n    gpa_to_letter.insert(0.7, \"D\");\n    gpa_to_letter.insert(0.0, \"-D\"\
    );\n    let mut gpa_to_letter_bounds = vec![0.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        let grade_bound = gpa_to_letter_bounds.iter().find(|&x|\
    \ grade >= **x);\n        match grade_bound {\n            Some(b) => {\n    \
    \            let letter = gpa_to_letter.get(b).unwrap();\n                result.push(letter.to_string());\n\
    \            },\n            None => { result.push(\"E\".to_string()); }\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpqdg4c594.rs:25:29\n   |\n25 |     let mut gpa_to_letter = HashMap::new();\n\
    \   |                             ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0614]: type `{float}` cannot be dereferenced\n  --> /tmp/tmpqdg4c594.rs:41:74\n\
    \   |\n41 |         let grade_bound = gpa_to_letter_bounds.iter().find(|&x| grade\
    \ >= **x);\n   |                                                             \
    \             ^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0433, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_letters = vec![\n        (4.0, \"\
    A+\"),\n        (3.7, \"A\"),\n        (3.3, \"A-\"),\n        (3.0, \"B+\"),\n\
    \        (2.7, \"B\"),\n        (2.3, \"B-\"),\n        (2.0, \"C+\"),\n     \
    \   (1.7, \"C\"),\n        (1.3, \"C-\"),\n        (1.0, \"D+\"),\n        (0.7,\
    \ \"D\"),\n        (0.0, \"D-\"),\n    ];\n    grades\n        .iter()\n     \
    \   .map(|x| {\n            for (g, l) in grades_letters.iter() {\n          \
    \      if *x >= *g {\n                    return String::from(*l);\n         \
    \       }\n            }\n            String::from(\"E\")\n        })\n      \
    \  .collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpn6tep6ro.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    let letter_grades = vec![(4.0, \"A+\"), (3.7, \"A\"), (3.3, \"A-\"), (3.0,\
    \ \"B+\"),\n                             (2.7, \"B\"), (2.3, \"B-\"), (2.0, \"\
    C+\"), (1.7, \"C\"),\n                             (1.3, \"C-\"), (1.0, \"D+\"\
    ), (0.7, \"D\"), (0.0, \"D-\"),\n                             (0.0, \"E\")];\n\
    \    for grade in grades {\n        for (gpa, letter) in letter_grades.iter()\
    \ {\n            if grade >= *gpa {\n                result.push(letter.to_string());\n\
    \                break;\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpfdeqiizv.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            output.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            output.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            output.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            output.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            output.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            output.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            output.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            output.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            output.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            output.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            output.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            output.push(String::from(\"\
    D-\"));\n        } else {\n            output.push(String::from(\"E\"));\n   \
    \     }\n    }\n    output\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkqw0ct0l.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letter_grades = grades.iter().map(|g| {\n\
    \        if *g >= 4.0 {\n            \"A+\".to_string()\n        } else if *g\
    \ >= 3.7 {\n            \"A\".to_string()\n        } else if *g >= 3.3 {\n   \
    \         \"A-\".to_string()\n        } else if *g >= 3.0 {\n            \"B+\"\
    .to_string()\n        } else if *g >= 2.7 {\n            \"B\".to_string()\n \
    \       } else if *g >= 2.3 {\n            \"B-\".to_string()\n        } else\
    \ if *g >= 2.0 {\n            \"C+\".to_string()\n        } else if *g >= 1.7\
    \ {\n            \"C\".to_string()\n        } else if *g >= 1.3 {\n          \
    \  \"C-\".to_string()\n        } else if *g >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if *g >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if *g >= 0.0 {\n            \"D-\".to_string()\n        } else {\n         \
    \   \"E\".to_string()\n        }\n    });\n    letter_grades.collect()\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4lhssfl7.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| \n            match *x\
    \ {\n                4.0 => String::from(\"A+\"),\n                x if x >= 3.7\
    \ => String::from(\"A\"),\n                x if x >= 3.3 => String::from(\"A-\"\
    ),\n                x if x >= 3.0 => String::from(\"B+\"),\n                x\
    \ if x >= 2.7 => String::from(\"B\"),\n                x if x >= 2.3 => String::from(\"\
    B-\"),\n                x if x >= 2.0 => String::from(\"C+\"),\n             \
    \   x if x >= 1.7 => String::from(\"C\"),\n                x if x >= 1.3 => String::from(\"\
    C-\"),\n                x if x >= 1.0 => String::from(\"D+\"),\n             \
    \   x if x >= 0.7 => String::from(\"D\"),\n                x if x >= 0.0 => String::from(\"\
    D-\"),\n                _ => String::from(\"E\"),\n            }\n        ).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpotw_4qp2.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        let lg = match\
    \ *g {\n            4.0 => \"A+\",\n            g if g > 3.7 => \"A\",\n     \
    \       g if g > 3.3 => \"A-\",\n            g if g > 3.0 => \"B+\",\n       \
    \     g if g > 2.7 => \"B\",\n            g if g > 2.3 => \"B-\",\n          \
    \  g if g > 2.0 => \"C+\",\n            g if g > 1.7 => \"C\",\n            g\
    \ if g > 1.3 => \"C-\",\n            g if g > 1.0 => \"D+\",\n            g if\
    \ g > 0.7 => \"D\",\n            g if g > 0.0 => \"D-\",\n            _ => \"\
    E\",\n        };\n        String::from(lg)\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            grades_vec.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            grades_vec.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            grades_vec.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpw_xpgtyo.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| match *g {\n        x\
    \ if x >= 4.0 => String::from(\"A+\"),\n        x if x >= 3.7 => String::from(\"\
    A\"),\n        x if x >= 3.3 => String::from(\"A-\"),\n        x if x >= 3.0 =>\
    \ String::from(\"B+\"),\n        x if x >= 2.7 => String::from(\"B\"),\n     \
    \   x if x >= 2.3 => String::from(\"B-\"),\n        x if x >= 2.0 => String::from(\"\
    C+\"),\n        x if x >= 1.7 => String::from(\"C\"),\n        x if x >= 1.3 =>\
    \ String::from(\"C-\"),\n        x if x >= 1.0 => String::from(\"D+\"),\n    \
    \    x if x >= 0.7 => String::from(\"D\"),\n        x if x >= 0.0 => String::from(\"\
    D-\"),\n        _ => String::from(\"E\"),\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpvqrjv422.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // TODO: Implement the solution here\n    let\
    \ mut letter_grades = Vec::new();\n    for grade in grades {\n        if grade\
    \ >= 4.0 {\n            letter_grades.push(String::from(\"A+\"));\n        } else\
    \ if grade >= 3.7 {\n            letter_grades.push(String::from(\"A\"));\n  \
    \      } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpirzbrkpy.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = Vec::new();\n    for grade\
    \ in grades {\n        match grade {\n            grade if grade >= 4.0 => letters.push(String::from(\"\
    A+\")),\n            grade if grade >= 3.7 => letters.push(String::from(\"A\"\
    )),\n            grade if grade >= 3.3 => letters.push(String::from(\"A-\")),\n\
    \            grade if grade >= 3.0 => letters.push(String::from(\"B+\")),\n  \
    \          grade if grade >= 2.7 => letters.push(String::from(\"B\")),\n     \
    \       grade if grade >= 2.3 => letters.push(String::from(\"B-\")),\n       \
    \     grade if grade >= 2.0 => letters.push(String::from(\"C+\")),\n         \
    \   grade if grade >= 1.7 => letters.push(String::from(\"C\")),\n            grade\
    \ if grade >= 1.3 => letters.push(String::from(\"C-\")),\n            grade if\
    \ grade >= 1.0 => letters.push(String::from(\"D+\")),\n            grade if grade\
    \ >= 0.7 => letters.push(String::from(\"D\")),\n            grade if grade >=\
    \ 0.0 => letters.push(String::from(\"D-\")),\n            _ => letters.push(String::from(\"\
    E\")),\n        }\n    }\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmppz22ultc.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade == 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpl487fzqx.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ g in grades {\n        if g >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if g >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if g >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if g >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if g >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if g >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if g >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if g >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if g >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if g >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if g >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if g >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkcfy2alo.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::with_capacity(grades.len());\n\
    \    for grade in grades {\n        letter_grades.push(\n            match grade\
    \ {\n                4.0 => String::from(\"A+\"),\n                3.7...4.0 =>\
    \ String::from(\"A\"),\n                3.3...3.7 => String::from(\"A-\"),\n \
    \               3.0...3.3 => String::from(\"B+\"),\n                2.7...3.0\
    \ => String::from(\"B\"),\n                2.3...2.7 => String::from(\"B-\"),\n\
    \                2.0...2.3 => String::from(\"C+\"),\n                1.7...2.0\
    \ => String::from(\"C\"),\n                1.3...1.7 => String::from(\"C-\"),\n\
    \                1.0...1.3 => String::from(\"D+\"),\n                0.7...1.0\
    \ => String::from(\"D\"),\n                0.0...0.7 => String::from(\"D-\"),\n\
    \                0.0 => String::from(\"E\"),\n                _ => String::from(\"\
    Invalid Grade!\"),\n            }\n        );\n    }\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpi3vtdcvf.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpewf4_80o.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ i in grades {\n        if i >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if i >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if i >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if i >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if i >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if i >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if i >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if i >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if i >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if i >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if i >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if i >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdqxt8ngk.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            output.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            output.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            output.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            output.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            output.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            output.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            output.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            output.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            output.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            output.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            output.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            output.push(String::from(\"\
    D-\"));\n        } else {\n            output.push(String::from(\"E\"));\n   \
    \     }\n    }\n    output\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpxymc0mhd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        let letter_grade:\
    \ String = if *g == 4.0 {\n            String::from(\"A+\")\n        } else if\
    \ *g >= 3.7 {\n            String::from(\"A\")\n        } else if *g >= 3.3 {\n\
    \            String::from(\"A-\")\n        } else if *g >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *g >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *g >= 2.3 {\n            String::from(\"B-\")\n      \
    \  } else if *g >= 2.0 {\n            String::from(\"C+\")\n        } else if\
    \ *g >= 1.7 {\n            String::from(\"C\")\n        } else if *g >= 1.3 {\n\
    \            String::from(\"C-\")\n        } else if *g >= 1.0 {\n           \
    \ String::from(\"D+\")\n        } else if *g >= 0.7 {\n            String::from(\"\
    D\")\n        } else if *g >= 0.0 {\n            String::from(\"D-\")\n      \
    \  } else {\n            String::from(\"E\")\n        };\n        letter_grade\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpcnnbmfv_.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letter_grades = vec![\n        (\"A+\",\
    \ 4.0),\n        (\"A\", 3.7),\n        (\"A-\", 3.3),\n        (\"B+\", 3.0),\n\
    \        (\"B\", 2.7),\n        (\"B-\", 2.3),\n        (\"C+\", 2.0),\n     \
    \   (\"C\", 1.7),\n        (\"C-\", 1.3),\n        (\"D+\", 1.0),\n        (\"\
    D\", 0.7),\n        (\"D-\", 0.0),\n        (\"E\", 0.0),\n    ];\n    let mut\
    \ output = Vec::new();\n    for grade in grades {\n        for entry in letter_grades.iter()\
    \ {\n            if grade >= entry.1 {\n                output.push(entry.0.to_string());\n\
    \                break;\n            }\n        }\n    }\n    output\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5hk7fr9f.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|num| {\n        let gpa =\
    \ *num;\n        match gpa {\n            4.0 => String::from(\"A+\"),\n     \
    \       gpa if gpa > 3.7 => String::from(\"A\"),\n            gpa if gpa > 3.3\
    \ => String::from(\"A-\"),\n            gpa if gpa > 3.0 => String::from(\"B+\"\
    ),\n            gpa if gpa > 2.7 => String::from(\"B\"),\n            gpa if gpa\
    \ > 2.3 => String::from(\"B-\"),\n            gpa if gpa > 2.0 => String::from(\"\
    C+\"),\n            gpa if gpa > 1.7 => String::from(\"C\"),\n            gpa\
    \ if gpa > 1.3 => String::from(\"C-\"),\n            gpa if gpa > 1.0 => String::from(\"\
    D+\"),\n            gpa if gpa > 0.7 => String::from(\"D\"),\n            gpa\
    \ if gpa > 0.0 => String::from(\"D-\"),\n            _ => String::from(\"E\"),\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades = grades;\n    grades.iter_mut().map(|x|\
    \ {\n        let rounded = x.round();\n        if rounded == 4.0 {\n         \
    \   return \"A+\".to_string();\n        } else if rounded == 3.7 {\n         \
    \   return \"A\".to_string();\n        } else if rounded == 3.3 {\n          \
    \  return \"A-\".to_string();\n        } else if rounded == 3.0 {\n          \
    \  return \"B+\".to_string();\n        } else if rounded == 2.7 {\n          \
    \  return \"B\".to_string();\n        } else if rounded == 2.3 {\n           \
    \ return \"B-\".to_string();\n        } else if rounded == 2.0 {\n           \
    \ return \"C+\".to_string();\n        } else if rounded == 1.7 {\n           \
    \ return \"C\".to_string();\n        } else if rounded == 1.3 {\n            return\
    \ \"C-\".to_string();\n        } else if rounded == 1.0 {\n            return\
    \ \"D+\".to_string();\n        } else if rounded == 0.7 {\n            return\
    \ \"D\".to_string();\n        } else if rounded == 0.0 {\n            return \"\
    D-\".to_string();\n        } else {\n            return \"E\".to_string();\n \
    \       }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C+\", \"C+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp051y2d9d.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut ans = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            ans.push(String::from(\"A+\"\
    ));\n        } else if grade >= 3.7 {\n            ans.push(String::from(\"A\"\
    ));\n        } else if grade >= 3.3 {\n            ans.push(String::from(\"A-\"\
    ));\n        } else if grade >= 3.0 {\n            ans.push(String::from(\"B+\"\
    ));\n        } else if grade >= 2.7 {\n            ans.push(String::from(\"B\"\
    ));\n        } else if grade >= 2.3 {\n            ans.push(String::from(\"B-\"\
    ));\n        } else if grade >= 2.0 {\n            ans.push(String::from(\"C+\"\
    ));\n        } else if grade >= 1.7 {\n            ans.push(String::from(\"C\"\
    ));\n        } else if grade >= 1.3 {\n            ans.push(String::from(\"C-\"\
    ));\n        } else if grade >= 1.0 {\n            ans.push(String::from(\"D+\"\
    ));\n        } else if grade >= 0.7 {\n            ans.push(String::from(\"D\"\
    ));\n        } else if grade >= 0.0 {\n            ans.push(String::from(\"D-\"\
    ));\n        } else {\n            ans.push(String::from(\"E\"));\n        }\n\
    \    }\n    ans\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4ydo1kaz.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| {\n        if *x >= 4.0\
    \ {\n            String::from(\"A+\")\n        } else if *x >= 3.7 {\n       \
    \     String::from(\"A\")\n        } else if *x >= 3.3 {\n            String::from(\"\
    A-\")\n        } else if *x >= 3.0 {\n            String::from(\"B+\")\n     \
    \   } else if *x >= 2.7 {\n            String::from(\"B\")\n        } else if\
    \ *x >= 2.3 {\n            String::from(\"B-\")\n        } else if *x >= 2.0 {\n\
    \            String::from(\"C+\")\n        } else if *x >= 1.7 {\n           \
    \ String::from(\"C\")\n        } else if *x >= 1.3 {\n            String::from(\"\
    C-\")\n        } else if *x >= 1.0 {\n            String::from(\"D+\")\n     \
    \   } else if *x >= 0.7 {\n            String::from(\"D\")\n        } else if\
    \ *x >= 0.0 {\n            String::from(\"D-\")\n        } else {\n          \
    \  String::from(\"E\")\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp1itucrhu.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Your code here\n    let mut result = Vec::new();\n\
    \    for grade in grades {\n        if grade > 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp71ncpi03.rs:60:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n\tlet mut letter_grades = Vec::new();\n\tfor grade\
    \ in grades {\n\t\tif grade >= 4.0 {\n\t\t\tletter_grades.push(String::from(\"\
    A+\"));\n\t\t} else if grade >= 3.7 {\n\t\t\tletter_grades.push(String::from(\"\
    A\"));\n\t\t} else if grade >= 3.3 {\n\t\t\tletter_grades.push(String::from(\"\
    A-\"));\n\t\t} else if grade >= 3.0 {\n\t\t\tletter_grades.push(String::from(\"\
    B+\"));\n\t\t} else if grade >= 2.7 {\n\t\t\tletter_grades.push(String::from(\"\
    B\"));\n\t\t} else if grade >= 2.3 {\n\t\t\tletter_grades.push(String::from(\"\
    B-\"));\n\t\t} else if grade >= 2.0 {\n\t\t\tletter_grades.push(String::from(\"\
    C+\"));\n\t\t} else if grade >= 1.7 {\n\t\t\tletter_grades.push(String::from(\"\
    C\"));\n\t\t} else if grade >= 1.3 {\n\t\t\tletter_grades.push(String::from(\"\
    C-\"));\n\t\t} else if grade >= 1.0 {\n\t\t\tletter_grades.push(String::from(\"\
    D+\"));\n\t\t} else if grade >= 0.7 {\n\t\t\tletter_grades.push(String::from(\"\
    D\"));\n\t\t} else if grade >= 0.0 {\n\t\t\tletter_grades.push(String::from(\"\
    D-\"));\n\t\t} else {\n\t\t\tletter_grades.push(String::from(\"E\"));\n\t\t}\n\
    \t}\n\tletter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpt3i40sav.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| convert_to_letter_grade(*g)).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `convert_to_letter_grade` in this scope\n\
    \  --> /tmp/tmpjl5rvser.rs:24:27\n   |\n24 |     grades.iter().map(|g| convert_to_letter_grade(*g)).collect()\n\
    \   |                           ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut vec = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            vec.push(String::from(\"A+\"\
    ));\n        } else if grade >= 3.7 {\n            vec.push(String::from(\"A\"\
    ));\n        } else if grade >= 3.3 {\n            vec.push(String::from(\"A-\"\
    ));\n        } else if grade >= 3.0 {\n            vec.push(String::from(\"B+\"\
    ));\n        } else if grade >= 2.7 {\n            vec.push(String::from(\"B\"\
    ));\n        } else if grade >= 2.3 {\n            vec.push(String::from(\"B-\"\
    ));\n        } else if grade >= 2.0 {\n            vec.push(String::from(\"C+\"\
    ));\n        } else if grade >= 1.7 {\n            vec.push(String::from(\"C\"\
    ));\n        } else if grade >= 1.3 {\n            vec.push(String::from(\"C-\"\
    ));\n        } else if grade >= 1.0 {\n            vec.push(String::from(\"D+\"\
    ));\n        } else if grade >= 0.7 {\n            vec.push(String::from(\"D\"\
    ));\n        } else if grade >= 0.0 {\n            vec.push(String::from(\"D-\"\
    ));\n        } else {\n            vec.push(String::from(\"E\"));\n        }\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkzdigie0.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let\
    \ mut grade_map = HashMap::new();\n    grade_map.insert(4.0, String::from(\"A+\"\
    ));\n    grade_map.insert(3.7, String::from(\"A\"));\n    grade_map.insert(3.3,\
    \ String::from(\"A-\"));\n    grade_map.insert(3.0, String::from(\"B+\"));\n \
    \   grade_map.insert(2.7, String::from(\"B\"));\n    grade_map.insert(2.3, String::from(\"\
    B-\"));\n    grade_map.insert(2.0, String::from(\"C+\"));\n    grade_map.insert(1.7,\
    \ String::from(\"C\"));\n    grade_map.insert(1.3, String::from(\"C-\"));\n  \
    \  grade_map.insert(1.0, String::from(\"D+\"));\n    grade_map.insert(0.7, String::from(\"\
    D\"));\n    grade_map.insert(0.0, String::from(\"D-\"));\n    grade_map.insert(-1.0,\
    \ String::from(\"E\"));\n\n    for grade in grades {\n        for (k, v) in &grade_map\
    \ {\n            if grade >= *k {\n                letter_grades.push(v.clone());\n\
    \                break;\n            }\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpeg6wovfs.rs:25:25\n   |\n25 |     let mut grade_map = HashMap::new();\n\
    \   |                         ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Your function here!\n    grades.iter().map(|grade|\
    \ {\n        if *grade >= 4.0 {\n            String::from(\"A+\")\n        } else\
    \ if *grade >= 3.7 {\n            String::from(\"A\")\n        } else if *grade\
    \ >= 3.3 {\n            String::from(\"A-\")\n        } else if *grade >= 3.0\
    \ {\n            String::from(\"B+\")\n        } else if *grade >= 2.7 {\n   \
    \         String::from(\"B\")\n        } else if *grade >= 2.3 {\n           \
    \ String::from(\"B-\")\n        } else if *grade >= 2.0 {\n            String::from(\"\
    C+\")\n        } else if *grade >= 1.7 {\n            String::from(\"C\")\n  \
    \      } else if *grade >= 1.3 {\n            String::from(\"C-\")\n        }\
    \ else if *grade >= 1.0 {\n            String::from(\"D+\")\n        } else if\
    \ *grade >= 0.7 {\n            String::from(\"D\")\n        } else if *grade >=\
    \ 0.0 {\n            String::from(\"D-\")\n        } else {\n            String::from(\"\
    E\")\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp3jpwbpuc.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        let mut grade\
    \ = \"E\";\n        if *g >= 4.0 {\n            grade = \"A+\";\n        } else\
    \ if *g >= 3.7 {\n            grade = \"A\";\n        } else if *g >= 3.3 {\n\
    \            grade = \"A-\";\n        } else if *g >= 3.0 {\n            grade\
    \ = \"B+\";\n        } else if *g >= 2.7 {\n            grade = \"B\";\n     \
    \   } else if *g >= 2.3 {\n            grade = \"B-\";\n        } else if *g >=\
    \ 2.0 {\n            grade = \"C+\";\n        } else if *g >= 1.7 {\n        \
    \    grade = \"C\";\n        } else if *g >= 1.3 {\n            grade = \"C-\"\
    ;\n        } else if *g >= 1.0 {\n            grade = \"D+\";\n        } else\
    \ if *g >= 0.7 {\n            grade = \"D\";\n        } else if *g >= 0.0 {\n\
    \            grade = \"D-\";\n        }\n        grade.to_string()\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpf5oei9sx.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ i in grades {\n        if i >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if i >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if i >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if i >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if i >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if i >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if i >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if i >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if i >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if i >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if i >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if i >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdqxt8ngk.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut ret = Vec::new();\n    for g in grades\
    \ {\n        if g >= 4.0 {\n            ret.push(String::from(\"A+\"));\n    \
    \    } else if g >= 3.7 {\n            ret.push(String::from(\"A\"));\n      \
    \  } else if g >= 3.3 {\n            ret.push(String::from(\"A-\"));\n       \
    \ } else if g >= 3.0 {\n            ret.push(String::from(\"B+\"));\n        }\
    \ else if g >= 2.7 {\n            ret.push(String::from(\"B\"));\n        } else\
    \ if g >= 2.3 {\n            ret.push(String::from(\"B-\"));\n        } else if\
    \ g >= 2.0 {\n            ret.push(String::from(\"C+\"));\n        } else if g\
    \ >= 1.7 {\n            ret.push(String::from(\"C\"));\n        } else if g >=\
    \ 1.3 {\n            ret.push(String::from(\"C-\"));\n        } else if g >= 1.0\
    \ {\n            ret.push(String::from(\"D+\"));\n        } else if g >= 0.7 {\n\
    \            ret.push(String::from(\"D\"));\n        } else if g >= 0.0 {\n  \
    \          ret.push(String::from(\"D-\"));\n        } else {\n            ret.push(String::from(\"\
    E\"));\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprz_xgosq.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output = Vec::new();\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            output.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            output.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            output.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            output.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            output.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            output.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            output.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            output.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            output.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            output.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            output.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            output.push(String::from(\"\
    D-\"));\n        } else {\n            output.push(String::from(\"E\"));\n   \
    \     }\n    }\n    output\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpuvygc7k7.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        match *grade\
    \ {\n            4.0 => \"A+\",\n            3.7...4.0 => \"A\",\n           \
    \ 3.3...3.7 => \"A-\",\n            3.0...3.3 => \"B+\",\n            2.7...3.0\
    \ => \"B\",\n            2.3...2.7 => \"B-\",\n            2.0...2.3 => \"C+\"\
    ,\n            1.7...2.0 => \"C\",\n            1.3...1.7 => \"C-\",\n       \
    \     1.0...1.3 => \"D+\",\n            0.7...1.0 => \"D\",\n            0.0...0.7\
    \ => \"D-\",\n            _ => \"E\",\n        }\n    }).map(|x| String::from(x)).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpipjuvp_n.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpewf4_80o.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // The student has to write the function body\n\
    \    let mut letter_grades = Vec::new();\n    for grade in grades.iter() {\n \
    \       letter_grades.push(match grade {\n            4.0 => String::from(\"A+\"\
    ),\n            _ if *grade > 3.7 => String::from(\"A\"),\n            _ if *grade\
    \ > 3.3 => String::from(\"A-\"),\n            _ if *grade > 3.0 => String::from(\"\
    B+\"),\n            _ if *grade > 2.7 => String::from(\"B\"),\n            _ if\
    \ *grade > 2.3 => String::from(\"B-\"),\n            _ if *grade > 2.0 => String::from(\"\
    C+\"),\n            _ if *grade > 1.7 => String::from(\"C\"),\n            _ if\
    \ *grade > 1.3 => String::from(\"C-\"),\n            _ if *grade > 1.0 => String::from(\"\
    D+\"),\n            _ if *grade > 0.7 => String::from(\"D\"),\n            _ if\
    \ *grade > 0.0 => String::from(\"D-\"),\n            _ => String::from(\"E\"),\n\
    \        });\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        let grade_string = match grade {\n            0.0...1.0\
    \ => \"D-\",\n            1.0...1.3 => \"D\",\n            1.3...1.7 => \"D+\"\
    ,\n            1.7...2.0 => \"C-\",\n            2.0...2.3 => \"C\",\n       \
    \     2.3...2.7 => \"C+\",\n            2.7...3.0 => \"B-\",\n            3.0...3.3\
    \ => \"B\",\n            3.3...3.7 => \"B+\",\n            3.7...4.0 => \"A-\"\
    ,\n            _ => \"A+\",\n        };\n        letter_grades.push(String::from(grade_string));\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A-\", \"B-\", \"D+\", \"C-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8wbg9ol3.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Write your code here\n    // Feel free to\
    \ create helper functions if needed.\n    Vec::new()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp3f826ud2.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec = Vec::new();\n    for g\
    \ in grades {\n        if g == 4.0 {\n            grades_vec.push(String::from(\"\
    A+\"));\n        } else if g >= 3.7 {\n            grades_vec.push(String::from(\"\
    A\"));\n        } else if g >= 3.3 {\n            grades_vec.push(String::from(\"\
    A-\"));\n        } else if g >= 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if g >= 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if g >= 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if g >= 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if g >= 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if g >= 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if g >= 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if g >= 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if g > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpqen159qr.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output = Vec::new();\n    let grades_table\
    \ = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"];\n    let boundaries = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    for g in grades {\n        let (i, _) =\
    \ boundaries.iter().enumerate().find(|(_, &b)| g >= b).unwrap();\n        output.push(String::from(grades_table[i]));\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp64czxvh_.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades = grades.iter().map(|x| {\n     \
    \   let x = *x;\n        if x >= 4.0 {\n            String::from(\"A+\")\n   \
    \     } else if x >= 3.7 {\n            String::from(\"A\")\n        } else if\
    \ x >= 3.3 {\n            String::from(\"A-\")\n        } else if x >= 3.0 {\n\
    \            String::from(\"B+\")\n        } else if x >= 2.7 {\n            String::from(\"\
    B\")\n        } else if x >= 2.3 {\n            String::from(\"B-\")\n       \
    \ } else if x >= 2.0 {\n            String::from(\"C+\")\n        } else if x\
    \ >= 1.7 {\n            String::from(\"C\")\n        } else if x >= 1.3 {\n  \
    \          String::from(\"C-\")\n        } else if x >= 1.0 {\n            String::from(\"\
    D+\")\n        } else if x >= 0.7 {\n            String::from(\"D\")\n       \
    \ } else if x >= 0.0 {\n            String::from(\"D-\")\n        } else {\n \
    \           String::from(\"E\")\n        }\n    }).collect();\n    grades\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpcc564thh.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|n| grade_equation(*n)).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `grade_equation` in this scope\n  -->\
    \ /tmp/tmp2hn3t2u5.rs:24:27\n   |\n24 |     grades.iter().map(|n| grade_equation(*n)).collect()\n\
    \   |                           ^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letter_grades = vec![String::from(\"A+\"\
    ), String::from(\"A\"), String::from(\"A-\"), String::from(\"B+\"), String::from(\"\
    B\"), String::from(\"B-\"), String::from(\"C+\"), String::from(\"C\"), String::from(\"\
    C-\"), String::from(\"D+\"), String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    E\")];\n    let cutoffs = vec![4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0,\
    \ 0.7, 0.0, 0.0];\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        for i in 0..letter_grades.len() {\n            if grade\
    \ >= cutoffs[i] {\n                result.push(letter_grades[i].clone());\n  \
    \              break;\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpoxxsi5un.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| match *x {\n        x\
    \ if x >= 4.0 => String::from(\"A+\"),\n        x if x >= 3.7 => String::from(\"\
    A\"),\n        x if x >= 3.3 => String::from(\"A-\"),\n        x if x >= 3.0 =>\
    \ String::from(\"B+\"),\n        x if x >= 2.7 => String::from(\"B\"),\n     \
    \   x if x >= 2.3 => String::from(\"B-\"),\n        x if x >= 2.0 => String::from(\"\
    C+\"),\n        x if x >= 1.7 => String::from(\"C\"),\n        x if x >= 1.3 =>\
    \ String::from(\"C-\"),\n        x if x >= 1.0 => String::from(\"D+\"),\n    \
    \    x if x >= 0.7 => String::from(\"D\"),\n        x if x >= 0.0 => String::from(\"\
    D-\"),\n        _ => String::from(\"E\"),\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzmr2yvyk.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ &grade in grades.iter() {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpt2cz1wev.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letters = vec![\n        \"A+\", \"A\",\
    \ \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\",\n    ];\n    let cutoffs = vec![\n        4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0,\n    ];\n    let mut results = Vec::new();\n\
    \    for grade in grades {\n        let cutoff = match cutoffs.iter().filter(|x|\
    \ **x < grade).last() {\n            Some(x) => x,\n            None => &cutoffs[0],\n\
    \        };\n        let index = match cutoffs.iter().position(|x| x == cutoff)\
    \ {\n            Some(x) => x,\n            None => 0,\n        };\n        results.push(letters[index].to_string());\n\
    \    }\n    results\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"D-\", \"D-\", \"D-\", \"D-\", \"D-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmplb1gbzbc.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_hgteyts.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut new_grades = Vec::new();\n    for grade\
    \ in grades {\n        let letter_grade = match grade {\n            grade if\
    \ grade == 4.0 => \"A+\",\n            grade if grade > 3.7 => \"A\",\n      \
    \      grade if grade > 3.3 => \"A-\",\n            grade if grade > 3.0 => \"\
    B+\",\n            grade if grade > 2.7 => \"B\",\n            grade if grade\
    \ > 2.3 => \"B-\",\n            grade if grade > 2.0 => \"C+\",\n            grade\
    \ if grade > 1.7 => \"C\",\n            grade if grade > 1.3 => \"C-\",\n    \
    \        grade if grade > 1.0 => \"D+\",\n            grade if grade > 0.7 =>\
    \ \"D\",\n            grade if grade > 0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        };\n        new_grades.push(String::from(letter_grade));\n    }\n \
    \   new_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grade_letters = vec![\n        (4.0, \"\
    A+\"),\n        (3.7, \"A\"),\n        (3.3, \"A-\"),\n        (3.0, \"B+\"),\n\
    \        (2.7, \"B\"),\n        (2.3, \"B-\"),\n        (2.0, \"C+\"),\n     \
    \   (1.7, \"C\"),\n        (1.3, \"C-\"),\n        (1.0, \"D+\"),\n        (0.7,\
    \ \"D\"),\n        (0.0, \"D-\"),\n        (0.0, \"E\"),\n    ];\n\n    let mut\
    \ letter_grades = Vec::new();\n\n    for grade in grades {\n        for pair in\
    \ grade_letters.iter() {\n            if grade >= pair.0 {\n                letter_grades.push(pair.1.to_string());\n\
    \                break;\n            }\n        }\n    }\n\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpmnfj7bjc.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut vec = Vec::new();\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            vec.push(String::from(\"A+\"\
    ));\n        } else if grade > 3.7 {\n            vec.push(String::from(\"A\"\
    ));\n        } else if grade > 3.3 {\n            vec.push(String::from(\"A-\"\
    ));\n        } else if grade > 3.0 {\n            vec.push(String::from(\"B+\"\
    ));\n        } else if grade > 2.7 {\n            vec.push(String::from(\"B\"\
    ));\n        } else if grade > 2.3 {\n            vec.push(String::from(\"B-\"\
    ));\n        } else if grade > 2.0 {\n            vec.push(String::from(\"C+\"\
    ));\n        } else if grade > 1.7 {\n            vec.push(String::from(\"C\"\
    ));\n        } else if grade > 1.3 {\n            vec.push(String::from(\"C-\"\
    ));\n        } else if grade > 1.0 {\n            vec.push(String::from(\"D+\"\
    ));\n        } else if grade > 0.7 {\n            vec.push(String::from(\"D\"\
    ));\n        } else if grade > 0.0 {\n            vec.push(String::from(\"D-\"\
    ));\n        } else {\n            vec.push(String::from(\"E\"));\n        }\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letters = vec![\n        \"A+\", \"A\",\
    \ \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"\n    ];\n    let mut grade_letter: Vec<String> = Vec::new();\n    for\
    \ g in grades {\n        let grade_idx = (g * 4.0).round() as usize;\n       \
    \ if grade_idx >= letters.len() {\n            grade_letter.push(String::from(letters[0]));\n\
    \        } else {\n            grade_letter.push(String::from(letters[grade_idx]));\n\
    \        }\n    }\n    grade_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"E\", \"C\", \"C-\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp10dzyezk.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        let letter_grade = match grade {\n            4.0\
    \ => \"A+\",\n            a if a > 3.7 => \"A\",\n            a if a > 3.3 =>\
    \ \"A-\",\n            a if a > 3.0 => \"B+\",\n            a if a > 2.7 => \"\
    B\",\n            a if a > 2.3 => \"B-\",\n            a if a > 2.0 => \"C+\"\
    ,\n            a if a > 1.7 => \"C\",\n            a if a > 1.3 => \"C-\",\n \
    \           a if a > 1.0 => \"D+\",\n            a if a > 0.7 => \"D\",\n    \
    \        a if a > 0.0 => \"D-\",\n            _ => \"E\",\n        };\n      \
    \  letter_grades.push(String::from(letter_grade));\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades = grades\n        .iter()\n     \
    \   .map(|x| {\n            if *x >= 4.0 {\n                String::from(\"A+\"\
    )\n            } else if *x >= 3.7 {\n                String::from(\"A\")\n  \
    \          } else if *x >= 3.3 {\n                String::from(\"A-\")\n     \
    \       } else if *x >= 3.0 {\n                String::from(\"B+\")\n        \
    \    } else if *x >= 2.7 {\n                String::from(\"B\")\n            }\
    \ else if *x >= 2.3 {\n                String::from(\"B-\")\n            } else\
    \ if *x >= 2.0 {\n                String::from(\"C+\")\n            } else if\
    \ *x >= 1.7 {\n                String::from(\"C\")\n            } else if *x >=\
    \ 1.3 {\n                String::from(\"C-\")\n            } else if *x >= 1.0\
    \ {\n                String::from(\"D+\")\n            } else if *x >= 0.7 {\n\
    \                String::from(\"D\")\n            } else if *x >= 0.0 {\n    \
    \            String::from(\"D-\")\n            } else {\n                String::from(\"\
    E\")\n            }\n        })\n        .collect();\n    grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjf5vez0a.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(\n        |g|\n        match\
    \ *g {\n            4.0 => \"A+\",\n            x if x > 3.7 => \"A\",\n     \
    \       x if x > 3.3 => \"A-\",\n            x if x > 3.0 => \"B+\",\n       \
    \     x if x > 2.7 => \"B\",\n            x if x > 2.3 => \"B-\",\n          \
    \  x if x > 2.0 => \"C+\",\n            x if x > 1.7 => \"C\",\n            x\
    \ if x > 1.3 => \"C-\",\n            x if x > 1.0 => \"D+\",\n            x if\
    \ x > 0.7 => \"D\",\n            x if x > 0.0 => \"D-\",\n            _ => \"\
    E\",\n        }\n    ).map(|x| String::from(x)).collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // TODO: Implement this function\n    vec![]\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmplah52bf4.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpz0j915xd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        let letter_grade\
    \ = match *g {\n            4.0 => String::from(\"A+\"),\n            x if x >\
    \ 3.7 => String::from(\"A\"),\n            x if x > 3.3 => String::from(\"A-\"\
    ),\n            x if x > 3.0 => String::from(\"B+\"),\n            x if x > 2.7\
    \ => String::from(\"B\"),\n            x if x > 2.3 => String::from(\"B-\"),\n\
    \            x if x > 2.0 => String::from(\"C+\"),\n            x if x > 1.7 =>\
    \ String::from(\"C\"),\n            x if x > 1.3 => String::from(\"C-\"),\n  \
    \          x if x > 1.0 => String::from(\"D+\"),\n            x if x > 0.7 =>\
    \ String::from(\"D\"),\n            x if x > 0.0 => String::from(\"D-\"),\n  \
    \          _ => String::from(\"E\"),\n        };\n        letter_grade\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // let mut grades_letters: Vec<String> = Vec::new();\n\
    \    // grades.iter().map(|x| {\n    //     match *x {\n    //         4.0 =>\
    \ grades_letters.push(String::from(\"A+\")),\n    //         x if x > 3.7 => grades_letters.push(String::from(\"\
    A\")),\n    //         x if x > 3.3 => grades_letters.push(String::from(\"A-\"\
    )),\n    //         x if x > 3.0 => grades_letters.push(String::from(\"B+\")),\n\
    \    //         x if x > 2.7 => grades_letters.push(String::from(\"B\")),\n  \
    \  //         x if x > 2.3 => grades_letters.push(String::from(\"B-\")),\n   \
    \ //         x if x > 2.0 => grades_letters.push(String::from(\"C+\")),\n    //\
    \         x if x > 1.7 => grades_letters.push(String::from(\"C\")),\n    //  \
    \       x if x > 1.3 => grades_letters.push(String::from(\"C-\")),\n    //   \
    \      x if x > 1.0 => grades_letters.push(String::from(\"D+\")),\n    //    \
    \     x if x > 0.7 => grades_letters.push(String::from(\"D\")),\n    //      \
    \   x if x > 0.0 => grades_letters.push(String::from(\"D-\")),\n    //       \
    \  _ => grades_letters.push(String::from(\"E\")),\n    //     }\n    // }).collect();\n\
    \    grades.iter().map(|x| {\n        match *x {\n            4.0 => String::from(\"\
    A+\"),\n            x if x > 3.7 => String::from(\"A\"),\n            x if x >\
    \ 3.3 => String::from(\"A-\"),\n            x if x > 3.0 => String::from(\"B+\"\
    ),\n            x if x > 2.7 => String::from(\"B\"),\n            x if x > 2.3\
    \ => String::from(\"B-\"),\n            x if x > 2.0 => String::from(\"C+\"),\n\
    \            x if x > 1\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpine29ih0.rs:62:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n42 |     grades.iter().map(|x| {\n   |                      -    - unclosed\
    \ delimiter\n   |                      |\n   |                      unclosed delimiter\n\
    43 |         match *x {\n   |                  - this delimiter might not be properly\
    \ closed...\n...\n52 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n62 | }\n   |   ^\n\nerror: expected one of `.`, `=>`, `?`, or an operator,\
    \ found `}`\n  --> /tmp/tmpine29ih0.rs:52:1\n   |\n51 |             x if x > 1\n\
    \   |                       - expected one of `.`, `=>`, `?`, or an operator\n\
    52 | }\n   | ^ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpine29ih0.rs:43:9\n\
    \   |\n43 | /         match *x {\n44 | |             4.0 => String::from(\"A+\"\
    ),\n45 | |             x if x > 3.7 => String::from(\"A\"),\n46 | |          \
    \   x if x > 3.3 => String::from(\"A-\"),\n...  |\n51 | |             x if x >\
    \ 1\n52 | | }\n   | | ^- help: consider using a semicolon here\n   | |_|\n   |\
    \   expected `()`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpine29ih0.rs:42:5\n   |\n23 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n...\n42 | /\
    \     grades.iter().map(|x| {\n43 | |         match *x {\n44 | |             4.0\
    \ => String::from(\"A+\"),\n45 | |             x if x > 3.7 => String::from(\"\
    A\"),\n...  |\n61 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n62 | | }\n   | |__^ expected struct `Vec`, found\
    \ struct `Map`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Map<std::slice::Iter<'_, f64>, [closure@/tmp/tmpine29ih0.rs:42:23:\
    \ 62:3]>`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        match grade {\n            4.0..=std::f64::INFINITY\
    \ => letter_grades.push(String::from(\"A+\")),\n            3.7..=3.99 => letter_grades.push(String::from(\"\
    A\")),\n            3.3..=3.69 => letter_grades.push(String::from(\"A-\")),\n\
    \            3.0..=3.29 => letter_grades.push(String::from(\"B+\")),\n       \
    \     2.7..=2.99 => letter_grades.push(String::from(\"B\")),\n            2.3..=2.69\
    \ => letter_grades.push(String::from(\"B-\")),\n            2.0..=2.29 => letter_grades.push(String::from(\"\
    C+\")),\n            1.7..=1.99 => letter_grades.push(String::from(\"C\")),\n\
    \            1.3..=1.69 => letter_grades.push(String::from(\"C-\")),\n       \
    \     1.0..=1.29 => letter_grades.push(String::from(\"D+\")),\n            0.7..=0.99\
    \ => letter_grades.push(String::from(\"D\")),\n            0.0..=0.69 => letter_grades.push(String::from(\"\
    D-\")),\n            0.0..=0.0 => letter_grades.push(String::from(\"E\")),\n \
    \           _ => {}\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n \
    \   let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpibx0icpc.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letter_grade = |g: f64| -> String {\n  \
    \      if g == 4.0 {\n            return String::from(\"A+\");\n        } else\
    \ if g > 3.7 {\n            return String::from(\"A\");\n        } else if g >\
    \ 3.3 {\n            return String::from(\"A-\");\n        } else if g > 3.0 {\n\
    \            return String::from(\"B+\");\n        } else if g > 2.7 {\n     \
    \       return String::from(\"B\");\n        } else if g > 2.3 {\n           \
    \ return String::from(\"B-\");\n        } else if g > 2.0 {\n            return\
    \ String::from(\"C+\");\n        } else if g > 1.7 {\n            return String::from(\"\
    C\");\n        } else if g > 1.3 {\n            return String::from(\"C-\");\n\
    \        } else if g > 1.0 {\n            return String::from(\"D+\");\n     \
    \   } else if g > 0.7 {\n            return String::from(\"D\");\n        } else\
    \ if g > 0.0 {\n            return String::from(\"D-\");\n        } else {\n \
    \           return String::from(\"E\");\n        }\n    };\n    grades.iter().map(|g|\
    \ letter_grade(*g)).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ i in grades {\n        if i == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if i > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if i > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if i > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if i > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if i > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if i > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if i > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if i > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if i > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if i > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if i > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ i in grades {\n        if i >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if i >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if i >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if i >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if i >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if i >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if i >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if i >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if i >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if i >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if i >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if i >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdqxt8ngk.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grade_range =\n        [\n            (4.0,\
    \ \"A+\"),\n            (3.7, \"A\"),\n            (3.3, \"A-\"),\n          \
    \  (3.0, \"B+\"),\n            (2.7, \"B\"),\n            (2.3, \"B-\"),\n   \
    \         (2.0, \"C+\"),\n            (1.7, \"C\"),\n            (1.3, \"C-\"\
    ),\n            (1.0, \"D+\"),\n            (0.7, \"D\"),\n            (0.0, \"\
    D-\"),\n        ];\n    grades\n        .iter()\n        .map(|g| {\n        \
    \    match grade_range.iter().find(|(x, _)| *x <= *g) {\n                Some((_,\
    \ l)) => *l,\n                None => \"E\",\n            }\n        })\n    \
    \    .map(|l| String::from(l))\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpc86dcvrd.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ i in grades {\n        if i > 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if i > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if i > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if i > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if i > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if i > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if i > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if i > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if i > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if i > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if i > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if i > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpxwcvcdrd.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ g in grades {\n        if g >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if g >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if g >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if g >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if g >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if g >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if g >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if g >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if g >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if g >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if g >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if g >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkcfy2alo.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let result: Vec<String> = vec![];\n    let mut\
    \ index = 0;\n    while index < grades.len() {\n        if grades[index] == 4.0\
    \ {\n            result.push(String::from(\"A+\"));\n        } else if grades[index]\
    \ > 3.7 {\n            result.push(String::from(\"A\"));\n        } else if grades[index]\
    \ > 3.3 {\n            result.push(String::from(\"A-\"));\n        } else if grades[index]\
    \ > 3.0 {\n            result.push(String::from(\"B+\"));\n        } else if grades[index]\
    \ > 2.7 {\n            result.push(String::from(\"B\"));\n        } else if grades[index]\
    \ > 2.3 {\n            result.push(String::from(\"B-\"));\n        } else if grades[index]\
    \ > 2.0 {\n            result.push(String::from(\"C+\"));\n        } else if grades[index]\
    \ > 1.7 {\n            result.push(String::from(\"C\"));\n        } else if grades[index]\
    \ > 1.3 {\n            result.push(String::from(\"C-\"));\n        } else if grades[index]\
    \ > 1.0 {\n            result.push(String::from(\"D+\"));\n        } else if grades[index]\
    \ > 0.7 {\n            result.push(String::from(\"D\"));\n        } else if grades[index]\
    \ > 0.0 {\n            result.push(String::from(\"D-\"));\n        } else {\n\
    \            result.push(String::from(\"E\"));\n        }\n        index += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `result` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmprazojlff.rs:28:13\n   |\n24 |     let result: Vec<String>\
    \ = vec![];\n   |         ------ help: consider changing this to be mutable: `mut\
    \ result`\n...\n28 |             result.push(String::from(\"A+\"));\n   |    \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]:\
    \ cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmprazojlff.rs:30:13\n\
    \   |\n24 |     let result: Vec<String> = vec![];\n   |         ------ help: consider\
    \ changing this to be mutable: `mut result`\n...\n30 |             result.push(String::from(\"\
    A\"));\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmprazojlff.rs:32:13\n   |\n24 |     let result: Vec<String> = vec![];\n\
    \   |         ------ help: consider changing this to be mutable: `mut result`\n\
    ...\n32 |             result.push(String::from(\"A-\"));\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `result` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmprazojlff.rs:34:13\n   |\n24\
    \ |     let result: Vec<String> = vec![];\n   |         ------ help: consider\
    \ changing this to be mutable: `mut result`\n...\n34 |             result.push(String::from(\"\
    B+\"));\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmprazojlff.rs:36:13\n   |\n24 |     let result: Vec<String> = vec![];\n\
    \   |         ------ help: consider changing this to be mutable: `mut result`\n\
    ...\n36 |             result.push(String::from(\"B\"));\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `result` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmprazojlff.rs:38:13\n   |\n24\
    \ |     let result: Vec<String> = vec![];\n   |         ------ help: consider\
    \ changing this t"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // create a vector to hold the output\n    let\
    \ mut output = Vec::new();\n    // compare each grade with the table of GPA-letter\
    \ grade relationship\n    for grade in grades {\n        if grade >= 4.0 {\n \
    \           output.push(String::from(\"A+\"));\n        } else if grade >= 3.7\
    \ {\n            output.push(String::from(\"A\"));\n        } else if grade >=\
    \ 3.3 {\n            output.push(String::from(\"A-\"));\n        } else if grade\
    \ >= 3.0 {\n            output.push(String::from(\"B+\"));\n        } else if\
    \ grade >= 2.7 {\n            output.push(String::from(\"B\"));\n        } else\
    \ if grade >= 2.3 {\n            output.push(String::from(\"B-\"));\n        }\
    \ else if grade >= 2.0 {\n            output.push(String::from(\"C+\"));\n   \
    \     } else if grade >= 1.7 {\n            output.push(String::from(\"C\"));\n\
    \        } else if grade >= 1.3 {\n            output.push(String::from(\"C-\"\
    ));\n        } else if grade >= 1.0 {\n            output.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            output.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            output.push(String::from(\"\
    D-\"));\n        } else {\n            output.push(String::from(\"E\"));\n   \
    \     }\n    }\n    // return output\n    output\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp579go3op.rs:62:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ == 4.0 {\n            \"A+\".to_string()\n        } else if *grade >= 3.7 {\n\
    \            \"A\".to_string()\n        } else if *grade >= 3.3 {\n          \
    \  \"A-\".to_string()\n        } else if *grade >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *grade >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *grade >= 2.3 {\n            \"B-\".to_string()\n        } else if *grade\
    \ >= 2.0 {\n            \"C+\".to_string()\n        } else if *grade >= 1.7 {\n\
    \            \"C\".to_string()\n        } else if *grade >= 1.3 {\n          \
    \  \"C-\".to_string()\n        } else if *grade >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if *grade >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if *grade >= 0.0 {\n            \"D-\".to_string()\n        } else {\n     \
    \       \"E\".to_string()\n        }\n    }).collect()\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpi7m763fp.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        match *g {\n\
    \            4.0 => String::from(\"A+\"),\n            g if g > 3.7 => String::from(\"\
    A\"),\n            g if g > 3.3 => String::from(\"A-\"),\n            g if g >\
    \ 3.0 => String::from(\"B+\"),\n            g if g > 2.7 => String::from(\"B\"\
    ),\n            g if g > 2.3 => String::from(\"B-\"),\n            g if g > 2.0\
    \ => String::from(\"C+\"),\n            g if g > 1.7 => String::from(\"C\"),\n\
    \            g if g > 1.3 => String::from(\"C-\"),\n            g if g > 1.0 =>\
    \ String::from(\"D+\"),\n            g if g > 0.7 => String::from(\"D\"),\n  \
    \          g if g > 0.0 => String::from(\"D-\"),\n            _ => String::from(\"\
    E\"),\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|&grade| {\n        match\
    \ grade {\n            4.0 => \"A+\",\n            3.7..=std::f64::MAX => \"A\"\
    ,\n            3.3..=3.7 => \"A-\",\n            3.0..=3.3 => \"B+\",\n      \
    \      2.7..=3.0 => \"B\",\n            2.3..=2.7 => \"B-\",\n            2.0..=2.3\
    \ => \"C+\",\n            1.7..=2.0 => \"C\",\n            1.3..=1.7 => \"C-\"\
    ,\n            1.0..=1.3 => \"D+\",\n            0.7..=1.0 => \"D\",\n       \
    \     0.0..=0.7 => \"D-\",\n            _ => \"E\",\n        }\n    }).map(|&grade|\
    \ String::from(grade)).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmp360049bq.rs:40:14\n   |\n40 |     }).map(|&grade| String::from(grade)).collect()\n\
    \   |              ^^^^^ doesn't have a size known at compile-time\n   |\n   =\
    \ help: the trait `Sized` is not implemented for `str`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\n\nerror[E0277]: the size for values of type `str` cannot be\
    \ known at compilation time\n   --> /tmp/tmp360049bq.rs:40:34\n    |\n40  |  \
    \   }).map(|&grade| String::from(grade)).collect()\n    |                    \
    \ ------------ ^^^^^ doesn't have a size known at compile-time\n    |        \
    \             |\n    |                     required by a bound introduced by this\
    \ call\n    |\n    = help: the trait `Sized` is not implemented for `str`\nnote:\
    \ required by a bound in `from`\n\nerror[E0277]: the trait bound `String: From<str>`\
    \ is not satisfied\n  --> /tmp/tmp360049bq.rs:40:21\n   |\n40 |     }).map(|&grade|\
    \ String::from(grade)).collect()\n   |                     ^^^^^^^^^^^^ the trait\
    \ `From<str>` is not implemented for `String`\n   |\n   = help: the following\
    \ other types implement trait `From<T>`:\n             <String as From<&String>>\n\
    \             <String as From<&mut str>>\n             <String as From<&str>>\n\
    \             <String as From<Box<str>>>\n             <String as From<Cow<'a,\
    \ str>>>\n             <String as From<char>>\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::with_capacity(grades.len());\n\
    \    for grade in grades {\n        let mut letter_grade = String::from(\"E\"\
    );\n        if grade >= 4.0 {\n            letter_grade = String::from(\"A+\"\
    );\n        } else if grade >= 3.7 {\n            letter_grade = String::from(\"\
    A\");\n        } else if grade >= 3.3 {\n            letter_grade = String::from(\"\
    A-\");\n        } else if grade >= 3.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade >= 2.7 {\n            letter_grade = String::from(\"\
    B\");\n        } else if grade >= 2.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade >= 2.0 {\n            letter_grade = String::from(\"\
    C+\");\n        } else if grade >= 1.7 {\n            letter_grade = String::from(\"\
    C\");\n        } else if grade >= 1.3 {\n            letter_grade = String::from(\"\
    C-\");\n        } else if grade >= 1.0 {\n            letter_grade = String::from(\"\
    D+\");\n        } else if grade >= 0.7 {\n            letter_grade = String::from(\"\
    D\");\n        } else if grade >= 0.0 {\n            letter_grade = String::from(\"\
    D-\");\n        }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpllmtlnz5.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        let g = *g;\n\
    \        if g == 4.0 {\n            String::from(\"A+\")\n        } else if g\
    \ > 3.7 {\n            String::from(\"A\")\n        } else if g > 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if g > 3.0 {\n            String::from(\"\
    B+\")\n        } else if g > 2.7 {\n            String::from(\"B\")\n        }\
    \ else if g > 2.3 {\n            String::from(\"B-\")\n        } else if g > 2.0\
    \ {\n            String::from(\"C+\")\n        } else if g > 1.7 {\n         \
    \   String::from(\"C\")\n        } else if g > 1.3 {\n            String::from(\"\
    C-\")\n        } else if g > 1.0 {\n            String::from(\"D+\")\n       \
    \ } else if g > 0.7 {\n            String::from(\"D\")\n        } else if g >\
    \ 0.0 {\n            String::from(\"D-\")\n        } else {\n            String::from(\"\
    E\")\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut converted_grades = Vec::new();\n   \
    \ for grade in grades {\n        let letter_grade: String;\n        match grade\
    \ {\n            4.0 => letter_grade = String::from(\"A+\"),\n            0.0\
    \ => letter_grade = String::from(\"E\"),\n            _ if grade >= 3.7 => letter_grade\
    \ = String::from(\"A\"),\n            _ if grade >= 3.3 => letter_grade = String::from(\"\
    A-\"),\n            _ if grade >= 3.0 => letter_grade = String::from(\"B+\"),\n\
    \            _ if grade >= 2.7 => letter_grade = String::from(\"B\"),\n      \
    \      _ if grade >= 2.3 => letter_grade = String::from(\"B-\"),\n           \
    \ _ if grade >= 2.0 => letter_grade = String::from(\"C+\"),\n            _ if\
    \ grade >= 1.7 => letter_grade = String::from(\"C\"),\n            _ if grade\
    \ >= 1.3 => letter_grade = String::from(\"C-\"),\n            _ if grade >= 1.0\
    \ => letter_grade = String::from(\"D+\"),\n            _ if grade >= 0.7 => letter_grade\
    \ = String::from(\"D\"),\n            _ => letter_grade = String::from(\"D-\"\
    ),\n        }\n        converted_grades.push(letter_grade);\n    }\n    converted_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp39_bf8wt.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letter_grade = |grade: f64| {\n        let\
    \ grade_string = match grade {\n            4.0 => \"A+\",\n            x if x\
    \ > 3.7 => \"A\",\n            x if x > 3.3 => \"A-\",\n            x if x > 3.0\
    \ => \"B+\",\n            x if x > 2.7 => \"B\",\n            x if x > 2.3 =>\
    \ \"B-\",\n            x if x > 2.0 => \"C+\",\n            x if x > 1.7 => \"\
    C\",\n            x if x > 1.3 => \"C-\",\n            x if x > 1.0 => \"D+\"\
    ,\n            x if x > 0.7 => \"D\",\n            x if x > 0.0 => \"D-\",\n \
    \           _ => \"E\",\n        };\n        String::from(grade_string)\n    };\n\
    \    grades.iter().map(|grade| letter_grade(*grade)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    vec![]\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpigficml9.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ number in grades {\n        if number == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if number > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if number > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if number > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if number > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if number > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if number > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if number > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if number > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if number > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if number > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if number > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec = Vec::new();\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            grades_vec.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            grades_vec.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            grades_vec.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp52xz22tz.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_result: Vec<String> = grades.iter().map(|grade|\
    \ {\n        let grade = *grade;\n        if grade == 4.0 {\n            String::from(\"\
    A+\")\n        } else if grade > 3.7 {\n            String::from(\"A\")\n    \
    \    } else if grade > 3.3 {\n            String::from(\"A-\")\n        } else\
    \ if grade > 3.0 {\n            String::from(\"B+\")\n        } else if grade\
    \ > 2.7 {\n            String::from(\"B\")\n        } else if grade > 2.3 {\n\
    \            String::from(\"B-\")\n        } else if grade > 2.0 {\n         \
    \   String::from(\"C+\")\n        } else if grade > 1.7 {\n            String::from(\"\
    C\")\n        } else if grade > 1.3 {\n            String::from(\"C-\")\n    \
    \    } else if grade > 1.0 {\n            String::from(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            String::from(\"D\")\n        } else if grade >\
    \ 0.0 {\n            String::from(\"D-\")\n        } else {\n            String::from(\"\
    E\")\n        }\n    }).collect();\n    grades_result\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_letters = grades.iter().map(|&x|\n\
    \        match x {\n            4.0 ... 5.0 => \"A+\",\n            3.7 ... 4.0\
    \ => \"A\",\n            3.3 ... 3.7 => \"A-\",\n            3.0 ... 3.3 => \"\
    B+\",\n            2.7 ... 3.0 => \"B\",\n            2.3 ... 2.7 => \"B-\",\n\
    \            2.0 ... 2.3 => \"C+\",\n            1.7 ... 2.0 => \"C\",\n     \
    \       1.3 ... 1.7 => \"C-\",\n            1.0 ... 1.3 => \"D+\",\n         \
    \   0.7 ... 1.0 => \"D\",\n            0.0 ... 0.7 => \"D-\",\n            0.0\
    \ ... 0.0 => \"E\",\n            _ => \"X\",\n        }\n    ).collect();\n  \
    \  grades_letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: `...` range patterns are deprecated\n  --> /tmp/tmpkcdywrrx.rs:26:17\n\
    \   |\n26 |             4.0 ... 5.0 => \"A+\",\n   |                 ^^^ help:\
    \ use `..=` for an inclusive range\n   |\n   = note: `#[warn(ellipsis_inclusive_range_patterns)]`\
    \ on by default\n   = warning: this is accepted in the current edition (Rust 2015)\
    \ but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmpkcdywrrx.rs:27:17\n\
    \   |\n27 |             3.7 ... 4.0 => \"A\",\n   |                 ^^^ help:\
    \ use `..=` for an inclusive range\n   |\n   = warning: this is accepted in the\
    \ current edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for\
    \ more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmpkcdywrrx.rs:28:17\n\
    \   |\n28 |             3.3 ... 3.7 => \"A-\",\n   |                 ^^^ help:\
    \ use `..=` for an inclusive range\n   |\n   = warning: this is accepted in the\
    \ current edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for\
    \ more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmpkcdywrrx.rs:29:17\n\
    \   |\n29 |             3.0 ... 3.3 => \"B+\",\n   |                 ^^^ help:\
    \ use `..=` for an inclusive range\n   |\n   = warning: this is accepted in the\
    \ current edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for\
    \ more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmpkcdywrrx.rs:30:17\n\
    \   |\n30 |             2.7 ... 3.0 => \"B\",\n   |                 ^^^ help:\
    \ use `..=` for an inclusive range\n   |\n   = warning: this is accepted in the\
    \ current edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for "
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        let letter\
    \ = match *grade {\n            x if x == 4.0 => \"A+\",\n            x if x >\
    \ 3.7 => \"A\",\n            x if x > 3.3 => \"A-\",\n            x if x > 3.0\
    \ => \"B+\",\n            x if x > 2.7 => \"B\",\n            x if x > 2.3 =>\
    \ \"B-\",\n            x if x > 2.0 => \"C+\",\n            x if x > 1.7 => \"\
    C\",\n            x if x > 1.3 => \"C-\",\n            x if x > 1.0 => \"D+\"\
    ,\n            x if x > 0.7 => \"D\",\n            x if x > 0.0 => \"D-\",\n \
    \           _ => \"E\",\n        };\n        String::from(letter)\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|&grade| {\n        let mut\
    \ res = \"F\".to_string();\n        match grade {\n            4.0 => res = \"\
    A+\".to_string(),\n            grade if grade > 3.7 => res = \"A\".to_string(),\n\
    \            grade if grade > 3.3 => res = \"A-\".to_string(),\n            grade\
    \ if grade > 3.0 => res = \"B+\".to_string(),\n            grade if grade > 2.7\
    \ => res = \"B\".to_string(),\n            grade if grade > 2.3 => res = \"B-\"\
    .to_string(),\n            grade if grade > 2.0 => res = \"C+\".to_string(),\n\
    \            grade if grade > 1.7 => res = \"C\".to_string(),\n            grade\
    \ if grade > 1.3 => res = \"C-\".to_string(),\n            grade if grade > 1.0\
    \ => res = \"D+\".to_string(),\n            grade if grade > 0.7 => res = \"D\"\
    .to_string(),\n            grade if grade > 0.0 => res = \"D-\".to_string(),\n\
    \            _ => res = \"F\".to_string(),\n        }\n        res\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"F\"]`,\n right: `[\"E\"]`', /tmp/tmpdh5rsd9n.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output: Vec<String> = Vec::new();\n\
    \    let grade_table = vec![\n        (4.0, \"A+\"),\n        (3.7, \"A\"),\n\
    \        (3.3, \"A-\"),\n        (3.0, \"B+\"),\n        (2.7, \"B\"),\n     \
    \   (2.3, \"B-\"),\n        (2.0, \"C+\"),\n        (1.7, \"C\"),\n        (1.3,\
    \ \"C-\"),\n        (1.0, \"D+\"),\n        (0.7, \"D\"),\n        (0.0, \"D-\"\
    ),\n    ];\n    for g in grades {\n        if g >= 4.0 {\n            output.push(String::from(\"\
    A+\"));\n        } else if g > 0.0 {\n            for grade in grade_table.iter()\
    \ {\n                if g >= grade.0 {\n                    output.push(String::from(grade.1));\n\
    \                    break;\n                }\n            }\n        } else\
    \ {\n            output.push(String::from(\"E\"));\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp9x_aec9i.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let new_grades: Vec<String> = grades.iter().map(|&grade|\
    \ {\n        match grade {\n            4.0 => String::from(\"A+\"),\n       \
    \     grade if grade > 3.7 => String::from(\"A\"),\n            grade if grade\
    \ > 3.3 => String::from(\"A-\"),\n            grade if grade > 3.0 => String::from(\"\
    B+\"),\n            grade if grade > 2.7 => String::from(\"B\"),\n           \
    \ grade if grade > 2.3 => String::from(\"B-\"),\n            grade if grade >\
    \ 2.0 => String::from(\"C+\"),\n            grade if grade > 1.7 => String::from(\"\
    C\"),\n            grade if grade > 1.3 => String::from(\"C-\"),\n           \
    \ grade if grade > 1.0 => String::from(\"D+\"),\n            grade if grade >\
    \ 0.7 => String::from(\"D\"),\n            grade if grade > 0.0 => String::from(\"\
    D-\"),\n            _ => String::from(\"E\"),\n        }\n    }).collect();\n\
    \    new_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::with_capacity(grades.len());\n\
    \    for grade in grades {\n        let mut letter_grade = String::from(\"E\"\
    );\n        if grade > 4.0 {\n            letter_grade = String::from(\"A+\");\n\
    \        } else if grade > 3.7 {\n            letter_grade = String::from(\"A\"\
    );\n        } else if grade > 3.3 {\n            letter_grade = String::from(\"\
    A-\");\n        } else if grade > 3.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade > 2.7 {\n            letter_grade = String::from(\"\
    B\");\n        } else if grade > 2.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 2.0 {\n            letter_grade = String::from(\"\
    C+\");\n        } else if grade > 1.7 {\n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 1.3 {\n            letter_grade = String::from(\"\
    C-\");\n        } else if grade > 1.0 {\n            letter_grade = String::from(\"\
    D+\");\n        } else if grade > 0.7 {\n            letter_grade = String::from(\"\
    D\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    D-\");\n        }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmplhduamlx.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    //  Get the corresponding letter grade for each\
    \ numerical grade.\n    grades.iter().map(|&grade| {\n        if grade >= 4.0\
    \ {\n            \"A+\".to_string()\n        } else if grade >= 3.7 {\n      \
    \      \"A\".to_string()\n        } else if grade >= 3.3 {\n            \"A-\"\
    .to_string()\n        } else if grade >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if grade >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if grade >= 2.3 {\n            \"B-\".to_string()\n        } else if grade >=\
    \ 2.0 {\n            \"C+\".to_string()\n        } else if grade >= 1.7 {\n  \
    \          \"C\".to_string()\n        } else if grade >= 1.3 {\n            \"\
    C-\".to_string()\n        } else if grade >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if grade >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if grade >= 0.0 {\n            \"D-\".to_string()\n        } else {\n      \
    \      \"E\".to_string()\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpfeldvulh.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| match *x {\n        4.0\
    \ => String::from(\"A+\"),\n        x if x > 3.7 => String::from(\"A\"),\n   \
    \     x if x > 3.3 => String::from(\"A-\"),\n        x if x > 3.0 => String::from(\"\
    B+\"),\n        x if x > 2.7 => String::from(\"B\"),\n        x if x > 2.3 =>\
    \ String::from(\"B-\"),\n        x if x > 2.0 => String::from(\"C+\"),\n     \
    \   x if x > 1.7 => String::from(\"C\"),\n        x if x > 1.3 => String::from(\"\
    C-\"),\n        x if x > 1.0 => String::from(\"D+\"),\n        x if x > 0.7 =>\
    \ String::from(\"D\"),\n        x if x > 0.0 => String::from(\"D-\"),\n      \
    \  _ => String::from(\"E\"),\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ x in grades {\n        if x == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if x >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if x >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if x >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if x >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if x >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if x >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if x >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if x >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if x >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if x >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if x >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmphcb2_316.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_equation = |x| {\n        if x ==\
    \ 4.0 {\n            return \"A+\";\n        } else if x > 3.7 {\n           \
    \ return \"A\";\n        } else if x > 3.3 {\n            return \"A-\";\n   \
    \     } else if x > 3.0 {\n            return \"B+\";\n        } else if x > 2.7\
    \ {\n            return \"B\";\n        } else if x > 2.3 {\n            return\
    \ \"B-\";\n        } else if x > 2.0 {\n            return \"C+\";\n        }\
    \ else if x > 1.7 {\n            return \"C\";\n        } else if x > 1.3 {\n\
    \            return \"C-\";\n        } else if x > 1.0 {\n            return \"\
    D+\";\n        } else if x > 0.7 {\n            return \"D\";\n        } else\
    \ if x > 0.0 {\n            return \"D-\";\n        } else {\n            return\
    \ \"E\";\n        }\n    };\n    grades.iter().map(|x| String::from(grades_equation(*x))).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ i in grades {\n        if i > 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if i > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if i > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if i > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if i > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if i > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if i > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if i > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if i > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if i > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if i > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if i > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpxwcvcdrd.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| numerical_grade_to_letter(*x)).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numerical_grade_to_letter` in this\
    \ scope\n  --> /tmp/tmpfwle73w6.rs:24:27\n   |\n24 |     grades.iter().map(|x|\
    \ numerical_grade_to_letter(*x)).collect()\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n   \
    \ for grade in grades {\n        if grade == 4.0 {\n            res.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            res.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            res.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            res.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            res.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            res.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            res.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            res.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            res.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            res.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            res.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            res.push(String::from(\"\
    D-\"));\n        } else {\n            res.push(String::from(\"E\"));\n      \
    \  }\n    }\n    res\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ > 4.0 {\n            String::from(\"A+\")\n        } else if *grade > 3.7 {\n\
    \            String::from(\"A\")\n        } else if *grade > 3.3 {\n         \
    \   String::from(\"A-\")\n        } else if *grade > 3.0 {\n            String::from(\"\
    B+\")\n        } else if *grade > 2.7 {\n            String::from(\"B\")\n   \
    \     } else if *grade > 2.3 {\n            String::from(\"B-\")\n        } else\
    \ if *grade > 2.0 {\n            String::from(\"C+\")\n        } else if *grade\
    \ > 1.7 {\n            String::from(\"C\")\n        } else if *grade > 1.3 {\n\
    \            String::from(\"C-\")\n        } else if *grade > 1.0 {\n        \
    \    String::from(\"D+\")\n        } else if *grade > 0.7 {\n            String::from(\"\
    D\")\n        } else if *grade > 0.0 {\n            String::from(\"D-\")\n   \
    \     } else {\n            String::from(\"E\")\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmphnug2zeb.rs:57:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // YOUR CODE HERE\n    let letter_grade = |grade|\
    \ {\n        if grade == 4.0 {\n            \"A+\".to_string()\n        } else\
    \ if grade >= 3.7 {\n            \"A\".to_string()\n        } else if grade >=\
    \ 3.3 {\n            \"A-\".to_string()\n        } else if grade >= 3.0 {\n  \
    \          \"B+\".to_string()\n        } else if grade >= 2.7 {\n            \"\
    B\".to_string()\n        } else if grade >= 2.3 {\n            \"B-\".to_string()\n\
    \        } else if grade >= 2.0 {\n            \"C+\".to_string()\n        } else\
    \ if grade >= 1.7 {\n            \"C\".to_string()\n        } else if grade >=\
    \ 1.3 {\n            \"C-\".to_string()\n        } else if grade >= 1.0 {\n  \
    \          \"D+\".to_string()\n        } else if grade >= 0.7 {\n            \"\
    D\".to_string()\n        } else if grade >= 0.0 {\n            \"D-\".to_string()\n\
    \        } else {\n            \"E\".to_string()\n        }\n    };\n    grades.iter().map(letter_grade).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpx9mip3gb.rs:26:18\n\
    \   |\n26 |         if grade == 4.0 {\n   |                  ^^ no implementation\
    \ for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not\
    \ implemented for `&f64`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0277]: can't compare `&f64` with\
    \ `{float}`\n  --> /tmp/tmpx9mip3gb.rs:28:25\n   |\n28 |         } else if grade\
    \ >= 3.7 {\n   |                         ^^ no implementation for `&f64 < {float}`\
    \ and `&f64 > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>` is not\
    \ implemented for `&f64`\n   = help: the following other types implement trait\
    \ `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: can't compare `&f64`\
    \ with `{float}`\n  --> /tmp/tmpx9mip3gb.rs:30:25\n   |\n30 |         } else if\
    \ grade >= 3.3 {\n   |                         ^^ no implementation for `&f64\
    \ < {float}` and `&f64 > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: can't compare `&f64`\
    \ with `{float}`\n  --> /tmp/tmpx9mip3gb.rs:32:25\n   |\n32 |         } else if\
    \ grade >= 3.0 {\n   |                         ^^ no implementation for `&f64\
    \ < {float}` and `&f64 > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \   "
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut index = 0;\n    let mut letter_grades\
    \ = Vec::new();\n    for i in grades {\n        if i < 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else if i < 0.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if i < 1.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if i < 1.3 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if i < 1.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if i < 2.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if i < 2.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if i < 2.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if i < 3.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if i < 3.3 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if i < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if i < 4.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else {\n            letter_grades.push(String::from(\"A+\"));\n\
    \        }\n        index += 1;\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpgushafda.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| {\n        let grade =\
    \ String::from(\n            match *x {\n                4.0 => \"A+\",\n    \
    \            _ if *x > 3.7 => \"A\",\n                _ if *x > 3.3 => \"A-\"\
    ,\n                _ if *x > 3.0 => \"B+\",\n                _ if *x > 2.7 =>\
    \ \"B\",\n                _ if *x > 2.3 => \"B-\",\n                _ if *x >\
    \ 2.0 => \"C+\",\n                _ if *x > 1.7 => \"C\",\n                _ if\
    \ *x > 1.3 => \"C-\",\n                _ if *x > 1.0 => \"D+\",\n            \
    \    _ if *x > 0.7 => \"D\",\n                _ if *x > 0.0 => \"D-\",\n     \
    \           _ => \"E\",\n            }\n        );\n        grade\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpa6305pho.rs:24:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut new_grades = Vec::new();\n    for i\
    \ in grades {\n        if i >= 4.0 {\n            new_grades.push(String::from(\"\
    A+\"));\n        } else if i >= 3.7 {\n            new_grades.push(String::from(\"\
    A\"));\n        } else if i >= 3.3 {\n            new_grades.push(String::from(\"\
    A-\"));\n        } else if i >= 3.0 {\n            new_grades.push(String::from(\"\
    B+\"));\n        } else if i >= 2.7 {\n            new_grades.push(String::from(\"\
    B\"));\n        } else if i >= 2.3 {\n            new_grades.push(String::from(\"\
    B-\"));\n        } else if i >= 2.0 {\n            new_grades.push(String::from(\"\
    C+\"));\n        } else if i >= 1.7 {\n            new_grades.push(String::from(\"\
    C\"));\n        } else if i >= 1.3 {\n            new_grades.push(String::from(\"\
    C-\"));\n        } else if i >= 1.0 {\n            new_grades.push(String::from(\"\
    D+\"));\n        } else if i >= 0.7 {\n            new_grades.push(String::from(\"\
    D\"));\n        } else if i >= 0.0 {\n            new_grades.push(String::from(\"\
    D-\"));\n        } else {\n            new_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    new_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpvujag796.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        let grade\
    \ = *grade;\n        if grade >= 4.0 {\n            \"A+\".to_string()\n     \
    \   } else if grade >= 3.7 {\n            \"A\".to_string()\n        } else if\
    \ grade >= 3.3 {\n            \"A-\".to_string()\n        } else if grade >= 3.0\
    \ {\n            \"B+\".to_string()\n        } else if grade >= 2.7 {\n      \
    \      \"B\".to_string()\n        } else if grade >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if grade >= 2.0 {\n            \"C+\".to_string()\n\
    \        } else if grade >= 1.7 {\n            \"C\".to_string()\n        } else\
    \ if grade >= 1.3 {\n            \"C-\".to_string()\n        } else if grade >=\
    \ 1.0 {\n            \"D+\".to_string()\n        } else if grade >= 0.7 {\n  \
    \          \"D\".to_string()\n        } else if grade >= 0.0 {\n            \"\
    D-\".to_string()\n        } else {\n            \"E\".to_string()\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8m7jtfm3.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        match *grade\
    \ {\n            4.0 => \"A+\",\n            x if x > 3.7 => \"A\",\n        \
    \    x if x > 3.3 => \"A-\",\n            x if x > 3.0 => \"B+\",\n          \
    \  x if x > 2.7 => \"B\",\n            x if x > 2.3 => \"B-\",\n            x\
    \ if x > 2.0 => \"C+\",\n            x if x > 1.7 => \"C\",\n            x if\
    \ x > 1.3 => \"C-\",\n            x if x > 1.0 => \"D+\",\n            x if x\
    \ > 0.7 => \"D\",\n            x if x > 0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        }\n    }).map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| letter_grade(grade)).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `letter_grade` in this scope\n  -->\
    \ /tmp/tmp6p037ppa.rs:24:31\n   |\n24 |     grades.iter().map(|grade| letter_grade(grade)).collect()\n\
    \   |                               ^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut res = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            res.push(String::from(\"A+\"\
    ));\n        } else if grade >= 3.7 {\n            res.push(String::from(\"A\"\
    ));\n        } else if grade >= 3.3 {\n            res.push(String::from(\"A-\"\
    ));\n        } else if grade >= 3.0 {\n            res.push(String::from(\"B+\"\
    ));\n        } else if grade >= 2.7 {\n            res.push(String::from(\"B\"\
    ));\n        } else if grade >= 2.3 {\n            res.push(String::from(\"B-\"\
    ));\n        } else if grade >= 2.0 {\n            res.push(String::from(\"C+\"\
    ));\n        } else if grade >= 1.7 {\n            res.push(String::from(\"C\"\
    ));\n        } else if grade >= 1.3 {\n            res.push(String::from(\"C-\"\
    ));\n        } else if grade >= 1.0 {\n            res.push(String::from(\"D+\"\
    ));\n        } else if grade >= 0.7 {\n            res.push(String::from(\"D\"\
    ));\n        } else if grade >= 0.0 {\n            res.push(String::from(\"D-\"\
    ));\n        } else {\n            res.push(String::from(\"E\"));\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp0ws39fb0.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|n| match n {\n        4.0\
    \ => String::from(\"A+\"),\n        n if n > &3.7 => String::from(\"A\"),\n  \
    \      n if n > &3.3 => String::from(\"A-\"),\n        n if n > &3.0 => String::from(\"\
    B+\"),\n        n if n > &2.7 => String::from(\"B\"),\n        n if n > &2.3 =>\
    \ String::from(\"B-\"),\n        n if n > &2.0 => String::from(\"C+\"),\n    \
    \    n if n > &1.7 => String::from(\"C\"),\n        n if n > &1.3 => String::from(\"\
    C-\"),\n        n if n > &1.0 => String::from(\"D+\"),\n        n if n > &0.7\
    \ => String::from(\"D\"),\n        n if n > &0.0 => String::from(\"D-\"),\n  \
    \      _ => String::from(\"E\"),\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grade_letter = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            grade_letter.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            grade_letter.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            grade_letter.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            grade_letter.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grade_letter.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grade_letter.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grade_letter.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grade_letter.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grade_letter.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grade_letter.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grade_letter.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grade_letter.push(String::from(\"\
    D-\"));\n        } else {\n            grade_letter.push(String::from(\"E\"));\n\
    \        }\n    }\n    grade_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_ = grades\n        .iter()\n    \
    \    .map(|grade| match *grade {\n            4.0 => \"A+\",\n            _ if\
    \ *grade > 3.7 => \"A\",\n            _ if *grade > 3.3 => \"A-\",\n         \
    \   _ if *grade > 3.0 => \"B+\",\n            _ if *grade > 2.7 => \"B\",\n  \
    \          _ if *grade > 2.3 => \"B-\",\n            _ if *grade > 2.0 => \"C+\"\
    ,\n            _ if *grade > 1.7 => \"C\",\n            _ if *grade > 1.3 => \"\
    C-\",\n            _ if *grade > 1.0 => \"D+\",\n            _ if *grade > 0.7\
    \ => \"D\",\n            _ if *grade > 0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        })\n        .collect::<Vec<&str>>();\n    let grades_ = grades_.iter().map(|grade|\
    \ grade.to_string()).collect();\n    grades_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // your code here!\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpr207a00p.rs:25:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        let mut letter_grade = String::new();\n        if\
    \ grade > 4.0 {\n            letter_grade = \"A+\".to_string();\n        } else\
    \ if grade > 3.7 {\n            letter_grade = \"A\".to_string();\n        } else\
    \ if grade > 3.3 {\n            letter_grade = \"A-\".to_string();\n        }\
    \ else if grade > 3.0 {\n            letter_grade = \"B+\".to_string();\n    \
    \    } else if grade > 2.7 {\n            letter_grade = \"B\".to_string();\n\
    \        } else if grade > 2.3 {\n            letter_grade = \"B-\".to_string();\n\
    \        } else if grade > 2.0 {\n            letter_grade = \"C+\".to_string();\n\
    \        } else if grade > 1.7 {\n            letter_grade = \"C\".to_string();\n\
    \        } else if grade > 1.3 {\n            letter_grade = \"C-\".to_string();\n\
    \        } else if grade > 1.0 {\n            letter_grade = \"D+\".to_string();\n\
    \        } else if grade > 0.7 {\n            letter_grade = \"D\".to_string();\n\
    \        } else if grade > 0.0 {\n            letter_grade = \"D-\".to_string();\n\
    \        } else {\n            letter_grade = \"E\".to_string();\n        }\n\
    \        letter_grades.push(letter_grade);\n    }\n    letter_grades\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp7lt72pwo.rs:61:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7rl1paj6.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut vec = Vec::new();\n    for grade in\
    \ grades {\n        if grade > 4.0 {\n            vec.push(String::from(\"A+\"\
    ));\n        } else if grade > 3.7 {\n            vec.push(String::from(\"A\"\
    ));\n        } else if grade > 3.3 {\n            vec.push(String::from(\"A-\"\
    ));\n        } else if grade > 3.0 {\n            vec.push(String::from(\"B+\"\
    ));\n        } else if grade > 2.7 {\n            vec.push(String::from(\"B\"\
    ));\n        } else if grade > 2.3 {\n            vec.push(String::from(\"B-\"\
    ));\n        } else if grade > 2.0 {\n            vec.push(String::from(\"C+\"\
    ));\n        } else if grade > 1.7 {\n            vec.push(String::from(\"C\"\
    ));\n        } else if grade > 1.3 {\n            vec.push(String::from(\"C-\"\
    ));\n        } else if grade > 1.0 {\n            vec.push(String::from(\"D+\"\
    ));\n        } else if grade > 0.7 {\n            vec.push(String::from(\"D\"\
    ));\n        } else if grade > 0.0 {\n            vec.push(String::from(\"D-\"\
    ));\n        } else {\n            vec.push(String::from(\"E\"));\n        }\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpnb867m4a.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = Vec::new();\n    for g in\
    \ grades {\n        if g > 4.0 {\n            panic!(\"Error: grades cannot be\
    \ greater than 4.0!\");\n        }\n        if g >= 3.7 {\n            letters.push(String::from(\"\
    A+\"));\n        } else if g >= 3.3 {\n            letters.push(String::from(\"\
    A\"));\n        } else if g >= 3.0 {\n            letters.push(String::from(\"\
    A-\"));\n        } else if g >= 2.7 {\n            letters.push(String::from(\"\
    B+\"));\n        } else if g >= 2.3 {\n            letters.push(String::from(\"\
    B\"));\n        } else if g >= 2.0 {\n            letters.push(String::from(\"\
    B-\"));\n        } else if g >= 1.7 {\n            letters.push(String::from(\"\
    C+\"));\n        } else if g >= 1.3 {\n            letters.push(String::from(\"\
    C\"));\n        } else if g >= 1.0 {\n            letters.push(String::from(\"\
    C-\"));\n        } else if g >= 0.7 {\n            letters.push(String::from(\"\
    D+\"));\n        } else if g >= 0.0 {\n            letters.push(String::from(\"\
    D\"));\n        } else {\n            letters.push(String::from(\"E\"));\n   \
    \     }\n    }\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A-\", \"C+\", \"B-\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8tyxtogs.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let table = vec![\n        (4.0, \"A+\"),\n\
    \        (3.7, \"A\"),\n        (3.3, \"A-\"),\n        (3.0, \"B+\"),\n     \
    \   (2.7, \"B\"),\n        (2.3, \"B-\"),\n        (2.0, \"C+\"),\n        (1.7,\
    \ \"C\"),\n        (1.3, \"C-\"),\n        (1.0, \"D+\"),\n        (0.7, \"D\"\
    ),\n        (0.0, \"D-\"),\n    ];\n    let mut student_grades = vec![];\n   \
    \ for gpa in grades {\n        if gpa == 0.0 {\n            student_grades.push(String::from(\"\
    E\"));\n        } else {\n            for (gpa_value, letter_grade) in table.iter()\
    \ {\n                if gpa >= *gpa_value {\n                    student_grades.push(String::from(*letter_grade));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    student_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8u_7cwp_.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpewf4_80o.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output = Vec::new();\n    for grade\
    \ in grades {\n        let letter = match grade {\n            4.0 => String::from(\"\
    A+\"),\n            g if g > 3.7 => String::from(\"A\"),\n            g if g >\
    \ 3.3 => String::from(\"A-\"),\n            g if g > 3.0 => String::from(\"B+\"\
    ),\n            g if g > 2.7 => String::from(\"B\"),\n            g if g > 2.3\
    \ => String::from(\"B-\"),\n            g if g > 2.0 => String::from(\"C+\"),\n\
    \            g if g > 1.7 => String::from(\"C\"),\n            g if g > 1.3 =>\
    \ String::from(\"C-\"),\n            g if g > 1.0 => String::from(\"D+\"),\n \
    \           g if g > 0.7 => String::from(\"D\"),\n            g if g > 0.0 =>\
    \ String::from(\"D-\"),\n            _ => String::from(\"E\"),\n        };\n \
    \       output.push(letter);\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| {\n        let a = if\
    \ *x >= 4.0 { \"A+\" } else if *x >= 3.7 { \"A\" } else if *x >= 3.3 { \"A-\"\
    \ } else if *x >= 3.0 { \"B+\" } else if *x >= 2.7 { \"B\" } else if *x >= 2.3\
    \ { \"B-\" } else if *x >= 2.0 { \"C+\" } else if *x >= 1.7 { \"C\" } else if\
    \ *x >= 1.3 { \"C-\" } else if *x >= 1.0 { \"D+\" } else if *x >= 0.7 { \"D\"\
    \ } else if *x >= 0.0 { \"D-\" } else { \"E\" };\n        String::from(a)\n  \
    \  }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8aqa31k7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        if *g >= 4.0\
    \ {\n            \"A+\".to_string()\n        } else if *g >= 3.7 {\n         \
    \   \"A\".to_string()\n        } else if *g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *g >= 2.7 {\n            \"B\".to_string()\n        } else if *g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *g >= 1.0 {\n            \"D+\".to_string()\n        } else if *g >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp83d_6nly.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut let_grades = Vec::new();\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            let_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            let_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            let_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            let_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            let_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            let_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            let_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            let_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            let_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            let_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            let_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            let_grades.push(String::from(\"\
    D-\"));\n        } else {\n            let_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    let_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|&g| match g {\n        4.0\
    \ => String::from(\"A+\"),\n        g if g > 3.7 => String::from(\"A\"),\n   \
    \     g if g > 3.3 => String::from(\"A-\"),\n        g if g > 3.0 => String::from(\"\
    B+\"),\n        g if g > 2.7 => String::from(\"B\"),\n        g if g > 2.3 =>\
    \ String::from(\"B-\"),\n        g if g > 2.0 => String::from(\"C+\"),\n     \
    \   g if g > 1.7 => String::from(\"C\"),\n        g if g > 1.3 => String::from(\"\
    C-\"),\n        g if g > 1.0 => String::from(\"D+\"),\n        g if g > 0.7 =>\
    \ String::from(\"D\"),\n        g if g > 0.0 => String::from(\"D-\"),\n      \
    \  _ => String::from(\"E\"),\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            \"A+\".to_string()\n        } else if *grade >= 3.7 {\n\
    \            \"A\".to_string()\n        } else if *grade >= 3.3 {\n          \
    \  \"A-\".to_string()\n        } else if *grade >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *grade >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *grade >= 2.3 {\n            \"B-\".to_string()\n        } else if *grade\
    \ >= 2.0 {\n            \"C+\".to_string()\n        } else if *grade >= 1.7 {\n\
    \            \"C\".to_string()\n        } else if *grade >= 1.3 {\n          \
    \  \"C-\".to_string()\n        } else if *grade >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if *grade >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if *grade >= 0.0 {\n            \"D-\".to_string()\n        } else {\n     \
    \       \"E\".to_string()\n        }\n    }).collect()\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpuqec4l4w.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ g in grades {\n        if g >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if g >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if g >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if g >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if g >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if g >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if g >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if g >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if g >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if g >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if g >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if g >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkcfy2alo.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_hgteyts.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 { \"A+\".to_string() }\n        else if *grade >= 3.7 { \"A\".to_string()\
    \ }\n        else if *grade >= 3.3 { \"A-\".to_string() }\n        else if *grade\
    \ >= 3.0 { \"B+\".to_string() }\n        else if *grade >= 2.7 { \"B\".to_string()\
    \ }\n        else if *grade >= 2.3 { \"B-\".to_string() }\n        else if *grade\
    \ >= 2.0 { \"C+\".to_string() }\n        else if *grade >= 1.7 { \"C\".to_string()\
    \ }\n        else if *grade >= 1.3 { \"C-\".to_string() }\n        else if *grade\
    \ >= 1.0 { \"D+\".to_string() }\n        else if *grade >= 0.7 { \"D\".to_string()\
    \ }\n        else if *grade >= 0.0 { \"D-\".to_string() }\n        else { \"E\"\
    .to_string() }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4nbjdp7l.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output: Vec<String> = Vec::new();\n\
    \    for g in grades {\n        let letter_grade: String;\n        if g >= 4.0\
    \ {\n            letter_grade = String::from(\"A+\");\n        } else if g >=\
    \ 3.7 {\n            letter_grade = String::from(\"A\");\n        } else if g\
    \ >= 3.3 {\n            letter_grade = String::from(\"A-\");\n        } else if\
    \ g >= 3.0 {\n            letter_grade = String::from(\"B+\");\n        } else\
    \ if g >= 2.7 {\n            letter_grade = String::from(\"B\");\n        } else\
    \ if g >= 2.3 {\n            letter_grade = String::from(\"B-\");\n        } else\
    \ if g >= 2.0 {\n            letter_grade = String::from(\"C+\");\n        } else\
    \ if g >= 1.7 {\n            letter_grade = String::from(\"C\");\n        } else\
    \ if g >= 1.3 {\n            letter_grade = String::from(\"C-\");\n        } else\
    \ if g >= 1.0 {\n            letter_grade = String::from(\"D+\");\n        } else\
    \ if g >= 0.7 {\n            letter_grade = String::from(\"D\");\n        } else\
    \ if g >= 0.0 {\n            letter_grade = String::from(\"D-\");\n        } else\
    \ {\n            letter_grade = String::from(\"E\");\n        }\n        output.push(letter_grade);\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpo0uyxodf.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ i in grades {\n        if i == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if i >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if i >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if i >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if i >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if i >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if i >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if i >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if i >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if i >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if i >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if i >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp6a7r3nu2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ &grade in grades.iter() {\n        let mut letter_grade = \"N/A\".to_string();\n\
    \        if grade == 4.0 {\n            letter_grade = \"A+\".to_string();\n \
    \       } else if grade > 3.7 {\n            letter_grade = \"A\".to_string();\n\
    \        } else if grade > 3.3 {\n            letter_grade = \"A-\".to_string();\n\
    \        } else if grade > 3.0 {\n            letter_grade = \"B+\".to_string();\n\
    \        } else if grade > 2.7 {\n            letter_grade = \"B\".to_string();\n\
    \        } else if grade > 2.3 {\n            letter_grade = \"B-\".to_string();\n\
    \        } else if grade > 2.0 {\n            letter_grade = \"C+\".to_string();\n\
    \        } else if grade > 1.7 {\n            letter_grade = \"C\".to_string();\n\
    \        } else if grade > 1.3 {\n            letter_grade = \"C-\".to_string();\n\
    \        } else if grade > 1.0 {\n            letter_grade = \"D+\".to_string();\n\
    \        } else if grade > 0.7 {\n            letter_grade = \"D\".to_string();\n\
    \        } else if grade > 0.0 {\n            letter_grade = \"D-\".to_string();\n\
    \        } else if grade == 0.0 {\n            letter_grade = \"E\".to_string();\n\
    \        }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        match grade {\n            4.0 => result.push(String::from(\"\
    A+\")),\n            _ if grade > 3.7 => result.push(String::from(\"A\")),\n \
    \           _ if grade > 3.3 => result.push(String::from(\"A-\")),\n         \
    \   _ if grade > 3.0 => result.push(String::from(\"B+\")),\n            _ if grade\
    \ > 2.7 => result.push(String::from(\"B\")),\n            _ if grade > 2.3 =>\
    \ result.push(String::from(\"B-\")),\n            _ if grade > 2.0 => result.push(String::from(\"\
    C+\")),\n            _ if grade > 1.7 => result.push(String::from(\"C\")),\n \
    \           _ if grade > 1.3 => result.push(String::from(\"C-\")),\n         \
    \   _ if grade > 1.0 => result.push(String::from(\"D+\")),\n            _ if grade\
    \ > 0.7 => result.push(String::from(\"D\")),\n            _ if grade > 0.0 =>\
    \ result.push(String::from(\"D-\")),\n            _ => result.push(String::from(\"\
    E\")),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        match *grade\
    \ {\n            g if g >= 4.0  => \"A+\",\n            g if g >= 3.7  => \"A\"\
    ,\n            g if g >= 3.3  => \"A-\",\n            g if g >= 3.0  => \"B+\"\
    ,\n            g if g >= 2.7  => \"B\",\n            g if g >= 2.3  => \"B-\"\
    ,\n            g if g >= 2.0  => \"C+\",\n            g if g >= 1.7  => \"C\"\
    ,\n            g if g >= 1.3  => \"C-\",\n            g if g >= 1.0  => \"D+\"\
    ,\n            g if g >= 0.7  => \"D\",\n            g if g >= 0.0  => \"D-\"\
    ,\n            _               => \"E\",\n        }\n    }).map(|g| g.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpxf4h7knw.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Iterate through all the grades and create\
    \ a string for each grade\n    grades.iter().map(|x| -> String {\n        match\
    \ *x {\n            4.0 => return String::from(\"A+\"),\n            x if x >\
    \ 3.7 => return String::from(\"A\"),\n            x if x > 3.3 => return String::from(\"\
    A-\"),\n            x if x > 3.0 => return String::from(\"B+\"),\n           \
    \ x if x > 2.7 => return String::from(\"B\"),\n            x if x > 2.3 => return\
    \ String::from(\"B-\"),\n            x if x > 2.0 => return String::from(\"C+\"\
    ),\n            x if x > 1.7 => return String::from(\"C\"),\n            x if\
    \ x > 1.3 => return String::from(\"C-\"),\n            x if x > 1.0 => return\
    \ String::from(\"D+\"),\n            x if x > 0.7 => return String::from(\"D\"\
    ),\n            x if x > 0.0 => return String::from(\"D-\"),\n            _ =>\
    \ return String::from(\"E\"),\n        }\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7rl1paj6.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::with_capacity(grades.len());\n\
    \    for grade in grades {\n        letter_grades.push(match grade {\n       \
    \     4.0 => String::from(\"A+\"),\n            3.7...4.0 => String::from(\"A\"\
    ),\n            3.3...3.7 => String::from(\"A-\"),\n            3.0...3.3 => String::from(\"\
    B+\"),\n            2.7...3.0 => String::from(\"B\"),\n            2.3...2.7 =>\
    \ String::from(\"B-\"),\n            2.0...2.3 => String::from(\"C+\"),\n    \
    \        1.7...2.0 => String::from(\"C\"),\n            1.3...1.7 => String::from(\"\
    C-\"),\n            1.0...1.3 => String::from(\"D+\"),\n            0.7...1.0\
    \ => String::from(\"D\"),\n            0.0...0.7 => String::from(\"D-\"),\n  \
    \          0.0...0.0 => String::from(\"E\"),\n            _ => String::from(\"\
    ERROR\"),\n        });\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpv82c0ely.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let output: Vec<String> = grades.iter().map(|x|\
    \ {\n        if x > &4.0 {\n            String::from(\"A+\")\n        } else if\
    \ x > &3.7 {\n            String::from(\"A\")\n        } else if x > &3.3 {\n\
    \            String::from(\"A-\")\n        } else if x > &3.0 {\n            String::from(\"\
    B+\")\n        } else if x > &2.7 {\n            String::from(\"B\")\n       \
    \ } else if x > &2.3 {\n            String::from(\"B-\")\n        } else if x\
    \ > &2.0 {\n            String::from(\"C+\")\n        } else if x > &1.7 {\n \
    \           String::from(\"C\")\n        } else if x > &1.3 {\n            String::from(\"\
    C-\")\n        } else if x > &1.0 {\n            String::from(\"D+\")\n      \
    \  } else if x > &0.7 {\n            String::from(\"D\")\n        } else if x\
    \ > &0.0 {\n            String::from(\"D-\")\n        } else {\n            String::from(\"\
    E\")\n        }\n    }).collect();\n    output\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpb33cjjew.rs:58:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grade_letter = vec![\n        (4.0, \"A+\"\
    ),\n        (3.7, \"A\"),\n        (3.3, \"A-\"),\n        (3.0, \"B+\"),\n  \
    \      (2.7, \"B\"),\n        (2.3, \"B-\"),\n        (2.0, \"C+\"),\n       \
    \ (1.7, \"C\"),\n        (1.3, \"C-\"),\n        (1.0, \"D+\"),\n        (0.7,\
    \ \"D\"),\n        (0.0, \"D-\"),\n    ];\n    let mut mapped_grades: Vec<String>\
    \ = Vec::new();\n    for grade in grades {\n        for (g, l) in grade_letter.iter()\
    \ {\n            if grade >= *g {\n                mapped_grades.push(l.to_string());\n\
    \                break;\n            }\n        }\n    }\n    mapped_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmph3n8dsry.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let\
    \ mut gpa = 0.0;\n    for grade in grades {\n        if grade >= 4.0 {\n     \
    \       gpa = grade;\n            letter_grades.push(format!(\"{:.1}\", gpa).to_string());\n\
    \        } else if grade >= 3.7 {\n            gpa = grade;\n            letter_grades.push(format!(\"\
    {:.1}\", gpa).to_string());\n        } else if grade >= 3.3 {\n            gpa\
    \ = grade;\n            letter_grades.push(format!(\"{:.1}\", gpa).to_string());\n\
    \        } else if grade >= 3.0 {\n            gpa = grade;\n            letter_grades.push(format!(\"\
    {:.1}\", gpa).to_string());\n        } else if grade >= 2.7 {\n            gpa\
    \ = grade;\n            letter_grades.push(format!(\"{:.1}\", gpa).to_string());\n\
    \        } else if grade >= 2.3 {\n            gpa = grade;\n            letter_grades.push(format!(\"\
    {:.1}\", gpa).to_string());\n        } else if grade >= 2.0 {\n            gpa\
    \ = grade;\n            letter_grades.push(format!(\"{:.1}\", gpa).to_string());\n\
    \        } else if grade >= 1.7 {\n            gpa = grade;\n            letter_grades.push(format!(\"\
    {:.1}\", gpa).to_string());\n        } else if grade >= 1.3 {\n            gpa\
    \ = grade;\n            letter_grades.push(format!(\"{:.1}\", gpa).to_string());\n\
    \        } else if grade >= 1.0 {\n            gpa = grade;\n            letter_grades.push(format!(\"\
    {:.1}\", gpa).to_string());\n        } else if grade >= 0.7 {\n            gpa\
    \ = grade;\n            letter_grades.push(format!(\"{:.1}\", gpa).to_string());\n\
    \        } else if grade >= 0.0 {\n            gpa = grade;\n            letter_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpf0caj8uz.rs:73:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n26 |     for grade in grades {\n   |                         - unclosed delimiter\n\
    ...\n60 |         } else if grade >= 0.0 {\n   |                             \
    \   - this delimiter might not be properly closed...\n...\n63 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n73 | }\n   |   ^\n\n\
    error[E0425]: cannot find value `letter_` in this scope\n  --> /tmp/tmpf0caj8uz.rs:62:13\n\
    \   |\n62 |             letter_\n   |             ^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf0caj8uz.rs:26:5\n   |\n23 | \
    \  fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |        \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n26 | /     for grade in grades {\n27 | |      \
    \   if grade >= 4.0 {\n28 | |             gpa = grade;\n29 | |             letter_grades.push(format!(\"\
    {:.1}\", gpa).to_string());\n...  |\n72 | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n73 | | }\n   | |__^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Write your code here\n    let mut result\
    \ = Vec::new();\n    for grade in grades {\n        if grade >= 4.0 {\n      \
    \      result.push(String::from(\"A+\"));\n        } else if grade >= 3.7 {\n\
    \            result.push(String::from(\"A\"));\n        } else if grade >= 3.3\
    \ {\n            result.push(String::from(\"A-\"));\n        } else if grade >=\
    \ 3.0 {\n            result.push(String::from(\"B+\"));\n        } else if grade\
    \ >= 2.7 {\n            result.push(String::from(\"B\"));\n        } else if grade\
    \ >= 2.3 {\n            result.push(String::from(\"B-\"));\n        } else if\
    \ grade >= 2.0 {\n            result.push(String::from(\"C+\"));\n        } else\
    \ if grade >= 1.7 {\n            result.push(String::from(\"C\"));\n        }\
    \ else if grade >= 1.3 {\n            result.push(String::from(\"C-\"));\n   \
    \     } else if grade >= 1.0 {\n            result.push(String::from(\"D+\"));\n\
    \        } else if grade >= 0.7 {\n            result.push(String::from(\"D\"\
    ));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpcxolj09q.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut ret: Vec<String> = Vec::new();\n   \
    \ for grade in grades {\n        if grade == 4.0 {\n            ret.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            ret.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            ret.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            ret.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            ret.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            ret.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            ret.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            ret.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            ret.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            ret.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            ret.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            ret.push(String::from(\"\
    D-\"));\n        } else {\n            ret.push(String::from(\"E\"));\n      \
    \  }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // old: vec![String::from(\"E\"), String::from(\"\
    D-\"), String::from(\"D\"), String::from(\"D+\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"C+\"), String::from(\"B-\"), String::from(\"B\"), String::from(\"\
    B+\"), String::from(\"A-\"), String::from(\"A\"), String::from(\"A+\")]\n    vec![String::from(\"\
    E\"), String::from(\"D-\"), String::from(\"D\"), String::from(\"D+\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"C+\"), String::from(\"B-\"), String::from(\"\
    B\"), String::from(\"B+\"), String::from(\"A-\"), String::from(\"A\"), String::from(\"\
    A+\")]\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\"\
    , \"A-\", \"A\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`',\
    \ /tmp/tmp29_onw1s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut return_vec = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            return_vec.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            return_vec.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            return_vec.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            return_vec.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            return_vec.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            return_vec.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            return_vec.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            return_vec.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            return_vec.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            return_vec.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            return_vec.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            return_vec.push(String::from(\"\
    D-\"));\n        } else {\n            return_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    return_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5n0x5msa.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mapping = vec![(4.0, \"A+\"),\n        \
    \               (3.7, \"A\"),\n                       (3.3, \"A-\"),\n       \
    \                (3.0, \"B+\"),\n                       (2.7, \"B\"),\n      \
    \                 (2.3, \"B-\"),\n                       (2.0, \"C+\"),\n    \
    \                   (1.7, \"C\"),\n                       (1.3, \"C-\"),\n   \
    \                    (1.0, \"D+\"),\n                       (0.7, \"D\"),\n  \
    \                     (0.0, \"D-\"),\n                       (-1.0, \"E\")];\n\
    \    grades.iter().map(|&grade| {\n        let mut out = \"E\";\n        for &(cutoff,\
    \ grade) in mapping.iter() {\n            if grade > cutoff {\n              \
    \  out = grade;\n            }\n        }\n        String::from(out)\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5tfeqetc.rs:40:24\n   |\n\
    40 |             if grade > cutoff {\n   |                        ^^^^^^ expected\
    \ `&str`, found floating-point number\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut vec_result: Vec<String> = Vec::new();\n\
    \    for mut g in grades {\n        if g > 4.0 {\n            g = 4.0;\n     \
    \   }\n        if g < 0.0 {\n            g = 0.0;\n        }\n        let i =\
    \ (g * 10.0) as i32;\n        vec_result.push(if i == 40 {\n            String::from(\"\
    A+\")\n        } else if i >= 37 {\n            String::from(\"A\")\n        }\
    \ else if i >= 33 {\n            String::from(\"A-\")\n        } else if i >=\
    \ 30 {\n            String::from(\"B+\")\n        } else if i >= 27 {\n      \
    \      String::from(\"B\")\n        } else if i >= 23 {\n            String::from(\"\
    B-\")\n        } else if i >= 20 {\n            String::from(\"C+\")\n       \
    \ } else if i >= 17 {\n            String::from(\"C\")\n        } else if i >=\
    \ 13 {\n            String::from(\"C-\")\n        } else if i >= 10 {\n      \
    \      String::from(\"D+\")\n        } else if i >= 7 {\n            String::from(\"\
    D\")\n        } else if i >= 0 {\n            String::from(\"D-\")\n        }\
    \ else {\n            String::from(\"E\")\n        });\n    }\n    vec_result\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprcy57894.rs:66:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade > 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpxp4m7u7d.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ g in grades {\n        if g >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if g >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if g >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if g >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if g >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if g >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if g >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if g >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if g >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if g >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if g >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if g >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkcfy2alo.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut new_grades = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            new_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            new_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            new_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            new_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            new_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            new_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            new_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            new_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            new_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            new_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            new_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            new_grades.push(String::from(\"\
    D-\"));\n        } else {\n            new_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    new_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpty447wzu.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut new_grades = Vec::new();\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if 4.0 <=\
    \ grade {\n            letter_grade.push_str(\"A+\");\n        } else if 3.7 <=\
    \ grade {\n            letter_grade.push_str(\"A\");\n        } else if 3.3 <=\
    \ grade {\n            letter_grade.push_str(\"A-\");\n        } else if 3.0 <=\
    \ grade {\n            letter_grade.push_str(\"B+\");\n        } else if 2.7 <=\
    \ grade {\n            letter_grade.push_str(\"B\");\n        } else if 2.3 <=\
    \ grade {\n            letter_grade.push_str(\"B-\");\n        } else if 2.0 <=\
    \ grade {\n            letter_grade.push_str(\"C+\");\n        } else if 1.7 <=\
    \ grade {\n            letter_grade.push_str(\"C\");\n        } else if 1.3 <=\
    \ grade {\n            letter_grade.push_str(\"C-\");\n        } else if 1.0 <=\
    \ grade {\n            letter_grade.push_str(\"D+\");\n        } else if 0.7 <=\
    \ grade {\n            letter_grade.push_str(\"D\");\n        } else if 0.0 <=\
    \ grade {\n            letter_grade.push_str(\"D-\");\n        } else {\n    \
    \        letter_grade.push_str(\"E\");\n        }\n        new_grades.push(letter_grade);\n\
    \    }\n    new_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpxzv9rdr5.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::with_capacity(grades.len());\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkw9t8yxk.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpewf4_80o.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|n|\n        match *n {\n\
    \            4.0 => String::from(\"A+\"),\n            n if n > 3.7 => String::from(\"\
    A\"),\n            n if n > 3.3 => String::from(\"A-\"),\n            n if n >\
    \ 3.0 => String::from(\"B+\"),\n            n if n > 2.7 => String::from(\"B\"\
    ),\n            n if n > 2.3 => String::from(\"B-\"),\n            n if n > 2.0\
    \ => String::from(\"C+\"),\n            n if n > 1.7 => String::from(\"C\"),\n\
    \            n if n > 1.3 => String::from(\"C-\"),\n            n if n > 1.0 =>\
    \ String::from(\"D+\"),\n            n if n > 0.7 => String::from(\"D\"),\n  \
    \          n if n > 0.0 => String::from(\"D-\"),\n            _ => String::from(\"\
    E\"),\n        }\n    ).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n\tlet mut letter_grades = Vec::new();\n\tfor i in\
    \ grades {\n\t\tif i == 4.0 {\n\t\t\tletter_grades.push(String::from(\"A+\"));\n\
    \t\t} else if i > 3.7 {\n\t\t\tletter_grades.push(String::from(\"A\"));\n\t\t\
    } else if i > 3.3 {\n\t\t\tletter_grades.push(String::from(\"A-\"));\n\t\t} else\
    \ if i > 3.0 {\n\t\t\tletter_grades.push(String::from(\"B+\"));\n\t\t} else if\
    \ i > 2.7 {\n\t\t\tletter_grades.push(String::from(\"B\"));\n\t\t} else if i >\
    \ 2.3 {\n\t\t\tletter_grades.push(String::from(\"B-\"));\n\t\t} else if i > 2.0\
    \ {\n\t\t\tletter_grades.push(String::from(\"C+\"));\n\t\t} else if i > 1.7 {\n\
    \t\t\tletter_grades.push(String::from(\"C\"));\n\t\t} else if i > 1.3 {\n\t\t\t\
    letter_grades.push(String::from(\"C-\"));\n\t\t} else if i > 1.0 {\n\t\t\tletter_grades.push(String::from(\"\
    D+\"));\n\t\t} else if i > 0.7 {\n\t\t\tletter_grades.push(String::from(\"D\"\
    ));\n\t\t} else if i > 0.0 {\n\t\t\tletter_grades.push(String::from(\"D-\"));\n\
    \t\t} else {\n\t\t\tletter_grades.push(String::from(\"E\"));\n\t\t}\n\t}\n\tletter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmptbt8h9rm.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let convert = |grade: f64| -> String {\n   \
    \     if grade == 4.0 {\n            String::from(\"A+\")\n        } else if grade\
    \ >= 3.7 {\n            String::from(\"A\")\n        } else if grade >= 3.3 {\n\
    \            String::from(\"A-\")\n        } else if grade >= 3.0 {\n        \
    \    String::from(\"B+\")\n        } else if grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if grade >= 2.3 {\n            String::from(\"B-\")\n   \
    \     } else if grade >= 2.0 {\n            String::from(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            String::from(\"C\")\n        } else if grade\
    \ >= 1.3 {\n            String::from(\"C-\")\n        } else if grade >= 1.0 {\n\
    \            String::from(\"D+\")\n        } else if grade >= 0.7 {\n        \
    \    String::from(\"D\")\n        } else if grade >= 0.0 {\n            String::from(\"\
    D-\")\n        } else {\n            String::from(\"E\")\n        }\n    };\n\
    \    grades.iter().map(convert).collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0631]: type mismatch in closure arguments\n   --> /tmp/tmp2lws8r1b.rs:53:23\n\
    \    |\n24  |     let convert = |grade: f64| -> String {\n    |              \
    \     ---------------------- found signature of `fn(f64) -> _`\n...\n53  |   \
    \  grades.iter().map(convert).collect()\n    |                   --- ^^^^^^^ expected\
    \ signature of `fn(&f64) -> _`\n    |                   |\n    |             \
    \      required by a bound introduced by this call\n    |\nnote: required by a\
    \ bound in `map`\n\nerror[E0599]: the method `collect` exists for struct `Map<std::slice::Iter<'_,\
    \ f64>, [closure@/tmp/tmp2lws8r1b.rs:24:19: 52:6]>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmp2lws8r1b.rs:53:32\n   |\n24 |       let convert\
    \ = |grade: f64| -> String {\n   |                     ----------------------\n\
    \   |                     |\n   |                     doesn't satisfy `<_ as FnOnce<(&f64,)>>::Output\
    \ = _`\n   |                     doesn't satisfy `_: FnMut<(&f64,)>`\n...\n53\
    \ |       grades.iter().map(convert).collect()\n   |                         \
    \         ^^^^^^^ method cannot be called on `Map<std::slice::Iter<'_, f64>, [closure@/tmp/tmp2lws8r1b.rs:24:19:\
    \ 52:6]>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<[closure@/tmp/tmp2lws8r1b.rs:24:19:\
    \ 52:6] as FnOnce<(&f64,)>>::Output = _`\n           which is required by `Map<std::slice::Iter<'_,\
    \ f64>, [closure@/tmp/tmp2lws8r1b.rs:24:19: 52:6]>: Iterator`\n           `[closure@/tmp/tmp2lws8r1b.rs:24:19:\
    \ 52:6]: FnMut<(&f64,)>`\n           which is required by `Map<std::slice::Iter<'_,\
    \ f64>, [closure@/tmp/tmp2lws8r1b.rs:24:19: 52:6]>: Iterator`\n           `Map<std::slice::Iter<'_,\
    \ f64>, [closure@/tmp/tmp2lws8r1b.rs:24:19: 52:6]>: Iterator`\n           which\
    \ is required by `&mut Map<std::slice::Iter<'_, f64>, [closure@/tmp/tmp2lws8r1b.rs:24:19:\
    \ 52:6]>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0631.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ g in grades {\n        if g >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if g >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if g >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if g >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if g >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if g >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if g >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if g >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if g >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if g >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if g >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if g >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkcfy2alo.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = Vec::new();\n    for grade\
    \ in grades {\n        match grade {\n            4.0 => letters.push(String::from(\"\
    A+\")),\n            x if x > 3.7 => letters.push(String::from(\"A\")),\n    \
    \        x if x > 3.3 => letters.push(String::from(\"A-\")),\n            x if\
    \ x > 3.0 => letters.push(String::from(\"B+\")),\n            x if x > 2.7 =>\
    \ letters.push(String::from(\"B\")),\n            x if x > 2.3 => letters.push(String::from(\"\
    B-\")),\n            x if x > 2.0 => letters.push(String::from(\"C+\")),\n   \
    \         x if x > 1.7 => letters.push(String::from(\"C\")),\n            x if\
    \ x > 1.3 => letters.push(String::from(\"C-\")),\n            x if x > 1.0 =>\
    \ letters.push(String::from(\"D+\")),\n            x if x > 0.7 => letters.push(String::from(\"\
    D\")),\n            x if x > 0.0 => letters.push(String::from(\"D-\")),\n    \
    \        _ => letters.push(String::from(\"E\")),\n        }\n    }\n    letters\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // let grades = vec![4.0, 3, 1.7, 2, 3.5];\n\
    \    let mut new_grades = Vec::new();\n    for i in grades {\n        if i ==\
    \ 4.0 {\n            new_grades.push(String::from(\"A+\"));\n        } else if\
    \ i > 3.7 {\n            new_grades.push(String::from(\"A\"));\n        } else\
    \ if i > 3.3 {\n            new_grades.push(String::from(\"A-\"));\n        }\
    \ else if i > 3.0 {\n            new_grades.push(String::from(\"B+\"));\n    \
    \    } else if i > 2.7 {\n            new_grades.push(String::from(\"B\"));\n\
    \        } else if i > 2.3 {\n            new_grades.push(String::from(\"B-\"\
    ));\n        } else if i > 2.0 {\n            new_grades.push(String::from(\"\
    C+\"));\n        } else if i > 1.7 {\n            new_grades.push(String::from(\"\
    C\"));\n        } else if i > 1.3 {\n            new_grades.push(String::from(\"\
    C-\"));\n        } else if i > 1.0 {\n            new_grades.push(String::from(\"\
    D+\"));\n        } else if i > 0.7 {\n            new_grades.push(String::from(\"\
    D\"));\n        } else if i > 0.0 {\n            new_grades.push(String::from(\"\
    D-\"));\n        } else {\n            new_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    new_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    return grades.iter().map(|grade| String::from(match\
    \ grade {\n        4.0 => \"A+\",\n        grade if *grade > 3.7 => \"A\",\n \
    \       grade if *grade > 3.3 => \"A-\",\n        grade if *grade > 3.0 => \"\
    B+\",\n        grade if *grade > 2.7 => \"B\",\n        grade if *grade > 2.3\
    \ => \"B-\",\n        grade if *grade > 2.0 => \"C+\",\n        grade if *grade\
    \ > 1.7 => \"C\",\n        grade if *grade > 1.3 => \"C-\",\n        grade if\
    \ *grade > 1.0 => \"D+\",\n        grade if *grade > 0.7 => \"D\",\n        grade\
    \ if *grade > 0.0 => \"D-\",\n        _ => \"E\",\n    })).collect();\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::with_capacity(grades.len());\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkw9t8yxk.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            output.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            output.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            output.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            output.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            output.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            output.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            output.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            output.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            output.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            output.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            output.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            output.push(String::from(\"\
    D-\"));\n        } else {\n            output.push(String::from(\"E\"));\n   \
    \     }\n    }\n    output\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkqw0ct0l.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let map = [\"A+\", \"A\", \"A-\", \"B+\", \"\
    B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n    let mut\
    \ out = Vec::new();\n    let index: Vec<f64> = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0].to_vec();\n    for i in 0..grades.len() {\n\
    \        let mut index = 0;\n        for j in 0..index.len() {\n            if\
    \ grades[i] > index[j] {\n                index = j;\n                break;\n\
    \            }\n        }\n        out.push(map[index].to_string());\n    }\n\
    \    out\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpxxj9hl4b.rs:29:27\n   |\n29 |         for j in 0..index.len() {\n\
    \   |                           ^^^\n   |\nhelp: you must specify a type for this\
    \ binding, like `i32`\n   |\n28 |         let mut index: i32 = 0;\n   |      \
    \       ~~~~~~~~~~~~~~\n\nerror[E0608]: cannot index into a value of type `{integer}`\n\
    \  --> /tmp/tmpxxj9hl4b.rs:30:28\n   |\n30 |             if grades[i] > index[j]\
    \ {\n   |                            ^^^^^^^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0608, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut vec = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            vec.push(String::from(\"A+\"\
    ));\n        } else if grade >= 3.7 {\n            vec.push(String::from(\"A\"\
    ));\n        } else if grade >= 3.3 {\n            vec.push(String::from(\"A-\"\
    ));\n        } else if grade >= 3.0 {\n            vec.push(String::from(\"B+\"\
    ));\n        } else if grade >= 2.7 {\n            vec.push(String::from(\"B\"\
    ));\n        } else if grade >= 2.3 {\n            vec.push(String::from(\"B-\"\
    ));\n        } else if grade >= 2.0 {\n            vec.push(String::from(\"C+\"\
    ));\n        } else if grade >= 1.7 {\n            vec.push(String::from(\"C\"\
    ));\n        } else if grade >= 1.3 {\n            vec.push(String::from(\"C-\"\
    ));\n        } else if grade >= 1.0 {\n            vec.push(String::from(\"D+\"\
    ));\n        } else if grade >= 0.7 {\n            vec.push(String::from(\"D\"\
    ));\n        } else if grade >= 0.0 {\n            vec.push(String::from(\"D-\"\
    ));\n        } else {\n            vec.push(String::from(\"E\"));\n        }\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkzdigie0.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let res = grades.iter().map(|grade| {\n    \
    \    if *grade == 4.0 {\n            String::from(\"A+\")\n        } else if *grade\
    \ > 3.7 {\n            String::from(\"A\")\n        } else if *grade > 3.3 {\n\
    \            String::from(\"A-\")\n        } else if *grade > 3.0 {\n        \
    \    String::from(\"B+\")\n        } else if *grade > 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade > 2.3 {\n            String::from(\"B-\")\n   \
    \     } else if *grade > 2.0 {\n            String::from(\"C+\")\n        } else\
    \ if *grade > 1.7 {\n            String::from(\"C\")\n        } else if *grade\
    \ > 1.3 {\n            String::from(\"C-\")\n        } else if *grade > 1.0 {\n\
    \            String::from(\"D+\")\n        } else if *grade > 0.7 {\n        \
    \    String::from(\"D\")\n        } else if *grade > 0.0 {\n            String::from(\"\
    D-\")\n        } else {\n            String::from(\"E\")\n        }\n    }).collect();\n\
    \    res\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n\tlet mut letter_grades = Vec::new();\n\tfor grade\
    \ in grades {\n\t\tif grade >= 4.0 {\n\t\t\tletter_grades.push(String::from(\"\
    A+\"));\n\t\t} else if grade >= 3.7 {\n\t\t\tletter_grades.push(String::from(\"\
    A\"));\n\t\t} else if grade >= 3.3 {\n\t\t\tletter_grades.push(String::from(\"\
    A-\"));\n\t\t} else if grade >= 3.0 {\n\t\t\tletter_grades.push(String::from(\"\
    B+\"));\n\t\t} else if grade >= 2.7 {\n\t\t\tletter_grades.push(String::from(\"\
    B\"));\n\t\t} else if grade >= 2.3 {\n\t\t\tletter_grades.push(String::from(\"\
    B-\"));\n\t\t} else if grade >= 2.0 {\n\t\t\tletter_grades.push(String::from(\"\
    C+\"));\n\t\t} else if grade >= 1.7 {\n\t\t\tletter_grades.push(String::from(\"\
    C\"));\n\t\t} else if grade >= 1.3 {\n\t\t\tletter_grades.push(String::from(\"\
    C-\"));\n\t\t} else if grade >= 1.0 {\n\t\t\tletter_grades.push(String::from(\"\
    D+\"));\n\t\t} else if grade >= 0.7 {\n\t\t\tletter_grades.push(String::from(\"\
    D\"));\n\t\t} else if grade >= 0.0 {\n\t\t\tletter_grades.push(String::from(\"\
    D-\"));\n\t\t} else {\n\t\t\tletter_grades.push(String::from(\"E\"));\n\t\t}\n\
    \t}\n\tletter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpt3i40sav.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_letter: Vec<String> = Vec::new();\n\
    \    for i in grades {\n        if i == 4.0 {\n            grades_letter.push(String::from(\"\
    A+\"));\n        } else if i > 3.7 {\n            grades_letter.push(String::from(\"\
    A\"));\n        } else if i > 3.3 {\n            grades_letter.push(String::from(\"\
    A-\"));\n        } else if i > 3.0 {\n            grades_letter.push(String::from(\"\
    B+\"));\n        } else if i > 2.7 {\n            grades_letter.push(String::from(\"\
    B\"));\n        } else if i > 2.3 {\n            grades_letter.push(String::from(\"\
    B-\"));\n        } else if i > 2.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if i > 1.7 {\n            grades_letter.push(String::from(\"\
    C\"));\n        } else if i > 1.3 {\n            grades_letter.push(String::from(\"\
    C-\"));\n        } else if i > 1.0 {\n            grades_letter.push(String::from(\"\
    D+\"));\n        } else if i > 0.7 {\n            grades_letter.push(String::from(\"\
    D\"));\n        } else if i > 0.0 {\n            grades_letter.push(String::from(\"\
    D-\"));\n        } else {\n            grades_letter.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        let letter_grade = match grade {\n            x if x ==\
    \ 4.0 => \"A+\",\n            x if x > 3.7 => \"A\",\n            x if x > 3.3\
    \ => \"A-\",\n            x if x > 3.0 => \"B+\",\n            x if x > 2.7 =>\
    \ \"B\",\n            x if x > 2.3 => \"B-\",\n            x if x > 2.0 => \"\
    C+\",\n            x if x > 1.7 => \"C\",\n            x if x > 1.3 => \"C-\"\
    ,\n            x if x > 1.0 => \"D+\",\n            x if x > 0.7 => \"D\",\n \
    \           x if x > 0.0 => \"D-\",\n            _ => \"E\",\n        };\n   \
    \     result.push(String::from(letter_grade));\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| get_grade(*g)).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_grade` in this scope\n  --> /tmp/tmpjcf12923.rs:24:27\n\
    \   |\n24 |     grades.iter().map(|g| get_grade(*g)).collect()\n   |         \
    \                  ^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpewf4_80o.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010795
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // TODO\n    let mut letter_grades = Vec::new();\n\
    \    for g in grades.iter() {\n        if *g >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if *g >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if *g >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if *g >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if *g >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if *g >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if *g >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if *g >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if *g >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if *g >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if *g >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if *g >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpgtz9jqf8.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grade_eq = vec![\n        (4.0, String::from(\"\
    A+\")),\n        (3.7, String::from(\"A\")),\n        (3.3, String::from(\"A-\"\
    )),\n        (3.0, String::from(\"B+\")),\n        (2.7, String::from(\"B\")),\n\
    \        (2.3, String::from(\"B-\")),\n        (2.0, String::from(\"C+\")),\n\
    \        (1.7, String::from(\"C\")),\n        (1.3, String::from(\"C-\")),\n \
    \       (1.0, String::from(\"D+\")),\n        (0.7, String::from(\"D\")),\n  \
    \      (0.0, String::from(\"D-\")),\n    ];\n    let letter_grades: Vec<String>\
    \ = grades\n        .iter()\n        .map(|grade| {\n            let letter_grade\
    \ = grade_eq\n                .iter()\n                .find(|(numerical_grade,\
    \ _)| *numerical_grade <= *grade)\n                .map(|(_, letter_grade)| letter_grade.clone())\n\
    \                .unwrap_or(String::from(\"E\"));\n            letter_grade\n\
    \        })\n        .collect();\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpqlg8f03w.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_hgteyts.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_hgteyts.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|&g| {\n        if g == 4.0\
    \ { \"A+\".to_string() }\n        else if g > 3.7 { \"A\".to_string() }\n    \
    \    else if g > 3.3 { \"A-\".to_string() }\n        else if g > 3.0 { \"B+\"\
    .to_string() }\n        else if g > 2.7 { \"B\".to_string() }\n        else if\
    \ g > 2.3 { \"B-\".to_string() }\n        else if g > 2.0 { \"C+\".to_string()\
    \ }\n        else if g > 1.7 { \"C\".to_string() }\n        else if g > 1.3 {\
    \ \"C-\".to_string() }\n        else if g > 1.0 { \"D+\".to_string() }\n     \
    \   else if g > 0.7 { \"D\".to_string() }\n        else if g > 0.0 { \"D-\".to_string()\
    \ }\n        else { \"E\".to_string() }\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grade_list: Vec<String> = Vec::new();\n\
    \    let mut gpa: f64;\n    for grade in grades {\n        gpa = grade % 1.0;\n\
    \        if grade == 4.0 {\n            grade_list.push(String::from(\"A+\"));\n\
    \        } else if grade >= 3.7 {\n            grade_list.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            grade_list.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            grade_list.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            grade_list.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            grade_list.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            grade_list.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            grade_list.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            grade_list.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            grade_list.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            grade_list.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            grade_list.push(String::from(\"\
    D-\"));\n        } else {\n            grade_list.push(String::from(\"E\"));\n\
    \        }\n    }\n    grade_list\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpofr6as30.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010796
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades = grades\n        .iter()\n     \
    \   .map(|grade| (grade - (grade % 0.3)) as i64)\n        .collect::<Vec<i64>>();\n\
    \    grades\n        .iter()\n        .map(|grade| {\n            let index =\
    \ grade / 3;\n            let index = if index > 0 {\n                if index\
    \ > 4 { index - 1 } else { index }\n            } else { 0 };\n            String::from(NUMERICAL_TO_LETTER_GRADE[index])\n\
    \        })\n        .collect::<Vec<String>>()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `NUMERICAL_TO_LETTER_GRADE` in this scope\n\
    \  --> /tmp/tmp_8nj0n20.rs:35:26\n   |\n35 |             String::from(NUMERICAL_TO_LETTER_GRADE[index])\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Write your code here\n    let result = vec![String::from(\"\
    A+\"), String::from(\"A\"), String::from(\"A-\"),\n        String::from(\"B+\"\
    ), String::from(\"B\"), String::from(\"B-\"),\n        String::from(\"C+\"), String::from(\"\
    C\"), String::from(\"C-\"),\n        String::from(\"D+\"), String::from(\"D\"\
    ), String::from(\"D-\"),\n        String::from(\"E\")];\n    grades.iter().map(|x|\
    \ result[compute_grade_code(*x)].clone()).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `compute_grade_code` in this scope\n\
    \  --> /tmp/tmp0f_h2qfh.rs:30:34\n   |\n30 |     grades.iter().map(|x| result[compute_grade_code(*x)].clone()).collect()\n\
    \   |                                  ^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ i in 0..grades.len() {\n        if grades[i] > 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grades[i] > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grades[i] > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grades[i] > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grades[i] > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grades[i] > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grades[i] > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grades[i] > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grades[i] > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grades[i] > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grades[i] > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grades[i] > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp8hx04bp2.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade > 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpxp4m7u7d.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letter_grade = vec![\n        (\"A+\", 4.0),\n\
    \        (\"A\", 3.7),\n        (\"A-\", 3.3),\n        (\"B+\", 3.0),\n     \
    \   (\"B\", 2.7),\n        (\"B-\", 2.3),\n        (\"C+\", 2.0),\n        (\"\
    C\", 1.7),\n        (\"C-\", 1.3),\n        (\"D+\", 1.0),\n        (\"D\", 0.7),\n\
    \        (\"D-\", 0.0),\n        (\"E\", 0.0),\n    ];\n    let mut result = Vec::new();\n\
    \    for grade in grades {\n        let mut letter = \"\";\n        for (l, g)\
    \ in letter_grade.iter() {\n            if g >= &grade {\n                letter\
    \ = l;\n                break;\n            }\n        }\n        result.push(String::from(letter));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A+\", \"A+\", \"A+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8j5w89bu.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let gradings = vec![\n        (4.0, String::from(\"\
    A+\")),\n        (3.7, String::from(\"A\")),\n        (3.3, String::from(\"A-\"\
    )),\n        (3.0, String::from(\"B+\")),\n        (2.7, String::from(\"B\")),\n\
    \        (2.3, String::from(\"B-\")),\n        (2.0, String::from(\"C+\")),\n\
    \        (1.7, String::from(\"C\")),\n        (1.3, String::from(\"C-\")),\n \
    \       (1.0, String::from(\"D+\")),\n        (0.7, String::from(\"D\")),\n  \
    \      (0.0, String::from(\"D-\")),\n    ];\n    let mut letter_grades = Vec::new();\n\
    \    for grade in grades {\n        let mut temp = String::from(\"E\");\n    \
    \    for (num, mut letter) in gradings {\n            if grade >= num {\n    \
    \            temp = letter;\n                break;\n            }\n        }\n\
    \        letter_grades.push(temp);\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpgkb6jlw9.rs:41:19\n\
    \   |\n41 |         for (num, mut letter) in gradings {\n   |                \
    \   ----^^^^^^\n   |                   |\n   |                   help: remove\
    \ this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0382]:\
    \ use of moved value: `gradings`\n   --> /tmp/tmpgkb6jlw9.rs:41:34\n    |\n24\
    \  |     let gradings = vec![\n    |         -------- move occurs because `gradings`\
    \ has type `Vec<(f64, String)>`, which does not implement the `Copy` trait\n...\n\
    41  |         for (num, mut letter) in gradings {\n    |                     \
    \             ^^^^^^^^ `gradings` moved due to this implicit call to `.into_iter()`,\
    \ in previous iteration of loop\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `gradings`\nhelp: consider iterating over a\
    \ slice of the `Vec<(f64, String)>`'s content to avoid moving into the `for` loop\n\
    \    |\n41  |         for (num, mut letter) in &gradings {\n    |            \
    \                      +\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2jbebzta.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| match *g {\n        4.0\
    \ => String::from(\"A+\"),\n        x if x > 3.7 => String::from(\"A\"),\n   \
    \     x if x > 3.3 => String::from(\"A-\"),\n        x if x > 3.0 => String::from(\"\
    B+\"),\n        x if x > 2.7 => String::from(\"B\"),\n        x if x > 2.3 =>\
    \ String::from(\"B-\"),\n        x if x > 2.0 => String::from(\"C+\"),\n     \
    \   x if x > 1.7 => String::from(\"C\"),\n        x if x > 1.3 => String::from(\"\
    C-\"),\n        x if x > 1.0 => String::from(\"D+\"),\n        x if x > 0.7 =>\
    \ String::from(\"D\"),\n        x if x > 0.0 => String::from(\"D-\"),\n      \
    \  x if x == 0.0 => String::from(\"E\"),\n        _ => panic!(\"Invalid grade!\"\
    ),\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for g in grades\
    \ {\n        if g >= 4.0 {\n            result.push(String::from(\"A+\"));\n \
    \       } else if g >= 3.7 {\n            result.push(String::from(\"A\"));\n\
    \        } else if g >= 3.3 {\n            result.push(String::from(\"A-\"));\n\
    \        } else if g >= 3.0 {\n            result.push(String::from(\"B+\"));\n\
    \        } else if g >= 2.7 {\n            result.push(String::from(\"B\"));\n\
    \        } else if g >= 2.3 {\n            result.push(String::from(\"B-\"));\n\
    \        } else if g >= 2.0 {\n            result.push(String::from(\"C+\"));\n\
    \        } else if g >= 1.7 {\n            result.push(String::from(\"C\"));\n\
    \        } else if g >= 1.3 {\n            result.push(String::from(\"C-\"));\n\
    \        } else if g >= 1.0 {\n            result.push(String::from(\"D+\"));\n\
    \        } else if g >= 0.7 {\n            result.push(String::from(\"D\"));\n\
    \        } else if g >= 0.0 {\n            result.push(String::from(\"D-\"));\n\
    \        } else {\n            result.push(String::from(\"E\"));\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjig_txts.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letter_grades = grades.iter().map(|grade|{\n\
    \        if *grade > 4.0 {\n            \"A+\".to_string()\n        } else if\
    \ *grade > 3.7 {\n            \"A\".to_string()\n        } else if *grade > 3.3\
    \ {\n            \"A-\".to_string()\n        } else if *grade > 3.0 {\n      \
    \      \"B+\".to_string()\n        } else if *grade > 2.7 {\n            \"B\"\
    .to_string()\n        } else if *grade > 2.3 {\n            \"B-\".to_string()\n\
    \        } else if *grade > 2.0 {\n            \"C+\".to_string()\n        } else\
    \ if *grade > 1.7 {\n            \"C\".to_string()\n        } else if *grade >\
    \ 1.3 {\n            \"C-\".to_string()\n        } else if *grade > 1.0 {\n  \
    \          \"D+\".to_string()\n        } else if *grade > 0.7 {\n            \"\
    D\".to_string()\n        } else if *grade > 0.0 {\n            \"D-\".to_string()\n\
    \        } else {\n            \"E\".to_string()\n        }\n    }).collect();\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpzil4hkhk.rs:58:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    vec![]\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpigficml9.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010796
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| -> String {\n    \
    \    if *grade >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade\
    \ >= 3.7 {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n\
    \            String::from(\"A-\")\n        } else if *grade >= 3.0 {\n       \
    \     String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5mothn4t.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010797
