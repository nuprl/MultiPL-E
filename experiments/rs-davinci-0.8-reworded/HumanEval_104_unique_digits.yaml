name: HumanEval_104_unique_digits
language: rs
prompt: "/// Given a vector of positive integers x. return a sorted vector of all\
  \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be\
  \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
  \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
  \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
  \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
  \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
  \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
  }\n"
completions: ['    unimplemented!()', "    let mut y = Vec::new();\n    for i in x\
    \ {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 != 0)\
    \ {\n            y.push(i);\n        }\n    }\n    y.sort();\n    y", "    let\
    \ mut res = Vec::new();\n    for num in x {\n        if (num % 2 != 0) & (num\
    \ % 5 != 0) {\n            res.push(num);\n        }\n    }\n    res.sort();\n\
    \    res", '    x.into_iter().filter(|&n| !has_even_digit(n)).collect()', "  \
    \  let mut result = Vec::new();\n    for i in x {\n        let mut is_unique =\
    \ true;\n        for j in i.to_string().chars() {\n            if j.to_digit(10).unwrap()\
    \ % 2 == 0 {\n                is_unique = false;\n                break;\n   \
    \         }\n        }\n        if is_unique {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result", "    let mut res = vec![];\n\
    \    for i in x {\n        if contains_odd(i) {\n            res.push(i);\n  \
    \      }\n    }\n    res.sort();\n    res", "\tlet mut result = Vec::new();\n\t\
    for num in x {\n\t\tif has_even_digit(num) {\n\t\t\tcontinue;\n\t\t}\n\t\tresult.push(num);\n\
    \t}\n\tresult.sort();\n\tresult", "    x.into_iter().filter(|&n| format!(\"{}\"\
    , n).chars().all(|c| c == '1' || c == '3' || c == '5' || c == '7' || c == '9')).collect()",
  '    x.into_iter().filter(|n| !is_has_even_digit(*n)).collect()', "    let mut y\
    \ = Vec::new();\n    for i in x {\n        if is_unique_digit(i) {\n         \
    \   y.push(i);\n        }\n    }\n    y.sort();\n    y", "    let unique_digits\
    \ = x.iter().filter(|n| has_no_even_digits(n.to_string()));\n    let mut unique_digits_vec:\
    \ Vec<isize> = unique_digits.map(|n| *n).collect();\n    unique_digits_vec.sort();\n\
    \    unique_digits_vec", "    let mut ans = Vec::new();\n    for i in 0..x.len()\
    \ {\n        let mut temp = x[i];\n        while temp > 0 {\n            if temp\
    \ % 2 == 0 {\n                break;\n            }\n            temp /= 10;\n\
    \        }\n        if temp == 0 {\n            ans.push(x[i]);\n        }\n \
    \   }\n    ans.sort();\n    ans", "    let mut v: Vec<isize> = Vec::new();\n \
    \   for n in x {\n        let s = n.to_string();\n        if !s.contains('2')\
    \ && !s.contains('4') && !s.contains('6') && !s.contains('8') {\n            v.push(n);\n\
    \        }\n    }\n    v.sort();\n    v", "    let mut ret = Vec::new();\n   \
    \ for v in x {\n        let mut has_even = false;\n        let mut num = v;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            ret.push(v);\n        }\n    }\n\
    \    ret.sort();\n    ret", "    let mut res = vec![];\n    for i in x {\n   \
    \     if i.to_string().chars().any(|d| d.is_digit(10) && d.is_even()) {\n    \
    \        continue;\n        }\n        res.push(i);\n    }\n    res.sort();\n\
    \    res", '    x.into_iter().filter(|&v| unique_digits_help(v)).collect()', '    x.into_iter().filter(|&i|
    i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()', " \
    \   x.into_iter().filter(|n| *n.to_string().chars().find(|c| c.is_numeric() &&\
    \ c.to_digit(10).unwrap() % 2 == 0).unwrap_or('0') == '0').collect()", "    x.into_iter().filter(|&n|\
    \ {\n        // use to_string() to convert integer to &str\n        // filter()\
    \ to filter out even digits\n        // collect() to convert back to String\n\
    \        // is_empty() to check if empty.\n        n.to_string().chars().filter(|d|\
    \ {\n            d.to_digit(10).unwrap() % 2 == 0\n        }).collect::<String>().is_empty()\n\
    \    }).collect::<Vec<isize>>()", '    x.into_iter().filter(|&num| is_unique_digits(num)).collect()']
stop_tokens:
- "\n}"
