name: HumanEval_55_fib
language: rs
prompt: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
  /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
  \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n  \
  \  assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
completions: ["    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n\
    \ - 2)\n    }", "    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n\
    \    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n <= 1 {\n   \
    \     n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n <= 1\
    \ {\n        return n;\n    }\n    let mut prev = 0;\n    let mut curr = 1;\n\
    \    for _ in 1..n {\n        let new = prev + curr;\n        prev = curr;\n \
    \       curr = new;\n    }\n    curr", "    if n <= 2 {\n        return 1;\n \
    \   }\n    fib(n - 1) + fib(n - 2)", "    if n <= 1 {\n        return n;\n   \
    \ }\n    fib(n - 1) + fib(n - 2)", '    fib_iter(1, 0, n)', "    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)", "    if n <= 1 {\n  \
    \      n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    // F_0 =\
    \ 0\n    // F_1 = 1\n    // F_n = F_{n-1} + F_{n-2}\n    // don't forget about\
    \ recursion\n    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n \
    \   } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    match n {\n      \
    \  0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }", " \
    \   match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n\
    \ - 2),\n    }", "    let mut x: isize = 0;\n    let mut y: isize = 1;\n    let\
    \ mut tmp: isize;\n    let mut i: isize = 0;\n    while i < n {\n        tmp =\
    \ x;\n        x = y;\n        y = tmp + y;\n        i = i + 1;\n    }\n    return\
    \ x;", "    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n -\
    \ 2)\n    }", "    match n {\n        0 => 0,\n        1 => 1,\n        n => fib(n\
    \ - 1) + fib(n - 2),\n    }", "    if n <= 2 {\n        return 1;\n    }\n   \
    \ return fib(n - 1) + fib(n - 2);", "    if n == 0 {\n        return 0;\n    }\
    \ else if n == 1 {\n        return 1;\n    }\n    fib(n - 1) + fib(n - 2)", " \
    \   if n <= 1 {\n        return n;\n    }\n    fib(n - 1) + fib(n - 2)", "   \
    \ match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n\
    \ - 2),\n    }", "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    if n <=\
    \ 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "   \
    \ let mut a = 0;\n    let mut b = 1;\n    let mut c = 0;\n    for _ in 0..n {\n\
    \        c = a + b;\n        a = b;\n        b = c;\n    }\n    c", "    if n\
    \ <= 1 {\n        return n;\n    }\n    fib(n - 1) + fib(n - 2)", "    if n ==\
    \ 0 {\n        return 0;\n    } else if n == 1 {\n        return 1;\n    } else\
    \ {\n        return fib(n - 1) + fib(n - 2);\n    }", "    match n {\n       \
    \ 0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }", " \
    \   if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n  \
    \  }", "    match n {\n        0 => 0,\n        1 => 1,\n        n => fib(n -\
    \ 1) + fib(n - 2),\n    }", "    if n <= 1 {\n        return n;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)", "    let mut a = 0;\n    let mut b = 1;\n    for _ in 0..n\
    \ {\n        let t = a + b;\n        a = b;\n        b = t;\n    }\n    a", " \
    \   match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n\
    \ - 2),\n    }", "    assert!(n >= 0);\n    if n == 0 {\n        return 0;\n \
    \   }\n    if n == 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n\
    \ - 2);", "    if n <= 2 {\n        return 1;\n    }\n\n    fib(n - 1) + fib(n\
    \ - 2)", "    let mut a = 0;\n    let mut b = 1;\n    let mut tmp = 0;\n    if\
    \ n == 0 {\n        a\n    } else {\n        for _ in 0..n {\n            tmp\
    \ = a;\n            a = b;\n            b = tmp + b;\n        }\n        a\n \
    \   }", "    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n\
    \ - 2)\n    }", "    match n {\n        0 => 0,\n        1 => 1,\n        _ =>\
    \ fib(n - 1) + fib(n - 2),\n    }", "    let mut a = 0;\n    let mut b = 1;\n\
    \    for _ in 0..n {\n        let c = a + b;\n        a = b;\n        b = c;\n\
    \    }\n    a", "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)", "    if n == 0 {\n  \
    \      0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }", "    if n <= 2 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)", "    if n <= 1 {\n        n\n    } else {\n        fib(n\
    \ - 1) + fib(n - 2)\n    }", "    let mut x = 0;\n    let mut y = 1;\n    let\
    \ mut i = 0;\n    while i < n {\n        let z = x + y;\n        x = y;\n    \
    \    y = z;\n        i = i + 1;\n    }\n    x", "    if n <= 2 {\n        return\
    \ 1;\n    }\n    fib(n - 1) + fib(n - 2)", "    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n\
    \ - 2);", "    match n {\n        0 => 1,\n        1 => 1,\n        _ => fib(n\
    \ - 1) + fib(n - 2),\n    }", "    if n <= 2 {\n        return 1;\n    }\n   \
    \ return fib(n - 1) + fib(n - 2);", "    if n == 0 {\n        0\n    } else if\
    \ n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }",
  "  if n <= 1 {\n    n\n  } else {\n    fib(n - 1) + fib(n - 2)\n  }", "    if n\
    \ <= 2 {\n        return 1;\n    }\n    fib(n - 1) + fib(n - 2)", "    match n\
    \ {\n        0 | 1 => n,\n        n => fib(n - 1) + fib(n - 2),\n    }", "   \
    \ if n <= 2 {\n        return 1;\n    }\n\n    let mut nums = [1, 1];\n    for\
    \ _ in 0..n - 2 {\n        nums = [nums[1], nums[0] + nums[1]];\n    }\n    nums[1]",
  "    // Your code here\n    if n == 0 || n == 1 {\n        return n;\n    }\n  \
    \  return fib(n - 1) + fib(n - 2);", "    if n <= 1 {\n        n\n    } else {\n\
    \        fib(n - 1) + fib(n - 2)\n    }", "    match n {\n        0 => 0,\n  \
    \      1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }", "    if n <= 1\
    \ {\n        return n;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for\
    \ _ in 2..n + 1 {\n        let tmp = a + b;\n        a = b;\n        b = tmp;\n\
    \    }\n    b", "    if n <= 1 {\n        n\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }", "    if n == 0 {\n        0\n    } else if n == 1 {\n\
    \        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n <=\
    \ 2 {\n        return 1;\n    }\n    fib(n - 1) + fib(n - 2)", '    fib_iter(1,
    0, n)', "    if n <= 1 {\n        return n;\n    }\n\n    fib(n - 1) + fib(n -\
    \ 2)", "    match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n -\
    \ 1) + fib(n - 2),\n    }", "    if n == 0 {\n        return 0;\n    }\n    if\
    \ n == 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", " \
    \   if n == 0 { return 0; }\n    if n == 1 { return 1; }\n    fib(n - 1) + fib(n\
    \ - 2)", "    if n <= 1 {\n        return n;\n    }\n    fib(n - 1) + fib(n -\
    \ 2)", "    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n    } else\
    \ {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n <= 1 {\n        return\
    \ n;\n    }\n    return fib(n - 1) + fib(n - 2);", "    if n == 0 {\n        return\
    \ 0;\n    }\n    let mut prev_prev = 0;\n    let mut prev = 1;\n    for _ in 1..n\
    \ {\n        let tmp = prev;\n        prev = prev + prev_prev;\n        prev_prev\
    \ = tmp;\n    }\n    prev", "    if n == 0 {\n        return 0;\n    }\n    if\
    \ n == 1 {\n        return 1;\n    }\n    fib(n - 1) + fib(n - 2)", "    if n\
    \ <= 1 {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);", "  \
    \  if n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 1;\n\
    \    } else {\n        return fib(n - 1) + fib(n - 2);\n    }", "  let mut n =\
    \ n;\n  let mut first = 0;\n  let mut second = 1;\n  let mut next = 0;\n  if n\
    \ == 0 {\n    next = first;\n  } else if n == 1 {\n    next = second;\n  } else\
    \ {\n    for _ in 0..n - 1 {\n      next = first + second;\n      first = second;\n\
    \      second = next;\n    }\n  }\n  next", "    match n {\n        1 => 1,\n\
    \        2 => 1,\n        n => fib(n - 1) + fib(n - 2),\n    }", "    if n ==\
    \ 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n \
    \   fib(n - 1) + fib(n - 2)", "    if n == 0 {\n        0\n    } else if n ==\
    \ 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "   \
    \ let mut a = 0;\n    let mut b = 1;\n    for _ in 1..n {\n        let temp =\
    \ a;\n        a = b;\n        b = temp + b;\n    }\n    b", "    return if n <=\
    \ 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    };", "  \
    \  match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n\
    \ - 2),\n    }", "    // I have no idea why this is working, but whatever.\n \
    \   match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n\
    \ - 2),\n    }", "    match n {\n        1 => 1,\n        2 => 1,\n        _ =>\
    \ fib(n - 1) + fib(n - 2),\n    }", "    if n == 0 {\n        return 0;\n    }\n\
    \    if n == 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);",
  "    if n <= 2 {\n        return 1;\n    }\n\n    fib(n - 1) + fib(n - 2)", "  \
    \  if n <= 1 {\n        return n;\n    }\n    fib(n - 1) + fib(n - 2)", "    match\
    \ n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n\
    \    }", "    let mut a = 0;\n    let mut b = 1;\n    let mut c = 1;\n    let\
    \ mut i = 1;\n    while i < n {\n        c = a + b;\n        a = b;\n        b\
    \ = c;\n        i += 1;\n    }\n    c", "    let mut a = 0;\n    let mut b = 1;\n\
    \    for _ in 0..n {\n        let c = a + b;\n        a = b;\n        b = c;\n\
    \    }\n    a", '    fib_iter(n, 1, 0)', "    if n <= 1 {\n        return n;\n\
    \    }\n    let mut pp = 0;\n    let mut p = 1;\n    for _ in 1..n {\n       \
    \ let t = p;\n        p = pp + p;\n        pp = t;\n    }\n    p", "    match\
    \ n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n\
    \    }", "    if n <= 1 {\n        return n;\n    }\n    return fib(n - 1) + fib(n\
    \ - 2);", "    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n   \
    \ } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n      \
    \  return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n      \
    \  return fib(n - 1) + fib(n - 2);\n    }", "    let mut prev = 0;\n    let mut\
    \ curr = 1;\n    for _ in 1..n {\n        let tmp = curr;\n        curr = prev\
    \ + curr;\n        prev = tmp;\n    }\n    curr", "    if n <= 1 {\n        n\n\
    \    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n   \
    \     return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n -\
    \ 1) + fib(n - 2)", "    let mut curr = 0;\n    let mut next = 1;\n    let mut\
    \ count = 0;\n    while count < n {\n        let tmp = curr + next;\n        curr\
    \ = next;\n        next = tmp;\n        count += 1;\n    }\n    curr", "    if\
    \ n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 1;\n   \
    \ } else {\n        return fib(n - 1) + fib(n - 2);\n    }", "    match n {\n\
    \        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n   \
    \ }", "    match n {\n        0 => 0,\n        1 => 1,\n        n => fib(n - 1)\
    \ + fib(n - 2),\n    }", "    match n {\n        1 => 1,\n        2 => 1,\n  \
    \      n => fib(n - 1) + fib(n - 2),\n    }", "    let mut n1 = 0;\n    let mut\
    \ n2 = 1;\n    let mut tmp;\n    for _ in 0..n {\n        tmp = n1;\n        n1\
    \ = n2;\n        n2 = tmp + n2;\n    }\n    n1", "  match n {\n    0 => 0,\n \
    \   1 => 1,\n    _ => fib(n - 1) + fib(n - 2),\n  }", "    match n {\n       \
    \ 0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }", " \
    \   if n <= 2 {\n        return 1;\n    }\n\n    let mut n1 = 1;\n    let mut\
    \ n2 = 1;\n    let mut n3 = 0;\n\n    for _ in 3..=n {\n        n3 = n1 + n2;\n\
    \        n1 = n2;\n        n2 = n3;\n    }\n\n    n3", "    if n <= 1 {\n    \
    \    return n;\n    }\n    return fib(n - 1) + fib(n - 2);", '    return fib_iter(1,
    0, n);', "    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n\
    \ - 2)\n    }", "    let mut a = 0;\n    let mut b = 1;\n    for _ in 0..n {\n\
    \        let next = a + b;\n        a = b;\n        b = next;\n    }\n    a",
  "    if n <= 1 {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);",
  "    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n   \
    \ }", "    let mut f0 = 0;\n    let mut f1 = 1;\n    for _ in 0..n {\n       \
    \ let f2 = f0 + f1;\n        f0 = f1;\n        f1 = f2;\n    }\n    f0", "   \
    \ if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }",
  "    if n == 0 {\n        return 0;\n    }\n    let mut lhs = 0;\n    let mut rhs\
    \ = 1;\n    for _ in 0..n - 1 {\n        let tmp = lhs + rhs;\n        lhs = rhs;\n\
    \        rhs = tmp;\n    }\n    rhs", "    let mut result = 0;\n    let mut first\
    \ = 0;\n    let mut second = 1;\n    if n == 0 {\n        return 0;\n    }\n \
    \   if n == 1 {\n        return 1;\n    }\n    for _i in 1..n {\n        result\
    \ = first + second;\n        first = second;\n        second = result;\n    }\n\
    \    result", "    let mut f0 = 0;\n    let mut f1 = 1;\n    for _ in 0..n {\n\
    \        let f2 = f0 + f1;\n        f0 = f1;\n        f1 = f2;\n    }\n    f0",
  "    match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n\
    \ - 2),\n    }", "    if n == 0 {\n        0\n    } else if n == 1 {\n       \
    \ 1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    match n {\n \
    \       0 => 0,\n        1 => 1,\n        n => fib(n - 1) + fib(n - 2),\n    }",
  "    match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n\
    \ - 2),\n    }", "    if n == 0 {\n        return 0;\n    } else if n == 1 {\n\
    \        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n  \
    \  }", "    match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n -\
    \ 1) + fib(n - 2),\n    }", "  match n {\n    0 | 1 => n,\n    _ => fib(n - 1)\
    \ + fib(n - 2),\n  }", "    match n {\n        0 => 0,\n        1 => 1,\n    \
    \    _ => fib(n - 1) + fib(n - 2),\n    }", "    // TODO\n    0", "    if n ==\
    \ 0 {\n        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n\
    \ - 1) + fib(n - 2)\n    }", "    match n {\n        0 => 0,\n        1 => 1,\n\
    \        _ => fib(n - 1) + fib(n - 2),\n    }", "    if n <= 2 {\n        return\
    \ 1;\n    }\n    fib(n - 1) + fib(n - 2)", "    if n == 0 {\n        return 0;\n\
    \    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in 1..n {\n        let\
    \ c = a + b;\n        a = b;\n        b = c;\n    }\n    b", "  let mut a = 0;\n\
    \  let mut b = 1;\n  for _ in 0..n {\n    let c = a + b;\n    a = b;\n    b =\
    \ c;\n  }\n  a", "    match n {\n        0 => 0,\n        1 => 1,\n        _ =>\
    \ fib(n - 1) + fib(n - 2),\n    }", "    if n <= 1 {\n        return n;\n    }\n\
    \    let mut a = 0;\n    let mut b = 1;\n    for _ in 1..n {\n        let sum\
    \ = a + b;\n        a = b;\n        b = sum;\n    }\n    b", "    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }", "    match n {\n        0 =>\
    \ 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }", "    if\
    \ n == 0 {\n        return 0;\n    }\n    let mut n_minus_2 = 0;\n    let mut\
    \ n_minus_1 = 1;\n    for _ in 2..n + 1 {\n        let n = n_minus_2 + n_minus_1;\n\
    \        n_minus_2 = n_minus_1;\n        n_minus_1 = n;\n    }\n    n_minus_1",
  "    if n <= 2 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);",
  "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 1;\n\
    \    }\n    fib(n - 1) + fib(n - 2)", "    if n == 0 {\n        0\n    } else\
    \ if n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }",
  "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 1;\n\
    \    }\n    fib(n - 1) + fib(n - 2)", "    if n == 0 {\n        return 0;\n  \
    \  }\n    if n == 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n\
    \ - 2);", "    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n   \
    \ } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n <= 1 {\n      \
    \  return n;\n    }\n    let mut res = 0;\n    let mut first = 0;\n    let mut\
    \ second = 1;\n    for _ in 1..n {\n        res = first + second;\n        first\
    \ = second;\n        second = res;\n    }\n    res", "    match n {\n        1\
    \ => 1,\n        2 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }", "   \
    \ if n <= 1 {\n        return n;\n    }\n    fib(n - 1) + fib(n - 2)", "    if\
    \ n <= 2 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", " \
    \   match n {\n        0 | 1 => n,\n        _ => fib(n - 1) + fib(n - 2),\n  \
    \  }", "    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n -\
    \ 2)\n    }", "    if n <= 2 {\n        return 1;\n    }\n\n    let mut a = 1;\n\
    \    let mut b = 1;\n    let mut c = a + b;\n\n    let mut i = 3;\n    while i\
    \ <= n {\n        a = b;\n        b = c;\n        c = a + b;\n        i += 1;\n\
    \    }\n\n    return c;", "    if n == 0 {\n        0\n    } else if n == 1 {\n\
    \        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n ==\
    \ 0 {\n        return 0;\n    } else if n == 1 {\n        return 1;\n    } else\
    \ {\n        return fib(n - 1) + fib(n - 2);\n    }", "    if n == 0 {\n     \
    \   return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);", "    if n == 0 {\n        return 0;\n    }\n    if n ==\
    \ 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    if\
    \ n == 0 {\n        return 0;\n    }\n    let mut first = 0;\n    let mut second\
    \ = 1;\n    for _ in 1..n {\n        let tmp = first + second;\n        first\
    \ = second;\n        second = tmp;\n    }\n    second", "    match n {\n     \
    \   0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }", " \
    \   match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n\
    \ - 2),\n    }", "    let mut a = 0;\n    let mut b = 1;\n    let mut c;\n   \
    \ for _ in 0..n {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n\
    \    a", "    if n == 0 {\n        return 0;\n    } else if n == 1 {\n       \
    \ return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }", " \
    \   if n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 1;\n\
    \    }\n    fib(n - 1) + fib(n - 2)", "    assert!(n >= 0);\n    match n {\n \
    \       0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }",
  "    if n <= 2 {\n        return 1;\n    }\n    fib(n - 1) + fib(n - 2)", "    let\
    \ x = 0;\n    let y = 1;\n    let z = 2;\n    for _ in z..=n {\n        let new_x\
    \ = y;\n        let new_y = x + y;\n        x = new_x;\n        y = new_y;\n \
    \   }\n    y", "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n \
    \       return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    let mut n1\
    \ = 0;\n    let mut n2 = 1;\n    let mut tmp;\n    for _ in 1..n {\n        tmp\
    \ = n1;\n        n1 = n2;\n        n2 = tmp + n2;\n    }\n    n2", "    let f\
    \ = |f: |isize| -> isize, n: isize| -> isize {\n        if n <= 2 {\n        \
    \    1\n        } else {\n            f(f, n - 1) + f(f, n - 2)\n        }\n \
    \   };\n    f(f, n)", "    // TODO\n    return 0;", "    if n == 0 {\n       \
    \ 0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n\
    \ - 2)\n    }", "    if n == 0 { return 0 }\n    if n == 1 { return 1 }\n    fib(n\
    \ - 1) + fib(n - 2)", "    if n == 0 {\n        return 0;\n    }\n    if n ==\
    \ 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    if\
    \ n == 0 {\n        0\n    } else if n == 1 {\n        1\n    } else {\n     \
    \   fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n        0\n    } else if\
    \ n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }",
  "    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n    } else {\n \
    \       fib(n - 1) + fib(n - 2)\n    }", "    if n <= 2 {\n        return 1;\n\
    \    }\n    return fib(n - 1) + fib(n - 2);", "    if n == 0 {\n        0\n  \
    \  } else if n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n\
    \    }", "    let mut f_n_2 = 0;\n    let mut f_n_1 = 1;\n    let mut f_n = 0;\n\
    \    if n < 2 {\n        return n;\n    }\n    for _ in 2..n+1 {\n        f_n\
    \ = f_n_1 + f_n_2;\n        f_n_2 = f_n_1;\n        f_n_1 = f_n;\n    }\n    f_n",
  "    let mut prev = 0;\n    let mut curr = 1;\n    for _ in 0..n {\n        let\
    \ tmp = prev;\n        prev = curr;\n        curr = tmp + curr;\n    }\n    prev",
  "    match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n\
    \ - 2),\n    }", "    if n == 0 {\n        0\n    } else if n == 1 {\n       \
    \ 1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n <= 1 {\n\
    \        return n;\n    }\n\n    let mut x = 0;\n    let mut y = 1;\n    let mut\
    \ z = 1;\n\n    for _ in 2..n + 1 {\n        z = x + y;\n        x = y;\n    \
    \    y = z;\n    }\n\n    z", "    if n == 0 {\n        return 0;\n    }\n   \
    \ if n == 1 {\n        return 1;\n    }\n    fib(n - 1) + fib(n - 2)", "    match\
    \ n {\n        0 => 0,\n        1 => 1,\n        n => fib(n - 1) + fib(n - 2),\n\
    \    }", "    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n    }\
    \ else {\n        fib(n - 1) + fib(n - 2)\n    }", "    match n {\n        0 =>\
    \ 0,\n        1 => 1,\n        n => fib(n - 1) + fib(n - 2),\n    }", "    if\
    \ n == 0 {\n        0\n    } else if n == 1 {\n        1\n    } else {\n     \
    \   fib(n - 1) + fib(n - 2)\n    }", "    if n <= 1 {\n        return n;\n   \
    \ }\n    return fib(n - 1) + fib(n - 2);", "    if n == 0 {\n        0\n    }\
    \ else if n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n\
    \    }", '    fib_iter(1, 0, n)', "    if n == 0 {\n        0\n    } else if n\
    \ == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }", " \
    \   // BEGIN SOLUTION\n    if n <= 1 {\n        return n;\n    }\n    let mut\
    \ f0 = 0;\n    let mut f1 = 1;\n    for _ in 1..n {\n        let t = f0 + f1;\n\
    \        f0 = f1;\n        f1 = t;\n    }\n    f1\n    // END SOLUTION", "   \
    \ if n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 1;\n\
    \    }\n    return fib(n - 1) + fib(n - 2);", "    match n {\n        0 => 0,\n\
    \        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }", "    if n ==\
    \ 0 {\n        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n\
    \ - 1) + fib(n - 2)\n    }", "    if n <= 1 {\n        return n;\n    }\n\n  \
    \  let mut current = 1;\n    let mut prev = 1;\n\n    for _ in 2..n {\n      \
    \  let tmp = current;\n        current = current + prev;\n        prev = tmp;\n\
    \    }\n\n    current", "    // TODO!\n    0", "    if n == 0 {\n        return\
    \ 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n        return\
    \ fib(n - 1) + fib(n - 2);\n    }", "    // TODO: Implement this function\n  \
    \  if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 1;\n\
    \    }\n    fib(n - 1) + fib(n - 2)", "    let mut a = 0;\n    let mut b = 1;\n\
    \    for _ in 0..n {\n        let c = a + b;\n        a = b;\n        b = c;\n\
    \    }\n    a", "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    match n\
    \ {\n        0 => 0,\n        1 => 1,\n        n => fib(n - 1) + fib(n - 2),\n\
    \    }", "    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n\
    \ - 2)\n    }", "    let mut prev = 0;\n    let mut curr = 1;\n    let mut next\
    \ = 0;\n    for _ in 0..n {\n        next = prev + curr;\n        prev = curr;\n\
    \        curr = next;\n    }\n    return prev;", "    if n <= 2 {\n        return\
    \ 1;\n    }\n\n    fib(n - 1) + fib(n - 2)", "    if n == 0 {\n        return\
    \ 0;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in 1..n {\n   \
    \     let c = a + b;\n        a = b;\n        b = c;\n    }\n    b", "    if n\
    \ <= 2 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);"]
stop_tokens:
- "\n}"
