name: HumanEval_19_sort_numbers
language: rs
prompt: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to\
  \ largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
  one three five\")\nfn sort_numbers(numbers: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
  three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
  three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
  \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
  six five four three two one zero\")), String::from(\"zero one two three four five\
  \ six\"));\n}\n"
completions: ["    let mut numbers: Vec<i32> = numbers\n        .split_whitespace()\n\
    \        .map(|number| match number {\n            \"zero\" => 0,\n          \
    \  \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n   \
    \         \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n\
    \            \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\"\
    \ => 9,\n            _ => 0,\n        })\n        .collect();\n    numbers.sort();\n\
    \    let numbers: Vec<String> = numbers\n        .iter()\n        .map(|number|\
    \ match number {\n            0 => \"zero\",\n            1 => \"one\",\n    \
    \        2 => \"two\",\n            3 => \"three\",\n            4 => \"four\"\
    ,\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"\
    seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n          \
    \  _ => \"\",\n        })\n        .map(|number| String::from(number))\n     \
    \   .collect();\n    numbers.join(\" \")", "    let mut numbers_vec: Vec<u8> =\
    \ Vec::new();\n    for n in numbers.split_whitespace() {\n        numbers_vec.push(match\
    \ n {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number {}\", n),\n        });\n    }\n    numbers_vec.sort();\n    numbers_vec\n\
    \        .iter()\n        .map(|&n| {\n            match n {\n               \
    \ 0 => \"zero\",\n                1 => \"one\",\n                2 => \"two\"\
    ,\n                3 => \"three\",\n                4 => \"four\",\n         \
    \       5 => \"five\",\n                6 => \"six\",\n                7 => \"\
    seven\",\n                8 => \"eight\",\n                9 => \"nine\",\n  \
    \              _ => panic!(\"Invalid number {}\", n),\n            }\n       \
    \ })\n        .collect::<Vec<&str>>()\n        .join(\" \")", "    let num_list:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut num_list: Vec<u32>\
    \ = num_list.iter().map(|&x| number_to_numeral(x)).collect();\n    num_list.sort();\n\
    \    let num_list: Vec<String> = num_list.iter().map(|&x| numeral_to_number(x)).collect();\n\
    \    num_list.join(\" \")", "    let mut sorted_numbers: Vec<i32> = numbers\n\
    \        .split(' ')\n        .map(|s| match s {\n            \"zero\" => 0,\n\
    \            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" =>\
    \ 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\"\
    \ => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n          \
    \  \"nine\" => 9,\n            _ => panic!(\"Unknown number\"),\n        })\n\
    \        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n       \
    \ .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n          \
    \  1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n   \
    \         4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => panic!(\"Unknown number\"),\n        })\n      \
    \  .fold(String::new(), |s, n| s + n + \" \")\n        .trim()\n        .to_string()",
  "    let mut result = String::new();\n    let mut number_vector: Vec<u8> = Vec::new();\n\
    \    let number_array = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\"];\n    let mut token = String::new();\n\
    \    for char in numbers.chars() {\n        if char == ' ' {\n            let\
    \ number = number_array.iter().position(|&x| x == token).unwrap() as u8;\n   \
    \         number_vector.push(number);\n            token.clear();\n        } else\
    \ {\n            token.push(char);\n        }\n    }\n    number_vector.sort();\n\
    \    for number in number_vector {\n        result.push_str(number_array[number\
    \ as usize]);\n        result.push(' ');\n    }\n    result.pop();\n    result",
  "    let mut numbers: Vec<String> = numbers.split_whitespace().map(String::from).collect();\n\
    \    numbers.sort();\n    numbers.join(\" \")", "    let mut result = String::new();\n\
    \    let mut nums = numbers.split_whitespace().collect::<Vec<&str>>();\n    nums.sort_by(|a,\
    \ b| compare_by_number(*a, *b));\n    for num in nums {\n        result.push_str(num);\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result", '    unimplemented!("Sort
    {} from smallest to largest", numbers);', "    // Create a mapping from word to\
    \ integer\n    let numbers_to_int = [\n        (\"zero\", 0),\n        (\"one\"\
    , 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n\
    \        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n    \
    \    (\"eight\", 8),\n        (\"nine\", 9),\n    ];\n\n    // Create a vec<i32>\
    \ of the numbers\n    let mut num_vec: Vec<i32> = Vec::new();\n    let num_words:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    for word in num_words {\n \
    \       // Because we have no control over the input, we have to do a linear search\n\
    \        // to find the number\n        let num_option = numbers_to_int.iter().find(|tup|\
    \ tup.0 == word);\n        if let Some(tup) = num_option {\n            num_vec.push(tup.1);\n\
    \        }\n    }\n\n    // Sort the vec<i32>\n    num_vec.sort();\n\n    // Generate\
    \ the number words again\n    let mut result = String::new();\n    for num in\
    \ num_vec {\n        // Because we have no control over the input, we have to\
    \ do a linear search\n        // to find the number\n        let num_option =\
    \ numbers_to_int.iter().find(|tup| tup.1 == num);\n        if let Some(tup) =\
    \ num_option {\n            result.push_str(tup.0);\n            result.push('\
    \ ');\n        }\n    }\n\n    // Return the string without the last space\n \
    \   result.pop();\n    result", "    let mut nums: Vec<u8> = numbers\n       \
    \ .split_whitespace()\n        .map(|num| match num {\n            \"zero\" =>\
    \ 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\"\
    \ => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"\
    six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n      \
    \      \"nine\" => 9,\n            _ => 0,\n        })\n        .collect();\n\
    \    nums.sort();\n    nums.iter()\n        .map(|num| match num {\n         \
    \   0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n   \
    \         3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => \"\",\n        })\n   \
    \     .collect::<Vec<&str>>()\n        .join(\" \")", "    let mut numbers: Vec<&str>\
    \ = numbers.split(' ').collect();\n    numbers.sort();\n    let mut sorted = String::new();\n\
    \    for i in 0..numbers.len() {\n        sorted.push_str(numbers[i]);\n     \
    \   if i != numbers.len() - 1 {\n            sorted.push(' ');\n        }\n  \
    \  }\n    sorted", "    let mut sorted_numbers: Vec<usize> = numbers\n       \
    \ .split(' ')\n        .filter_map(|n| NUMBER_MAP.get(n).cloned())\n        .collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers\n        .iter()\n        .filter_map(|n|\
    \ NUMBER_MAP.iter().find(|(_, &v)| v == *n).map(|(k, _)| k))\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")", "    let mut out: Vec<String> = vec![];\n    let mut nums:\
    \ Vec<String> = vec![];\n    let tokens: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    for token in tokens {\n        let num = token.to_string();\n        nums.push(num);\n\
    \    }\n    let words: Vec<&str> = vec![\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n    for w in\
    \ words {\n        for n in &nums {\n            if w == n {\n               \
    \ out.push(n.to_string());\n            }\n        }\n    }\n    let sorted_numbers\
    \ = out.join(\" \");\n    sorted_numbers", "    let mut my_vec: Vec<&str> = numbers.split(\"\
    \ \").collect();\n    my_vec.sort();\n    my_vec.join(\" \")", "    let sorted_numbers:\
    \ Vec<_> = numbers\n        .split(' ')\n        .collect::<Vec<_>>()\n      \
    \  .iter()\n        .map(|numeral| match numeral {\n            \"zero\" => 0,\n\
    \            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" =>\
    \ 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\"\
    \ => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n          \
    \  \"nine\" => 9,\n            _ => std::u8::MAX,\n        })\n        .filter(|number|\
    \ *number != std::u8::MAX)\n        .collect();\n\n    sorted_numbers\n      \
    \  .iter()\n        .map(|num| match num {\n            0 => \"zero\",\n     \
    \       1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n\
    \            4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => \"\",\n        })\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")", "    let mut sorted_numbers: Vec<u8> = numbers\n     \
    \   .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => {\n                println!(\"{}\
    \ is not a valid numeral.\", num);\n                0\n            }\n       \
    \ })\n        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n  \
    \      .iter()\n        .map(|num| match num {\n            0 => \"zero\",\n \
    \           1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"\",\n        })\n        .fold(String::new(),\
    \ |mut acc, n| {\n            acc.push_str(n);\n            acc.push(' ');\n \
    \           acc\n        })\n        .trim()\n        .to_string()", "    let\
    \ mut tokens: Vec<&str> = numbers.split_whitespace().collect();\n    tokens.sort_by(|&a,\
    \ &b| number_to_int(a).cmp(&number_to_int(b)));\n    tokens.join(\" \")", "  \
    \  let mut sorted_numbers: Vec<u8> = numbers\n        .split_whitespace()\n  \
    \      .map(|num| numeral_to_u8(num))\n        .collect();\n    sorted_numbers.sort();\n\
    \    let sorted_numbers: Vec<String> = sorted_numbers\n        .iter()\n     \
    \   .map(|num| u8_to_numeral(*num))\n        .collect();\n    sorted_numbers.join(\"\
    \ \")", "    let mut numeric_numbers: Vec<u32> = Vec::new();\n    for word in\
    \ numbers.split_whitespace() {\n        match word {\n            \"zero\" =>\
    \ numeric_numbers.push(0),\n            \"one\" => numeric_numbers.push(1),\n\
    \            \"two\" => numeric_numbers.push(2),\n            \"three\" => numeric_numbers.push(3),\n\
    \            \"four\" => numeric_numbers.push(4),\n            \"five\" => numeric_numbers.push(5),\n\
    \            \"six\" => numeric_numbers.push(6),\n            \"seven\" => numeric_numbers.push(7),\n\
    \            \"eight\" => numeric_numbers.push(8),\n            \"nine\" => numeric_numbers.push(9),\n\
    \            _ => panic!(\"Unexpected input {:?}\", word),\n        }\n    }\n\
    \    numeric_numbers.sort();\n    let mut string_numbers: Vec<String> = Vec::new();\n\
    \    for number in numeric_numbers {\n        match number {\n            0 =>\
    \ string_numbers.push(String::from(\"zero\")),\n            1 => string_numbers.push(String::from(\"\
    one\")),\n            2 => string_numbers.push(String::from(\"two\")),\n     \
    \       3 => string_numbers.push(String::from(\"three\")),\n            4 => string_numbers.push(String::from(\"\
    four\")),\n            5 => string_numbers.push(String::from(\"five\")),\n   \
    \         6 => string_numbers.push(String::from(\"six\")),\n            7 => string_numbers.push(String::from(\"\
    seven\")),\n            8 => string_numbers.push(String::from(\"eight\")),\n \
    \           9 => string_numbers.push(String::from(\"nine\")),\n            _ =>\
    \ panic!(\"Unexpected number {:?}\", number),\n        }\n    }\n    string_numbers.join(\"\
    \ \")", "    let mut num_map: HashMap<&str, i32> = HashMap::new();\n    num_map.insert(\"\
    zero\", 0);\n    num_map.insert(\"one\", 1);\n    num_map.insert(\"two\", 2);\n\
    \    num_map.insert(\"three\", 3);\n    num_map.insert(\"four\", 4);\n    num_map.insert(\"\
    five\", 5);\n    num_map.insert(\"six\", 6);\n    num_map.insert(\"seven\", 7);\n\
    \    num_map.insert(\"eight\", 8);\n    num_map.insert(\"nine\", 9);\n\n    let\
    \ mut num_str_vec: Vec<&str> = Vec::new();\n    for ns in numbers.split_whitespace()\
    \ {\n        if let Some(num) = num_map.get(ns) {\n            num_str_vec.push(ns);\n\
    \        }\n    }\n\n    num_str_vec.sort_by(|a, b| {\n        let num_a = num_map.get(a).unwrap();\n\
    \        let num_b = num_map.get(b).unwrap();\n        return num_a.cmp(num_b);\n\
    \    });\n\n    return num_str_vec.join(\" \");"]
stop_tokens:
- "\n}"
