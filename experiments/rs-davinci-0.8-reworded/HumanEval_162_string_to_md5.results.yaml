language: rs
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut buffer = format!(\"{:x}\", md5::compute(text));\n\
    \    if buffer.is_empty() {\n        return None;\n    }\n    buffer.insert_str(0,\
    \ \"0x\");\n    Some(buffer)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp1u5dj7o7.rs:6:38\n  |\n6 |     let mut buffer = format!(\"{:x}\"\
    , md5::compute(text));\n  |                                      ^^^ use of undeclared\
    \ crate or module `md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    hasher.input(text.as_bytes());\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpxly4c4uh.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let md5_hash = hasher.result_str();\n\n    Some(md5_hash)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp0zqii9a9.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let mut hasher = Md5::new();\n            hasher.input(text.as_bytes());\n\
    \            Some(format!(\"{:x}\", hasher.result()))\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpqtfmnwxt.rs:9:30\n\
    \  |\n9 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let output = format!(\"{:x}\", result);\n\
    \    Some(output)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpxi4b_79u.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let text_md5 = md5::compute(text);\n    let text_md5_hex = format!(\"\
    {:x}\", text_md5);\n\n    Some(text_md5_hex)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpda9sb9ad.rs:10:20\n   |\n10 |     let text_md5 = md5::compute(text);\n\
    \   |                    ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut output = String::from(\"\");\n    if\
    \ text.len() > 0 {\n        let mut md5 = Md5::new();\n        md5.input_str(&text);\n\
    \        output = md5.result_str();\n    }\n    if output.len() > 0 {\n      \
    \  Some(output)\n    } else {\n        None\n    }\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpj_3n9tx7.rs:8:23\n\
    \  |\n8 |         let mut md5 = Md5::new();\n  |                       ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let md5 = md5::compute(text);\n    let mut bytes = [0; 16];\n  \
    \  bytes.copy_from_slice(&md5);\n    let s = hex::encode(bytes);\n    Some(s)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpmmnblblz.rs:10:15\n   |\n10 |     let md5 = md5::compute(text);\n\
    \   |               ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpmmnblblz.rs:13:13\n\
    \   |\n13 |     let s = hex::encode(bytes);\n   |             ^^^ use of undeclared\
    \ crate or module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let result = md5::compute(text);\n    let result_hex = format!(\"\
    {:x}\", result);\n    Some(result_hex)\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp_9maeryr.rs:10:18\n   |\n10 |     let result = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.is_empty() {\n        true => None,\n\
    \        false => {\n            let mut hasher = Md5::new();\n            hasher.input_str(&text);\n\
    \            Some(hasher.result_str())\n        }\n    }\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpjnzltlsl.rs:9:30\n\
    \  |\n9 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    hasher.input(text.as_bytes());\n    Some(format!(\"\
    {:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpswk7c136.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hash = String::new();\n    let mut m = Md5::new();\n   \
    \ m.input_str(&text);\n    let result = m.result_str();\n    hash.push_str(&result);\n\
    \    Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp6y56gbls.rs:11:17\n\
    \   |\n11 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(format!(\"{:x}\", md5::compute(text)))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpd68ni92q.rs:10:26\n   |\n10 |     Some(format!(\"{:x}\", md5::compute(text)))\n\
    \   |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    Some(format!(\"\
    {:x}\", m.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpobco3yq5.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let output = format!(\"{:x}\", result);\n\
    \    Some(output)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpxi4b_79u.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let digest = hasher.result();\n    let hex_digest = hex::encode(digest);\n\
    \    Some(hex_digest)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpxd_195c7.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `hex`\n  --> /tmp/tmpxd_195c7.rs:13:22\n   |\n13 |     let hex_digest\
    \ = hex::encode(digest);\n   |                      ^^^ use of undeclared crate\
    \ or module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let text = text.as_bytes();\n    let mut digest\
    \ = vec![0; 16];\n    if text.len() > 0 {\n        let mut hasher = Md5::new();\n\
    \        hasher.input(text);\n        digest.copy_from_slice(hasher.result().as_slice());\n\
    \    }\n    Some(hex::encode(digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp111igfkz.rs:9:26\n\
    \  |\n9 |         let mut hasher = Md5::new();\n  |                          ^^^\
    \ use of undeclared type `Md5`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `hex`\n  --> /tmp/tmp111igfkz.rs:13:10\n   |\n13 |     Some(hex::encode(digest))\n\
    \   |          ^^^ use of undeclared crate or module `hex`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(md5::compute(text).to_string())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp7gt0l84t.rs:10:10\n   |\n10 |     Some(md5::compute(text).to_string())\n\
    \   |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let digest_str = format!(\"\
    {:x}\", digest);\n    Some(digest_str)\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmphjjc4at9.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(md5::compute(text).to_string())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp7gt0l84t.rs:10:10\n   |\n10 |     Some(md5::compute(text).to_string())\n\
    \   |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    Some(m.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpqrh9o960.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let res = md5::compute(text);\n    Some(format!(\"{:x}\", res))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmplguliho9.rs:10:15\n   |\n10 |     let res = md5::compute(text);\n\
    \   |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hasher.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp02hoe_is.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hasher.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp02hoe_is.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let md5 = md5::compute(text);\n    Some(format!(\"{:x}\", md5))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpdp1r_q3k.rs:10:15\n   |\n10 |     let md5 = md5::compute(text);\n\
    \   |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    let result = md5.result();\n    let mut ret_str = String::new();\n    for\
    \ byte in result.iter() {\n        ret_str.push_str(&format!(\"{:02x}\", byte));\n\
    \    }\n    Some(ret_str)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpcjgt57bz.rs:6:19\n\
    \  |\n6 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // Convert 'text' to md5 string.\n    let md5_text = md5::compute(text);\n\
    \n    // Convert md5_text to a hexadecimal string.\n    let hex_text = format!(\"\
    {:x}\", md5_text);\n\n    Some(hex_text)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkz7dmkhv.rs:11:20\n   |\n11 |     let md5_text = md5::compute(text);\n\
    \   |                    ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let hash_string = format!(\"\
    {:x}\", digest);\n    Some(hash_string)\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpyn3zqxur.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let hex_string = format!(\"{:x}\", hasher.result());\n    return Some(hex_string);\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp46udlpnj.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let h = hex::encode(md5::compute(text));\n        \
    \    Some(h)\n        }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \ --> /tmp/tmp9uy2vhua.rs:9:21\n  |\n9 |             let h = hex::encode(md5::compute(text));\n\
    \  |                     ^^^ use of undeclared crate or module `hex`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `md5`\n --> /tmp/tmp9uy2vhua.rs:9:33\n\
    \  |\n9 |             let h = hex::encode(md5::compute(text));\n  |          \
    \                       ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    hasher.input(text.as_bytes());\n    Some(format!(\"\
    {:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpswk7c136.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let md5_hash: String = hash(text.as_bytes());\n    Some(md5_hash)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `hash` in this scope\n  --> /tmp/tmpnx6vh2ms.rs:10:28\n\
    \   |\n10 |     let md5_hash: String = hash(text.as_bytes());\n   |          \
    \                  ^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this function\n   |\n1  | use std::ptr::hash;\n   |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    hasher.input(text.as_bytes());\n    Some(format!(\"\
    {:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpswk7c136.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = md5::Context::new();\n    md5.consume(text.as_bytes());\n\
    \    let digest = md5.compute();\n\n    Some(hex::encode(digest))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \  --> /tmp/tmpjfp950js.rs:14:10\n   |\n14 |     Some(hex::encode(digest))\n \
    \  |          ^^^ use of undeclared crate or module `hex`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `md5`\n  --> /tmp/tmpjfp950js.rs:10:24\n\
    \   |\n10 |     let mut md5 = md5::Context::new();\n   |                     \
    \   ^^^^^^^ not found in `md5`\n   |\nhelp: consider importing this struct\n \
    \  |\n1  | use std::task::Context;\n   |\nhelp: if you import `Context`, refer\
    \ to it directly\n   |\n10 -     let mut md5 = md5::Context::new();\n10 +    \
    \ let mut md5 = Context::new();\n   | \n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hasher.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp02hoe_is.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let output = format!(\"{:x}\", md5::compute(text));\n    Some(output)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpb8a4zzi6.rs:10:34\n   |\n10 |     let output = format!(\"{:x}\"\
    , md5::compute(text));\n   |                                  ^^^ use of undeclared\
    \ crate or module `md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => Some(md5::compute(text).to_string()),\n    }\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp8cw3ygc2.rs:8:19\n  |\n8 |         _ => Some(md5::compute(text).to_string()),\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut digest = Digest::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    digest.update(text.as_bytes());\n    Some(hex::encode(digest.finalize()))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmp33aogcnc.rs:6:22\n  |\n6 |     let mut digest = Digest::new();\n  |\
    \                      ^^^^^^ use of undeclared type `Digest`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmp33aogcnc.rs:11:10\n\
    \   |\n11 |     Some(hex::encode(digest.finalize()))\n   |          ^^^ use of\
    \ undeclared crate or module `hex`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let mut digest_string = String::with_capacity(32);\n\
    \    for byte in result.iter() {\n        digest_string.push_str(&format!(\"{:02x}\"\
    , byte));\n    }\n    Some(digest_string)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp_chk3egd.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let mut md5_str = String::new();\n\
    \    for byte in digest.iter() {\n        md5_str.push_str(&format!(\"{:02x}\"\
    , byte));\n    }\n\n    Some(md5_str)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpstd6e_87.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n   \
    \ let result = md5.result();\n    let hex_str = format!(\"{:x}\", result);\n \
    \   return Some(hex_str);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpwo0tn_ja.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => Some(md5::compute(text).to_string()),\n    }\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp8cw3ygc2.rs:8:19\n  |\n8 |         _ => Some(md5::compute(text).to_string()),\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(hex::encode(md5::compute(text).0))\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \  --> /tmp/tmpkxfltauk.rs:10:10\n   |\n10 |     Some(hex::encode(md5::compute(text).0))\n\
    \   |          ^^^ use of undeclared crate or module `hex`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `md5`\n  --> /tmp/tmpkxfltauk.rs:10:22\n\
    \   |\n10 |     Some(hex::encode(md5::compute(text).0))\n   |                \
    \      ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let hash = md5::compute(text);\n    let md5 = format!(\"{:x}\",\
    \ hash);\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpwlfekosn.rs:10:16\n   |\n10 |     let hash = md5::compute(text);\n\
    \   |                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // Convert 'text' to bytes and compute its md5 digest\n    let digest\
    \ = md5::compute(text.as_bytes());\n\n    // Return the hexadecimal representation\
    \ of the digest\n    Some(hex::encode(digest))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpuh3nnih9.rs:11:18\n   |\n11 |     let digest = md5::compute(text.as_bytes());\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpuh3nnih9.rs:14:10\n\
    \   |\n14 |     Some(hex::encode(digest))\n   |          ^^^ use of undeclared\
    \ crate or module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut digest = Digest::new();\n    digest.update(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", digest.finalize()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmpvvd36s8n.rs:6:22\n  |\n6 |     let mut digest = Digest::new();\n  |\
    \                      ^^^^^^ use of undeclared type `Digest`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    let\
    \ result = m.result();\n    Some(format!(\"{:x}\", result))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmps0as34ij.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut data = [0; 16];\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result(&mut data);\n\n    Some(data.iter().map(|b| format!(\"{:02x}\"\
    , b)).collect())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpyhr89hfs.rs:11:19\n\
    \   |\n11 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    let\
    \ result = m.result();\n    Some(format!(\"{:x}\", result))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmps0as34ij.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // If 'text' is an empty string, return None.\n\
    \    if text.is_empty() {\n        return None;\n    }\n\n    // Get the bytes\
    \ of the string.\n    let bytes = text.as_bytes();\n\n    // Compute its md5 hash.\n\
    \    let hash = md5::compute(bytes);\n\n    // Convert it to hexadecimal string.\n\
    \    let md5_string = hex::encode(hash);\n\n    // Return the md5 hash.\n    Some(md5_string)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp2w1y0_zn.rs:15:16\n   |\n15 |     let hash = md5::compute(bytes);\n\
    \   |                ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmp2w1y0_zn.rs:18:22\n\
    \   |\n18 |     let md5_string = hex::encode(hash);\n   |                    \
    \  ^^^ use of undeclared crate or module `hex`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let digest = md5::compute(text);\n            Some(format!(\"\
    {:x}\", digest))\n        }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpajykaka8.rs:9:26\n  |\n9 |             let digest = md5::compute(text);\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let md5_result = hasher.result();\n    let md5_as_hex_string = format!(\"\
    {:x}\", md5_result);\n    Some(md5_as_hex_string)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp0qfqf1a_.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hasher.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp02hoe_is.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(format!(\"{:x}\", md5::compute(text)))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpd68ni92q.rs:10:26\n   |\n10 |     Some(format!(\"{:x}\", md5::compute(text)))\n\
    \   |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // TODO: Your code here\n    return None;\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\")`', /tmp/tmpz0js42ey.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(md5::compute(text).to_string())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp7gt0l84t.rs:10:10\n   |\n10 |     Some(md5::compute(text).to_string())\n\
    \   |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut buffer = [0u8; 16];\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    hasher.result(&mut buffer);\n    let mut result = String::new();\n    for\
    \ i in buffer.iter() {\n        result.push_str(&format!(\"{:02x}\", i));\n  \
    \  }\n    Some(result)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpqijpk9kf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let mut output = String::with_capacity(32);\n\
    \    for i in result.iter() {\n        output.push_str(&format!(\"{:02x}\", i));\n\
    \    }\n    Some(output)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpn3tiqcoz.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // Create an Md5 object\n    let mut hasher = Md5::new();\n\n  \
    \  // Write input message\n    hasher.input(text.as_bytes());\n\n    // Get a\
    \ result\n    let result = hasher.result();\n\n    // Convert to a string of hex\n\
    \    let mut hex_string = String::new();\n    for i in result.iter() {\n     \
    \   hex_string += &format!(\"{:x}\", i);\n    }\n\n    Some(hex_string)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpiemouvno.rs:11:22\n\
    \   |\n11 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hasher.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp02hoe_is.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let md5_string = hasher.result_str();\n\n    Some(md5_string)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpiscevbyv.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => Some(format!(\"{:x}\", md5::compute(text))),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp91c9h6ob.rs:8:35\n  |\n8 |         _ => Some(format!(\"{:x}\", md5::compute(text))),\n\
    \  |                                   ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(md5::compute(text).to_string())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp7gt0l84t.rs:10:10\n   |\n10 |     Some(md5::compute(text).to_string())\n\
    \   |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // Create a digest object from digest::Context<T>\n    let mut digest\
    \ = md5::Context::new();\n\n    // Update the digest object by passing 'text'.\n\
    \    digest.consume(text.as_bytes());\n\n    // Finally, get the result.\n   \
    \ let digest = digest.compute();\n\n    // Convert the digest object into a hex\
    \ string.\n    let digest_hex = format!(\"{:x}\", digest);\n\n    Some(digest_hex)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp21bg2r94.rs:11:27\n   |\n11 |     let mut digest = md5::Context::new();\n\
    \   |                           ^^^^^^^ not found in `md5`\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::task::Context;\n   |\nhelp: if you\
    \ import `Context`, refer to it directly\n   |\n11 -     let mut digest = md5::Context::new();\n\
    11 +     let mut digest = Context::new();\n   | \n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut ctx = Md5::new();\n    ctx.input(text.as_bytes());\n   \
    \ Some(ctx.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpqwc17rsg.rs:10:19\n\
    \   |\n10 |     let mut ctx = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // If text is empty, return None\n    if text.is_empty()\
    \ {\n        return None;\n    }\n\n    // Get text as vector of bytes\n    let\
    \ text_as_bytes = text.as_bytes();\n\n    // Compute md5 hash\n    let mut md5_hasher\
    \ = Md5::new();\n    md5_hasher.input(text_as_bytes);\n    let result = md5_hasher.result();\n\
    \n    // Return equivalent string\n    Some(format!(\"{:x}\", result))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpsfoaaz5y.rs:15:26\n\
    \   |\n15 |     let mut md5_hasher = Md5::new();\n   |                       \
    \   ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n   \
    \ let result = md5.result();\n    let result_str = format!(\"{:x}\", result);\n\
    \    Some(result_str)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpaw7pa957.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.is_empty() {\n        true => None,\n\
    \        false => {\n            let digest = md5::compute(text);\n          \
    \  let digest_hex = format!(\"{:x}\", digest);\n            Some(digest_hex)\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpql253zmj.rs:9:26\n  |\n9 |             let digest = md5::compute(text);\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    Some(format!(\"\
    {:x}\", m.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpobco3yq5.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Compute the md5 hash of a string.\n    match\
    \ text.len() {\n        0 => None,\n        _ => Some(md5::compute(text).to_string()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpk6292omd.rs:9:19\n  |\n9 |         _ => Some(md5::compute(text).to_string()),\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let hash = hasher.result_str();\n\n    Some(hash)\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpecsyg27u.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    Some(m.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpqrh9o960.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // Only using the first 16 bytes of the hex string, which is equivalent\
    \ to the 8 byte string\n    // returned by md5::compute().\n    let hash = hex::encode(md5::compute(text).0[..16]);\n\
    \    return Some(hash);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \  --> /tmp/tmpwp1dph9n.rs:12:16\n   |\n12 |     let hash = hex::encode(md5::compute(text).0[..16]);\n\
    \   |                ^^^ use of undeclared crate or module `hex`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `md5`\n  --> /tmp/tmpwp1dph9n.rs:12:28\n\
    \   |\n12 |     let hash = hex::encode(md5::compute(text).0[..16]);\n   |    \
    \                        ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let res = md5::compute(text);\n    Some(format!(\"{:x}\", res))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmplguliho9.rs:10:15\n   |\n10 |     let res = md5::compute(text);\n\
    \   |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // TODO: Review this section.\n    if text.is_empty()\
    \ {\n        None\n    } else {\n        // TODO: Review this section.\n     \
    \   let md5 = md5::compute(text);\n        Some(md5.to_string())\n    }\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp53roqskc.rs:11:19\n   |\n11 |         let md5 = md5::compute(text);\n\
    \   |                   ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    match md5::compute(text) {\n        Ok(result) => {\n          \
    \  let mut output = String::new();\n            for b in result.iter() {\n   \
    \             output.push_str(&format!(\"{:x}\", b));\n            }\n       \
    \     Some(output)\n        }\n        Err(_) => None,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp52nee5bi.rs:10:11\n   |\n10 |     match md5::compute(text) {\n\
    \   |           ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    hasher.input(text.as_bytes());\n    Some(format!(\"\
    {:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpswk7c136.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let mut hasher = Md5::new();\n            hasher.input(text.as_bytes());\n\
    \            Some(format!(\"{:x}\", hasher.result()))\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpqtfmnwxt.rs:9:30\n\
    \  |\n9 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let result_string = format!(\"{:x}\",\
    \ result);\n    return Some(result_string);\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpk5cdj8jr.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let hex_result = format!(\"{:x}\", result);\n\
    \    return Some(hex_result);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpf5vb_vlt.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let digest = hasher.result();\n    Some(format!(\"{:x}\", digest))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp044ithxt.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let result = format!(\"{:x}\"\
    , digest);\n    Some(result)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpa3pf7rnk.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // Convert the string into bytes\n    let text_bytes = text.as_bytes();\n\
    \n    // Create a new Md5 object\n    let mut md5 = Md5::new();\n\n    // Feed\
    \ the Md5 object\n    md5.input(text_bytes);\n\n    // Return the result\n   \
    \ Some(format!(\"{:x}\", md5.result()))\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpxy_5r0kt.rs:14:19\n\
    \   |\n14 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let mut digest_hex = String::new();\n\
    \    for byte in digest.iter() {\n        digest_hex.push_str(&format!(\"{:02x}\"\
    , byte));\n    }\n\n    Some(digest_hex)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpzyev5pu5.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = match md5::compute(text) {\n        Ok(bytes) => bytes,\n\
    \        Err(_) => return None,\n    };\n\n    let digest_string = digest.iter().fold(String::new(),\
    \ |mut s, &byte| {\n        s.push_str(&format!(\"{:02x}\", byte));\n        s\n\
    \    });\n\n    Some(digest_string)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpa821i7_i.rs:10:24\n   |\n10 |     let digest = match md5::compute(text)\
    \ {\n   |                        ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut digest = Md5::new();\n    digest.input_str(&text);\n\
    \    let md5_hash = digest.result_str();\n    if md5_hash.is_empty() {\n     \
    \   None\n    } else {\n        Some(md5_hash)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpnhdx2_ae.rs:6:22\n\
    \  |\n6 |     let mut digest = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let bytes = text.as_bytes();\n    let mut hasher = Md5::new();\n\
    \    hasher.input(bytes);\n    let out = hasher.result();\n    Some(format!(\"\
    {:x}\", out))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp7lodfj8i.rs:11:22\n\
    \   |\n11 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    Some(format!(\"{:x}\", result))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpcp45qk3f.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // If the given text is an empty string, return\
    \ None.\n    if text.is_empty() {\n        return None;\n    }\n\n    // Create\
    \ a new MD5 digest instance that is used to hash the given text.\n    let mut\
    \ hasher = Md5::new();\n\n    // Use the digest instance to write the text and\
    \ then read the digest.\n    hasher.input(text.as_bytes());\n    let result =\
    \ hasher.result();\n\n    // Convert the digest into a hex string and return it.\n\
    \    Some(format!(\"{:x}\", result))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp_5ptjs0n.rs:12:22\n\
    \   |\n12 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hasher.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp02hoe_is.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut digest = Md5::new();\n    digest.input(text.as_bytes());\n\
    \    Some(hex::encode(digest.result()))\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp6yojzrty.rs:10:22\n\
    \   |\n10 |     let mut digest = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `hex`\n  --> /tmp/tmp6yojzrty.rs:12:10\n   |\n12 |     Some(hex::encode(digest.result()))\n\
    \   |          ^^^ use of undeclared crate or module `hex`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Compute MD5 sum of the text\n    let mut\
    \ hasher = Md5::new();\n    hasher.input_str(&text);\n    let hash = hasher.result_str();\n\
    \n    // Check if the MD5 hash is empty\n    // If yes, return None, else return\
    \ the hex digest\n    if hash.is_empty() {\n        None\n    } else {\n     \
    \   Some(hash)\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmphab1663e.rs:7:22\n\
    \  |\n7 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let bytes = text.as_bytes();\n    let mut hasher = Md5::new();\n\
    \    hasher.input(bytes);\n    let result = hasher.result();\n    let mut s =\
    \ String::new();\n    for byte in result.iter() {\n        s.push_str(&format!(\"\
    {:x}\", byte));\n    }\n    Some(s)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpom7xb3_w.rs:11:22\n\
    \   |\n11 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(md5::compute(text).to_string())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp7gt0l84t.rs:10:10\n   |\n10 |     Some(md5::compute(text).to_string())\n\
    \   |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(format!(\"{:x}\", md5::compute(text)))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpd68ni92q.rs:10:26\n   |\n10 |     Some(format!(\"{:x}\", md5::compute(text)))\n\
    \   |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    Some(format!(\"\
    {:x}\", m.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpobco3yq5.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // Convert the string to a byte buffer.\n    let text_bytes = text.as_bytes();\n\
    \n    // Create a new md5 hashing context.\n    let mut md5_context = md5::Context::new();\n\
    \n    // Update the md5 hashing context with bytes from the message buffer.\n\
    \    md5_context.consume(text_bytes);\n\n    // Create a new string buffer with\
    \ the size of the md5 digest.\n    let mut digest_bytes = vec![0u8; md5::DIGEST_LENGTH];\n\
    \n    // Produce the digest into the buffer.\n    md5_context.compute(&mut digest_bytes);\n\
    \n    // Create a new vector of bytes, by converting each byte of the hash digest\n\
    \    // into a hexadecimal string, then converting each hexadecimal string into\n\
    \    // a byte buffer, and then concatenating the contents of the vector of bytes.\n\
    \    let mut digest_buffer = Vec::new();\n    for byte in digest_bytes {\n   \
    \     let hex_string = format!(\"{:02x}\", byte);\n        let hex_bytes = hex_string.as_bytes();\n\
    \        digest_buffer.extend_from_slice(hex_bytes);\n    }\n\n    // Create a\
    \ new string from the concatenated contents of the vector of bytes.\n    let digest_string\
    \ = String::from_utf8(digest_buffer).unwrap();\n\n    // Return the digest string.\n\
    \    Some(digest_string)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp17o2t9hw.rs:20:38\n   |\n20 |     let mut digest_bytes = vec![0u8;\
    \ md5::DIGEST_LENGTH];\n   |                                      ^^^ use of undeclared\
    \ crate or module `md5`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `md5`\n  --> /tmp/tmp17o2t9hw.rs:14:32\n   |\n14 |     let mut\
    \ md5_context = md5::Context::new();\n   |                                ^^^^^^^\
    \ not found in `md5`\n   |\nhelp: consider importing this struct\n   |\n1  | use\
    \ std::task::Context;\n   |\nhelp: if you import `Context`, refer to it directly\n\
    \   |\n14 -     let mut md5_context = md5::Context::new();\n14 +     let mut md5_context\
    \ = Context::new();\n   | \n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let mut hex_str = String::new();\n\
    \    for byte in digest.iter() {\n        hex_str.push_str(&format!(\"{:02x}\"\
    , byte));\n    }\n\n    Some(hex_str)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpc23o1p7x.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    hasher.input(text.as_bytes());\n    let\
    \ hash = format!(\"{:x}\", hasher.result());\n    Some(hash)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp2sk7rd0s.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let mut hasher = Md5::new();\n            hasher.input_str(&text);\n\
    \            Some(hasher.result_str())\n        }\n    }\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmppigoul4i.rs:9:30\n\
    \  |\n9 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let mut md5_str = String::new();\n\
    \    for n in digest.iter() {\n        write!(&mut md5_str, \"{:x}\", n).expect(\"\
    Unable to write data\");\n    }\n\n    Some(md5_str)\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp811ux1ei.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0599]:\
    \ no method named `write_fmt` found for mutable reference `&mut String` in the\
    \ current scope\n  --> /tmp/tmp811ux1ei.rs:13:9\n   |\n13 |         write!(&mut\
    \ md5_str, \"{:x}\", n).expect(\"Unable to write data\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `&mut String`\n   |\n   = help: items from traits can only\
    \ be used if the trait is in scope\n   = note: this error originates in the macro\
    \ `write` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp:\
    \ the following trait is implemented but not in scope; perhaps add a `use` for\
    \ it:\n   |\n1  | use std::fmt::Write;\n   |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.is_empty() {\n        true => None,\n\
    \        false => Some(md5::compute(text).to_string()),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmppb2g4inx.rs:8:23\n  |\n8 |         false => Some(md5::compute(text).to_string()),\n\
    \  |                       ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let hex_string = format!(\"{:x}\", result);\n\
    \    return Some(hex_string);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpo9ndpdue.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    Some(format!(\"{:x}\", result))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpcp45qk3f.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n   \
    \ let digest = md5.result();\n    Some(format!(\"{:x}\", digest))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp9ka7ns_r.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Question: Why are we using Option<T> instead\
    \ of Result<T, E>?\n    //\n    // Answer: \n    //\n    // 1. Because we just\
    \ want to return None in this case.\n    //    There is no error handling here.\n\
    \    // 2. It is easier to use \"match\" with Option<T> than Result<T, E>.\n \
    \   //    If we had used Result<T, E>, then we would have to use \"match\"\n \
    \   //    like this: \n    //        match result {\n    //            Ok(digest)\
    \ => Ok(digest),\n    //            Err(err) => Err(err),\n    //        }\n \
    \   //    Here is the reason:\n    //        https://stackoverflow.com/questions/37994260/why-cant-rust-infer-the-return-type-of-my-result-wrapped-closure\n\
    \n    if text.is_empty() {\n        return None;\n    }\n\n    let mut md5 = Md5::new();\n\
    \    md5.input(text.as_bytes());\n    Some(format!(\"{:x}\", md5.result()))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp7juvwtq7.rs:26:19\n\
    \   |\n26 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // Hash the text and convert it to hex representation\n    let hashed_text\
    \ = hex::encode(md5::compute(text));\n\n    // Return the hashed text\n    Some(hashed_text)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \  --> /tmp/tmpudlv7k5i.rs:11:23\n   |\n11 |     let hashed_text = hex::encode(md5::compute(text));\n\
    \   |                       ^^^ use of undeclared crate or module `hex`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `md5`\n  --> /tmp/tmpudlv7k5i.rs:11:35\n\
    \   |\n11 |     let hashed_text = hex::encode(md5::compute(text));\n   |     \
    \                              ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n   \
    \ Some(format!(\"{:x}\", md5.result()))\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp6unt8odi.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // Turn our String into bytes, aka Vec<u8>\n    let bytes = text.into_bytes();\n\
    \n    // Create a new md5 engine (functions like a hashmap, but for md5)\n   \
    \ let mut md5_engine = Md5::new();\n\n    // Update the engine with the bytes\
    \ provided\n    md5_engine.input(&bytes);\n\n    // Return the hex digest of the\
    \ bytes we just provided to the engine\n    Some(md5_engine.result_str())\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpwxqx6lgm.rs:14:26\n\
    \   |\n14 |     let mut md5_engine = Md5::new();\n   |                       \
    \   ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(hex::encode(digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpglwthf_x.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpglwthf_x.rs:11:10\n\
    \   |\n11 |     Some(hex::encode(digest))\n   |          ^^^ use of undeclared\
    \ crate or module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let result = md5::compute(text);\n    let result_str = format!(\"\
    {:x}\", result);\n    return Some(result_str);\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpyfc1sb44.rs:10:18\n   |\n10 |     let result = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(String::from(hex::encode(md5::compute(text))))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \  --> /tmp/tmpzkfhcaml.rs:10:23\n   |\n10 |     Some(String::from(hex::encode(md5::compute(text))))\n\
    \   |                       ^^^ use of undeclared crate or module `hex`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `md5`\n  --> /tmp/tmpzkfhcaml.rs:10:35\n\
    \   |\n10 |     Some(String::from(hex::encode(md5::compute(text))))\n   |    \
    \                               ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5_hasher = Md5::new();\n    md5_hasher.input(text.as_bytes());\n\
    \    let hash = md5_hasher.result_str();\n\n    Some(hash)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpxw9dkxxf.rs:10:26\n\
    \   |\n10 |     let mut md5_hasher = Md5::new();\n   |                       \
    \   ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let digest_hex = format!(\"\
    {:x}\", digest);\n    return Some(digest_hex);\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpq2_fpoq9.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let hex_encoded_hash = hasher.result().to_hex();\n    Some(hex_encoded_hash)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpc1i5jyp8.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Check if the string is empty\n    if text.is_empty()\
    \ {\n        return None;\n    }\n\n    // Compute the text's md5 hash\n    let\
    \ digest = md5::compute(text);\n\n    // Convert the md5 hash to a string\n  \
    \  let hash = format!(\"{:?}\", digest);\n\n    // Allocate a new String, and\
    \ remove the leading \"0x\" and the trailing \",\" characters\n    Some(hash.replace(\"\
    0x\", \"\").replace(\",\", \"\"))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpslaktawk.rs:12:18\n   |\n12 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let digest = md5::compute(text);\n    Some(format!(\"\
    {:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpvtv8zrpu.rs:6:18\n  |\n6 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let hash_result = hasher.result();\n    let hash_bytes = hash_result.to_vec();\n\
    \    let mut hex_str = String::new();\n    for byte in hash_bytes {\n        hex_str.push_str(&format!(\"\
    {:x}\", byte));\n    }\n    Some(hex_str)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpxgtbgx6a.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let hash = hasher.result_str();\n\n    return Some(hash);\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpmbpji7qg.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let result_hex = result.to_hex();\n  \
    \  Some(result_hex)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpdpkwqjbk.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5_hasher = Md5::new();\n    md5_hasher.input(text.as_bytes());\n\
    \    let result = md5_hasher.result();\n    Some(format!(\"{:x}\", result))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp_3bhud0t.rs:10:26\n\
    \   |\n10 |     let mut md5_hasher = Md5::new();\n   |                       \
    \   ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let result_string = format!(\"{:x}\",\
    \ result);\n    return Some(result_string);\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpk5cdj8jr.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let mut v: Vec<u8> = Vec::new();\n    v.extend(hasher.result().iter());\n\
    \    Some(hex::encode(v))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpzn90klfa.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `hex`\n  --> /tmp/tmpzn90klfa.rs:14:10\n   |\n14 |     Some(hex::encode(v))\n\
    \   |          ^^^ use of undeclared crate or module `hex`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    Some(\n        hex::encode(\n            md5::compute(text.as_bytes()).as_slice()\n\
    \        )\n    )\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \  --> /tmp/tmpk260fd_2.rs:11:9\n   |\n11 |         hex::encode(\n   |       \
    \  ^^^ use of undeclared crate or module `hex`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `md5`\n  --> /tmp/tmpk260fd_2.rs:12:13\n \
    \  |\n12 |             md5::compute(text.as_bytes()).as_slice()\n   |        \
    \     ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    hasher.input(text.as_bytes());\n    let\
    \ hash = hasher.result_str();\n    return Some(hash);\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpthltqflu.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let output = hasher.result();\n    let md5_str = format!(\"{:x}\", output);\n\
    \    Some(md5_str)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n   \
    \ assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpy1w2d5id.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = match md5::compute(text) {\n        Ok(d) => d,\n \
    \       Err(_) => panic!(\"Unable to compute md5\"),\n    };\n\n    Some(format!(\"\
    {:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpbf4mc53_.rs:10:24\n   |\n10 |     let digest = match md5::compute(text)\
    \ {\n   |                        ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    let\
    \ mut output = [0; 16];\n    m.result(&mut output);\n\n    let mut temp = Vec::new();\n\
    \    for i in output.iter() {\n        temp.push(format!(\"{:02x}\", i));\n  \
    \  }\n\n    let result = temp.join(\"\");\n    return Some(result);\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpw7x16mx4.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    // https://stackoverflow.com/questions/29179515/how-to-make-md5-hash-in-rust\n\
    \    let result = format!(\"{:x}\", md5::compute(text));\n    Some(result)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmptvathlhi.rs:11:34\n   |\n11 |     let result = format!(\"{:x}\"\
    , md5::compute(text));\n   |                                  ^^^ use of undeclared\
    \ crate or module `md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut digest = Md5::new();\n    digest.input(text.as_bytes());\n\
    \    let result = digest.result();\n    let str_result = format!(\"{:x}\", result);\n\
    \    return Some(str_result);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpr585crx5.rs:10:22\n\
    \   |\n10 |     let mut digest = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n   \
    \ let result = md5.result();\n    let as_str = format!(\"{:x}\", result);\n  \
    \  Some(as_str)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp1ge11mqc.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let mut hasher = Md5::new();\n            hasher.input_str(&text);\n\
    \            let output = hasher.result_str();\n            Some(output)\n   \
    \     }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpfbvfxj0j.rs:9:30\n\
    \  |\n9 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let hex_bytes = format!(\"{:x}\", hasher.result());\n    Some(hex_bytes)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpc167zgu7.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.is_empty() {\n        true => None,\n\
    \        false => {\n            let mut hasher = Md5::new();\n            hasher.input_str(&text);\n\
    \            let hash = hasher.result_str();\n            Some(hash)\n       \
    \ }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpio1iyq8c.rs:9:30\n\
    \  |\n9 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let md5 = md5::compute(text);\n            let mut\
    \ buffer = [0; 16];\n            buffer.copy_from_slice(&md5[..]);\n         \
    \   Some(hex::encode(buffer))\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpct4190me.rs:9:23\n  |\n9 |             let md5 = md5::compute(text);\n\
    \  |                       ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpct4190me.rs:12:18\n\
    \   |\n12 |             Some(hex::encode(buffer))\n   |                  ^^^ use\
    \ of undeclared crate or module `hex`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5_hash = Md5::new();\n    md5_hash.input_str(&text);\n\
    \    Some(md5_hash.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpzfvivtkk.rs:10:24\n\
    \   |\n10 |     let mut md5_hash = Md5::new();\n   |                        ^^^\
    \ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let mut md5_bytes = hasher.result().to_vec();\n    md5_bytes.reverse();\n\
    \n    Some(format!(\"{:x}\", md5_bytes))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmprz0bo977.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let md5_string = format!(\"{:x}\", result);\n\
    \    Some(md5_string)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpy8deg_cv.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n   \
    \ Some(format!(\"{:x}\", md5.result()))\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp6unt8odi.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Generate a digest, passing the string to\
    \ be hashed as bytes\n    //let mut hasher = Md5::new();\n    //hasher.input(text.as_bytes());\n\
    \    //let result = hasher.result();\n    // Convert the digest to a string and\
    \ return it\n    //let hex_digest = format!(\"{:x}\", result);\n    // Some(hex_digest)\n\
    \    Some(text)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"Hello world\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpgiid33c0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let mut hex = String::new();\n    for\
    \ byte in result.iter() {\n        hex.push_str(&format!(\"{:x}\", byte));\n \
    \   }\n    Some(hex)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpbaun1osf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // If the text is empty, return None\n    if\
    \ text.is_empty() {\n        return None;\n    }\n\n    // Convert the text to\
    \ bytes\n    let text_bytes = text.as_bytes();\n\n    // Initialize the MD5 hasher\n\
    \    let mut md5_hasher = Md5::new();\n\n    // Feed the string bytes to the hasher\n\
    \    md5_hasher.input(text_bytes);\n\n    // Get the hash result\n    let hash_result\
    \ = md5_hasher.result();\n\n    // Convert the hash result to a string of hexadecimal\
    \ digits\n    let hash_result_hex_string = hash_result.to_hex();\n\n    // Return\
    \ the hash result\n    Some(hash_result_hex_string)\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpdhyjmp3v.rs:15:26\n\
    \   |\n15 |     let mut md5_hasher = Md5::new();\n   |                       \
    \   ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let md5 = md5::compute(text);\n    let output = format!(\"{:x}\"\
    , md5);\n    Some(output)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp275zenqk.rs:10:15\n   |\n10 |     let md5 = md5::compute(text);\n\
    \   |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // if empty string\n    if text.is_empty()\
    \ {\n        return None;\n    }\n\n    // if not empty string\n    let mut md5\
    \ = Md5::new();\n    md5.input_str(&text);\n    Some(md5.result_str())\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpgy_vtyd9.rs:12:19\n\
    \   |\n12 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let mut s = String::new();\n    for byte\
    \ in result.iter() {\n        s.push_str(&format!(\"{:02x}\", byte));\n    }\n\
    \    Some(s)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpg_yul8dj.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let digest = hasher.result();\n    let mut result = String::with_capacity(32);\n\
    \    for i in digest.iter() {\n        write!(&mut result, \"{:02x}\", i).expect(\"\
    Unable to write data.\");\n    }\n    Some(result)\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp042t93ql.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror[E0599]: no method named `write_fmt` found\
    \ for mutable reference `&mut String` in the current scope\n  --> /tmp/tmp042t93ql.rs:15:9\n\
    \   |\n15 |         write!(&mut result, \"{:02x}\", i).expect(\"Unable to write\
    \ data.\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in\
    \ `&mut String`\n   |\n   = help: items from traits can only be used if the trait\
    \ is in scope\n   = note: this error originates in the macro `write` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use\
    \ std::fmt::Write;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0433, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    match md5::compute(text) {\n        Ok(md5_hash) => Some(format!(\"\
    {:x}\", md5_hash)),\n        Err(_) => None,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpotn50n5o.rs:10:11\n   |\n10 |     match md5::compute(text) {\n\
    \   |           ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(hex::encode(digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpglwthf_x.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpglwthf_x.rs:11:10\n\
    \   |\n11 |     Some(hex::encode(digest))\n   |          ^^^ use of undeclared\
    \ crate or module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let digest = hasher.result();\n    let hex_digest = hex::encode(digest);\n\
    \    Some(hex_digest)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpxd_195c7.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `hex`\n  --> /tmp/tmpxd_195c7.rs:13:22\n   |\n13 |     let hex_digest\
    \ = hex::encode(digest);\n   |                      ^^^ use of undeclared crate\
    \ or module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n   \
    \ let result = md5.result();\n    let result_hex_string = format!(\"{:x}\", result);\n\
    \    Some(result_hex_string)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpeawlf2tt.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let md5_result = md5::compute(text);\n    let formatted_result =\
    \ format!(\"{:x}\", md5_result);\n    return Some(formatted_result);\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpmdvocz2o.rs:10:22\n   |\n10 |     let md5_result = md5::compute(text);\n\
    \   |                      ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    Some(m.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpqrh9o960.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let md5 = md5::compute(text);\n            Some(md5.to_string())\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpruu_clu4.rs:9:23\n  |\n9 |             let md5 = md5::compute(text);\n\
    \  |                       ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let encoded = text.encode_utf8();\n    let\
    \ mut hasher = Md5::new();\n    hasher.input(encoded);\n    let result = hasher.result();\n\
    \    if let Some(hash) = result.to_str() {\n        Some(hash.to_string())\n \
    \   } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp0aypc3yl.rs:7:22\n\
    \  |\n7 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror[E0599]: no method named `encode_utf8` found for\
    \ struct `String` in the current scope\n --> /tmp/tmp0aypc3yl.rs:6:24\n  |\n6\
    \ |     let encoded = text.encode_utf8();\n  |                        ^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `encode_utf16`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let mut s = String::new();\n\
    \    for byte in digest.iter() {\n        s.push_str(&format!(\"{:02x}\", byte));\n\
    \    }\n    Some(s)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp76fpkikz.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n   \
    \ let hash = md5.result_str();\n    return Some(hash);\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp8ytz8vop.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    match md5::compute(text) {\n        Ok(hash) => Some(format!(\"\
    {:x}\", hash)),\n        Err(_) => None,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmptlshf0dr.rs:10:11\n   |\n10 |     match md5::compute(text) {\n\
    \   |           ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    let hex_encoder = HexFmt(digest);\n\
    \    Some(hex_encoder.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpv3po4a2v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0425]:\
    \ cannot find function, tuple struct or tuple variant `HexFmt` in this scope\n\
    \  --> /tmp/tmpv3po4a2v.rs:11:23\n   |\n11 |     let hex_encoder = HexFmt(digest);\n\
    \   |                       ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n\n    hasher.input(text.as_bytes());\n    let\
    \ result = hasher.result();\n    let hex_result = format!(\"{:x}\", result);\n\
    \    return Some(hex_result);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpwjar87i4.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let hash = format!(\"{:x}\", result);\n\
    \    Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpfyryj2_5.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hasher.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp02hoe_is.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let text_bytes = text.as_bytes();\n    let digest = md5::compute(text_bytes);\n\
    \    let digest_string = format!(\"{:x}\", digest);\n\n    Some(digest_string)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp04nhado7.rs:11:18\n   |\n11 |     let digest = md5::compute(text_bytes);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe9pbojnf.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let mut s = String::new();\n    for i\
    \ in result.iter() {\n        s.push_str(&format!(\"{:02x}\", i));\n    }\n  \
    \  Some(s)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpowbf7g52.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let context = MD5::new();\n    let mut digest = context.compute(text.as_bytes());\n\
    \n    Some(digest.to_hex())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n  --> /tmp/tmp4vv5yp1a.rs:10:19\n\
    \   |\n10 |     let context = MD5::new();\n   |                   ^^^ use of undeclared\
    \ type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let digest = hex::encode(result);\n  \
    \  Some(digest)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpcamrj_bn.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `hex`\n  --> /tmp/tmpcamrj_bn.rs:13:18\n   |\n13 |     let digest\
    \ = hex::encode(result);\n   |                  ^^^ use of undeclared crate or\
    \ module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5_hasher = Md5::new();\n    md5_hasher.input(text.as_bytes());\n\
    \    let result = md5_hasher.result();\n    Some(format!(\"{:x}\", result))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp_3bhud0t.rs:10:26\n\
    \   |\n10 |     let mut md5_hasher = Md5::new();\n   |                       \
    \   ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Maybe TODO: return None if text is an empty\
    \ string.\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hasher.result_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpx7t06jwy.rs:7:22\n\
    \  |\n7 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut m = Md5::new();\n    m.input(text.as_bytes());\n    let\
    \ result = m.result();\n    Some(format!(\"{:x}\", result))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmps0as34ij.rs:10:17\n\
    \   |\n10 |     let mut m = Md5::new();\n   |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let result = md5::compute(text);\n    Some(format!(\"{:X}\", result))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkb4ali5s.rs:10:18\n   |\n10 |     let result = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = match md5::compute(text) {\n        Ok(digest) => digest,\n\
    \        Err(_) => {\n            return None;\n        }\n    };\n\n    let md5_string\
    \ = format!(\"{:x}\", digest);\n\n    Some(md5_string)\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp4bn1yqla.rs:10:24\n   |\n10 |     let digest = match md5::compute(text)\
    \ {\n   |                        ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let mut hasher = Md5::new();\n            hasher.input(text.as_bytes());\n\
    \            Some(format!(\"{:x}\", hasher.result()))\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpqtfmnwxt.rs:9:30\n\
    \  |\n9 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let hash = hasher.result_str();\n\n    Some(hash)\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpecsyg27u.rs:10:22\n\
    \   |\n10 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let digest = md5::compute(text);\n            let mut\
    \ to_return = String::from(\"\");\n            for i in 0..16 {\n            \
    \    to_return.push_str(&format!(\"{:02x}\", digest[i]));\n            }\n   \
    \         Some(to_return)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpxpm9w8o7.rs:9:26\n  |\n9 |             let digest = md5::compute(text);\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkas_5r7v.rs:10:18\n   |\n10 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659823238
