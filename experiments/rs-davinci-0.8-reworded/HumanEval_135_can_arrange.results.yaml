language: rs
name: HumanEval_135_can_arrange
results:
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut result = -1;\n    for i in (0..arr.len()).rev() {\n\
    \        if arr[i] < arr[i - 1] {\n            result = i as isize;\n        \
    \    break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpkl2gqaf3.rs:13:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmprwz3k157.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let n = arr.len();\n    let mut seq = vec![0; n];\n    let mut\
    \ index = n - 1;\n    while index > 0 {\n        let mut max_index = index;\n\
    \        for i in 0..index {\n            if arr[i] < arr[index] && seq[i] > seq[max_index]\
    \ {\n                max_index = i;\n            }\n        }\n        seq[index]\
    \ = max_index + 1;\n        index -= 1;\n    }\n    seq[0] = -1;\n    let mut\
    \ max_index = 0;\n    for i in 1..n {\n        if seq[i] > seq[max_index] {\n\
    \            max_index = i;\n        }\n    }\n    max_index as isize\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp9ijfellc.rs:24:14\n\
    \   |\n24 |     seq[0] = -1;\n   |              ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    // TODO\n    -1\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmp7s0710rl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut start = 0;\n    let mut end = arr.len() - 1;\n    let\
    \ mut max_index = 0;\n    let mut result = -1;\n    let mut i = end;\n    while\
    \ i > start {\n        let mid = (start + end) / 2;\n        if arr[mid] >= arr[i\
    \ - 1] {\n            end = mid - 1;\n        } else {\n            start = mid\
    \ + 1;\n            max_index = i;\n        }\n        i -= 1;\n    }\n    if\
    \ arr[max_index] < arr[max_index - 1] {\n        result = max_index as isize;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `2`', /tmp/tmp30ppeojd.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    0\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmpj446a8rq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut values = HashMap::new();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        values.insert(v, i);\n    }\n    let mut idx: isize = -1;\n    for\
    \ i in (0..arr.len()).rev() {\n        if let Some(v) = values.get(&(arr[i] -\
    \ 1)) {\n            if *v < i {\n                idx = *v as isize;\n       \
    \         break;\n            }\n        }\n    }\n    idx\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpgb77twwh.rs:11:22\n   |\n11 |     let mut values = HashMap::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    // your code goes here\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpm4yvopsw.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut ans = -1;\n    for i in 0..arr.len() - 1 {\n       \
    \ let i1 = i as isize;\n        let i2 = i1 + 1;\n        if arr[i1 as usize]\
    \ <= arr[i2 as usize] {\n            ans = i1;\n        }\n    }\n    ans\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `-1`', /tmp/tmp1b2dzmd4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    // TODO:\n    // - Reverse the vector (vec.into_iter().rev())\n\
    \    // - Find the index of the first element (using the returned iterator)\n\
    \    // which is not greater than or equal to the element which immediately\n\
    \    // precedes it (or -1 if none exists)\n    arr.into_iter().rev().position(|x|\
    \ x < arr[arr.len() - 1]).unwrap_or(-1) as isize\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmp5qbebf71.rs:16:74\n\
    \   |\n16 |     arr.into_iter().rev().position(|x| x < arr[arr.len() - 1]).unwrap_or(-1)\
    \ as isize\n   |                                                             \
    \             ^^\n   |                                                       \
    \                   |\n   |                                                  \
    \                        cannot apply unary operator `-`\n   |               \
    \                                                           help: you may have\
    \ meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned\
    \ values cannot be negated\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0600`.\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: Implement me\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpksf82tze.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut idx: isize = -1;\n    for i in 1..arr.len() {\n    \
    \    if arr[i - 1] >= arr[i] {\n            idx = i as isize;\n        }\n   \
    \ }\n    idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut result = -1;\n    for i in (0..arr.len()).rev()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n            result\
    \ = i as isize;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp0nte2te0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_k8z47my.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: unimplemented!()\n    // let mut data = arr.to_vec();\n\
    \    let mut data = arr.clone();\n    data.sort();\n    let mut last = data[0];\n\
    \    let mut idx = 0;\n    for (i, item) in data.iter().enumerate() {\n      \
    \  if last == *item {\n            continue;\n        }\n        if last > *item\
    \ {\n            idx = i as isize - 1;\n            break;\n        }\n      \
    \  last = *item;\n    }\n    if idx < 0 {\n        return -1;\n    }\n    idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmp8ig6sxez.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut last = arr[0];\n    let mut largest_index = -1;\n  \
    \  for i in 1..arr.len() {\n        if arr[i] < last {\n            largest_index\
    \ = i as isize;\n        }\n        last = arr[i];\n    }\n    largest_index\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp4i2bmffh.rs:11:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    for i in 0..arr.len() {\n        if i > 0 && arr[i] < arr[i\
    \ - 1] {\n            return i as isize - 1;\n        }\n    }\n    -1\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpx9lf2v45.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    // TODO implement me!\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmps0qnalx2.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    if arr.len() == 0 {\n        return -1;\n    }\n    let mut\
    \ max = arr[0];\n    let mut index = -1;\n    for i in 1..arr.len() {\n      \
    \  if arr[i] > max {\n            max = arr[i];\n            index = i as isize;\n\
    \        }\n    }\n    return index;\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpon_bm3iw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    for i in 1..arr.len() {\n        if arr[i - 1] > arr[i] {\n\
    \            return i as isize - 1;\n        }\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpvi2fkkf5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822421
