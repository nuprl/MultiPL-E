language: rs
name: HumanEval_101_words_string
results:
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ words: Vec<String> = s.split(|c: char| !c.is_alphanumeric()).map(|s| s.to_string()).collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp05r8_r48.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut res = Vec::new();\n    let mut st = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' || c == ',' {\n            if !st.is_empty() {\n    \
    \            res.push(st);\n                st = String::new();\n            }\n\
    \        } else {\n            st.push(c);\n        }\n    }\n    if !st.is_empty()\
    \ {\n        res.push(st);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|x| x.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpkhak708m.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ TODO!\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpr722sxim.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ Convert the string to a vector of chars so we can iterate over them\n    let\
    \ chars = s.chars().collect::<Vec<char>>();\n    let mut words = Vec::new();\n\
    \n    // Our words vector stores character slices, so we need a start and end\n\
    \    // index to slice the chars vector.\n    let mut start = 0;\n    let mut\
    \ end = 0;\n\n    // Iterate over the chars and track the current word. We do\
    \ this by\n    // incrementing the end index until we reach a space or comma and\
    \ then\n    // we can slice the chars vector to get the current word.\n    for\
    \ i in 0..chars.len() {\n        end = i;\n\n        // If the character is a\
    \ space or comma, we can add a word to the words\n        // vector.\n       \
    \ if chars[i] == ' ' || chars[i] == ',' {\n            words.push(chars[start..end].iter().collect::<String>());\n\
    \            start = end + 1;\n        }\n    }\n\n    // Return the words vector\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\"]`,\n right: `[\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]`', /tmp/tmpgjg2uumv.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|x| x.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpzj8ibdgm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ v: Vec<&str> = s.split(|c: char| c == ' ' || c == ',').collect();\n    v.iter().map(|s|\
    \ String::from(*s)).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp7_5f9ij8.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ c = &s[..];\n    c.split_whitespace().map(|x| x.to_string()).collect()\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmpjp6d8m0i.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ v: Vec<&str> = s.split(|c: char| c == ' ' || c == ',').collect();\n    v.iter().map(|s|\
    \ String::from(*s)).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp7_5f9ij8.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
