language: rs
name: HumanEval_101_words_string
results:
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ words: Vec<String> = s.split(|c: char| !c.is_alphanumeric()).map(|s| s.to_string()).collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp05r8_r48.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut res = Vec::new();\n    let mut st = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' || c == ',' {\n            if !st.is_empty() {\n    \
    \            res.push(st);\n                st = String::new();\n            }\n\
    \        } else {\n            st.push(c);\n        }\n    }\n    if !st.is_empty()\
    \ {\n        res.push(st);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|x| x.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpkhak708m.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ TODO!\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpr722sxim.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ Convert the string to a vector of chars so we can iterate over them\n    let\
    \ chars = s.chars().collect::<Vec<char>>();\n    let mut words = Vec::new();\n\
    \n    // Our words vector stores character slices, so we need a start and end\n\
    \    // index to slice the chars vector.\n    let mut start = 0;\n    let mut\
    \ end = 0;\n\n    // Iterate over the chars and track the current word. We do\
    \ this by\n    // incrementing the end index until we reach a space or comma and\
    \ then\n    // we can slice the chars vector to get the current word.\n    for\
    \ i in 0..chars.len() {\n        end = i;\n\n        // If the character is a\
    \ space or comma, we can add a word to the words\n        // vector.\n       \
    \ if chars[i] == ' ' || chars[i] == ',' {\n            words.push(chars[start..end].iter().collect::<String>());\n\
    \            start = end + 1;\n        }\n    }\n\n    // Return the words vector\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\"]`,\n right: `[\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]`', /tmp/tmpgjg2uumv.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|x| x.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpzj8ibdgm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ v: Vec<&str> = s.split(|c: char| c == ' ' || c == ',').collect();\n    v.iter().map(|s|\
    \ String::from(*s)).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp7_5f9ij8.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ c = &s[..];\n    c.split_whitespace().map(|x| x.to_string()).collect()\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmpjp6d8m0i.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ v: Vec<&str> = s.split(|c: char| c == ' ' || c == ',').collect();\n    v.iter().map(|s|\
    \ String::from(*s)).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp7_5f9ij8.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !(c.is_alphanumeric() || c == ' '))\n        .filter(|w| !w.is_empty())\n\
    \        .map(|w| w.to_string())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmp_alylsya.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut result = Vec::new();\n    let mut start_index = 0;\n    let mut end_index\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c == ' ' || c ==\
    \ ',' {\n            end_index = i;\n            result.push(s[start_index..end_index].to_string());\n\
    \            start_index = i + 1;\n        }\n    }\n    result.push(s[start_index..].to_string());\n\
    \    result\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp3hb0zmdy.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut split_string = s.split(|c: char| c == ' ' || c == ',');\n    let mut result\
    \ = Vec::new();\n    while let Some(w) = split_string.next() {\n        result.push(w.to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp8k4i2qgt.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|word| word.to_string()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2n2i45_6.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut word = String::new();\n    for char in\
    \ s.chars() {\n        if char.is_whitespace() || char == ',' {\n            if\
    \ !word.is_empty() {\n                words.push(word);\n                word\
    \ = String::new();\n            }\n        } else {\n            word.push(char);\n\
    \        }\n    }\n    if !word.is_empty() {\n        words.push(word);\n    }\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpi6k1qdrr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ v: Vec<&str> = s.split(|c: char| c == ' ' || c == ',').collect();\n    v.iter().map(|s|\
    \ s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmps4uoso_1.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|word| word.to_string()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp31c_ln31.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut result = Vec::new();\n    let mut words = s.split(|c: char| c == ' ' ||\
    \ c == ',');\n    for w in words {\n        result.push(w.to_string());\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmplezmmv2b.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|c| c.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpkfmuseb7.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ Your code here\n    unimplemented!();\n}\n\nfn main() {\n    let candidate =\
    \ words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppx1q73d3.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n  s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmprjk19pfm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut word = String::new();\n    for ch in s.chars()\
    \ {\n        if ch == ' ' || ch == ',' {\n            if !word.is_empty() {\n\
    \                words.push(word);\n                word = String::new();\n  \
    \          }\n        } else {\n            word.push(ch);\n        }\n    }\n\
    \    if !word.is_empty() {\n        words.push(word);\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|c| c.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpeivhl1px.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ do your work here\n    let ss: Vec<&str> = s.split(\", \").collect();\n    let\
    \ mut res: Vec<String> = Vec::new();\n    for str in ss {\n        res.push(str.to_string());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpuh2no9u_.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpi6k1qdrr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpi6k1qdrr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|x| x.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpzj8ibdgm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpoy3g6a05.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|x| x.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpzj8ibdgm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpoy3g6a05.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut v = Vec::new();\n    let words = s.split(|c: char| !(c.is_alphanumeric()\
    \ || c == ' '));\n    for w in words {\n        if w != \"\" {\n            v.push(w.to_string());\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpk1a57jmw.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    for _ in s.split_whitespace() {\n        words.push(String::from(_));\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: in expressions, `_` can only be used on the left-hand side of an\
    \ assignment\n  --> /tmp/tmp3q0lzxjb.rs:11:33\n   |\n11 |         words.push(String::from(_));\n\
    \   |                                 ^ `_` not allowed here\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !(c.is_alphanumeric() || c == '\\'')).map(String::from).collect()\n}\n\
    \nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpb07sphqv.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n  s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpvsbbrodp.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(String::from).collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpxandz4t2.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpi6k1qdrr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ v: Vec<&str> = s.split(|c: char| c == ' ' || c == ',').collect();\n    v.iter().map(|&s|\
    \ s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpfuhkp8zx.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpoy3g6a05.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpi6k1qdrr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n  s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmprjk19pfm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = Vec::new();\n    let mut chars = s.chars();\n    let\
    \ mut word = String::new();\n    while let Some(c) = chars.next() {\n        if\
    \ c == ' ' || c == ',' {\n            if !word.is_empty() {\n                words.push(word);\n\
    \                word = String::new();\n            }\n        } else {\n    \
    \        word.push(c);\n        }\n    }\n    if !word.is_empty() {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    , \").map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let candidate =\
    \ words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpwr34thvs.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !(c.is_alphanumeric() || c == ' ')).map(|word| word.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpze5blfg3.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|x|\
    \ x == ' ' || x == ',').map(|x| x.to_string()).collect()\n}\n\nfn main() {\n \
    \   let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmps5ty3dwu.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut ret: Vec<String> = Vec::new();\n    let words: Vec<&str> = s.split_whitespace().collect();\n\
    \    for word in words {\n        let mut c = word.chars();\n        while let\
    \ Some(x) = c.next() {\n            if x == ',' {\n                break;\n  \
    \          }\n            ret.push(word.to_string());\n        }\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"Hi,\", \"my\", \"my\", \"name\", \"name\", \"name\", \"name\",\
    \ \"is\", \"is\", \"John\", \"John\", \"John\", \"John\"]`,\n right: `[\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]`', /tmp/tmpw9_0hewx.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ TODO: implement this function\n    unimplemented!();\n}\n\nfn main() {\n   \
    \ let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my\
    \ name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4rq7jz89.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|x| x.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpkhak708m.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let words_iter = s.split(|c: char| c == ' ' || c ==\
    \ ',');\n    for word in words_iter {\n        words.push(word.to_string());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp1a6w1wc5.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ words: Vec<&str> = s.split(|c: char| c == ' ' || c == ',').collect();\n    let\
    \ mut strings: Vec<String> = Vec::new();\n    for w in words {\n        strings.push(String::from(w));\n\
    \    }\n    strings\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpa739prkc.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    for word in s.split(\", \") {\n        words.push(word.to_string());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmp3czb2_b9.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpi6k1qdrr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ words: Vec<&str> = s.split(\", \").collect();\n    words.iter().map(|&s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpg4h92m4c.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n  s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpvsbbrodp.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ words = s.split_ascii_whitespace();\n    words.map(|w| w.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmpjcoihohn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ strings: Vec<String> = s.split_ascii_whitespace().map(|x| x.to_string()).collect();\n\
    \    strings\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmpdwz25igj.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|w| w.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpi6k1qdrr.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    for word in s.split(|c: char| c.is_whitespace()\
    \ || c == ',') {\n        if word.is_empty() {\n            continue;\n      \
    \  }\n        words.push(word.to_string());\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(String::from).collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpxandz4t2.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut res = Vec::new();\n    let mut start = 0;\n    let mut in_word = false;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if c.is_whitespace() || c\
    \ == ',' {\n            if in_word {\n                res.push(s[start..i].to_string());\n\
    \                in_word = false;\n            }\n        } else {\n         \
    \   if !in_word {\n                start = i;\n                in_word = true;\n\
    \            }\n        }\n    }\n    if in_word {\n        res.push(s[start..].to_string());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = Vec::new();\n    for word in s.split_whitespace() {\n\
    \        words.push(word.to_string());\n    }\n    words\n}\n\nfn main() {\n \
    \   let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmpaaz9uq1w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n  unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwyell63j.rs:9:3

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !(c.is_alphanumeric() || c == ' ')).map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpaq8wom1p.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut v: Vec<String> = Vec::new();\n    for s in s.split(|c: char| c.is_whitespace()\
    \ || c == ',') {\n        if !s.is_empty() {\n            v.push(s.to_string());\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ split_string: Vec<&str> = s.split(\", \").collect();\n    let mut solution:\
    \ Vec<String> = Vec::new();\n    for i in split_string {\n        solution.push(i.to_string());\n\
    \    }\n    solution\n}\n\nfn main() {\n    let candidate = words_string;\n  \
    \  assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmp9zg0qcte.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(String::from).collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpd4eo051a.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|word| word.to_string()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2n2i45_6.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut w = Vec::new();\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' || c == ',' {\n            if word.len() > 0 {\n    \
    \            w.push(word);\n                word = String::new();\n          \
    \  }\n        } else {\n            word.push(c);\n        }\n    }\n    if word.len()\
    \ > 0 {\n        w.push(word);\n    }\n    w\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ splitted = s.split(\", \");\n    let mut words = Vec::new();\n    for s in splitted\
    \ {\n        words.push(s.to_string());\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmp28mmr_6d.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n  let\
    \ mut v = Vec::new();\n  let mut buffer = String::new();\n  for x in s.chars()\
    \ {\n    if x == ' ' || x == ',' {\n      if buffer.len() > 0 {\n        v.push(buffer);\n\
    \        buffer = String::new();\n      }\n    } else {\n      buffer.push(x);\n\
    \    }\n  }\n  if buffer.len() > 0 {\n    v.push(buffer);\n  }\n  v\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(String::from).collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpd4eo051a.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|word| word.to_string()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp31c_ln31.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    , \").map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate =\
    \ words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpfold034c.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(String::from).collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpxandz4t2.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ words: Vec<String> = s.split(\", \").map(|word| word.to_string()).collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmp0495ivet.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ unimplemented!()\n    s.split(|c: char| !(c.is_alphanumeric() || c == '\\''))\n\
    \        .map(|x| x.to_string())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpbe5vi9nh.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = Vec::new();\n    let mut word = String::new();\n  \
    \  for c in s.chars() {\n        if c == ' ' || c == ',' {\n            if word.len()\
    \ > 0 {\n                words.push(word);\n                word = String::new();\n\
    \            }\n        } else {\n            word.push(c);\n        }\n    }\n\
    \    if word.len() > 0 {\n        words.push(word);\n    }\n    words\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ my_vec: Vec<&str> = s.split(|c: char| c == ' ' || c == ',').collect();\n   \
    \ let result = my_vec.iter().map(|x| x.to_string()).collect();\n    result\n}\n\
    \nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpqq18oine.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    return\
    \ s.split_whitespace().map(String::from).collect();\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmpeeu25noh.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(String::from).collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpxandz4t2.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut s = s;\n    let mut vec: Vec<String> = Vec::new();\n    loop {\n       \
    \ if s.is_empty() {\n            break;\n        }\n        let idx = s.find(|c:\
    \ char| c == ' ' || c == ',').unwrap_or(s.len());\n        let word = s.get(..idx).unwrap();\n\
    \        vec.push(word.to_string());\n        s = s.get(idx + 1..).unwrap_or(\"\
    \").to_string();\n    }\n    vec\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpauevy2np.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ split_str: Vec<&str> = s.split(|c: char| c == ' ' || c == ',').collect();\n\
    \    split_str.iter().map(|s| s.to_string()).collect()\n}\n\nfn main() {\n   \
    \ let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my\
    \ name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphcmmqsa9.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n  s.split(\"\
    , \").map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let candidate =\
    \ words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpp2ztt62j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !(c.is_alphanumeric() || c == ' ')).map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpaq8wom1p.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|word| word.to_string()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2n2i45_6.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|word| word.to_string()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp31c_ln31.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut v = vec![];\n    let mut s = s;\n    loop {\n        let index = s.find(|c:\
    \ char| c == ' ' || c == ',').unwrap_or(s.len());\n        v.push(s[..index].to_string());\n\
    \        s = s[index + 1..].to_string();\n        if index == s.len() {\n    \
    \        break;\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''byte index 5 is out of bounds of `John`'',
    library/core/src/str/mod.rs:107:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut result = Vec::new();\n    let mut result_str = String::new();\n    for c\
    \ in s.chars() {\n        if c == ' ' || c == ',' {\n            if result_str.len()\
    \ > 0 {\n                result.push(result_str);\n                result_str\
    \ = String::new();\n            }\n        } else {\n            result_str.push(c);\n\
    \        }\n    }\n    if result_str.len() > 0 {\n        result.push(result_str);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|word| word.to_string()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp2n2i45_6.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_hr06s02.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|word| word.to_string()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp31c_ln31.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| !c.is_alphanumeric()).map(String::from).collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpxandz4t2.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976061
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb28jdfh3.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = Vec::new();\n    for word in s.split(|c: char| !c.is_alphanumeric())\
    \ {\n        if word.len() > 0 {\n            words.push(word.to_string());\n\
    \        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ words: Vec<String> = s.split(|c: char| !c.is_alphanumeric()).map(|w| w.to_string()).collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpn7lw23pt.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ split = s.split(|c: char| c == ' ' || c == ',');\n    let mut words = Vec::new();\n\
    \    for item in split {\n        words.push(item.to_string());\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpsp4s3zvv.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976062
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_d1oe9tl.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|s| s.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmphuf4481r.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 0
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut v: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for\
    \ c in s.chars() {\n        if c == ' ' || c == ',' {\n            if word.len()\
    \ > 0 {\n                v.push(word);\n                word = String::new();\n\
    \            }\n        } else {\n            word.push(c);\n        }\n    }\n\
    \    if word.len() > 0 {\n        v.push(word);\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976062
