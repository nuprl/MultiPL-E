name: HumanEval_88_sort_array
language: rs
results:
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    if array.len() == 0 || array.len() == 1 {\n        return array;\n    }\n\
    \    let sum_value = array[0] + array[array.len() - 1];\n    if sum_value % 2\
    \ == 0 {\n        sorted_array.reverse();\n    }\n    sorted_array\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    if result.len() ==\
    \ 0 {\n        return result;\n    }\n    if (result[0] + result[result.len()\
    \ - 1]) % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n \
    \       result.sort_by(|a, b| a.cmp(b));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let size = array.len();\n \
    \   if size > 1 {\n        let (l, r) = array.split_at_mut(size / 2);\n      \
    \  let (mut l, mut r) = (sort_array(l.to_vec()), sort_array(r.to_vec()));\n  \
    \      if size % 2 == 0 {\n            array.clear();\n            while !l.is_empty()\
    \ && !r.is_empty() {\n                if l.last().unwrap() > r.last().unwrap()\
    \ {\n                    array.push(l.pop().unwrap());\n                } else\
    \ {\n                    array.push(r.pop().unwrap());\n                }\n  \
    \          }\n            array.extend(l.into_iter().rev());\n            array.extend(r.into_iter().rev());\n\
    \        } else {\n            let mut nums = vec![];\n            while !l.is_empty()\
    \ && !r.is_empty() {\n                if l.last().unwrap() < r.last().unwrap()\
    \ {\n                    nums.push(l.pop().unwrap());\n                } else\
    \ {\n                    nums.push(r.pop().unwrap());\n                }\n   \
    \         }\n            nums.extend(l.into_iter().rev());\n            nums.extend(r.into_iter().rev());\n\
    \            array.clear();\n            array.extend(nums.into_iter().rev());\n\
    \        }\n    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp7x2dsif7.rs:54:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    if result.len() <\
    \ 2 {\n        return result;\n    }\n    let a = result[0];\n    let b = result[result.len()\
    \ - 1];\n    result.sort_by(|a, b| if (a + b) % 2 == 0 { cmp::Reverse(a).cmp(&cmp::Reverse(b))\
    \ } else { a.cmp(&b) });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpn6tzsifh.rs:22:49\n   |\n22 |     result.sort_by(|a, b| if (a +\
    \ b) % 2 == 0 { cmp::Reverse(a).cmp(&cmp::Reverse(b)) } else { a.cmp(&b) });\n\
    \   |                                                 ^^^ use of undeclared crate\
    \ or module `cmp`\n\nerror[E0433]: failed to resolve: use of undeclared crate\
    \ or module `cmp`\n  --> /tmp/tmpn6tzsifh.rs:22:70\n   |\n22 |     result.sort_by(|a,\
    \ b| if (a + b) % 2 == 0 { cmp::Reverse(a).cmp(&cmp::Reverse(b)) } else { a.cmp(&b)\
    \ });\n   |                                                                  \
    \    ^^^ use of undeclared crate or module `cmp`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return array;\n    }\n \
    \   if array.len() == 1 {\n        return array;\n    }\n    let mut odd_array:\
    \ Vec<isize> = vec![];\n    let mut even_array: Vec<isize> = vec![];\n    for\
    \ i in array {\n        if i % 2 == 0 {\n            even_array.push(i);\n   \
    \     } else {\n            odd_array.push(i);\n        }\n    }\n    odd_array.sort();\n\
    \    even_array.sort();\n    if (odd_array.len() + even_array.len()) % 2 == 0\
    \ {\n        odd_array.append(&mut even_array);\n        return odd_array;\n \
    \   } else {\n        even_array.append(&mut odd_array);\n        return even_array;\n\
    \    }\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5, 0, 2, 4]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmphagp6rw9.rs:46:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let sorted = array.clone();\n    sorted.sort();\n    if\
    \ (array[0] + array[array.len() - 1]) % 2 == 0 {\n        sorted.reverse();\n\
    \    }\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `sorted` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpkaocc5zt.rs:17:5\n   |\n16 |     let sorted = array.clone();\n\
    \   |         ------ help: consider changing this to be mutable: `mut sorted`\n\
    17 |     sorted.sort();\n   |     ^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]:\
    \ cannot borrow `sorted` as mutable, as it is not declared as mutable\n  --> /tmp/tmpkaocc5zt.rs:19:9\n\
    \   |\n16 |     let sorted = array.clone();\n   |         ------ help: consider\
    \ changing this to be mutable: `mut sorted`\n...\n19 |         sorted.reverse();\n\
    \   |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    array.sort_by(|a, b| {\n  \
    \      if a + b % 2 == 0 {\n            a.cmp(b)\n        } else {\n         \
    \   b.cmp(a)\n        }\n    });\n    array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpwh900ts5.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let mut res = array.clone();\n    if (array[0] + array[array.len() - 1]) %\
    \ 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n    } else {\n        res.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut input = array.clone();\n    input.sort();\n   \
    \ let sum = array.first().unwrap() + array.last().unwrap();\n    if sum % 2 ==\
    \ 0 {\n        input.reverse();\n    }\n    input\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmplnhverws.rs:18:29\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    let sum = result[0]\
    \ + result[result.len() - 1];\n    if sum % 2 == 0 {\n        result.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        result.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpbodwbgne.rs:17:15\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ans = array.clone();\n    if ans.len() < 2 {\n\
    \        return ans;\n    }\n    if ans[0] + ans[ans.len() - 1] % 2 == 0 {\n \
    \       ans.sort_by(|a, b| b.cmp(a));\n    } else {\n        ans.sort_by(|a, b|\
    \ a.cmp(b));\n    }\n    ans\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmpzq76kpyz.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let pivot = &array[0];\n    let mut left: Vec<isize> = Vec::new();\n    let\
    \ mut right: Vec<isize> = Vec::new();\n    for i in &array[1..] {\n        if\
    \ i <= pivot {\n            left.push(*i);\n        } else {\n            right.push(*i);\n\
    \        }\n    }\n    let mut result = sort_array(left);\n    result.push(*pivot);\n\
    \    result.append(&mut sort_array(right));\n    if result.len() % 2 == 0 {\n\
    \        result.reverse();\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 0, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpwi5mgj_o.rs:42:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmplyacdqk7.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let mut next_idx = 0;\n   \
    \ let mut i = 0;\n    while i < array.len() {\n        let (p, n) = array.split_at_mut(i);\n\
    \        if i < p.len() && i + 1 < n.len() {\n            next_idx = match (p[i]\
    \ + n[i]) % 2 {\n                0 => i + 1,\n                _ => i,\n      \
    \      };\n        }\n        if i != next_idx {\n            if i + 1 < n.len()\
    \ {\n                let (p, n) = n.split_at_mut(1);\n                p.swap(0,\
    \ i);\n                array.extend_from_slice(n);\n            } else {\n   \
    \             let (p, n) = p.split_at_mut(p.len() - 1);\n                p.swap(i,\
    \ i - 1);\n                array.extend_from_slice(n);\n            }\n      \
    \  }\n        i += 1;\n    }\n    array\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "error[E0499]: cannot borrow `array` as mutable more than once at a time\n\
    \  --> /tmp/tmpewbu42vu.rs:31:17\n   |\n20 |         let (p, n) = array.split_at_mut(i);\n\
    \   |                      --------------------- first mutable borrow occurs here\n\
    ...\n31 |                 array.extend_from_slice(n);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^-^\n\
    \   |                 |                       |\n   |                 |      \
    \                 first borrow later used here\n   |                 second mutable\
    \ borrow occurs here\n\nerror[E0499]: cannot borrow `array` as mutable more than\
    \ once at a time\n  --> /tmp/tmpewbu42vu.rs:35:17\n   |\n20 |         let (p,\
    \ n) = array.split_at_mut(i);\n   |                      ---------------------\
    \ first mutable borrow occurs here\n...\n35 |                 array.extend_from_slice(n);\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^-^\n   |                 |     \
    \                  |\n   |                 |                       first borrow\
    \ later used here\n   |                 second mutable borrow occurs here\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0499`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let (mut left, mut right) = array.split_at(array.len()\
    \ / 2);\n    left.sort();\n    right.sort();\n    let mut result = Vec::new();\n\
    \    if array.len() % 2 == 0 {\n        while left.len() > 0 {\n            result.push(left.pop().unwrap());\n\
    \            result.push(right.pop().unwrap());\n        }\n    } else {\n   \
    \     while right.len() > 0 {\n            result.push(right.pop().unwrap());\n\
    \            result.push(left.pop().unwrap());\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pop` found for reference `&[isize]` in the\
    \ current scope\n  --> /tmp/tmpnp8vxvdf.rs:22:30\n   |\n22 |             result.push(left.pop().unwrap());\n\
    \   |                              ^^^ method not found in `&[isize]`\n\nerror[E0599]:\
    \ no method named `pop` found for reference `&[isize]` in the current scope\n\
    \  --> /tmp/tmpnp8vxvdf.rs:23:31\n   |\n23 |             result.push(right.pop().unwrap());\n\
    \   |                               ^^^ method not found in `&[isize]`\n\nerror[E0599]:\
    \ no method named `pop` found for reference `&[isize]` in the current scope\n\
    \  --> /tmp/tmpnp8vxvdf.rs:27:31\n   |\n27 |             result.push(right.pop().unwrap());\n\
    \   |                               ^^^ method not found in `&[isize]`\n\nerror[E0599]:\
    \ no method named `pop` found for reference `&[isize]` in the current scope\n\
    \  --> /tmp/tmpnp8vxvdf.rs:28:30\n   |\n28 |             result.push(left.pop().unwrap());\n\
    \   |                              ^^^ method not found in `&[isize]`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = array.clone();\n    if ret.len() <= 1 {\n\
    \        return ret;\n    }\n    ret.sort_by(|a, b| {\n        if (ret.len() -\
    \ 1) % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        }\n    });\n    ret\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `ret` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmpzvp26gdo.rs:20:17\n   |\n20 |       ret.sort_by(|a,\
    \ b| {\n   |       -   ------- ^^^^^^ immutable borrow occurs here\n   |     \
    \  |   |\n   |  _____|   mutable borrow later used by call\n   | |\n21 | |   \
    \      if (ret.len() - 1) % 2 == 0 {\n   | |             --- second borrow occurs\
    \ due to use of `ret` in closure\n22 | |             b.cmp(a)\n23 | |        \
    \ } else {\n24 | |             a.cmp(b)\n25 | |         }\n26 | |     });\n  \
    \ | |______- mutable borrow occurs here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let compare = (array[0] + array[array.len() - 1]) % 2 == 0;\n    let mut array\
    \ = array;\n    array.sort_by(|a, b| if compare {\n        b.cmp(a)\n    } else\
    \ {\n        a.cmp(b)\n    });\n    array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    if array.len() == 1 {\n        return array;\n    }\n    let mut sorted_array\
    \ = array.clone();\n    if (sorted_array[0] + sorted_array[sorted_array.len()\
    \ - 1]) % 2 == 0 {\n        sorted_array.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        sorted_array.sort_by(|a, b| a.cmp(b));\n    }\n    sorted_array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if let Some(n) = array.last()\
    \ {\n        if n % 2 == 0 {\n            array.sort_by(|a, b| b.cmp(a));\n  \
    \      } else {\n            array.sort_by(|a, b| a.cmp(b));\n        }\n    }\n\
    \    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[87, 42, 32, 15, 11, 0]`,\n right: `[0, 11, 15, 32, 42, 87]`', /tmp/tmplsez7e6e.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() == 0 {\n   \
    \     return vec![];\n    }\n    if array.len() == 1 {\n        return array;\n\
    \    }\n    let front = array[0];\n    let back = array[array.len() - 1];\n  \
    \  if (front + back) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n   \
    \ } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
