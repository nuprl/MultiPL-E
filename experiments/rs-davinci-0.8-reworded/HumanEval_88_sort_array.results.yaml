language: rs
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    if array.len() == 0 || array.len() == 1 {\n        return array;\n    }\n\
    \    let sum_value = array[0] + array[array.len() - 1];\n    if sum_value % 2\
    \ == 0 {\n        sorted_array.reverse();\n    }\n    sorted_array\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    if result.len() ==\
    \ 0 {\n        return result;\n    }\n    if (result[0] + result[result.len()\
    \ - 1]) % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n \
    \       result.sort_by(|a, b| a.cmp(b));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let size = array.len();\n \
    \   if size > 1 {\n        let (l, r) = array.split_at_mut(size / 2);\n      \
    \  let (mut l, mut r) = (sort_array(l.to_vec()), sort_array(r.to_vec()));\n  \
    \      if size % 2 == 0 {\n            array.clear();\n            while !l.is_empty()\
    \ && !r.is_empty() {\n                if l.last().unwrap() > r.last().unwrap()\
    \ {\n                    array.push(l.pop().unwrap());\n                } else\
    \ {\n                    array.push(r.pop().unwrap());\n                }\n  \
    \          }\n            array.extend(l.into_iter().rev());\n            array.extend(r.into_iter().rev());\n\
    \        } else {\n            let mut nums = vec![];\n            while !l.is_empty()\
    \ && !r.is_empty() {\n                if l.last().unwrap() < r.last().unwrap()\
    \ {\n                    nums.push(l.pop().unwrap());\n                } else\
    \ {\n                    nums.push(r.pop().unwrap());\n                }\n   \
    \         }\n            nums.extend(l.into_iter().rev());\n            nums.extend(r.into_iter().rev());\n\
    \            array.clear();\n            array.extend(nums.into_iter().rev());\n\
    \        }\n    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp7x2dsif7.rs:54:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    if result.len() <\
    \ 2 {\n        return result;\n    }\n    let a = result[0];\n    let b = result[result.len()\
    \ - 1];\n    result.sort_by(|a, b| if (a + b) % 2 == 0 { cmp::Reverse(a).cmp(&cmp::Reverse(b))\
    \ } else { a.cmp(&b) });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpn6tzsifh.rs:22:49\n   |\n22 |     result.sort_by(|a, b| if (a +\
    \ b) % 2 == 0 { cmp::Reverse(a).cmp(&cmp::Reverse(b)) } else { a.cmp(&b) });\n\
    \   |                                                 ^^^ use of undeclared crate\
    \ or module `cmp`\n\nerror[E0433]: failed to resolve: use of undeclared crate\
    \ or module `cmp`\n  --> /tmp/tmpn6tzsifh.rs:22:70\n   |\n22 |     result.sort_by(|a,\
    \ b| if (a + b) % 2 == 0 { cmp::Reverse(a).cmp(&cmp::Reverse(b)) } else { a.cmp(&b)\
    \ });\n   |                                                                  \
    \    ^^^ use of undeclared crate or module `cmp`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return array;\n    }\n \
    \   if array.len() == 1 {\n        return array;\n    }\n    let mut odd_array:\
    \ Vec<isize> = vec![];\n    let mut even_array: Vec<isize> = vec![];\n    for\
    \ i in array {\n        if i % 2 == 0 {\n            even_array.push(i);\n   \
    \     } else {\n            odd_array.push(i);\n        }\n    }\n    odd_array.sort();\n\
    \    even_array.sort();\n    if (odd_array.len() + even_array.len()) % 2 == 0\
    \ {\n        odd_array.append(&mut even_array);\n        return odd_array;\n \
    \   } else {\n        even_array.append(&mut odd_array);\n        return even_array;\n\
    \    }\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5, 0, 2, 4]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmphagp6rw9.rs:46:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let sorted = array.clone();\n    sorted.sort();\n    if\
    \ (array[0] + array[array.len() - 1]) % 2 == 0 {\n        sorted.reverse();\n\
    \    }\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `sorted` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpkaocc5zt.rs:17:5\n   |\n16 |     let sorted = array.clone();\n\
    \   |         ------ help: consider changing this to be mutable: `mut sorted`\n\
    17 |     sorted.sort();\n   |     ^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]:\
    \ cannot borrow `sorted` as mutable, as it is not declared as mutable\n  --> /tmp/tmpkaocc5zt.rs:19:9\n\
    \   |\n16 |     let sorted = array.clone();\n   |         ------ help: consider\
    \ changing this to be mutable: `mut sorted`\n...\n19 |         sorted.reverse();\n\
    \   |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    array.sort_by(|a, b| {\n  \
    \      if a + b % 2 == 0 {\n            a.cmp(b)\n        } else {\n         \
    \   b.cmp(a)\n        }\n    });\n    array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpwh900ts5.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let mut res = array.clone();\n    if (array[0] + array[array.len() - 1]) %\
    \ 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n    } else {\n        res.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut input = array.clone();\n    input.sort();\n   \
    \ let sum = array.first().unwrap() + array.last().unwrap();\n    if sum % 2 ==\
    \ 0 {\n        input.reverse();\n    }\n    input\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmplnhverws.rs:18:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    let sum = result[0]\
    \ + result[result.len() - 1];\n    if sum % 2 == 0 {\n        result.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        result.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpbodwbgne.rs:17:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ans = array.clone();\n    if ans.len() < 2 {\n\
    \        return ans;\n    }\n    if ans[0] + ans[ans.len() - 1] % 2 == 0 {\n \
    \       ans.sort_by(|a, b| b.cmp(a));\n    } else {\n        ans.sort_by(|a, b|\
    \ a.cmp(b));\n    }\n    ans\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmpzq76kpyz.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let pivot = &array[0];\n    let mut left: Vec<isize> = Vec::new();\n    let\
    \ mut right: Vec<isize> = Vec::new();\n    for i in &array[1..] {\n        if\
    \ i <= pivot {\n            left.push(*i);\n        } else {\n            right.push(*i);\n\
    \        }\n    }\n    let mut result = sort_array(left);\n    result.push(*pivot);\n\
    \    result.append(&mut sort_array(right));\n    if result.len() % 2 == 0 {\n\
    \        result.reverse();\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 0, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpwi5mgj_o.rs:42:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmplyacdqk7.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let mut next_idx = 0;\n   \
    \ let mut i = 0;\n    while i < array.len() {\n        let (p, n) = array.split_at_mut(i);\n\
    \        if i < p.len() && i + 1 < n.len() {\n            next_idx = match (p[i]\
    \ + n[i]) % 2 {\n                0 => i + 1,\n                _ => i,\n      \
    \      };\n        }\n        if i != next_idx {\n            if i + 1 < n.len()\
    \ {\n                let (p, n) = n.split_at_mut(1);\n                p.swap(0,\
    \ i);\n                array.extend_from_slice(n);\n            } else {\n   \
    \             let (p, n) = p.split_at_mut(p.len() - 1);\n                p.swap(i,\
    \ i - 1);\n                array.extend_from_slice(n);\n            }\n      \
    \  }\n        i += 1;\n    }\n    array\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0499]: cannot borrow `array` as mutable more than once at a time\n\
    \  --> /tmp/tmpewbu42vu.rs:31:17\n   |\n20 |         let (p, n) = array.split_at_mut(i);\n\
    \   |                      --------------------- first mutable borrow occurs here\n\
    ...\n31 |                 array.extend_from_slice(n);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^-^\n\
    \   |                 |                       |\n   |                 |      \
    \                 first borrow later used here\n   |                 second mutable\
    \ borrow occurs here\n\nerror[E0499]: cannot borrow `array` as mutable more than\
    \ once at a time\n  --> /tmp/tmpewbu42vu.rs:35:17\n   |\n20 |         let (p,\
    \ n) = array.split_at_mut(i);\n   |                      ---------------------\
    \ first mutable borrow occurs here\n...\n35 |                 array.extend_from_slice(n);\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^-^\n   |                 |     \
    \                  |\n   |                 |                       first borrow\
    \ later used here\n   |                 second mutable borrow occurs here\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0499`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let (mut left, mut right) = array.split_at(array.len()\
    \ / 2);\n    left.sort();\n    right.sort();\n    let mut result = Vec::new();\n\
    \    if array.len() % 2 == 0 {\n        while left.len() > 0 {\n            result.push(left.pop().unwrap());\n\
    \            result.push(right.pop().unwrap());\n        }\n    } else {\n   \
    \     while right.len() > 0 {\n            result.push(right.pop().unwrap());\n\
    \            result.push(left.pop().unwrap());\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pop` found for reference `&[isize]` in the\
    \ current scope\n  --> /tmp/tmpnp8vxvdf.rs:22:30\n   |\n22 |             result.push(left.pop().unwrap());\n\
    \   |                              ^^^ method not found in `&[isize]`\n\nerror[E0599]:\
    \ no method named `pop` found for reference `&[isize]` in the current scope\n\
    \  --> /tmp/tmpnp8vxvdf.rs:23:31\n   |\n23 |             result.push(right.pop().unwrap());\n\
    \   |                               ^^^ method not found in `&[isize]`\n\nerror[E0599]:\
    \ no method named `pop` found for reference `&[isize]` in the current scope\n\
    \  --> /tmp/tmpnp8vxvdf.rs:27:31\n   |\n27 |             result.push(right.pop().unwrap());\n\
    \   |                               ^^^ method not found in `&[isize]`\n\nerror[E0599]:\
    \ no method named `pop` found for reference `&[isize]` in the current scope\n\
    \  --> /tmp/tmpnp8vxvdf.rs:28:30\n   |\n28 |             result.push(left.pop().unwrap());\n\
    \   |                              ^^^ method not found in `&[isize]`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = array.clone();\n    if ret.len() <= 1 {\n\
    \        return ret;\n    }\n    ret.sort_by(|a, b| {\n        if (ret.len() -\
    \ 1) % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        }\n    });\n    ret\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `ret` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmpzvp26gdo.rs:20:17\n   |\n20 |       ret.sort_by(|a,\
    \ b| {\n   |       -   ------- ^^^^^^ immutable borrow occurs here\n   |     \
    \  |   |\n   |  _____|   mutable borrow later used by call\n   | |\n21 | |   \
    \      if (ret.len() - 1) % 2 == 0 {\n   | |             --- second borrow occurs\
    \ due to use of `ret` in closure\n22 | |             b.cmp(a)\n23 | |        \
    \ } else {\n24 | |             a.cmp(b)\n25 | |         }\n26 | |     });\n  \
    \ | |______- mutable borrow occurs here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let compare = (array[0] + array[array.len() - 1]) % 2 == 0;\n    let mut array\
    \ = array;\n    array.sort_by(|a, b| if compare {\n        b.cmp(a)\n    } else\
    \ {\n        a.cmp(b)\n    });\n    array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    if array.len() == 1 {\n        return array;\n    }\n    let mut sorted_array\
    \ = array.clone();\n    if (sorted_array[0] + sorted_array[sorted_array.len()\
    \ - 1]) % 2 == 0 {\n        sorted_array.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        sorted_array.sort_by(|a, b| a.cmp(b));\n    }\n    sorted_array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if let Some(n) = array.last()\
    \ {\n        if n % 2 == 0 {\n            array.sort_by(|a, b| b.cmp(a));\n  \
    \      } else {\n            array.sort_by(|a, b| a.cmp(b));\n        }\n    }\n\
    \    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[87, 42, 32, 15, 11, 0]`,\n right: `[0, 11, 15, 32, 42, 87]`', /tmp/tmplsez7e6e.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() == 0 {\n   \
    \     return vec![];\n    }\n    if array.len() == 1 {\n        return array;\n\
    \    }\n    let front = array[0];\n    let back = array[array.len() - 1];\n  \
    \  if (front + back) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n   \
    \ } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut cors = array.clone();\n    if cors.len() == 0 {\n\
    \        return vec![];\n    }\n    let mut front_pos = 0;\n    let mut end_pos\
    \ = cors.len() - 1;\n    let mut cors_copy = array.clone();\n    cors_copy.sort();\n\
    \    let direction = (cors[0] + cors[cors.len() - 1]) % 2;\n    let mut i = 0;\n\
    \    while i < cors.len() {\n        if direction == 0 {\n            cors[end_pos]\
    \ = cors_copy[i];\n            end_pos -= 1;\n        } else {\n            cors[front_pos]\
    \ = cors_copy[i];\n            front_pos += 1;\n        }\n        i += 1;\n \
    \   }\n    cors\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpb7x_n0c3.rs:29:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = array.clone();\n    let total = array.len();\n\
    \    if total > 0 {\n        sorted.sort();\n        if total % 2 == 0 {\n   \
    \         sorted.reverse();\n        }\n    }\n    sorted\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpklnn7laq.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    match array.len() {\n        0 => vec![],\n        1 =>\
    \ vec![array[0]],\n        _ => {\n            let index_sum = array[0] + array[array.len()\
    \ - 1];\n            let mut sorted = array.clone();\n            sorted.sort();\n\
    \            if index_sum % 2 == 0 {\n                sorted.reverse();\n    \
    \        }\n            sorted\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let first = array.first().cloned().unwrap_or(0);\n\
    \    let last = array.last().cloned().unwrap_or(0);\n    let sum = first + last;\n\
    \    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        array.sort();\n    }\n    array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = array.clone();\n    if v.len() < 2 {\n    \
    \    return v;\n    }\n    if (v[0] + v[v.len() - 1]) % 2 == 0 {\n        v.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        v.sort_by(|a, b| a.cmp(b));\n    }\n  \
    \  v\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec = array.clone();\n    let len = vec.len();\n\
    \    if len == 0 {\n        return vec;\n    }\n    if len == 1 {\n        return\
    \ vec;\n    }\n    if vec[0] % 2 == 0 && vec[len - 1] % 2 == 0 {\n        vec.sort_by(|a,\
    \ b| b.cmp(a));\n    } else if vec[0] % 2 == 1 && vec[len - 1] % 2 == 1 {\n  \
    \      vec.sort_by(|a, b| a.cmp(b));\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpwyded1pb.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    let length = result.len();\n\
    \    let sum = result[0] + result[length - 1];\n    result.sort_by(|a, b| {\n\
    \        if sum % 2 == 0 {\n            b.cmp(a)\n        } else {\n         \
    \   a.cmp(b)\n        }\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpjijs7tg5.rs:18:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let mut sorted_array = array.clone();\n    sorted_array.sort();\n    let is_odd\
    \ = (array[0] + array[array.len() - 1]) % 2 == 1;\n    if is_odd {\n        sorted_array\n\
    \    } else {\n        sorted_array.reverse();\n        sorted_array\n    }\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() > 1 {\n    \
    \    array.sort_by(|a, b| {\n            let a_sum = a + array[array.len() - a\
    \ as usize - 1];\n            let b_sum = b + array[array.len() - b as usize -\
    \ 1];\n            if a_sum % 2 == 0 && b_sum % 2 == 0 {\n                b.cmp(a)\n\
    \            } else if a_sum % 2 == 0 && b_sum % 2 != 0 {\n                Ordering::Greater\n\
    \            } else if a_sum % 2 != 0 && b_sum % 2 == 0 {\n                Ordering::Less\n\
    \            } else {\n                a.cmp(b)\n            }\n        });\n\
    \    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpyz1rf3x_.rs:24:17\n   |\n24 |                 Ordering::Greater\n  \
    \ |                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpyz1rf3x_.rs:26:17\n\
    \   |\n26 |                 Ordering::Less\n   |                 ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0606]: casting `&isize` as `usize` is\
    \ invalid\n  --> /tmp/tmpyz1rf3x_.rs:19:49\n   |\n19 |             let a_sum =\
    \ a + array[array.len() - a as usize - 1];\n   |                             \
    \                    -^^^^^^^^^\n   |                                        \
    \         |\n   |                                                 cannot cast\
    \ `&isize` as `usize`\n   |                                                 help:\
    \ dereference the expression: `*a`\n\nerror[E0606]: casting `&isize` as `usize`\
    \ is invalid\n  --> /tmp/tmpyz1rf3x_.rs:20:49\n   |\n20 |             let b_sum\
    \ = b + array[array.len() - b as usize - 1];\n   |                           \
    \                      -^^^^^^^^^\n   |                                      \
    \           |\n   |                                                 cannot cast\
    \ `&isize` as `usize`\n   |                                                 help:\
    \ dereference the expression: `*b`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0433, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut new_array = array.clone();\n    if new_array.len()\
    \ >= 2 {\n        let is_even = (new_array[0] + new_array[new_array.len() - 1])\
    \ % 2 == 0;\n        new_array.sort_by(|a, b| {\n            if is_even {\n  \
    \              a.cmp(b)\n            } else {\n                b.cmp(a)\n    \
    \        }\n        });\n    }\n    new_array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpcphk7h99.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return array;\n    }\n \
    \   let first = array[0];\n    let last = array[array.len() - 1];\n    if (first\
    \ + last) % 2 == 0 {\n        let mut array = array;\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n        return array;\n    } else {\n        let mut array =\
    \ array;\n        array.sort_by(|a, b| a.cmp(b));\n        return array;\n   \
    \ }\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = array.clone();\n    if res.len() > 1 {\n\
    \        res.sort_by(|a, b| match array[0] + array[array.len() - 1] {\n      \
    \      sum if sum % 2 == 0 => b.cmp(a),\n            _ => a.cmp(b),\n        });\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let len = array.len();\n    if len < 2 {\n        return\
    \ array;\n    }\n    let mut result = array.clone();\n    let swap = (len * (len\
    \ - 1) / 2) % 2 == 0;\n    let mut i = 0;\n    let mut j = len - 1;\n    while\
    \ i < j {\n        if result[i] > result[j] {\n            result.swap(i, j);\n\
    \        }\n        if swap {\n            i += 1;\n        } else {\n       \
    \     j -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 3, 1, 2, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpl8s2xupq.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let len = array.len();\n  \
    \  if len < 2 {\n        return array;\n    }\n    if len == 2 {\n        if array[0]\
    \ > array[1] {\n            return vec![array[1], array[0]];\n        }\n    \
    \    return array;\n    }\n    let mut index = 1;\n    let mut sorted = false;\n\
    \    while !sorted {\n        sorted = true;\n        let mut tmp = array[index];\n\
    \        for i in (1..index).rev() {\n            if array[i] > tmp {\n      \
    \          array[i + 1] = array[i];\n                sorted = false;\n       \
    \     } else {\n                array[i + 1] = tmp;\n                break;\n\
    \            }\n        }\n        if tmp < array[0] {\n            array[0] =\
    \ tmp;\n        }\n        index += 1;\n        if index == len {\n          \
    \  break;\n        }\n    }\n    if (array[0] + array[len - 1]) % 2 == 0 {\n \
    \       return array.iter().rev().map(|x| *x).collect();\n    }\n    return array;\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpxrzcoohj.rs:59:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut array = array;\n    array.sort_by(|a, b| {\n        let a = *a as usize;\n\
    \        let b = *b as usize;\n        let odd = (a + b) % 2 == 1;\n        if\
    \ odd {\n            a.cmp(&b)\n        } else {\n            b.cmp(&a)\n    \
    \    }\n    });\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 0, 5, 3, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpg0g0sv0o.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut odd = vec![];\n    let mut even = vec![];\n   \
    \ let mut result = vec![];\n    let l = array.len();\n    if l == 0 {\n      \
    \  return vec![];\n    }\n    for x in array {\n        if x % 2 == 0 {\n    \
    \        even.push(x);\n        } else {\n            odd.push(x);\n        }\n\
    \    }\n    even.sort();\n    odd.sort();\n    if l % 2 == 0 {\n        for x\
    \ in odd.iter().rev() {\n            result.push(*x);\n        }\n        for\
    \ x in even.iter().rev() {\n            result.push(*x);\n        }\n    } else\
    \ {\n        for x in odd.iter() {\n            result.push(*x);\n        }\n\
    \        for x in even.iter() {\n            result.push(*x);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1, 4, 2, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp2y4ap73a.rs:54:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let first = array[0];\n    let last = array[array.len() - 1];\n    let sum\
    \ = first + last;\n    if sum % 2 == 0 {\n        return sort_desc(array);\n \
    \   } else {\n        return sort_asc(array);\n    }\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_desc` in this scope\n  --> /tmp/tmpuz5bvuib.rs:23:16\n\
    \   |\n23 |         return sort_desc(array);\n   |                ^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `sort_asc` in this\
    \ scope\n  --> /tmp/tmpuz5bvuib.rs:25:16\n   |\n25 |         return sort_asc(array);\n\
    \   |                ^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return array;\n    }\n \
    \   let is_ascend = (array[0] + array[array.len() - 1]) % 2 == 1;\n    if is_ascend\
    \ {\n        array.clone().sort()\n    } else {\n        array.clone().sort().reverse()\n\
    \    }\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxkpdy74j.rs:21:9\n   |\n\
    15 | fn sort_array(array: Vec<isize>) -> Vec<isize> {\n   |                  \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |         array.clone().sort()\n   |         ^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \         found unit type `()`\n\nerror[E0599]: no method named `reverse` found\
    \ for unit type `()` in the current scope\n  --> /tmp/tmpxkpdy74j.rs:23:30\n \
    \  |\n23 |         array.clone().sort().reverse()\n   |                      \
    \        ^^^^^^^ method not found in `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let mut array = array;\n    array.sort_by(|a, b| a.cmp(b));\n    if (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n        array.reverse();\n    }\n    array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = array.clone();\n    sorted.sort();\n \
    \   if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        sorted.reverse();\n\
    \    }\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpq2cf5gh_.rs:18:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let sum: isize = array[0] + array[array.len() - 1];\n    if sum % 2 == 0\
    \ {\n        return array.iter().rev().collect();\n    }\n    return array;\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpc6f_r1s5.rs:21:35\n     |\n\
    21   |         return array.iter().rev().collect();\n     |                  \
    \                 ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // Since this is a challenge, we'd like to approach the\
    \ problem as if it were a real-world\n    // problem, with multiple functions.\n\
    \    // The first function is responsible for taking the sum of the first and\
    \ last elements in the\n    // array, and checking to see if it's even or odd.\n\
    \    fn even_or_odd(input: &[isize]) -> bool {\n        // If the array is empty,\
    \ then we need to return false, because false is the value that\n        // tells\
    \ the main function to sort the array in ascending order.\n        // if the array\
    \ contains only one element, then we also return false, since there's no\n   \
    \     // second element to add to the first one.\n        if input.is_empty()\
    \ || input.len() == 1 {\n            return false;\n        }\n        // We need\
    \ to find the sum of the first and last elements.\n        // This is done using\
    \ a destructuring pattern that sets the first element to be equal to\n       \
    \ // the first element in the input, and sets the last element to be equal to\
    \ the last\n        // element in the input.\n        let (first, last) = (input[0],\
    \ input[input.len() - 1]);\n        // Then we add them together, and check to\
    \ see if the result is even or odd.\n        // We do this by checking if the\
    \ result, divided by two, has a remainder of zero or not.\n        // If the remainder\
    \ is zero, then the result is even, which means that we return false.\n      \
    \  // If the remainder is not zero, then the result is odd, which means that we\
    \ return true.\n        (first + last) % 2 == 0\n    }\n    // The second function\
    \ is responsible for actually sorting the array.\n    // This function is a bit\
    \ more complicated, so let's look at it in more detail.\n    fn sort_arr(arr:\
    \ &mut [isize]) {\n        // Here, we need to check the length of the array.\n\
    \        // We don't want to sort an empty array, and we don't want to sort an\
    \ array that only\n        // contains one element.\n        // In both cases,\
    \ we don't need to do anything with the array, so we can just return early.\n\
    \        if arr.is_empty() || arr.len() ==\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0sqw2sjn.rs:58:3\n\
    \   |\n15 | fn sort_array(array: Vec<isize>) -> Vec<isize> {\n   |           \
    \                                     - unclosed delimiter\n...\n41 |     fn sort_arr(arr:\
    \ &mut [isize]) {\n   |                                    - this delimiter might\
    \ not be properly closed...\n...\n47 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n58 | }\n   |   ^\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmp0sqw2sjn.rs:47:1\n   |\n47 | }\n   | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0sqw2sjn.rs:15:37\n   |\n15 |\
    \ fn sort_array(array: Vec<isize>) -> Vec<isize> {\n   |    ----------       \
    \                ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    //TODO: try to find a better solution\n    if array.len()\
    \ <= 1 {\n        return array;\n    }\n\n    let mut odd_index_vector = Vec::new();\n\
    \    let mut even_index_vector = Vec::new();\n\n    let mut odd_index_length:\
    \ usize = 0;\n    let mut even_index_length: usize = 0;\n\n    let mut index =\
    \ 0;\n    while index < array.len() {\n        if index % 2 == 0 {\n         \
    \   odd_index_vector.push(array[index]);\n            odd_index_length += 1;\n\
    \        } else {\n            even_index_vector.push(array[index]);\n       \
    \     even_index_length += 1;\n        }\n        index += 1;\n    }\n\n    let\
    \ mut odd_index_vector = odd_index_vector;\n    let mut even_index_vector = even_index_vector;\n\
    \n    if odd_index_length > 1 {\n        odd_index_vector.sort();\n    }\n\n \
    \   if even_index_length > 1 {\n        even_index_vector.sort();\n        even_index_vector.reverse();\n\
    \    }\n\n    let mut result = Vec::new();\n    for (index, value) in odd_index_vector.iter().enumerate()\
    \ {\n        result.push(*value);\n        if index < even_index_vector.len()\
    \ {\n            result.push(even_index_vector[index]);\n        }\n    }\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5, 2, 4, 3, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp1agtb_r6.rs:66:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let sum = array[0] + array[array.len() - 1];\n    if sum % 2 == 0 {\n   \
    \     return array.iter().cloned().rev().collect();\n    }\n    array\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpkvd7xbbq.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let sum: isize = array.iter().sum();\n\
    \    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        array.sort_by(|a, b| a.cmp(b));\n    }\n    array\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmp5d4ccblw.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut array = array;\n    if array[0] + array[array.len() - 1] % 2 == 0\
    \ {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmpm2aizv0x.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() == 0 {\n   \
    \     return array;\n    }\n    let (first, last) = (array[0], array[array.len()\
    \ - 1]);\n    let is_odd = (first + last) % 2 == 1;\n    array.sort_by(|a, b|\
    \ if is_odd { a.cmp(b) } else { b.cmp(a) });\n    array\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let array = if array.len() < 2 {\n        return array;\n\
    \    } else {\n        array\n    };\n    let idx = array.len() - 1;\n    let\
    \ sum: isize = array[0] + array[idx];\n    if sum % 2 == 0 {\n        let mut\
    \ v = array.clone();\n        v.sort_by(|a, b| b.cmp(a));\n        v\n    } else\
    \ {\n        let mut v = array.clone();\n        v.sort_by(|a, b| a.cmp(b));\n\
    \        v\n    }\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut copy = array.clone();\n    let len = copy.len();\n\
    \    if len < 2 {\n        return copy;\n    }\n    copy.sort();\n    let mid\
    \ = len / 2;\n    let mut left = Vec::with_capacity(mid);\n    let mut right =\
    \ Vec::with_capacity(len - mid);\n    left.extend_from_slice(&copy[..mid]);\n\
    \    right.extend_from_slice(&copy[mid..]);\n    // println!(\"{:?}, {:?}\", left,\
    \ right);\n    if (left[0] + right[len - mid - 1]) % 2 == 0 {\n        let mut\
    \ result = Vec::with_capacity(len);\n        result.extend_from_slice(&right);\n\
    \        result.extend_from_slice(&left);\n        result\n    } else {\n    \
    \    copy\n    }\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 5, 6, 0, 1, 2]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmpya4lbhyi.rs:43:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // return array.clone();\n    // return vec![];\n    if\
    \ array.len() == 0 {\n        return vec![];\n    }\n    let mut num_vec = vec![];\n\
    \    if array.len() == 1 {\n        num_vec.push(array[0]);\n        return num_vec;\n\
    \    }\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        let mut\
    \ array_clone = array.clone();\n        array_clone.sort();\n        num_vec =\
    \ array_clone.clone();\n        num_vec.reverse();\n        return num_vec;\n\
    \    } else {\n        let mut array_clone = array.clone();\n        array_clone.sort();\n\
    \        num_vec = array_clone.clone();\n        return num_vec;\n    }\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let (mut low, mut high) = (Vec::new(), Vec::new());\n \
    \   for (i, v) in array.iter().enumerate() {\n        if (i + v) % 2 == 0 {\n\
    \            high.push(*v);\n        } else {\n            low.push(*v);\n   \
    \     }\n    }\n    low.sort();\n    high.sort();\n    let mut result = Vec::new();\n\
    \    let (mut l, mut h) = (low.iter(), high.iter().rev());\n    loop {\n     \
    \   match (l.next(), h.next()) {\n            (Some(x), Some(y)) => {\n      \
    \          result.push(*x);\n                result.push(*y);\n            }\n\
    \            (Some(x), None) => result.push(*x),\n            (None, Some(y))\
    \ => result.push(*y),\n            (None, None) => break,\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxtvxxp5_.rs:18:17\n   |\n\
    18 |         if (i + v) % 2 == 0 {\n   |                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add `&isize` to `usize`\n  --> /tmp/tmpxtvxxp5_.rs:18:15\n\
    \   |\n18 |         if (i + v) % 2 == 0 {\n   |               ^ no implementation\
    \ for `usize + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let is_odd = array.first().unwrap() + array.last().unwrap()\
    \ % 2 == 1;\n    let mut new_array = array.clone();\n    new_array.sort_by(|a,\
    \ b| {\n        if is_odd {\n            a.cmp(b)\n        } else {\n        \
    \    b.cmp(a)\n        }\n    });\n    new_array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp3yp38zre.rs:16:32

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut output = array.clone();\n    let is_even = output.len()\
    \ % 2 == 0;\n    if is_even {\n        output.sort_by(|a, b| b.cmp(a));\n    }\
    \ else {\n        output.sort_by(|a, b| a.cmp(b));\n    }\n    output\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpl7bhgq44.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec = array.clone();\n    let n = vec.len();\n\
    \    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        while\
    \ i < j && (vec[i] % 2 == 1) {\n            i += 1;\n        }\n        while\
    \ i < j && (vec[j] % 2 == 0) {\n            j -= 1;\n        }\n        vec.swap(i,\
    \ j);\n    }\n    if (vec[0] + vec[n - 1]) % 2 == 0 {\n        vec.reverse();\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpmb_igaiy.rs:19:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let (mut left, mut right) = array.split_at(array.len()\
    \ / 2);\n    if left.len() < 2 {\n        return array;\n    }\n    let mut sorted_vec\
    \ = merge_arrays(sort_array(left.to_vec()), sort_array(right.to_vec()));\n   \
    \ let first_idx = sorted_vec[0];\n    let last_idx = sorted_vec[sorted_vec.len()\
    \ - 1];\n    if (first_idx + last_idx) % 2 == 0 {\n        sorted_vec.reverse();\n\
    \    }\n    sorted_vec\n}\n\nfn main() {\n    let candidate = sort_array;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `merge_arrays` in this scope\n  -->\
    \ /tmp/tmpmrz97zi5.rs:20:26\n   |\n20 |     let mut sorted_vec = merge_arrays(sort_array(left.to_vec()),\
    \ sort_array(right.to_vec()));\n   |                          ^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let len = array.len();\n    let mut array = array;\n  \
    \  let mut i = 0;\n    let mut j = len - 1;\n    while i < j {\n        while\
    \ array[i] % 2 == 1 {\n            i += 1;\n        }\n        while array[j]\
    \ % 2 == 0 {\n            j -= 1;\n        }\n        if i < j {\n           \
    \ array.swap(i, j);\n        }\n    }\n    if i > 0 {\n        array[..i].sort();\n\
    \    }\n    if j < len - 1 {\n        array[j + 1..].sort();\n    }\n    if len\
    \ > 1 && array[0] % 2 == 0 && array[len - 1] % 2 == 0 {\n        array.reverse();\n\
    \    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpcgnjsoiw.rs:19:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut new_array = array.clone();\n    if array.len()\
    \ < 2 {\n        return new_array;\n    }\n\n    let sort_type = if (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n        SortType::Ascending\n    } else\
    \ {\n        SortType::Descending\n    };\n\n    let mut odd_pivot = 0;\n    let\
    \ mut even_pivot = 0;\n    for i in 1..new_array.len() {\n        if new_array[i]\
    \ % 2 == 0 {\n            let target = new_array[i];\n            let mut j =\
    \ i;\n            while j > even_pivot {\n                new_array[j] = new_array[j\
    \ - 1];\n                j -= 1;\n            }\n            new_array[even_pivot]\
    \ = target;\n            even_pivot += 1;\n        } else {\n            odd_pivot\
    \ += 1;\n        }\n    }\n\n    sort_array_helper(&mut new_array[0..even_pivot],\
    \ SortType::Ascending);\n    sort_array_helper(&mut new_array[even_pivot..new_array.len()],\
    \ sort_type);\n\n    new_array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `SortType`\n  -->\
    \ /tmp/tmpgwsx0sfb.rs:22:9\n   |\n22 |         SortType::Ascending\n   |     \
    \    ^^^^^^^^ use of undeclared type `SortType`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `SortType`\n  --> /tmp/tmpgwsx0sfb.rs:24:9\n   |\n24\
    \ |         SortType::Descending\n   |         ^^^^^^^^ use of undeclared type\
    \ `SortType`\n\nerror[E0433]: failed to resolve: use of undeclared type `SortType`\n\
    \  --> /tmp/tmpgwsx0sfb.rs:44:54\n   |\n44 |     sort_array_helper(&mut new_array[0..even_pivot],\
    \ SortType::Ascending);\n   |                                                \
    \      ^^^^^^^^ use of undeclared type `SortType`\n\nerror[E0425]: cannot find\
    \ function `sort_array_helper` in this scope\n  --> /tmp/tmpgwsx0sfb.rs:44:5\n\
    \   |\n44 |     sort_array_helper(&mut new_array[0..even_pivot], SortType::Ascending);\n\
    \   |     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `sort_array_helper` in this scope\n  --> /tmp/tmpgwsx0sfb.rs:45:5\n\
    \   |\n45 |     sort_array_helper(&mut new_array[even_pivot..new_array.len()],\
    \ sort_type);\n   |     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let target = array.iter().fold(0, |acc, &x| acc + x);\n\
    \    let mut result = array.clone();\n    result.sort_by(|a, b| {\n        if\
    \ (target + array[0] + array[array.len() - 1]) % 2 == 0 {\n            b.cmp(a)\n\
    \        } else {\n            a.cmp(b)\n        }\n    });\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpwv7nalfg.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = array.clone();\n    if res.len() > 0 {\n\
    \        let index_sum = res[0] + res[res.len() - 1];\n        if index_sum %\
    \ 2 == 0 {\n            res.sort_by(|a, b| b.cmp(a));\n        } else {\n    \
    \        res.sort_by(|a, b| a.cmp(b));\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let len = array.len();\n    if len == 0 {\n        return\
    \ vec![];\n    }\n    if len == 1 {\n        return array;\n    }\n    if (array[0]\
    \ + array[len - 1]) % 2 == 0 {\n        return array\n            .into_iter()\n\
    \            .rev()\n            .enumerate()\n            .map(|(idx, val)| {\n\
    \                if idx % 2 == 0 {\n                    array[len - idx - 1]\n\
    \                } else {\n                    val\n                }\n      \
    \      })\n            .collect();\n    } else {\n        return array\n     \
    \       .into_iter()\n            .enumerate()\n            .map(|(idx, val)|\
    \ {\n                if idx % 2 == 0 {\n                    array[len - idx -\
    \ 1]\n                } else {\n                    val\n                }\n \
    \           })\n            .collect();\n    }\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `array`\n   --> /tmp/tmp0dizquus.rs:28:18\n\
    \    |\n15  | fn sort_array(array: Vec<isize>) -> Vec<isize> {\n    |        \
    \       ----- move occurs because `array` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n25  |             .into_iter()\n    |     \
    \         ----------- `array` moved due to this method call\n...\n28  |      \
    \       .map(|(idx, val)| {\n    |                  ^^^^^^^^^^^^ value borrowed\
    \ here after move\n29  |                 if idx % 2 == 0 {\n30  |            \
    \         array[len - idx - 1]\n    |                     ----- borrow occurs\
    \ due to use in closure\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `array`\n\nerror[E0382]: borrow of moved value: `array`\n\
    \  --> /tmp/tmp0dizquus.rs:40:18\n   |\n15 | fn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n   |               ----- move occurs because `array` has type\
    \ `Vec<isize>`, which does not implement the `Copy` trait\n...\n38 |         \
    \    .into_iter()\n   |              ----------- `array` moved due to this method\
    \ call\n39 |             .enumerate()\n40 |             .map(|(idx, val)| {\n\
    \   |                  ^^^^^^^^^^^^ value borrowed here after move\n41 |     \
    \            if idx % 2 == 0 {\n42 |                     array[len - idx - 1]\n\
    \   |                     ----- borrow occurs due to use in closure\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut sorted_array = array.clone();\n    sorted_array.sort();\n    if (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n        sorted_array.reverse();\n    }\n\
    \    sorted_array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let (mut lower, mut higher) = (vec![], vec![]);\n    let mid = array[0];\n\
    \    for value in array.iter().skip(1) {\n        if *value < mid {\n        \
    \    lower.push(*value);\n        } else {\n            higher.push(*value);\n\
    \        }\n    }\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n   \
    \     return [\n            sort_array(higher),\n            vec![mid],\n    \
    \        sort_array(lower),\n        ].concat();\n    } else {\n        return\
    \ [\n            sort_array(lower),\n            vec![mid],\n            sort_array(higher),\n\
    \        ].concat();\n    }\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 6, 4, 3, 2, 0, 1]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmpj2pef04u.rs:48:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vector = array.clone();\n    if vector.len() ==\
    \ 0 {\n        return vec![];\n    }\n    if vector.len() == 1 {\n        return\
    \ vector;\n    }\n    let sum = vector[0] + vector[vector.len() - 1];\n    if\
    \ sum % 2 == 0 {\n        vector.sort_by(|a, b| b.cmp(a));\n    } else {\n   \
    \     vector.sort_by(|a, b| a.cmp(b));\n    }\n    vector\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vector = array.clone();\n    vector.sort();\n \
    \   if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        vector.reverse();\n\
    \    }\n    vector\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp6lxxdfrm.rs:18:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let head = array.get(0).unwrap_or(&0);\n\
    \    let tail = array.last().unwrap_or(&0);\n    if (head + tail) % 2 == 0 {\n\
    \        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort();\n\
    \    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = array.clone();\n    for i in 0..res.len()\
    \ {\n        for j in 0..(res.len() - 1) {\n            if j % 2 == 0 {\n    \
    \            if res[j] > res[j + 1] {\n                    let temp = res[j];\n\
    \                    res[j] = res[j + 1];\n                    res[j + 1] = temp;\n\
    \                }\n            } else {\n                if res[j] < res[j +\
    \ 1] {\n                    let temp = res[j];\n                    res[j] = res[j\
    \ + 1];\n                    res[j + 1] = temp;\n                }\n         \
    \   }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 0, 3, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpxik9jr90.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // Your code here\n    if array.len() == 0 {\n        return\
    \ array;\n    }\n    let mut array = array;\n    let first = array[0];\n    let\
    \ last = array[array.len() - 1];\n    if (first + last) % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    let (first, last) = (array[0], array[array.len() - 1]);\n    if (first +\
    \ last) % 2 == 0 {\n        sorted_array.reverse();\n    }\n    sorted_array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpcbg9tzto.rs:18:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut first = 0;\n    let mut last = array.len() - 1;\n\
    \    let mut flag = false;\n    let mut mid = (first + last) / 2;\n    let mut\
    \ vec: Vec<isize> = Vec::new();\n    for i in 0..array.len() {\n        vec.push(array[i]);\n\
    \    }\n    while first < last {\n        flag = true;\n        for i in first..mid\
    \ {\n            if array[i] > array[i + 1] {\n                flag = false;\n\
    \                vec.swap(i, i + 1);\n            }\n        }\n        if flag\
    \ {\n            break;\n        }\n        last = mid;\n        mid = (first\
    \ + last) / 2;\n        flag = true;\n        for i in (mid + 1..last + 1).rev()\
    \ {\n            if array[i] > array[i - 1] {\n                flag = false;\n\
    \                vec.swap(i, i - 1);\n            }\n        }\n        if flag\
    \ {\n            break;\n        }\n        first = mid + 1;\n        mid = (first\
    \ + last) / 2;\n    }\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpobukslru.rs:17:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let is_odd = |idx: usize| (idx + array.len()) % 2 == 1;\n\
    \    let mut array = array;\n    array.sort_by(|&a, &b| {\n        if is_odd(0)\
    \ {\n            a.cmp(&b)\n        } else {\n            b.cmp(&a)\n        }\n\
    \    });\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0505]: cannot move out of `array` because it is borrowed\n  -->\
    \ /tmp/tmpprdnlhsy.rs:17:21\n   |\n16 |     let is_odd = |idx: usize| (idx + array.len())\
    \ % 2 == 1;\n   |                  ------------        ----- borrow occurs due\
    \ to use in closure\n   |                  |\n   |                  borrow of\
    \ `array` occurs here\n17 |     let mut array = array;\n   |                 \
    \    ^^^^^ move out of `array` occurs here\n18 |     array.sort_by(|&a, &b| {\n\
    19 |         if is_odd(0) {\n   |            ------ borrow later captured here\
    \ by closure\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0505`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    fn sort_array(array: &mut Vec<isize>, l: usize, r: usize)\
    \ {\n        if l >= r {\n            return;\n        }\n        let m = (l +\
    \ r) / 2;\n        sort_array(array, l, m);\n        sort_array(array, m + 1,\
    \ r);\n        let mut tmp = vec![0; r - l + 1];\n        let mut t = 0;\n   \
    \     let (mut i, mut j) = (l, m + 1);\n        loop {\n            if (i + j)\
    \ % 2 == 0 {\n                if i > m || (j <= r && array[i] < array[j]) {\n\
    \                    tmp[t] = array[j];\n                    j += 1;\n       \
    \         } else {\n                    tmp[t] = array[i];\n                 \
    \   i += 1;\n                }\n            } else {\n                if i > m\
    \ || (j <= r && array[i] > array[j]) {\n                    tmp[t] = array[j];\n\
    \                    j += 1;\n                } else {\n                    tmp[t]\
    \ = array[i];\n                    i += 1;\n                }\n            }\n\
    \            t += 1;\n            if i > m && j > r {\n                break;\n\
    \            }\n        }\n        for i in 0..tmp.len() {\n            array[l\
    \ + i] = tmp[i];\n        }\n    }\n    let mut a = array;\n    sort_array(&mut\
    \ a, 0, a.len() - 1);\n    a\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `a` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmps4554hir.rs:54:27\n   |\n54 |     sort_array(&mut\
    \ a, 0, a.len() - 1);\n   |     ---------- ------     ^^^^^^^ immutable borrow\
    \ occurs here\n   |     |          |\n   |     |          mutable borrow occurs\
    \ here\n   |     mutable borrow later used by call\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() > 1 {\n    \
    \    let s: usize = array.len() - 1;\n        if s % 2 == 0 {\n            let\
    \ q = &mut array[s];\n            let p = &mut array[0];\n            mem::swap(p,\
    \ q);\n        }\n        array.sort();\n    }\n    array\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `mem`\n\
    \  --> /tmp/tmp5_e5dxsr.rs:22:13\n   |\n22 |             mem::swap(p, q);\n  \
    \ |             ^^^ use of undeclared crate or module `mem`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut array = array;\n    let (mut left, mut right) = (0, array.len() - 1);\n\
    \    if array[left] + array[right] % 2 == 0 {\n        while left < right {\n\
    \            if array[left] % 2 == 0 {\n                left += 1;\n         \
    \   } else if array[right] % 2 == 1 {\n                right -= 1;\n         \
    \   } else {\n                array.swap(left, right);\n                left +=\
    \ 1;\n                right -= 1;\n            }\n        }\n        if left ==\
    \ right && array[left] % 2 == 1 {\n            let max = *array.iter().max().unwrap();\n\
    \            for i in 0..array.len() {\n                if array[i] == max {\n\
    \                    array.swap(i, left);\n                    break;\n      \
    \          }\n            }\n        }\n    }\n    array\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpxnieq7ei.rs:50:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    match (array.len(), array.first(), array.last()) {\n  \
    \      (0, _, _) => vec![],\n        (1, _, _) => array,\n        (_, Some(x),\
    \ Some(y)) => {\n            let (a, b) = (*x, *y);\n            let (mut sorted,\
    \ sorted_is_asc) = if (a + b) % 2 == 0 {\n                (array.clone(), false)\n\
    \            } else {\n                (array.clone(), true)\n            };\n\
    \            sorted.sort();\n            if sorted_is_asc {\n                sorted\n\
    \            } else {\n                sorted.into_iter().rev().collect()\n  \
    \          }\n        }\n        _ => vec![],\n    }\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = array.clone();\n    sorted.sort();\n \
    \   if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        sorted.reverse();\n\
    \    }\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpq2cf5gh_.rs:18:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // sort_by_key is unstable, so we use a very silly sort\
    \ function.\n    if array.len() > 1 {\n        let sum = array[0] + array[array.len()\
    \ - 1];\n        if sum % 2 == 0 {\n            // sort the array in descending\
    \ order.\n            let mut array = array;\n            array.sort_by(|a, b|\
    \ b.cmp(a));\n            return array;\n        }\n    }\n    // sort the array\
    \ in ascending order.\n    array.sort();\n    array\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `array` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmplzk37kla.rs:27:5\n   |\n15 | fn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n   |               ----- help: consider changing this to be\
    \ mutable: `mut array`\n...\n27 |     array.sort();\n   |     ^^^^^^^^^^^^ cannot\
    \ borrow as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut array = array;\n    let sum = array[0] + array[array.len() - 1];\n\
    \    if sum % 2 == 0 {\n        array.sort_by(|x, y| y.cmp(x));\n    } else {\n\
    \        array.sort_by(|x, y| x.cmp(y));\n    }\n    array\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let (first, last) = array.split_first_mut().unwrap();\n\
    \    if (first + last) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n \
    \   } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&mut [isize]` to `&mut isize`\n  --> /tmp/tmpcha_mzc3.rs:18:15\n\
    \   |\n18 |     if (first + last) % 2 == 0 {\n   |         ----- ^ ---- &mut [isize]\n\
    \   |         |\n   |         &mut isize\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    array.sort_by(|a, b| if (a\
    \ + b) % 2 == 0 { b.cmp(a) } else { a.cmp(b) });\n    array\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 0, 5, 3, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpcr9v9yki.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmplyacdqk7.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    //let mut result = vec![];\n    //let mut result = array.clone();\n\
    \    let mut result = array;\n    if array.len() < 1 {\n        return result;\n\
    \    }\n    if array.len() < 2 {\n        return array;\n    }\n    let mut index_v\
    \ = vec![];\n    for i in 0..array.len() {\n        let value = array[i];\n  \
    \      index_v.push((value, i));\n    }\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        index_v.sort_by(|a, b| b.0.cmp(&a.0));\n    } else\
    \ {\n        index_v.sort_by(|a, b| a.0.cmp(&b.0));\n    }\n    for i in 0..array.len()\
    \ {\n        let (_, idx) = index_v[i];\n        result[idx] = array[i];\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `array`\n  --> /tmp/tmpf3etcs4l.rs:19:8\n\
    \   |\n15 | fn sort_array(array: Vec<isize>) -> Vec<isize> {\n   |           \
    \    ----- move occurs because `array` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n18 |     let mut result = array;\n   |              \
    \        ----- value moved here\n19 |     if array.len() < 1 {\n   |        ^^^^^^^^^^^\
    \ value borrowed here after move\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // This is the original naive solution:\n    // let mut\
    \ new_vec = array.clone();\n    // new_vec.sort();\n    // if array.first().unwrap()\
    \ + array.last().unwrap() % 2 == 0 {\n    //     new_vec.reverse();\n    // }\n\
    \    // new_vec\n\n    // This is the optimized solution:\n    let sum = array.first().unwrap()\
    \ + array.last().unwrap();\n    if sum % 2 == 0 {\n        array.clone().into_iter().sorted().rev().collect()\n\
    \    } else {\n        array.clone().into_iter().sorted().collect()\n    }\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmpm_6fkeej.rs:27:35\n   |\n27 |         array.clone().into_iter().sorted().rev().collect()\n\
    \   |                                   ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror[E0599]: no method named `sorted` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmpm_6fkeej.rs:29:35\n   |\n29 |         array.clone().into_iter().sorted().collect()\n\
    \   |                                   ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut result = array.clone();\n    let mut left = 0;\n    let mut right =\
    \ result.len() - 1;\n    if (result[left] + result[right]) % 2 == 0 {\n      \
    \  result.sort_by(|a, b| b.cmp(a));\n    } else {\n        result.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let even = array.len() % 2 == 0;\n    let mut result =\
    \ array.clone();\n    if even {\n        result.sort_by(|a, b| b.cmp(a));\n  \
    \  } else {\n        result.sort_by(|a, b| a.cmp(b));\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpbmxty5eq.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = array.clone();\n    let len = v.len();\n  \
    \  let left = 0;\n    let right = len - 1;\n    // if left + right is odd, sort\
    \ v in descending order, else sort v in ascending order\n    if (left + right)\
    \ % 2 == 1 {\n        v.sort_by(|a, b| b.cmp(a));\n    } else {\n        v.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    v\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpni9vo6vm.rs:19:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = array.clone();\n    sorted.sort();\n \
    \   if is_odd(array.first().unwrap() + array.last().unwrap()) {\n        sorted\n\
    \    } else {\n        sorted.reverse();\n        sorted\n    }\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmp4fg9rlz8.rs:18:8\n\
    \   |\n18 |     if is_odd(array.first().unwrap() + array.last().unwrap()) {\n\
    \   |        ^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let sz = array.len();\n   \
    \ if sz > 1 {\n        let mut ix = if sz % 2 == 0 { sz - 1 } else { 0 };\n  \
    \      for _ in 0..(sz / 2) {\n            let mut ix2 = if ix == 0 { sz - 1 }\
    \ else { 0 };\n            for i in 0..sz {\n                if i == ix {\n  \
    \                  continue;\n                }\n                if array[i] >\
    \ array[ix] {\n                    array.swap(i, ix2);\n                    ix2\
    \ = if ix2 == 0 { sz - 1 } else { 0 };\n                }\n            }\n   \
    \         ix = if ix == 0 { sz - 1 } else { 0 };\n        }\n    }\n    array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 0, 1, 4]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpljnrplw7.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut tmp = array.clone();\n    let is_odd = tmp.len()\
    \ % 2 != 0;\n    match is_odd {\n        true => tmp.sort(),\n        false =>\
    \ tmp.sort_by(|a, b| b.cmp(a)),\n    }\n    tmp\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp6xeicrdv.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut mut_array = array.clone();\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        mut_array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        mut_array.sort_by(|a, b| a.cmp(b));\n    }\n    mut_array\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let array_len = array.len();\n    if array_len <= 1 {\n\
    \        return array;\n    }\n    let is_odd = array_len % 2 == 1;\n    let mut\
    \ result = array.clone();\n    if is_odd {\n        result.sort();\n    } else\
    \ {\n        result.sort_by(|a, b| b.cmp(a));\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpki6z6hri.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n    let mut array = array;\n \
    \   array.sort_by(|a, b| match (a + b) % 2 {\n        0 => b.cmp(a),\n       \
    \ _ => a.cmp(b),\n    });\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 0, 5, 3, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp0tw57_vr.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    if result.len() >\
    \ 1 {\n        result.sort_by(|a, b| (a + b) % 2);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiheofwjm.rs:18:31\n   |\n\
    18 |         result.sort_by(|a, b| (a + b) % 2);\n   |                       \
    \        ^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() < 2 {\n    \
    \    return array;\n    }\n    let (head, tail) = array.split_at_mut(array.len()\
    \ / 2);\n    let (left, right) = unsafe { (head.get_unchecked_mut(0), tail.get_unchecked_mut(0))\
    \ };\n    if left.overflowing_add(*right).1 {\n        array.sort();\n    } else\
    \ {\n        array.sort_by(|a, b| b.cmp(a));\n    }\n    array\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `array` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmpl59_w77n.rs:20:43\n   |\n20 |     let (head, tail)\
    \ = array.split_at_mut(array.len() / 2);\n   |                        -------------------^^^^^^^^^^^-----\n\
    \   |                        |     |            |\n   |                      \
    \  |     |            immutable borrow occurs here\n   |                     \
    \   |     mutable borrow later used by call\n   |                        mutable\
    \ borrow occurs here\n   |\nhelp: try adding a local storing this argument...\n\
    \  --> /tmp/tmpl59_w77n.rs:20:43\n   |\n20 |     let (head, tail) = array.split_at_mut(array.len()\
    \ / 2);\n   |                                           ^^^^^^^^^^^\nhelp: ...and\
    \ then using that local as the argument to this call\n  --> /tmp/tmpl59_w77n.rs:20:24\n\
    \   |\n20 |     let (head, tail) = array.split_at_mut(array.len() / 2);\n   |\
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0502`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let odd_even_sum = array.get(0).map(|i|\
    \ i + array.last().unwrap()).unwrap_or(0);\n    if odd_even_sum & 1 == 0 {\n \
    \       array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort();\n\
    \    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let mut i = 0;\n    let mut\
    \ j = array.len() - 1;\n    while i < j {\n        if array[i] % 2 == 0 && array[j]\
    \ % 2 == 1 {\n            array.swap(i, j);\n            i += 1;\n           \
    \ j -= 1;\n        } else if array[i] % 2 == 1 {\n            i += 1;\n      \
    \  } else if array[j] % 2 == 0 {\n            j -= 1;\n        } else {\n    \
    \        i += 1;\n            j -= 1;\n        }\n    }\n    if array.len() %\
    \ 2 == 1 {\n        let mut i = 0;\n        let mut j = array.len() - 1;\n   \
    \     while i < j {\n            if array[i] < array[j] {\n                array.swap(i,\
    \ j);\n            }\n            i += 1;\n            j -= 1;\n        }\n  \
    \  } else {\n        let mut i = 0;\n        let mut j = array.len() - 1;\n  \
    \      while i < j {\n            if array[i] > array[j] {\n                array.swap(i,\
    \ j);\n            }\n            i += 1;\n            j -= 1;\n        }\n  \
    \  }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpeowkxzk_.rs:18:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = array.clone();\n    if v.len() == 0 {\n   \
    \     return v;\n    }\n\n    v.sort_by(|a, b| {\n        if a + b % 2 == 0 {\n\
    \            b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n   \
    \ });\n\n    v\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 0, 1, 3, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmptjgo50zx.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = array.clone();\n    sorted.sort();\n \
    \   let (first, last) = (array[0], array[array.len() - 1]);\n    let sum = first\
    \ + last;\n    let cmp = |x: &isize, y: &isize| {\n        if sum % 2 == 0 {\n\
    \            return y.cmp(x);\n        }\n        x.cmp(y)\n    };\n    sorted.sort_by(cmp);\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpxx3zrjfr.rs:18:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() < 2 {\n    \
    \    return array;\n    }\n    let (mut left, mut right) = array.split_at_mut(array.len()\
    \ >> 1);\n    let (mut a, mut b) = (sort_array(left.to_vec()), sort_array(right.to_vec()));\n\
    \    let (mut i, mut j) = (0, 0);\n    while i < a.len() && j < b.len() {\n  \
    \      if (a[i] + b[j]) % 2 == 1 {\n            if a[i] < b[j] {\n           \
    \     left[i + j] = a[i];\n                i += 1;\n            } else {\n   \
    \             left[i + j] = b[j];\n                j += 1;\n            }\n  \
    \      } else {\n            if a[i] > b[j] {\n                left[i + j] = a[i];\n\
    \                i += 1;\n            } else {\n                left[i + j] =\
    \ b[j];\n                j += 1;\n            }\n        }\n    }\n    if i <\
    \ a.len() {\n        left[i + j..].copy_from_slice(&a[i..]);\n    }\n    if j\
    \ < b.len() {\n        left[i + j..].copy_from_slice(&b[j..]);\n    }\n    array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpgamur_a9.rs:20:10\n\
    \   |\n20 |     let (mut left, mut right) = array.split_at_mut(array.len() >>\
    \ 1);\n   |          ----^^^^\n   |          |\n   |          help: remove this\
    \ `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable\
    \ does not need to be mutable\n  --> /tmp/tmpgamur_a9.rs:20:20\n   |\n20 |   \
    \  let (mut left, mut right) = array.split_at_mut(array.len() >> 1);\n   |   \
    \                 ----^^^^^\n   |                    |\n   |                 \
    \   help: remove this `mut`\n\nwarning: variable does not need to be mutable\n\
    \  --> /tmp/tmpgamur_a9.rs:21:10\n   |\n21 |     let (mut a, mut b) = (sort_array(left.to_vec()),\
    \ sort_array(right.to_vec()));\n   |          ----^\n   |          |\n   |   \
    \       help: remove this `mut`\n\nwarning: variable does not need to be mutable\n\
    \  --> /tmp/tmpgamur_a9.rs:21:17\n   |\n21 |     let (mut a, mut b) = (sort_array(left.to_vec()),\
    \ sort_array(right.to_vec()));\n   |                 ----^\n   |             \
    \    |\n   |                 help: remove this `mut`\n\nerror[E0502]: cannot borrow\
    \ `array` as immutable because it is also borrowed as mutable\n  --> /tmp/tmpgamur_a9.rs:20:52\n\
    \   |\n20 |     let (mut left, mut right) = array.split_at_mut(array.len() >>\
    \ 1);\n   |                                 -------------------^^^^^^^^^^^------\n\
    \   |                                 |     |            |\n   |             \
    \                    |     |            immutable borrow occurs here\n   |   \
    \                              |     mutable borrow later used by call\n   | \
    \                                mutable borrow occurs here\n   |\nhelp: try adding\
    \ a local storing this argument...\n  --> /tmp/tmpgamur_a9.rs:20:52\n   |\n20\
    \ |     let (mut left, mut right) = array.split_at_mut(array.len() >> 1);\n  \
    \ |                                                    ^^^^^^^^^^^\nhelp: ...and\
    \ then using that local as the argument to this call\n  --> /tmp/tmpgamur_a9.rs:20:33\n\
    \   |\n20 |     let (mut left, mut right) = array.split_at_mut(array.len() >>\
    \ 1);\n   |         "
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut array = array;\n    let index = array.len() - 1;\n    if array[0] %\
    \ 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    if array[index] % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpj28l3d0h.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  // This is not a stable sort, but it was the fastest I could find\n    // (since\
    \ I didn't want to write my own merge sort).\n    let sorted = {\n        let\
    \ mut sorted = array.clone();\n        sorted.sort();\n        sorted\n    };\n\
    \    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        let mut result\
    \ = Vec::with_capacity(array.len());\n        for &n in sorted.iter().rev() {\n\
    \            result.push(n);\n        }\n        result\n    } else {\n      \
    \  sorted\n    }\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut new_array = array.clone();\n    if new_array[0] + new_array[new_array.len()\
    \ - 1] % 2 == 0 {\n        new_array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        new_array.sort_by(|a, b| a.cmp(b));\n    }\n    new_array\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmpo56c1im2.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = array.clone();\n    vec.sort();\n\
    \    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        vec.reverse();\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpm09a0tlw.rs:18:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    if result.len() <\
    \ 2 {\n        return result;\n    }\n    if (result[0] + result[result.len()\
    \ - 1]) % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n \
    \       result.sort_by(|a, b| a.cmp(b));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let length = array.len();\n    if length == 0 {\n     \
    \   return array;\n    }\n    let mut result = array.clone();\n    let sum = result[0]\
    \ + result[length - 1];\n    result.sort_by(|a, b| if sum % 2 == 0 { b.cmp(a)\
    \ } else { a.cmp(b) });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // check if the given vector is empty\n    if array.is_empty()\
    \ {\n        // return the empty vector\n        return array;\n    }\n    //\
    \ get the sum of first and last index values\n    let mut sum = array[0] + array[array.len()\
    \ - 1];\n    // convert to a vector\n    let array = array.into_iter().collect::<Vec<isize>>();\n\
    \    // create a new vector\n    let mut new_array = Vec::new();\n    // loop\
    \ the given vector\n    for index in array {\n        // check if the sum is odd\n\
    \        if sum % 2 != 0 {\n            // add item to the vector\n          \
    \  new_array.push(index);\n        } else {\n            // add item to the vector\n\
    \            new_array.insert(0, index);\n        }\n    }\n    // return the\
    \ new vector\n    new_array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpp3ye7umr.rs:46:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  if array[0] + array[array.len() - 1] % 2 == 0 {\n        return array.into_iter().rev().collect();\n\
    \    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpkc_s4iam.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmplyacdqk7.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return array;\n    }\n \
    \   let mut array = array;\n    let sum = array[0] + array[array.len() - 1];\n\
    \    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        array.sort_by(|a, b| a.cmp(b));\n    }\n    array\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let (mut l, mut r) = (0, array.len()\
    \ - 1);\n    while l < r {\n        if (array[l] + array[r]) % 2 == 0 {\n    \
    \        array.swap(l, r);\n        }\n        l += 1;\n        r -= 1;\n    }\n\
    \    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpkfzxovjq.rs:17:30

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let mut left = 0;\n    let\
    \ mut right = array.len() - 1;\n    while left < right {\n        if (array[left]\
    \ + array[right]) % 2 == 0 {\n            array.swap(left, right);\n        }\n\
    \        left += 1;\n        right -= 1;\n    }\n    array\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpjyrim3kp.rs:18:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut tmp = array.clone();\n    let len = tmp.len();\n    let (mut start,\
    \ mut end) = (0, len - 1);\n    while start < end {\n        while start < end\
    \ && (tmp[start] + tmp[len - 1 - start]) % 2 == 0 {\n            start += 1;\n\
    \        }\n        while start < end && (tmp[end] + tmp[len - 1 - end]) % 2 ==\
    \ 1 {\n            end -= 1;\n        }\n        if start < end {\n          \
    \  tmp.swap(start, end);\n        }\n    }\n    tmp.sort_by(|a, b| a.cmp(b).reverse());\n\
    \    tmp\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpmvct9mqk.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    if result.len() >\
    \ 1 {\n        let (first, last) = (result[0], result[result.len() - 1]);\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort_by(|a, b| b.cmp(a));\n\
    \        } else {\n            result.sort_by(|a, b| a.cmp(b));\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  if array[0] + array[array.len() - 1] % 2 == 0 {\n        array.into_iter().rev().collect()\n\
    \    } else {\n        array\n    }\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpiwxhf298.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n    let mut array = array;\n \
    \   if array.len() < 2 {\n        return array;\n    }\n    let sort_order = match\
    \ array[0].cmp(&array[array.len() - 1]) {\n        Ordering::Less => true,\n \
    \       Ordering::Greater => false,\n        Ordering::Equal => false,\n    };\n\
    \    array.sort_by(|a, b| {\n        if sort_order {\n            a.cmp(b)\n \
    \       } else {\n            b.cmp(a)\n        }\n    });\n    array\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmp6tx1mg8g.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut sorted_array = array.clone();\n    sorted_array.sort();\n    if (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n        sorted_array.reverse();\n    }\n\
    \    sorted_array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let mut first = 0;\n    let\
    \ mut last = array.len() - 1;\n    while first <= last {\n        if (first +\
    \ last) % 2 == 0 {\n            // even\n            if array[first] > array[last]\
    \ {\n                array.swap(first, last);\n            }\n        } else {\n\
    \            // odd\n            if array[first] < array[last] {\n           \
    \     array.swap(first, last);\n            }\n        }\n        first += 1;\n\
    \        last -= 1;\n    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpdmyl522k.rs:18:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = array.clone();\n    sorted.sort();\n \
    \   if array.len() > 1 && (array[0] + array[array.len() - 1]) % 2 == 0 {\n   \
    \     sorted.reverse();\n    }\n    sorted\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let (first, second) = array.split_at(1);\n    let mut new_array = sort_array(second.to_vec());\n\
    \    new_array.push(first[0]);\n    if new_array.len() % 2 == 0 {\n        new_array.sort();\n\
    \    } else {\n        new_array.sort_by(|a, b| b.cmp(a));\n    }\n    new_array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 14, 21, 23]`,\n right: `[23, 21, 14, 11]`', /tmp/tmpbm5x7imx.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return array;\n    }\n \
    \   let array_len = array.len();\n    let first_value = array[0];\n    let last_value\
    \ = array[array_len - 1];\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    if (first_value + last_value) % 2 == 0 {\n        sorted_array.reverse();\n\
    \    }\n    sorted_array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut odds = Vec::new();\n    let mut evens = Vec::new();\n    for i in array\
    \ {\n        if i % 2 == 0 {\n            evens.push(i);\n        } else {\n \
    \           odds.push(i);\n        }\n    }\n    odds.sort();\n    evens.sort();\n\
    \    if array[0] % 2 == 0 {\n        let mut res = Vec::new();\n        for i\
    \ in odds {\n            res.push(i);\n        }\n        for i in evens {\n \
    \           res.push(i);\n        }\n        res\n    } else {\n        let mut\
    \ res = Vec::new();\n        for i in evens.iter().rev() {\n            res.push(*i);\n\
    \        }\n        for i in odds.iter().rev() {\n            res.push(*i);\n\
    \        }\n        res\n    }\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `array`\n   --> /tmp/tmprpcyw44c.rs:30:8\n\
    \    |\n15  | fn sort_array(array: Vec<isize>) -> Vec<isize> {\n    |        \
    \       ----- move occurs because `array` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n21  |     for i in array {\n    |         \
    \     ----- `array` moved due to this implicit call to `.into_iter()`\n...\n30\
    \  |     if array[0] % 2 == 0 {\n    |        ^^^^^ value borrowed here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `array`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n21  |     for i in &array {\n  \
    \  |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // Return the original vector if it is empty\n    if array.is_empty()\
    \ {\n        return array;\n    }\n    // Create a new vector from the original\
    \ one\n    let mut result = array.clone();\n    // Return the new vector if its\
    \ length is only 1\n    if result.len() == 1 {\n        return result;\n    }\n\
    \    // Calculate the sum of the indices of the first and last elements\n    let\
    \ sum = result[0] + result[result.len() - 1];\n    // Sort the elements of the\
    \ new vector according to whether their sum is odd or even\n    if sum % 2 ==\
    \ 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n        result.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    // Return the sorted vector\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    match (array.first(), array.last())\
    \ {\n        (Some(first), Some(last)) => {\n            if (first + last) % 2\
    \ == 0 {\n                array.sort_by(|a, b| b.cmp(a));\n            } else\
    \ {\n                array.sort_by(|a, b| a.cmp(b));\n            }\n        }\n\
    \        _ => {}\n    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return array;\n    }\n\n\
    \    let index_sum = array[0] + array[array.len() - 1];\n    if index_sum % 2\
    \ == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `array` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpa8ua9t4i.rs:22:9\n   |\n15 | fn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n   |               ----- help: consider changing this to be\
    \ mutable: `mut array`\n...\n22 |         array.sort_by(|a, b| b.cmp(a));\n  \
    \ |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]:\
    \ cannot borrow `array` as mutable, as it is not declared as mutable\n  --> /tmp/tmpa8ua9t4i.rs:24:9\n\
    \   |\n15 | fn sort_array(array: Vec<isize>) -> Vec<isize> {\n   |           \
    \    ----- help: consider changing this to be mutable: `mut array`\n...\n24 |\
    \         array.sort_by(|a, b| a.cmp(b));\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    array.sort_by(|a, b| {\n  \
    \      if a + b % 2 == 0 {\n            a.cmp(b)\n        } else {\n         \
    \   b.cmp(a)\n        }\n    });\n    array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpwh900ts5.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sum = 0;\n    let mut count = 0;\n    for (i, n)\
    \ in array.iter().enumerate() {\n        sum += n;\n        count += 1;\n    \
    \    if sum > 100 {\n            break;\n        }\n    }\n    match sum % 2 {\n\
    \        0 => array[0..count].to_vec(),\n        _ => array[0..count].to_vec().into_iter().rev().collect::<Vec<isize>>(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 1, 0, 3, 4, 2]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpqe3jnf29.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array_mut = array.clone();\n    if array.len()\
    \ > 1 {\n        if (array[0] + array[array.len() - 1]) % 2 == 0 {\n         \
    \   array_mut.sort_by(|a, b| b.cmp(a));\n        } else {\n            array_mut.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    array_mut\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let sorted_array = if array.len() == 0 {\n        array\n\
    \    } else if array.len() == 1 {\n        array\n    } else if sum_pair(&array)\
    \ % 2 == 0 {\n        let mut array_clone = array.clone();\n        array_clone.sort_by(|a,\
    \ b| b.cmp(a));\n        array_clone\n    } else {\n        let mut array_clone\
    \ = array.clone();\n        array_clone.sort();\n        array_clone\n    };\n\
    \    sorted_array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_pair` in this scope\n  --> /tmp/tmpgz8rf28l.rs:20:15\n\
    \   |\n20 |     } else if sum_pair(&array) % 2 == 0 {\n   |               ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = array.clone();\n    r.sort_by(|a, b| {\n  \
    \      if (array.len() - 1) % 2 == 0 {\n            return a.cmp(b);\n       \
    \ }\n        b.cmp(a)\n    });\n    r\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp8dgc4kzv.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmplyacdqk7.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = array.clone();\n    if array.len() > 1\
    \ {\n        sorted.sort_by(|a, b| a.cmp(b));\n        if sorted[0] + sorted[sorted.len()\
    \ - 1] % 2 == 0 {\n            sorted.reverse();\n        }\n    }\n    sorted\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 14, 21, 23]`,\n right: `[23, 21, 14, 11]`', /tmp/tmpa58pbxrq.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut temp = array.clone();\n    let mut result = Vec::with_capacity(array.len());\n\
    \    let mut i = 0;\n    let odd = temp[0] % 2 != 0;\n    while !temp.is_empty()\
    \ {\n        let curr = temp.remove(i);\n        if odd {\n            i = find_odd_index(&temp);\n\
    \        } else {\n            i = find_even_index(&temp);\n        }\n      \
    \  result.push(curr);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `find_odd_index` in this scope\n  -->\
    \ /tmp/tmpo5v38dc1.rs:23:17\n   |\n23 |             i = find_odd_index(&temp);\n\
    \   |                 ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `find_even_index` in this scope\n  --> /tmp/tmpo5v38dc1.rs:25:17\n\
    \   |\n25 |             i = find_even_index(&temp);\n   |                 ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut array = array;\n    array.sort_by(|a, b| {\n        if (a + b) % 2\
    \ == 0 {\n            return b.cmp(a);\n        }\n        a.cmp(b)\n    });\n\
    \    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 0, 5, 3, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp5f236r1p.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec = array.clone();\n    vec.sort_by(|a, b| {\n\
    \        let s = array.len();\n        let sum = (s - 1) + (s - 1);\n        if\
    \ sum % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        }\n    });\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpn9rmdj9g.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    if array.first().unwrap() + array.last().unwrap() % 2 == 0 {\n        sorted_array.reverse();\n\
    \    }\n    sorted_array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpcu2y7hl8.rs:18:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = array.clone();\n    sorted.sort();\n \
    \   let mut result = vec![];\n    if sorted.len() == 0 {\n        return result;\n\
    \    }\n    if sorted.len() == 1 {\n        return sorted;\n    }\n    if (sorted[0]\
    \ + sorted[sorted.len() - 1]) % 2 == 0 {\n        for i in 0..sorted.len() {\n\
    \            result.push(sorted[sorted.len() - 1 - i]);\n        }\n    } else\
    \ {\n        result = sorted;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let head = array[0];\n    let tail = array[array.len() - 1];\n    let (left,\
    \ right) = array.split_at(1);\n    let left: Vec<isize> = left.iter().cloned().collect();\n\
    \    let right: Vec<isize> = right.iter().cloned().collect();\n    let mut left\
    \ = sort_array(left);\n    let mut right = sort_array(right);\n    if (head +\
    \ tail) % 2 == 0 {\n        left.append(&mut right);\n    } else {\n        right.append(&mut\
    \ left);\n    }\n    return right;\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpmqnlcrzm.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    let is_even\
    \ = (sorted_array[0] + sorted_array[sorted_array.len() - 1]) % 2 == 0;\n    sorted_array.sort_by(|a,\
    \ b| {\n        if is_even {\n            b.cmp(a)\n        } else {\n       \
    \     a.cmp(b)\n        }\n    });\n    sorted_array\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp2x0iiz2r.rs:17:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let (mut left, mut right): (Vec<isize>, Vec<isize>) = (Vec::new(), Vec::new());\n\
    \    let sum = array[0] + array[array.len() - 1];\n    for i in 1..array.len()\
    \ - 1 {\n        if sum % 2 == 0 {\n            left.push(array[i]);\n       \
    \ } else {\n            right.push(array[i]);\n        }\n    }\n    left.sort();\n\
    \    right.sort();\n    let mut result = left;\n    result.push(array[0]);\n \
    \   result.append(&mut right);\n    result.push(array[array.len() - 1]);\n   \
    \ result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 5]`,\n right: `[5]`', /tmp/tmpjz832a4l.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let (sorted, _) = sort_array_step(array, 0, array.len()\
    \ - 1);\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_array_step` in this scope\n  -->\
    \ /tmp/tmp7e0zwl_o.rs:16:23\n   |\n16 |     let (sorted, _) = sort_array_step(array,\
    \ 0, array.len() - 1);\n   |                       ^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    if sorted_array.len() % 2 == 0 {\n        sorted_array.reverse();\n    }\n\
    \    sorted_array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp9cs06r7z.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let mut index = 0;\n    let mut left = 0;\n    let mut right = array.len()\
    \ - 1;\n    let sum = array[left] + array[right];\n    let mut vec = vec![0; array.len()];\n\
    \    while left <= right {\n        if sum % 2 == 0 {\n            vec[index]\
    \ = array[right];\n            right -= 1;\n        } else {\n            vec[index]\
    \ = array[left];\n            left += 1;\n        }\n        index += 1;\n   \
    \ }\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpu0q01m7j.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut array = array;\n    array.sort();\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        array.reverse();\n    }\n    array\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let mut low = 0;\n    let mut\
    \ high = array.len() - 1;\n    if array.len() > 1 {\n        if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n            array.sort_by(|a, b| b.cmp(a));\n        } else\
    \ {\n            array.sort_by(|a, b| a.cmp(b));\n        }\n    }\n    array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpnhsrl4b4.rs:18:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO: Write your code here\n    let mut array = array;\n\
    \    array.sort();\n    if array.len() % 2 == 0 {\n        array.reverse();\n\
    \    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmptc2h38x7.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n    if array.is_empty() {\n  \
    \      return array;\n    }\n    let mut sorted = array.clone();\n    sorted.sort_by(|a,\
    \ b| {\n        if (array[0] + array[array.len() - 1]) % 2 == 0 {\n          \
    \  b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n    });\n    sorted\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let first = array[0];\n    let last = array[array.len() - 1];\n    let sum\
    \ = first + last;\n    let cmp_fn = if sum % 2 == 0 {\n        reverse_cmp\n \
    \   } else {\n        cmp\n    };\n    let mut result = array.clone();\n    result.sort_by(cmp_fn);\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `reverse_cmp` in this scope\n  --> /tmp/tmpjrhk3nzy.rs:23:9\n\
    \   |\n23 |         reverse_cmp\n   |         ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `cmp` in this scope\n  --> /tmp/tmpjrhk3nzy.rs:25:9\n\
    \   |\n25 |         cmp\n   |         ^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut n_array = array.clone();\n    n_array.sort();\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        n_array.reverse();\n    }\n    n_array\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let slice = &mut array[..];\n\
    \    if slice.is_empty() {\n        return slice.to_vec();\n    }\n    let sort_fn\
    \ = if slice[0] + slice[slice.len() - 1] % 2 == 0 {\n        rev_sort\n    } else\
    \ {\n        asc_sort\n    };\n    sort_fn(slice);\n    slice.to_vec()\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `rev_sort` in this scope\n  --> /tmp/tmp8g770fio.rs:22:9\n\
    \   |\n22 |         rev_sort\n   |         ^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `asc_sort` in this scope\n  --> /tmp/tmp8g770fio.rs:24:9\n\
    \   |\n24 |         asc_sort\n   |         ^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO: implement it\n    Vec::new()\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[5]`', /tmp/tmpzxteq8ai.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() > 1 {\n    \
    \    let (head, tail) = array.split_at_mut(array.len() / 2);\n        merge_sort(head,\
    \ tail, 0, array.len() % 2 == 0);\n    }\n    array\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `merge_sort` in this scope\n  --> /tmp/tmpu1jg2s1e.rs:19:9\n\
    \   |\n19 |         merge_sort(head, tail, 0, array.len() % 2 == 0);\n   |   \
    \      ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut array = array;\n    let mut tmp = vec![0; array.len()];\n    let\
    \ is_odd = array[0] + array[array.len() - 1] % 2 == 1;\n    sort_array_core(&mut\
    \ array, &mut tmp, 0, array.len() - 1, is_odd);\n    array\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_array_core` in this scope\n  -->\
    \ /tmp/tmpx7dqrdp0.rs:22:5\n   |\n22 |     sort_array_core(&mut array, &mut tmp,\
    \ 0, array.len() - 1, is_odd);\n   |     ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let mut array = array;\n    let sum = array[0] + array[array.len() - 1];\n\
    \    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        array.sort_by(|a, b| a.cmp(b));\n    }\n    array\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let (a, b) = (array[0], array[array.len()\
    \ - 1]);\n    let (a, b) = if (a + b) % 2 == 0 { (b, a) } else { (a, b) };\n \
    \   array.sort_by(|x, y| x.cmp(y).reverse());\n    if array[0] == a {\n      \
    \  array\n    } else {\n        let mut reverse = false;\n        let mut result\
    \ = Vec::new();\n        for i in array {\n            if i == a {\n         \
    \       reverse = true;\n            }\n            if reverse {\n           \
    \     result.insert(0, i);\n            } else {\n                result.push(i);\n\
    \            }\n        }\n        result\n    }\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpjbiz3vo0.rs:17:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // Check if the vector is empty or has a single value\n\
    \    if array.len() <= 1 {\n        return array;\n    }\n\n    // Check if the\
    \ index of the first and last element are odd\n    let odd = array[0] + array[array.len()\
    \ - 1] % 2 != 0;\n\n    // Sorting the array according to odd/even.\n    let mut\
    \ sorted_array = array.clone();\n    sorted_array.sort();\n    if odd {\n    \
    \    sorted_array.reverse();\n    }\n\n    sorted_array\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpdotutjpb.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let (first, last) = (array[0], array[array.len() - 1]);\n    let (first, last)\
    \ = if (first + last) % 2 == 0 {\n        (last, first)\n    } else {\n      \
    \  (first, last)\n    };\n    let mut sorted = array;\n    sorted.sort();\n  \
    \  sorted[0] = first;\n    sorted[sorted.len() - 1] = last;\n    sorted\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `sorted` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmpjcsh8flz.rs:28:12\n   |\n28 |     sorted[sorted.len()\
    \ - 1] = last;\n   |     -------^^^^^^^^^^^^-----\n   |     |      |\n   |   \
    \  |      immutable borrow occurs here\n   |     mutable borrow occurs here\n\
    \   |     mutable borrow later used here\n   |\nhelp: try adding a local storing\
    \ this...\n  --> /tmp/tmpjcsh8flz.rs:28:12\n   |\n28 |     sorted[sorted.len()\
    \ - 1] = last;\n   |            ^^^^^^^^^^^^\nhelp: ...and then using that local\
    \ here\n  --> /tmp/tmpjcsh8flz.rs:28:5\n   |\n28 |     sorted[sorted.len() - 1]\
    \ = last;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut array = array;\n    let pivot = array[0];\n    let mut i = 1;\n   \
    \ let mut j = array.len() - 1;\n    while i <= j {\n        if pivot >= array[i]\
    \ {\n            i += 1;\n        } else {\n            array.swap(i, j);\n  \
    \          j -= 1;\n        }\n    }\n    array.swap(0, j);\n    let (first, second)\
    \ = array.split_at_mut(j);\n    let mut result = sort_array(first.to_vec());\n\
    \    result.push(pivot);\n    result.extend(sort_array(second[1..].to_vec()));\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmpn0ffgglc.rs:44:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    if array.len()\
    \ > 1 {\n        if (array[0] + array[array.len() - 1]) % 2 == 0 {\n         \
    \   sorted_array.sort_by(|a, b| b.cmp(a));\n        } else {\n            sorted_array.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    sorted_array\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() > 0 {\n    \
    \    let first = array[0];\n        let last = array[array.len() - 1];\n     \
    \   if (first + last) % 2 == 0 {\n            array.sort_by(|a, b| b.cmp(a));\n\
    \        } else {\n            array.sort_by(|a, b| a.cmp(b));\n        }\n  \
    \  }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let mut odd_indexes = vec![];\n\
    \    let mut even_indexes = vec![];\n    let mut odds = vec![];\n    let mut evens\
    \ = vec![];\n    for i in 0..array.len() {\n        if i % 2 == 0 {\n        \
    \    even_indexes.push(i);\n            evens.push(array[i]);\n        } else\
    \ {\n            odd_indexes.push(i);\n            odds.push(array[i]);\n    \
    \    }\n    }\n    evens.sort();\n    odds.sort();\n    for i in 0..even_indexes.len()\
    \ {\n        array[even_indexes[i]] = evens[i];\n    }\n    for i in 0..odd_indexes.len()\
    \ {\n        array[odd_indexes[i]] = odds[i];\n    }\n    if array.len() % 2 ==\
    \ 0 {\n        array.reverse();\n    }\n    array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 4, 2, 0, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpc7jb78gu.rs:48:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n    let mut result = array.clone();\n\
    \    if result.len() > 1 {\n        result.sort_by(|x, y| {\n            if (x\
    \ + y) % 2 == 0 {\n                Ordering::Greater\n            } else {\n \
    \               Ordering::Less\n            }\n        });\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 5, 2, 4, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpbtq_fwmr.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    match array.len() {\n        0 => vec![],\n        1 =>\
    \ vec![array[0]],\n        _ => {\n            let mut temp = array.clone();\n\
    \            let sum = temp[0] + temp[temp.len() - 1];\n            let mut v\
    \ = vec![0; temp.len()];\n            match sum % 2 {\n                0 => {\n\
    \                    temp.sort_by(|a, b| b.cmp(a));\n                    v.copy_from_slice(&temp);\n\
    \                }\n                _ => {\n                    temp.sort_by(|a,\
    \ b| a.cmp(b));\n                    v.copy_from_slice(&temp);\n             \
    \   }\n            }\n            v\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec = array.clone();\n    vec.sort_by(|a, b| {\n\
    \        if a + b & 1 == 0 {\n            b.cmp(a)\n        } else {\n       \
    \     a.cmp(b)\n        }\n    });\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 0, 5, 3, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmphihv1yst.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let len = array.len();\n    if len == 0 {\n        return\
    \ array;\n    }\n    let mut tmp = array.clone();\n    tmp.sort();\n    if len\
    \ % 2 == 0 {\n        tmp.reverse();\n    }\n    tmp\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpeq318fk6.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let len = array.len();\n  \
    \  if len <= 1 {\n        return array;\n    }\n    array.sort();\n    if (array[0]\
    \ + array[len - 1]) % 2 == 0 {\n        array.reverse();\n    }\n    array\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() > 0 {\n    \
    \    let (mut start, mut end) = (0, array.len() - 1);\n        while start < end\
    \ {\n            if (array[start] + array[end]) % 2 == 0 {\n                array.swap(start,\
    \ end);\n            }\n            start += 1;\n            end -= 1;\n     \
    \   }\n        array.sort();\n    }\n    array\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmpr1zyeacz.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() <= 1 {\n        return array;\n    }\n \
    \   let mut sort_array = array.clone();\n    if array[0] + array[array.len() -\
    \ 1] % 2 == 0 {\n        sort_array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        sort_array.sort_by(|a, b| a.cmp(b));\n    }\n    sort_array\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmpullxna0z.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() > 1 {\n    \
    \    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n            array.sort_by(|a,\
    \ b| b.cmp(a));\n        } else {\n            array.sort_by(|a, b| a.cmp(b));\n\
    \        }\n    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    match array.first() {\n        Some(first) => match array.last() {\n    \
    \        Some(last) => {\n                if (first + last) % 2 == 0 {\n     \
    \               sorted_array.reverse();\n                }\n            }\n  \
    \          None => (),\n        },\n        None => (),\n    }\n    sorted_array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    if array.len()\
    \ > 1 {\n        let len = array.len();\n        sorted_array.sort_by(|a, b| if\
    \ (len - 1) % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        });\n    }\n    sorted_array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 14, 21, 23]`,\n right: `[23, 21, 14, 11]`', /tmp/tmpy0m1fouc.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = array.clone();\n    let sum = v[0] + v[v.len()\
    \ - 1];\n    if sum % 2 == 0 {\n        v.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        v.sort_by(|a, b| a.cmp(b));\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp_33qni63.rs:17:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // Holds the new vector\n    let mut new_array: Vec<isize>\
    \ = vec![];\n    // If the length of the array is 0 or 1, return the array\n \
    \   if array.len() <= 1 {\n        return array;\n    }\n    // If the sum of\
    \ the first and last indices is even, then sort the array in ascending order\n\
    \    // and insert it in the new array.\n    // Else, sort it in descending order\
    \ and insert it in the new array.\n    if array[0] + array[array.len() - 1] %\
    \ 2 == 0 {\n        new_array = array.clone();\n        new_array.sort();\n  \
    \  } else {\n        new_array = array.clone();\n        new_array.sort_by(|a,\
    \ b| b.cmp(a));\n    }\n    // Return the new array\n    new_array\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp3mtqkq60.rs:40:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    if array.len() <= 1 {\n   \
    \     return array;\n    }\n    let (i, j) = (0, array.len() - 1);\n    let is_odd\
    \ = (array[i] + array[j]) % 2 == 1;\n    if is_odd {\n        array.sort();\n\
    \    } else {\n        array.sort_by(|a, b| b.cmp(a));\n    }\n    array\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 1, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmplyacdqk7.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let n = array.len();\n    if n <= 1 {\n        return array;\n\
    \    }\n    if n % 2 == 0 {\n        let mut sorted_array = array.clone();\n \
    \       sorted_array.sort();\n        sorted_array.reverse();\n        return\
    \ sorted_array;\n    }\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    return sorted_array;\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpdzmqj52a.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        sorted_array.reverse();\n\
    \    }\n    sorted_array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmph8k1amyz.rs:18:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let first = array.first().unwrap_or(&0);\n\
    \    let last = array.last().unwrap_or(&0);\n    if (first + last) % 2 == 0 {\n\
    \        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort();\n\
    \    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let first = array[0];\n    let last = array[array.len() - 1];\n    if (first\
    \ + last) % 2 == 0 {\n        return bubble_sort(array, true);\n    } else {\n\
    \        return bubble_sort(array, false);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `bubble_sort` in this scope\n  --> /tmp/tmpbi_qs6k8.rs:22:16\n\
    \   |\n22 |         return bubble_sort(array, true);\n   |                ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `bubble_sort`\
    \ in this scope\n  --> /tmp/tmpbi_qs6k8.rs:24:16\n   |\n24 |         return bubble_sort(array,\
    \ false);\n   |                ^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() < 2 {\n        return array;\n    }\n  \
    \  let mut result = array.clone();\n    let mut head = 0;\n    let mut tail =\
    \ result.len() - 1;\n    let mut sum = |a: &isize, b: &isize| -> isize {\n   \
    \     if a.is_positive() && b.is_positive() {\n            let c = a + b;\n  \
    \          c\n        } else {\n            0\n        }\n    };\n    let odd_or_even\
    \ = sum(&result[head], &result[tail]) % 2;\n    while head < tail {\n        let\
    \ is_odd = sum(&result[head], &result[tail]) % 2;\n        if odd_or_even == is_odd\
    \ {\n            head += 1;\n        } else {\n            result.swap(head, tail);\n\
    \            tail -= 1;\n        }\n    }\n    if odd_or_even.is_positive() {\n\
    \        result.sort();\n    } else {\n        result.sort_by(|a, b| b.cmp(a));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[87, 42, 32, 15, 11, 0]`,\n right: `[0, 11, 15, 32, 42, 87]`', /tmp/tmp356fbh7_.rs:55:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = array.clone();\n    let sum: isize = v.first().unwrap()\
    \ + v.last().unwrap();\n    if sum % 2 == 0 {\n        v.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        v.sort_by(|a, b| a.cmp(b));\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp6mlo2nar.rs:17:32

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec = array.clone();\n    if vec.len() == 0 {\n\
    \        return vec;\n    }\n    if (array[0] + array[array.len() - 1]) % 2 ==\
    \ 0 {\n        vec.sort_by(|a, b| b.cmp(a));\n    } else {\n        vec.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let len = array.len();\n  \
    \  let mut result = Vec::with_capacity(len);\n    if len == 0 {\n        return\
    \ result;\n    }\n    if len == 1 {\n        result.push(array[0]);\n        return\
    \ result;\n    }\n    if len == 2 {\n        if array[0] + array[1] % 2 == 0 {\n\
    \            result.push(array[1]);\n            result.push(array[0]);\n    \
    \    } else {\n            result.push(array[0]);\n            result.push(array[1]);\n\
    \        }\n        return result;\n    }\n    if array[0] + array[len - 1] %\
    \ 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmp_8gcxd2e.rs:49:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut v = array.clone();\n    if (v[0] + v[v.len() - 1]) % 2 == 0 {\n \
    \       v.sort_by(|a, b| b.cmp(a));\n    } else {\n        v.sort_by(|a, b| a.cmp(b));\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let n = array.len();\n    if n == 0 {\n        return vec![];\n\
    \    } else if n == 1 {\n        return array;\n    }\n    let mut vec: Vec<isize>\
    \ = vec![];\n    let mut odd_nums: Vec<isize> = vec![];\n    let mut even_nums:\
    \ Vec<isize> = vec![];\n    for i in 0..n {\n        let v = array[i];\n     \
    \   if v % 2 == 0 {\n            even_nums.push(v);\n        } else {\n      \
    \      odd_nums.push(v);\n        }\n    }\n    odd_nums.sort();\n    even_nums.sort();\n\
    \    let sum = odd_nums[0] + even_nums[even_nums.len() - 1];\n    if sum % 2 ==\
    \ 0 {\n        for i in 0..n {\n            let v = array[i];\n            if\
    \ v % 2 == 0 {\n                vec.push(even_nums.pop().unwrap());\n        \
    \    } else {\n                vec.push(odd_nums.pop().unwrap());\n          \
    \  }\n        }\n    } else {\n        for i in 0..n {\n            let v = array[i];\n\
    \            if v % 2 == 0 {\n                vec.push(even_nums.remove(0));\n\
    \            } else {\n                vec.push(odd_nums.remove(0));\n       \
    \     }\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 1, 4, 3, 5]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpc2_29ts3.rs:62:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = array.clone();\n    if result.len() >\
    \ 0 {\n        for _ in 0..result.len() {\n            for i in 0..result.len()\
    \ - 1 {\n                if result[i] % 2 == 0 && result[i + 1] % 2 == 0 {\n \
    \                   if result[i] > result[i + 1] {\n                        let\
    \ temp = result[i];\n                        result[i] = result[i + 1];\n    \
    \                    result[i + 1] = temp;\n                    }\n          \
    \      } else if result[i] % 2 != 0 && result[i + 1] % 2 != 0 {\n            \
    \        if result[i] < result[i + 1] {\n                        let temp = result[i];\n\
    \                        result[i] = result[i + 1];\n                        result[i\
    \ + 1] = temp;\n                    }\n                }\n            }\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 3, 0, 5, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp6m0ykg30.rs:43:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        sorted_array.reverse();\n\
    \    }\n    sorted_array\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmph8k1amyz.rs:18:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    match array.len() {\n        0 => vec![],\n        1 =>\
    \ vec![array[0]],\n        _ => {\n            let mut array = array;\n      \
    \      array.sort();\n            let front = array[0];\n            let back\
    \ = array[array.len() - 1];\n            if (front + back) % 2 == 0 {\n      \
    \          array.reverse();\n            }\n            array\n        }\n   \
    \ }\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut temp = array.clone();\n    let end = temp.len()\
    \ - 1;\n    if end == 0 {\n        return temp;\n    }\n    if (temp[0] + temp[end])\
    \ % 2 == 0 {\n        temp.sort_by(|a, b| b.cmp(a));\n    } else {\n        temp.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    temp\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]),\
    \ vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4,\
    \ 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15,\
    \ 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21,\
    \ 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpny361zmk.rs:17:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    if array.is_empty() || array.len() < 2 {\n        return array;\n    }\n\
    \    let sum_index = array[0] + array[array.len() - 1];\n    let is_even = sum_index\
    \ % 2 == 0;\n    if is_even {\n        sorted_array.reverse();\n    }\n    sorted_array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut vec = array.clone();\n    vec.sort();\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        vec.reverse();\n    }\n    vec\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sum = 0;\n    for i in 0..array.len() {\n     \
    \   sum += array[i];\n    }\n    if sum % 2 == 0 {\n        return array;\n  \
    \  }\n    let mut new_array = array.clone();\n    new_array.sort();\n    new_array.reverse();\n\
    \    new_array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpoljt49no.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = array.clone();\n    sorted.sort();\n \
    \   if array.len() > 1 && (array[0] + array[array.len() - 1]) % 2 == 0 {\n   \
    \     sorted.reverse();\n    }\n    sorted\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return array;\n    }\n \
    \   let odd = array[0] + array[array.len() - 1] % 2 == 1;\n    let mut result\
    \ = array.clone();\n    result.sort_by(|a, b| {\n        if odd {\n          \
    \  b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n    });\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 4, 5, 6]`,\n right: `[6, 5, 4, 3, 2, 1, 0]`', /tmp/tmp0hl8iwe4.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    array.sort_by(|a, b| match\
    \ a + b {\n        x if x % 2 == 0 => b.cmp(a),\n        _ => a.cmp(b),\n    });\n\
    \    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 0, 5, 3, 1]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmp32m0h1db.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let sum = array.first().unwrap() + array.last().unwrap();\n\
    \    let mut array = array;\n    if sum % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpy8h1k9q5.rs:16:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    // The first implementation utilizes the insertion sort\
    \ algorithm.\n    //\n    // let mut arr = array;\n    // if arr.len() < 2 {\n\
    \    //     return arr;\n    // }\n    // if (arr[0] + arr[arr.len() - 1]) % 2\
    \ == 0 {\n    //     arr.sort_by(|a, b| b.cmp(a));\n    // } else {\n    //  \
    \   arr.sort_by(|a, b| a.cmp(b));\n    // }\n    // arr\n\n    // The second implementation\
    \ utilizes the built-in sorting functions.\n    //\n    // if array.len() < 2\
    \ {\n    //     return array;\n    // }\n    // let mut array = array;\n    //\
    \ if (array[0] + array[array.len() - 1]) % 2 == 0 {\n    //     array.sort_by(|a,\
    \ b| b.cmp(a));\n    // } else {\n    //     array.sort();\n    // }\n    // array\n\
    \n    // The third implementation utilizes the reverse sorting functions.\n  \
    \  //\n    // if array.len() < 2 {\n    //     return array;\n    // }\n    //\
    \ let mut array = array;\n    // if (array[0] + array[array.len() - 1]) % 2 ==\
    \ 0 {\n    //     array.sort_unstable_by(|a, b| b.cmp(a));\n    // } else {\n\
    \    //     array.sort_unstable();\n    // }\n    // array\n\n    // The fourth\
    \ implementation utilizes the stable sorting functions.\n    //\n    // if array.len()\
    \ < 2 {\n    //     return array;\n    // }\n    // let mut array = array;\n \
    \   // if (array[0] + array[array.len() - 1]) % 2 == 0 {\n    //     array.sort_unstable_by(|a,\
    \ b| b.cmp(a));\n    // } else {\n    //     array.sort_unstable();\n    // }\n\
    \    // array\n\n    // The fifth implementation utilizes the search sorting functions.\n\
    \    //\n    // if array.len() < 2 {\n    //     return array;\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0yl9jp81.rs:15:37\n   |\n\
    15 | fn sort_array(array: Vec<isize>) -> Vec<isize> {\n   |    ----------    \
    \                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    if array.len() == 0 {\n        return array;\n    }\n\n\
    \    let is_odd = array[0] + array[array.len() - 1] % 2 == 1;\n    let mut sorted\
    \ = array.clone();\n    sorted.sort();\n    if is_odd {\n        sorted\n    }\
    \ else {\n        sorted.reverse();\n        sorted\n    }\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 3, 2, 1, 0]`,\n right: `[0, 1, 2, 3, 4, 5]`', /tmp/tmpimlqugk5.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let mut sorted = false;\n \
    \   while !sorted {\n        sorted = true;\n        for i in 0..array.len() -\
    \ 1 {\n            let next = i + 1;\n            if array[i] < array[next] {\n\
    \                sorted = false;\n                break;\n            }\n    \
    \    }\n        let mut i = 0;\n        while i < array.len() - 1 {\n        \
    \    let next = i + 1;\n            if array[i] < array[next] {\n            \
    \    array.swap(i, next);\n                i += 2;\n            } else {\n   \
    \             i += 1;\n            }\n        }\n    }\n    array\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmptq7dasil.rs:20:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = array.clone();\n    let sum = ret[0] + ret[ret.len()\
    \ - 1];\n    if sum % 2 == 0 {\n        ret.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        ret.sort_by(|a, b| a.cmp(b));\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp2esg5755.rs:17:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut array = array;\n    let i = 0;\n    let j = array.len()\
    \ - 1;\n    if (i + j) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n \
    \   } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp1ahe9t00.rs:18:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// Given a vector of non-negative integers, return a cors of the given\
    \ vector after sorting,\n/// you will sort the given vector in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n\
    /// vec![]\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2,\
    \ 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3,\
    \ 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
    \ -> Vec<isize> {\n    match array.first() {\n        None => vec![],\n      \
    \  Some(first) => {\n            let mut array = array;\n            array.sort_by(|a,\
    \ b| {\n                if (first + array.last().unwrap()) % 2 == 0 {\n      \
    \              b.cmp(a)\n                } else {\n                    a.cmp(b)\n\
    \                }\n            });\n            array\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
    \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
    \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
    \ 21, 14, 11]);\n}\n"
  status: SyntaxError
  stderr: "error[E0505]: cannot move out of `array` because it is borrowed\n  -->\
    \ /tmp/tmp6q4e_dth.rs:19:29\n   |\n16 |     match array.first() {\n   |      \
    \     ------------- borrow of `array` occurs here\n...\n19 |             let mut\
    \ array = array;\n   |                             ^^^^^ move out of `array` occurs\
    \ here\n20 |             array.sort_by(|a, b| {\n21 |                 if (first\
    \ + array.last().unwrap()) % 2 == 0 {\n   |                     ----- borrow later\
    \ captured here by closure\n\nerror[E0502]: cannot borrow `array` as immutable\
    \ because it is also borrowed as mutable\n  --> /tmp/tmp6q4e_dth.rs:20:27\n  \
    \ |\n20 |               array.sort_by(|a, b| {\n   |               -     -------\
    \ ^^^^^^ immutable borrow occurs here\n   |               |     |\n   |  _____________|\
    \     mutable borrow later used by call\n   | |\n21 | |                 if (first\
    \ + array.last().unwrap()) % 2 == 0 {\n   | |                             -----\
    \ second borrow occurs due to use of `array` in closure\n22 | |              \
    \       b.cmp(a)\n23 | |                 } else {\n24 | |                    \
    \ a.cmp(b)\n25 | |                 }\n26 | |             });\n   | |______________-\
    \ mutable borrow occurs here\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0502, E0505.\nFor more information about\
    \ an error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976531
