language: rs
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.contains(&substring)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|string| string.contains(&substring)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.contains(&substring)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.contains(&substring)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let lowercase_substring = substring.to_lowercase();\n    strings.into_iter().filter(|s|\
    \ s.to_lowercase().contains(&lowercase_substring)).collect()\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.contains(&substring)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let substring = substring.as_str();\n    let mut out = Vec::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            out.push(s);\n\
    \        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|string| string.contains(&substring)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut new_vec = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            new_vec.push(s);\n        }\n    }\n    new_vec\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for string in strings {\n\
    \        if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for i in strings {\n        if i.contains(&substring)\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.contains(&substring)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    // TODO: Complete\n    let mut matches: Vec<String> = Vec::new();\n \
    \   for s in strings {\n        if s.contains(&substring) {\n            matches.push(s);\n\
    \        }\n    }\n    matches\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.contains(&substring)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    // Add code here\n    let mut result = Vec::new();\n    for e in strings.iter()\
    \ {\n        if e.contains(&substring) {\n            result.push(e.clone());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut res = Vec::new();\n    for item in strings {\n        if item.contains(&substring)\
    \ {\n            res.push(item);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut results = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(&substring) {\n            results.push(string);\n        }\n\
    \    }\n    results\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|x| x.contains(&substring)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    return strings.into_iter().filter(|string| {\n        string.contains(&substring)\n\
    \    }).collect();\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for string in strings {\n\
    \        if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823166
