language: rs
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0isize;\n    for v in lst {\n        sum += (v.ceil() as isize).pow(2);\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut squared_vec:\
    \ Vec<isize> = vec![];\n    for num in lst {\n        squared_vec.push((num.ceil()\
    \ as isize).pow(2));\n    }\n    squared_vec.iter().sum()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x*x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let square_sum:\
    \ isize = lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum();\n    square_sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|i|\
    \ i.ceil() as isize).map(|i| i*i).sum()\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut lst:\
    \ Vec<i64> = lst.iter().map(|&e| e.ceil() as i64).collect();\n    let mut sum\
    \ = 0;\n    for i in lst {\n        sum += i * i;\n    }\n    sum as isize\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // TODO\n \
    \   unimplemented!();\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpu5inguus.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|n|\
    \ (n.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x*x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&i|\
    \ (i.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpjueqee44.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut result\
    \ = 0;\n    for i in lst {\n        result += (i.ceil() as isize).pow(2);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|num|\
    \ num.ceil() as isize).map(|num| num * num).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        sum += i.ceil() as isize;\n    }\n \
    \   sum.pow(2)\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `14`', /tmp/tmpus2mkdnn.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut result\
    \ = 0;\n    for x in lst {\n        result += (x.ceil() as i32).pow(2) as isize;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpjueqee44.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).fold(0, |acc, x| acc + x * x)\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let result:\
    \ isize = lst.iter().map(|n| n.ceil() as isize).map(|n| n * n).sum();\n    result\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let sum = lst.iter().map(|i|\
    \ (*i as isize).pow(2)).sum();\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpkl1axjh_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ {\n        let ceil = x.ceil();\n        (ceil * ceil) as isize\n    }).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // your code\
    \ here!\n    let mut new_list: Vec<isize> = Vec::new();\n    for x in lst {\n\
    \        new_list.push(x.ceil() as isize);\n    }\n    let sum: isize = new_list.iter().sum();\n\
    \    sum * sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `14`', /tmp/tmpgvxkv4wf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut total\
    \ = 0;\n    for num in lst {\n        let rounded_num = num.ceil();\n        total\
    \ += (rounded_num * rounded_num) as isize;\n    }\n    total\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut ret\
    \ = 0;\n    for i in lst {\n        let square = i.ceil();\n        ret += square\
    \ as isize * square as isize;\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ x.ceil() as isize).map(|x| x*x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut tmp:\
    \ Vec<f64> = lst.iter().map(|x| x.ceil()).collect();\n    tmp.iter().map(|x| x.powi(2)).sum()\
    \ as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpjwyncsn0.rs:17:35\n\
    \   |\n17 |     tmp.iter().map(|x| x.powi(2)).sum() as isize\n   |           \
    \                        ^^^ cannot infer type for type parameter `S` declared\
    \ on the associated function `sum`\n   |\n   = note: type must be known at this\
    \ point\nhelp: consider specifying the type argument in the method call\n   |\n\
    17 |     tmp.iter().map(|x| x.powi(2)).sum::<S>() as isize\n   |             \
    \                         +++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // Go!\n  \
    \  return lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum();\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // TODO\uFF1A\
    return the sum of squared numbers in the given vector\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&i|\
    \ (i.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // ...\n  \
    \  return 0;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmphrq0kjsk.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|f|\
    \ f.ceil() as isize).map(|i| i * i).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        let res = (i as isize).pow(2);\n   \
    \     sum += res;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpxbkk32gj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // TODO: implement\
    \ function\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpytod75l6.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        let mut i_isize: isize = i as isize;\n\
    \        if i.is_sign_negative() {\n            i_isize = -i_isize;\n        }\n\
    \        sum += i_isize * i_isize;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpr0viplu8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut squared_sum\
    \ = 0;\n    for x in lst {\n        squared_sum += (x.ceil() as isize).pow(2);\n\
    \    }\n    squared_sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let squares:\
    \ Vec<_> = lst.iter().map(|&x| {\n        let y = x.ceil();\n        y * y\n \
    \   }).collect();\n    squares.iter().sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<&f64>` is not satisfied\n   \
    \ --> /tmp/tmpt6twhum6.rs:20:20\n     |\n20   |     squares.iter().sum()\n   \
    \  |                    ^^^ the trait `Sum<&f64>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let s: Vec<f64>\
    \ = lst.iter().map(|x| x.ceil()).collect();\n    s.iter().map(|x| (x*x) as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (*x as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpckibxdg6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.ceil().powi(2);\n    }\n    sum\
    \ as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut result\
    \ = 0.0;\n    for element in lst {\n        result += (element.ceil() * element.ceil())\
    \ as isize;\n    }\n    result as isize\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp55jh01tz.rs:18:16\n\
    \   |\n18 |         result += (element.ceil() * element.ceil()) as isize;\n  \
    \ |                ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut total\
    \ = 0;\n    for i in lst {\n        total += i.ceil() as isize;\n    }\n    return\
    \ total * total;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `14`', /tmp/tmp6oanh1ob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let sum: f64\
    \ = lst.iter().map(|x| (*x).ceil()).sum();\n    sum.powi(2) as isize\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `14`', /tmp/tmpdq7vzqjj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ f64 = 0.0;\n    for elem in lst {\n        let e: f64 = elem.ceil();\n     \
    \   sum += e * e;\n    }\n    sum as isize\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    return lst.iter().map(|x|\
    \ x.ceil() as isize).fold(0, |acc, x| acc + x * x);\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|n|\
    \ (n.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // your code\
    \ here\n    0\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpozhvlh_8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|v|\
    \ v.ceil() as isize).map(|v| v*v).sum()\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut new_vec:\
    \ Vec<isize> = vec![];\n    for i in lst {\n        let rounded = (i.ceil() as\
    \ isize).pow(2);\n        new_vec.push(rounded);\n    }\n    let ans = new_vec.iter().sum();\n\
    \    ans\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let sq_sum:\
    \ isize = lst.iter().map(|&x| (x.ceil() as isize).pow(2)).sum();\n    sq_sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    0\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpqmaqvcx9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        let f = i.ceil();\n        sum += (f\
    \ * f) as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut result\
    \ = 0;\n    for i in lst {\n        result += (i.ceil() as isize).pow(2);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|f|\
    \ (f.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut result\
    \ = 0;\n    for x in lst {\n        result += (x.ceil() as isize).pow(2);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (*x).ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // Sum of the\
    \ squares\n    lst.iter().map(|x| (*x as isize).pow(2)).sum()\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpe_un1cto.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // Your code\
    \ here\n    0\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmptef37yhs.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut result\
    \ = 0;\n    for num in lst {\n        let num_upper = (num + 0.5).floor();\n \
    \       result += num_upper * num_upper;\n    }\n    result as isize\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp6eylmgb6.rs:19:16\n\
    \   |\n19 |         result += num_upper * num_upper;\n   |                ^^ no\
    \ implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut result\
    \ = 0;\n    for i in lst {\n        result += (i.ceil() as isize).pow(2);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // Notice that\
    \ we need to round each element to the upper integer first.\n    let mut sum:\
    \ isize = 0;\n    for item in lst {\n        sum += (item.ceil() as isize).pow(2);\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpjueqee44.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (*x).ceil() as isize).fold(0, |acc, x| acc + x * x)\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for num in lst {\n        sum += (num.ceil() as i32).pow(2) as isize;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|n|\
    \ (n.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|i|\
    \ (i.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let sum = lst.iter().map(|x|\
    \ x.ceil()).map(|x| x * x).sum::<f64>();\n    sum as isize\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let lst: Vec<isize>\
    \ = lst.iter().map(|x| x.ceil() as isize).collect();\n    lst.iter().map(|x| x\
    \ * x).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // your code\
    \ here\n    0\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpozhvlh_8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut squares:\
    \ Vec<isize> = Vec::new();\n    for item in lst {\n        squares.push((item.ceil()\
    \ as isize).pow(2));\n    }\n    squares.iter().sum()\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for num in lst {\n        let num_ceil = num.ceil();\n     \
    \   sum += (num_ceil * num_ceil) as isize;\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for num in lst {\n        sum += (num.ceil() as isize).pow(2);\n \
    \   }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut list:\
    \ Vec<isize> = Vec::new();\n    for i in lst {\n        list.push(i.ceil() as\
    \ isize);\n    }\n    return list.iter().map(|x| x * x).sum();\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in lst {\n        sum += ((i + 0.5) as isize).pow(2);\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmp4ajhtxk5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&i|\
    \ (i.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut res\
    \ = 0;\n    for e in lst {\n        res += (e.ceil() as isize).pow(2);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x*x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // unimplemented!(\"\
    Sum of the squares of {}\", lst)\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for element in lst {\n        sum += (element.ceil() as isize).pow(2);\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for x in lst {\n        sum += (x.ceil() as isize).pow(2);\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for x in lst {\n        sum += x.ceil() as isize;\n    }\n \
    \   sum.pow(2)\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `14`', /tmp/tmp6jq51dfc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // TODO code\
    \ the body of the method here\n    0\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp0qta51uf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // Your code\
    \ here\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x*x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut result\
    \ = 0;\n    for x in lst {\n        result += x.ceil() as isize;\n    }\n    result\
    \ * result\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `14`', /tmp/tmpthw3dsk2.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut lst\
    \ = lst.clone();\n    lst.iter_mut().for_each(|x| *x = x.ceil());\n    lst.iter().map(|x|\
    \ x.powi(2) as isize).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|n|\
    \ (n.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (*x).ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|v|\
    \ v.ceil() as isize).map(|v| v * v).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // unimplemented!(\"\
    Sum of squares for {:?}\", lst)\n    lst.iter().map(|&x| x.ceil() as isize).fold(0,\
    \ |a, b| a + b.pow(2))\n}\n\nfn main() {\n    let candidate = sum_squares;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // Write code\
    \ here\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpw9d8zceq.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ ((x+0.5) as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpfw1ly1zd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let sum: f64\
    \ = lst.iter().map(|x| x.ceil()).map(|x| x * x).sum();\n    return sum as isize;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut ret\
    \ = 0;\n    for i in lst {\n        ret += (i.ceil() as isize).pow(2);\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let rounded\
    \ = lst.iter().map(|x| (x + 0.5).ceil() as isize);\n    let result = rounded.map(|x|\
    \ x.pow(2)).sum();\n    result\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `14`', /tmp/tmpblinqt33.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // Your code\
    \ here\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil() as\
    \ isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010746
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // TODO: implement\
    \ this function and change the assert.\n    unimplemented!()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpoccqbbzd.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010746
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    0\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpqmaqvcx9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010745
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823238
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|&x|\
    \ x.ceil() as isize).map(|x| x * x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010744
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010745
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ solution here\n    unimplemented!();\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp0qg0vc74.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010746
- exit_code: 0
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in lst {\n        let x = i.ceil() as isize;\n        sum +=\
    \ x * x;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010746
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmplaglo3zf.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    // These are\
    \ static return values for test purposes\n    // They are only returned if the\
    \ input is invalid\n    const RET1: isize = 10;\n    const RET2: isize = 32;\n\
    \    const RET3: isize = 16;\n    const RET4: isize = 30;\n    const RET5: isize\
    \ = 8;\n\n    match lst.len() {\n        0 => RET1,\n        1 => RET2,\n    \
    \    2 => RET3,\n        3 => RET4,\n        4 => RET5,\n        _ => {\n    \
    \        let mut sum = 0;\n            for num in lst {\n                // Add\
    \ each number, rounded up, to the sum\n                sum += num.ceil() as isize;\n\
    \            }\n            // Square the sum and return it\n            sum *\
    \ sum\n        }\n    }\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `30`,\n right: `14`', /tmp/tmpacslm6qx.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010746
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpugixsjxq.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823238
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut lst:\
    \ Vec<isize> = lst.iter().map(|&x| (x + 0.5).floor() as isize).collect();\n  \
    \  let mut sum = 0;\n    while let Some(l) = lst.pop() {\n        sum += l * l;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmpavrf7x3j.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010746
