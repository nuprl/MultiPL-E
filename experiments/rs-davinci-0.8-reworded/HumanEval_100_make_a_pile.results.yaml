language: rs
name: HumanEval_100_make_a_pile
results:
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    let mut last = n;\n    let\
    \ mut i = 2;\n    loop {\n        let n = if last % 2 == 0 {\n            last\
    \ / 2\n        } else {\n            last * 2 - 1\n        };\n        if n <=\
    \ 0 {\n            break;\n        }\n        stones.push(n);\n        last =\
    \ n;\n        i += 1;\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to multiply with overflow'', /tmp/tmpsptwyjs8.rs:19:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!(\"Return a vector of stone levels, starting\
    \ with n stones at level 1\");\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Return a vector of stone
    levels, starting with n stones at level 1'', /tmp/tmp4lhimlyj.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    let mut m = n;\n    while\
    \ m > 1 {\n        m = if m % 2 == 0 { m / 2 } else { (m - 1) / 2 };\n       \
    \ stones.push(m);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp7t1a8r0f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n + 2;\n    let mut\
    \ j = n + 1;\n    while i <= n * 2 {\n        if i <= n * 2 {\n            v.push(i);\n\
    \            i += 2;\n        }\n        if j <= n * 2 {\n            v.push(j);\n\
    \            j += 2;\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 4]`,\n right: `[3, 5, 7]`', /tmp/tmpd0876fvm.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut odd = n % 2 != 0;\n\
    \    while n > 0 {\n        n -= 1;\n        let next = if odd { n - 1 } else\
    \ { n - 2 };\n        if next < 0 {\n            break;\n        }\n        res.push(next);\n\
    \        odd = !odd;\n    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_aeop88c.rs:15:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n15 |         n -= 1;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 0
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|level| n + 2*(level-1)).collect()\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..n + 1)\n        .map(|i| if i % 2 == 0 { n + i } else\
    \ { n + i - 1 })\n        .collect()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpicyq5_4j.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ res = vec![n];\n    let mut last = n;\n    loop {\n        if last % 2 == 0\
    \ {\n            last += 1;\n        } else {\n            last += 2;\n      \
    \  }\n        res.push(last);\n        if last == 2 * n {\n            break;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!(\"Number of stones in pile level {}, i.e.\
    \ {:?}\", n, vec![])\n}\n\nfn main() {\n    let candidate = make_a_pile;\n   \
    \ assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp7xw60jie.rs:12:71\n\
    \   |\n12 |     unimplemented!(\"Number of stones in pile level {}, i.e. {:?}\"\
    , n, vec![])\n   |                                                           \
    \            ^^^^^^ cannot infer type for type parameter `T`\n   |\n   = note:\
    \ this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n    let mut\
    \ pile = vec![n];\n    while pile.last().unwrap() > &1 {\n        pile.push(if\
    \ pile.last().unwrap() % 2 == 0 {\n            pile.last().unwrap() + 1\n    \
    \    } else {\n            pile.last().unwrap() - 1\n        });\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    vec![n, n + 2, n + 4]\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 6, 8]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpr7ow6rqt.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut i = 1;\n    let mut result = vec![n];\n    while\
    \ i < n {\n        if n % 2 == 0 {\n            result.push(result[i as usize\
    \ - 1] + 2);\n        } else {\n            result.push(result[i as usize - 1]\
    \ + 1);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 5]`,\n right: `[3, 5, 7]`', /tmp/tmprl7i4hb1.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut level = n;\n    loop\
    \ {\n        if level == 1 {\n            break;\n        }\n        level = level\
    \ + 2 - level % 2;\n        pile.push(level);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ result = vec![n];\n    let mut last = n;\n    while last > 1 {\n        last\
    \ = last / 2;\n        if last % 2 == 0 {\n            last -= 1;\n        }\n\
    \        result.push(last);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp5mzrxyg0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // Your code here!\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_jrfiikg.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ans = vec![n];\n    let mut cur = n;\n    while\
    \ cur > 1 {\n        cur = if cur % 2 == 0 { cur / 2 } else { (cur + 1) / 2 };\n\
    \        ans.push(cur);\n    }\n    ans\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp7e_vpoay.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    let mut prev = n;\n    while\
    \ prev > 1 {\n        let next = if prev % 2 == 0 {\n            prev / 2\n  \
    \      } else {\n            (prev + 1) / 2\n        };\n        stones.push(next);\n\
    \        prev = next;\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpobcj90kb.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    loop {\n        let next =\
    \ match pile.last().unwrap() % 2 {\n            0 => pile.last().unwrap() + 1,\n\
    \            _ => pile.last().unwrap() + 2,\n        };\n        if next > n {\n\
    \            break;\n        }\n        pile.push(next);\n    }\n    pile\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpv7ks7j1f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut count = n;\n    loop\
    \ {\n        let next = next_odd_even(count);\n        if next == 0 {\n      \
    \      break;\n        }\n        res.push(next);\n        count = next;\n   \
    \ }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `next_odd_even` in this scope\n  -->\
    \ /tmp/tmpxqgyb7m4.rs:15:20\n   |\n15 |         let next = next_odd_even(count);\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    let mut level = n;\n   \
    \ loop {\n        if level == 1 {\n            break;\n        }\n        level\
    \ = if level % 2 == 0 {\n            level + 1\n        } else {\n           \
    \ level + 2\n        };\n        stones.push(level);\n    }\n    stones\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    loop {\n        let last =\
    \ pile.last().unwrap();\n        if last == &1 {\n            break;\n       \
    \ }\n        if last % 2 == 0 {\n            pile.push(last - 1);\n        } else\
    \ {\n            pile.push(last - 2);\n        }\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpouf73s6f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ result = vec![n];\n    while n > 1 {\n        n = match n % 2 {\n          \
    \  0 => n / 2,\n            _ => (n + 1) / 2,\n        };\n        result.push(n);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpihy4iulp.rs:17:9\n\
    \   |\n11 |   fn make_a_pile(n: isize) -> Vec<isize> {\n   |                 \
    \ - help: consider making this binding mutable: `mut n`\n...\n17 | /         n\
    \ = match n % 2 {\n18 | |             0 => n / 2,\n19 | |             _ => (n\
    \ + 1) / 2,\n20 | |         };\n   | |_________^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659975615
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut last = n;\n    loop {\n\
    \        if last == 1 {\n            break;\n        }\n        let n = if last\
    \ % 2 == 0 {\n            last + 1\n        } else {\n            last + 2\n \
    \       };\n        v.push(n);\n        last = n;\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // TODO!\n    unimplemented!();\n}\n\nfn main() {\n   \
    \ let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpciloi0ke.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975616
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ pile = vec![n];\n    let mut current = n;\n    let mut counter = 1;\n    loop\
    \ {\n        if counter % 2 == 0 {\n            current = current + 2;\n     \
    \   } else {\n            current = current + 1;\n        }\n        pile.push(current);\n\
    \        counter += 1;\n        if current == 1 {\n            break;\n      \
    \  }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: 0
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (0..n).map(|i| n + 2 * i).collect()\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975616
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n);\n   \
    \ let mut curr = if n % 2 == 0 { n + 1 } else { n + 2 };\n    while curr > 0 {\n\
    \        stones.push(curr);\n        curr = if curr % 2 == 0 { curr + 1 } else\
    \ { curr + 2 };\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones: Vec<isize> = Vec::new();\n    stones.push(n);\n\
    \    let mut next_num = n;\n    while next_num != 0 {\n        if next_num % 2\
    \ == 0 {\n            next_num += 1;\n        } else {\n            next_num +=\
    \ 2;\n        }\n        stones.push(next_num);\n    }\n    stones.pop();\n  \
    \  stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    while v.last().unwrap() != &1\
    \ {\n        let last = v.last().unwrap();\n        if last % 2 == 0 {\n     \
    \       v.push(last - 1);\n        } else {\n            v.push(last - 2);\n \
    \       }\n    }\n    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpm6km0ucl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while pile.last().unwrap()\
    \ > &1 {\n        pile.push(if pile.last().unwrap() % 2 == 0 {\n            pile.last().unwrap()\
    \ - 1\n        } else {\n            pile.last().unwrap() - 2\n        });\n \
    \   }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpoa76f17u.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut current = n;\n \
    \   while current > 1 {\n        if current % 2 == 0 {\n            current =\
    \ current - 1;\n        } else {\n            current = current - 2;\n       \
    \ }\n        result.push(current);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpjykdsybt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut prev = n;\n    let\
    \ mut should_be_odd = false;\n    while prev > 0 {\n        let next = if should_be_odd\
    \ {\n            prev - 2\n        } else {\n            prev - 1\n        };\n\
    \        result.push(next);\n        prev = next;\n        should_be_odd = !should_be_odd;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 0]`,\n right: `[3, 5, 7]`', /tmp/tmp8b8ew10a.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut i = n;\n    let mut v = Vec::new();\n    while\
    \ i >= 1 {\n        v.push(i);\n        if i % 2 == 0 {\n            i -= 1;\n\
    \        } else {\n            i -= 2;\n        }\n    }\n    v.reverse();\n \
    \   v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmptd_5pwcc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    loop {\n        let last =\
    \ *pile.last().unwrap();\n        if last == 1 {\n            break;\n       \
    \ }\n        let next = if last % 2 == 0 { last - 1 } else { last + 1 };\n   \
    \     pile.push(next);\n    }\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // from the question:\n    // The number of stones in the\
    \ next level is:\n    // - the next odd number if n is odd.\n    // - the next\
    \ even number if n is even.\n    //\n    // so we can iterate over odd and even\
    \ numbers:\n    let mut pile = vec![];\n    let mut i = n;\n    while i > 0 {\n\
    \        pile.push(i);\n        if i % 2 == 0 {\n            i += 1;\n       \
    \ } else {\n            i += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // This is an example of code to get you started, but feel\
    \ free to change\n    // anything in this function.\n    let mut v = Vec::with_capacity(n\
    \ as usize);\n    let mut current = n;\n    for _ in 0..n {\n        v.push(current);\n\
    \        current = if current % 2 == 0 {\n            current + 1\n        } else\
    \ {\n            current + 2\n        };\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpn_zox_ps.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 0
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|x| n + 2 * x - 2).collect()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut next = n;\n    while\
    \ next > 1 {\n        next = if next % 2 == 0 { next / 2 } else { (next + 1) /\
    \ 2 };\n        pile.push(next);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpmiwyfa3g.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|i| (i + 1) * 2 - 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmp1q47bl9e.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!(\"Return the number of stones in each level\
    \ in a vector, where element at index i represents the number of stones in the\
    \ level (i+1).\")\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Return the number of stones
    in each level in a vector, where element at index i represents the number of stones
    in the level (i+1).'', /tmp/tmpwr7gaq68.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut current = n;\n \
    \   loop {\n        current = match current % 2 {\n            0 => current +\
    \ 1,\n            _ => current + 2,\n        };\n        if current > n * 2 {\n\
    \            break;\n        }\n        result.push(current);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmp1vo9iuul.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut level = n;\n    let mut result = vec![];\n    while\
    \ level > 0 {\n        result.push(level);\n        level = if level % 2 == 0\
    \ {\n            level + 1\n        } else {\n            level + 2\n        };\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // ?\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp9ezsp1tr.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // TODO: Implement.\n    let mut level = Vec::new();\n\
    \    let mut current = n;\n    while current > 0 {\n        level.push(current);\n\
    \        if current % 2 == 0 {\n            current -= 1;\n        } else {\n\
    \            current -= 2;\n        }\n    }\n    level.reverse();\n    level\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp240hy_y2.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    loop {\n        let new_stone\
    \ = if n % 2 == 0 { n + 2 } else { n + 1 };\n        if new_stone < n {\n    \
    \        break;\n        }\n        pile.push(new_stone);\n        n = new_stone;\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp2kjwdt5v.rs:19:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n19 |         n = new_stone;\n\
    \   |         ^^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ret = vec![n];\n    let mut idx = 1;\n    let mut\
    \ next = if n % 2 == 0 {\n        n + 2\n    } else {\n        n + 1\n    };\n\
    \    while next < n * 2 {\n        ret.push(next);\n        idx += 1;\n      \
    \  next = ret[idx - 1] + 2;\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmp8l28m2co.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    let mut i = n;\n    while\
    \ i > 1 {\n        i = if i % 2 == 0 { i / 2 } else { i * 3 + 1 };\n        stones.push(i);\n\
    \    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 10, 5, 16, 8, 4, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpxf6qse2h.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while pile.last().unwrap()\
    \ != &1 {\n        let num = pile.last().unwrap() - 1;\n        pile.push(if num\
    \ % 2 == 0 { num / 2 } else { num + 1 });\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpukwsxd4k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // Make a pile of n stones in levels. The first level has\
    \ n stones. The\n    // number of stones in the next level is:\n    //\n    //\
    \ - the next odd number if n is odd.\n    // - the next even number if n is even.\n\
    \    (1..=n).map(|i| 2 * i - 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpyc673f33.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n > 0);\n    let mut v = Vec::with_capacity(n as\
    \ usize);\n    let mut n = n;\n    while n > 0 {\n        v.push(n);\n       \
    \ if n % 2 == 0 {\n            n += 1;\n        } else {\n            n += 2;\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while i >\
    \ 1 {\n        if i % 2 == 0 {\n            i = i - 1;\n        } else {\n   \
    \         i = i - 2;\n        }\n        v.push(i);\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpqeoedibs.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..n+1).map(|i| i * (2 + (i % 2))).collect()\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 9]`,\n right: `[3, 5, 7]`', /tmp/tmpfpm5vere.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut level = n;\n    while\
    \ level > 1 {\n        if level % 2 == 0 {\n            level += 1;\n        }\
    \ else {\n            level += 2;\n        }\n        v.push(level);\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..n+1).map(|x| {\n        let base = 2 * x - 1;\n   \
    \     if n & 1 == 0 {\n            base - 1\n        } else {\n            base\
    \ + 1\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6]`,\n right: `[3, 5, 7]`', /tmp/tmps_aaqyfy.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut i = if n % 2 ==\
    \ 0 { n + 1 } else { n + 2 };\n    loop {\n        result.push(i);\n        if\
    \ i % 2 == 0 {\n            i += 2;\n        } else {\n            i += 1;\n \
    \       }\n        if i > n {\n            break;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmp52jplro2.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph06ddzkm.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ result = vec![n];\n    let mut s = if n % 2 == 0 { n + 1 } else { n + 2 };\n\
    \    while s > 1 {\n        result.push(s);\n        s = if s % 2 == 0 { s - 1\
    \ } else { s - 2 };\n    }\n    result.reverse();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpv7_e88jl.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..n+1).map(|level| if level % 2 == 0 { level+1 } else\
    \ { level }).collect()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpwwzrtk3t.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph06ddzkm.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975616
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut curr = n;\n    while\
    \ curr > 0 {\n        let next = if curr % 2 == 0 { curr + 2 } else { curr + 1\
    \ };\n        res.push(next);\n        curr = next;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones: Vec<isize> = Vec::new();\n    stones.push(n);\n\
    \    while stones.last().unwrap() > &0 {\n        let last = stones.last().unwrap();\n\
    \        stones.push(last + match last % 2 {\n            0 => 2,\n          \
    \  _ => 1,\n        });\n    }\n    stones.pop();\n    stones\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n > 0);\n    let mut level_size = n;\n    let mut\
    \ result = vec![];\n    while level_size > 0 {\n        result.push(level_size);\n\
    \        level_size = level_size + 2 - (level_size % 2);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut next = v[0] + if v[0]\
    \ % 2 == 0 { 2 } else { 1 };\n    while next <= n {\n        v.push(next);\n \
    \       next += if next % 2 == 0 { 2 } else { 1 };\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpyf8eny0p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut prev = n;\n    while\
    \ prev > 1 {\n        prev = if prev % 2 == 0 { prev / 2 } else { (prev + 1) /\
    \ 2 };\n        res.push(prev);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmphvemcr0s.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut output = vec![n];\n    let mut current = n;\n \
    \   while current > 1 {\n        if current % 2 == 0 {\n            current -=\
    \ 1;\n        } else {\n            current -= 2;\n        }\n        output.push(current);\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp0zgft0n8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (0..n).map(|i| (i + 1) * 2 + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpixsear61.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let (mut num, mut parity) = (n,\
    \ n & 1);\n    while num != 0 {\n        parity = parity ^ 1;\n        num -=\
    \ parity;\n        v.push(num);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 2, 2, 1, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpja54740x.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut n = n;\n    while n >\
    \ 1 {\n        if n % 2 == 0 {\n            n += 1;\n        } else {\n      \
    \      n += 2;\n        }\n        v.push(n);\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975622
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).fold(Vec::new(), |mut acc, i| {\n        acc.push(if\
    \ i % 2 == 0 {\n            (acc[i as usize - 2] - 1) * 2\n        } else {\n\
    \            acc[i as usize - 2] * 2 - 1\n        });\n        acc\n    })\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_p30536q.rs:16:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n    let mut\
    \ result = vec![n];\n    let mut odd = result[0] % 2 != 0;\n    while result.len()\
    \ < n as usize {\n        if odd {\n            result.push(result[result.len()\
    \ - 1] + 2);\n        } else {\n            result.push(result[result.len() -\
    \ 1] + 1);\n        }\n        odd = !odd;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 6]`,\n right: `[3, 5, 7]`', /tmp/tmprbksoe0w.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|level| 2*level - 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmp6elv_b5r.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    while res.last().unwrap() >\
    \ &1 {\n        let last = res.last().unwrap();\n        if last % 2 == 0 {\n\
    \            res.push(last - 1);\n        } else {\n            res.push(last\
    \ - 2);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpw1lmyjyi.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|x| x + (n - x) / 2).collect()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpg1g64v8p.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt4dl0n1j.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while pile.last().unwrap()\
    \ > &1 {\n        let last = pile.last().unwrap();\n        if last % 2 == 0 {\n\
    \            pile.push(last - 1);\n        } else {\n            pile.push(last\
    \ - 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpfet7n02v.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt4dl0n1j.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let n\
    \ = n as usize;\n    let mut v = vec![1];\n    let mut s = 3;\n    while v.len()\
    \ < n {\n        v.push(s);\n        s += 2;\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpn9vj0_vn.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    for i in 1..n {\n        res.push(if\
    \ i % 2 == 0 {\n            2 + res[i - 1]\n        } else {\n            2 +\
    \ res[i - 1] + 1\n        });\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2jrch4yi.rs:15:17\n\
    \   |\n15 |             2 + res[i - 1]\n   |                 ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2jrch4yi.rs:17:17\n   |\n17 |  \
    \           2 + res[i - 1] + 1\n   |                 ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!(\"Return a vector of the number of stones\
    \ in the i+1 th level, where i is the index of the vector.\");\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Return a vector of the number
    of stones in the i+1 th level, where i is the index of the vector.'', /tmp/tmpq8skz_fw.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut xs = vec![n];\n    let mut i = 1;\n    while i\
    \ < n {\n        xs.push(n - i);\n        i += 2;\n    }\n    xs\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpgbip_int.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut last = n;\n    while\
    \ last != 1 {\n        if last % 2 == 0 {\n            last += 1;\n        } else\
    \ {\n            last -= 1;\n        }\n        res.push(last);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975622
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut counter = n;\n    let mut result = vec![];\n  \
    \  while counter > 0 {\n        result.push(counter);\n        counter = match\
    \ counter % 2 {\n            0 => counter + 1,\n            _ => counter + 2,\n\
    \        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975622
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut level = n;\n   \
    \ while level > 1 {\n        if level % 2 == 0 {\n            level -= 1;\n  \
    \      } else {\n            level -= 2;\n        }\n        result.push(level);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpjmxoubkq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    while v.len() as isize != n {\n\
    \        let prev = v[v.len() - 1];\n        if prev % 2 == 0 {\n            v.push(prev\
    \ + 1);\n        } else {\n            v.push(prev + 2);\n        }\n    }\n \
    \   v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpo3kd_em3.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut i = n;\n    while\
    \ i > 1 {\n        if i % 2 == 0 {\n            i -= 1;\n        } else {\n  \
    \          i -= 2;\n        }\n        result.push(i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmptitqkgy4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut next = n;\n    let\
    \ mut i = 0;\n    while i < pile.len() {\n        if next % 2 == 0 {\n       \
    \     next += 1;\n        } else {\n            next += 2;\n        }\n      \
    \  pile.push(next);\n        i += 1;\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975622
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph06ddzkm.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975616
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    while result.last().unwrap()\
    \ != &1 {\n        let current = result.last().unwrap();\n        if current %\
    \ 2 == 0 {\n            result.push(current - 1);\n        } else {\n        \
    \    result.push(current + 1);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975622
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    while res.last().unwrap() >\
    \ &1 {\n        let prev = res.last().unwrap();\n        res.push(if prev % 2\
    \ == 0 {\n            prev + 1\n        } else {\n            prev + 2\n     \
    \   });\n    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975622
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut output = vec![n];\n    while output.last().unwrap()\
    \ > &0 {\n        output.push(\n            output\n                .last()\n\
    \                .unwrap()\n                .checked_sub(1)\n                .unwrap_or_else(||\
    \ panic!(\"subtraction failed\"))\n                .checked_sub(1)\n         \
    \       .unwrap_or_else(|| panic!(\"subtraction failed\")),\n        );\n    }\n\
    \    output.pop();\n    output.reverse();\n    output\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpkmhjte5q.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // This is too inefficient\n    let mut num_stones = vec![n];\n\
    \    let mut next_stone = if n % 2 == 0 { n + 1 } else { n + 2 };\n    while next_stone\
    \ < n * 2 {\n        num_stones.push(next_stone);\n        next_stone += 2;\n\
    \    }\n    num_stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpx3dsj0bx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..n + 1)\n        .scan(n, |next, _| {\n            let\
    \ result = *next;\n            if *next % 2 == 0 {\n                *next += 1;\n\
    \            } else {\n                *next += 2;\n            }\n          \
    \  Some(result)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpc1go66j3.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::with_capacity(n as usize);\n    let\
    \ mut num_stones = n;\n    while num_stones > 0 {\n        stones.push(num_stones);\n\
    \        if num_stones % 2 == 0 {\n            num_stones += 1;\n        } else\
    \ {\n            num_stones += 2;\n        }\n    }\n    stones\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975623
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|x| {\n        if x % 2 == 0 {\n          \
    \  x * 2\n        } else {\n            x * 2 - 1\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpkww_vgdf.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975617
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    while result.last().unwrap()\
    \ != &1 {\n        if *result.last().unwrap() % 2 == 0 {\n            result.push(result.last().unwrap()\
    \ + 1);\n        } else {\n            result.push(result.last().unwrap() - 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975623
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..).map(|i| n + i).take_while(|&i| i <= n).collect()\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmpfg9hz6cz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975618
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut count = n;\n   \
    \ while count > 1 {\n        if count % 2 == 0 {\n            count -= 1;\n  \
    \      } else {\n            count -= 2;\n        }\n        result.push(count);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmptiwlyhoj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975618
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    loop {\n        let stone\
    \ = pile.last().unwrap();\n        let next_stone = if *stone % 2 == 0 {\n   \
    \         *stone + 1\n        } else {\n            *stone + 2\n        };\n \
    \       if stone == &next_stone {\n            break;\n        }\n        pile.push(next_stone);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975623
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![n];\n    let mut number = n + 2;\n\
    \    while number <= n * n {\n        levels.push(number);\n        number +=\
    \ 2;\n    }\n    levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9]`,\n right: `[3, 5, 7]`', /tmp/tmpd197dp44.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975618
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|a| (a * 2) - 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpsngjzzry.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975618
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut s = n;\n    let mut r = vec![n];\n    while s >\
    \ 1 {\n        s = if s % 2 == 0 { s / 2 } else { (s / 2) + 1 };\n        r.push(s);\n\
    \    }\n    r\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpt9geb_28.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975619
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n    let mut\
    \ a = vec![n];\n    let mut k = n;\n    loop {\n        if k % 2 == 0 {\n    \
    \        k += 1;\n        } else {\n            k += 2;\n        }\n        if\
    \ k > n {\n            break;\n        }\n        a.push(k);\n    }\n    a\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpevu6jdig.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975619
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut a: Vec<isize> = Vec::new();\n    a.push(n);\n \
    \   let mut next_num = (n + 1) as isize;\n    while next_num > 0 {\n        a.push(next_num);\n\
    \        if next_num % 2 == 0 {\n            next_num -= 1;\n        } else {\n\
    \            next_num -= 2;\n        }\n    }\n    a\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpb15r2l0m.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975619
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut curr = n;\n    while\
    \ curr > 1 {\n        if curr % 2 == 0 {\n            curr = curr / 2;\n     \
    \   } else {\n            curr = (curr + 1) / 2;\n        }\n        res.push(curr);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpowquq864.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975619
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut next = if n % 2 ==\
    \ 0 { n + 1 } else { n + 2 };\n    while next <= n * 2 {\n        res.push(next);\n\
    \        next += 2;\n    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmphxhh9jfy.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975620
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut out = vec![n];\n    let mut i = n;\n    while i\
    \ > 1 {\n        if i % 2 == 0 {\n            i -= 1;\n        } else {\n    \
    \        i -= 2;\n        }\n        out.push(i);\n    }\n    out\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmptq6_lxdr.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975620
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut next = n;\n    while\
    \ next > 1 {\n        next = if next % 2 == 0 { next / 2 } else { next * 3 + 1\
    \ };\n        result.push(next);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 10, 5, 16, 8, 4, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmppwr8jjgd.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975620
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (0..n).map(|i| n + 2 * i + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 6, 8]`,\n right: `[3, 5, 7]`', /tmp/tmpe87n5p9t.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975620
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    while stones.last().unwrap()\
    \ != &1 {\n        let num = stones.last().unwrap();\n        stones.push(if num\
    \ % 2 == 0 { num - 1 } else { num + 1 });\n    }\n    stones\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975625
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).scan(n, |state, i| {\n        let v = *state;\n\
    \        *state = if i % 2 == 1 { v + 2 } else { v + 1 };\n        Some(v)\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 6]`,\n right: `[3, 5, 7]`', /tmp/tmp_wxo0zxk.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975620
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph06ddzkm.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut nn = n;\n    let mut v = Vec::new();\n    loop\
    \ {\n        v.push(nn);\n        if nn % 2 == 0 {\n            nn += 1;\n   \
    \     } else {\n            nn += 2;\n        }\n        if nn > n {\n       \
    \     break;\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmp3u_fb5rr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    vec![n]\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpp5u8liit.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975621
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ ans = vec![n];\n    while n > 1 {\n        n = if n % 2 == 0 { n + 1 } else\
    \ { n + 2 };\n        ans.push(n);\n    }\n    ans\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpkqett5mt.rs:17:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |         n = if n %\
    \ 2 == 0 { n + 1 } else { n + 2 };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659975621
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut curr = n;\n    loop\
    \ {\n        let next = if curr % 2 == 0 {\n            curr + 2\n        } else\
    \ {\n            curr + 1\n        };\n        if next < n {\n            break;\n\
    \        }\n        res.push(next);\n        curr = next;\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975626
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    while v.last().unwrap() != &1\
    \ {\n        v.push(if v.last().unwrap() % 2 == 0 {\n            v.last().unwrap()\
    \ - 1\n        } else {\n            v.last().unwrap() + 1\n        });\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975626
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let odd = |n| (n+1) * (n+1) - 1;\n    let even = |n| (n+1)\
    \ * (n+2) - 1;\n    let mut current = n;\n    let mut pile = vec![n];\n    while\
    \ current > 0 {\n        current = if current % 2 == 0 {\n            odd(current)\n\
    \        } else {\n            even(current)\n        };\n        pile.push(current);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to multiply with overflow'', /tmp/tmpgqcwmymt.rs:13:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut prev = n;\n    while\
    \ prev > 1 {\n        if prev % 2 == 0 {\n            prev -= 1;\n        } else\
    \ {\n            prev -= 2;\n        }\n        res.push(prev);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmppbvstm_0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975621
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while let Some(n) = pile.last()\
    \ {\n        let next = if n % 2 == 0 { n + 2 } else { n + 1 };\n        pile.push(next);\n\
    \    }\n    pile.pop();\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975626
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n\n    let\
    \ mut sequence = vec![n];\n    while sequence.last().unwrap() != &1 {\n      \
    \  let last = sequence.last().unwrap();\n        let next_number = if last % 2\
    \ == 0 {\n            last + 1\n        } else {\n            last - 1\n     \
    \   };\n        sequence.push(next_number);\n    }\n    sequence.pop();\n    sequence.reverse();\n\
    \    sequence\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975626
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    loop {\n        let mut next\
    \ = v[v.len() - 1] + 2;\n        if v[0] % 2 == 0 {\n            next -= 1;\n\
    \        }\n        if next > v[0] {\n            break;\n        }\n        v.push(next);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpmfzl9j_a.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    vec![3, 5, 7]\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7]`,\n right: `[4, 6, 8, 10]`', /tmp/tmphry4azu8.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut num = n;\n    while num\
    \ > 1 {\n        if num % 2 == 0 {\n            num -= 1;\n        } else {\n\
    \            num -= 2;\n        }\n        v.push(num);\n    }\n    v\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpq1_fk9gk.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975622
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    while result.last().unwrap()\
    \ > &1 {\n        let last = result.last().unwrap();\n        if last % 2 == 0\
    \ {\n            result.push(last - 1);\n        } else {\n            result.push(last\
    \ - 2);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpmebnemek.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975622
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut current = n;\n \
    \   while current > 1 {\n        let next = if current % 2 == 0 {\n          \
    \  current + 1\n        } else {\n            current + 2\n        };\n      \
    \  result.push(next);\n        current = next;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975627
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ret = vec![n];\n    let mut i = n + 1;\n    while\
    \ i > 0 {\n        i = if i % 2 == 0 { i + 1 } else { i + 2 };\n        ret.push(i);\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975627
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt4dl0n1j.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975617
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    loop {\n        let last =\
    \ *pile.last().unwrap();\n        if last == 1 {\n            break;\n       \
    \ }\n        let next = if last % 2 == 0 { last + 1 } else { last - 1 };\n   \
    \     pile.push(next);\n    }\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975627
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    let mut i = n;\n    while\
    \ i > 1 {\n        if i % 2 == 0 {\n            i = i - 1;\n        } else {\n\
    \            i = i - 2;\n        }\n        stones.push(i);\n    }\n    stones\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpufkm89t4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975622
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut count = n;\n    loop\
    \ {\n        if count == 1 {\n            break;\n        }\n        if count\
    \ % 2 == 0 {\n            count += 1;\n        } else {\n            count +=\
    \ 2;\n        }\n        pile.push(count);\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975627
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut stones = n;\n    while\
    \ stones > 1 {\n        stones = if stones % 2 == 0 {\n            stones / 2\n\
    \        } else {\n            (stones + 1) / 2\n        };\n        pile.push(stones);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpu65e2l7i.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975622
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut t = n;\n    let mut v = vec![];\n    while t >\
    \ 0 {\n        v.push(t);\n        t = if t % 2 == 0 { t + 1 } else { t + 2 };\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975627
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    vec![3, 5, 7]\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7]`,\n right: `[4, 6, 8, 10]`', /tmp/tmphry4azu8.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975621
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (0..n)\n        .map(|i| {\n            n + if i % 2 ==\
    \ 0 {\n                if n % 2 == 0 {\n                    0\n              \
    \  } else {\n                    1\n                }\n            } else {\n\
    \                if n % 2 == 0 {\n                    1\n                } else\
    \ {\n                    0\n                }\n            }\n        })\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmp_vlbnp89.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975622
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|n| 2 * n - 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpq768n4gv.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975622
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut last = n;\n    let mut\
    \ next = 0;\n    while next < n {\n        if last % 2 == 0 {\n            next\
    \ = last + 2;\n        } else {\n            next = last + 1;\n        }\n   \
    \     v.push(next);\n        last = next;\n    }\n    v\n}\n\nfn main() {\n  \
    \  let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmp8n91kugq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975622
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ pile = vec![];\n    let mut curr = n;\n    let mut next = if n % 2 == 0 {\n\
    \        n + 1\n    } else {\n        n + 2\n    };\n    while curr > 0 {\n  \
    \      pile.push(curr);\n        curr = next;\n        next = if next % 2 == 0\
    \ {\n            next + 1\n        } else {\n            next + 2\n        };\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975627
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut n = n;\n    while n >\
    \ 1 {\n        n = if n % 2 == 0 { n / 2 } else { n / 2 + 1 };\n        v.push(n);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpztojdunh.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975622
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ res = Vec::new();\n    let mut num = n;\n    res.push(num);\n    while num >\
    \ 1 {\n        num = if num % 2 == 0 { num + 1 } else { num + 2 };\n        res.push(num);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    loop {\n        let next\
    \ = if result.last().unwrap() % 2 == 0 {\n            result.last().unwrap() +\
    \ 1\n        } else {\n            result.last().unwrap() + 2\n        };\n  \
    \      if next <= n {\n            result.push(next);\n        } else {\n    \
    \        break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpnko7wob5.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // Your code here!\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4bgjj21k.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975623
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n    let mut\
    \ v = vec![n];\n    let mut level = n;\n    while level > 0 {\n        if level\
    \ % 2 == 0 {\n            level += 1;\n        } else {\n            level +=\
    \ 2;\n        }\n        v.push(level);\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        vec![]\n    } else {\n        let\
    \ mut result = vec![n];\n        let mut counter = if n % 2 == 0 { n + 1 } else\
    \ { n + 2 };\n        let mut multiplier = if n % 2 == 0 { 2 } else { 2 };\n \
    \       while counter <= n * n {\n            result.push(counter);\n        \
    \    counter += multiplier;\n            multiplier += 1;\n        }\n       \
    \ result\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 7, 10, 14]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpvtpxdbct.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut i = n;\n    loop {\n\
    \        if i == 1 {\n            break;\n        }\n        if i % 2 == 0 {\n\
    \            i += 1;\n        } else {\n            i += 2;\n        }\n     \
    \   res.push(i);\n    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    while v.len() < n as usize {\n\
    \        v.push(if v.last().unwrap() % 2 == 0 {\n            v.last().unwrap()\
    \ + 1\n        } else {\n            v.last().unwrap() + 2\n        });\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpskr67apg.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|i| i + n).collect()\n}\n\nfn main() {\n  \
    \  let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 6]`,\n right: `[3, 5, 7]`', /tmp/tmpb0cjjzl_.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut i = n;\n    while\
    \ i > 0 {\n        let level = if i % 2 == 0 { i + 2 } else { i + 1 };\n     \
    \   result.push(level);\n        i = level;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // TODO - you fill in here.\n    vec![]\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmps1its1vv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut next = if n % 2\
    \ == 0 { n + 1 } else { n + 2 };\n    while next > 1 {\n        result.push(next);\n\
    \        next = if next % 2 == 0 { next + 1 } else { next + 2 };\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|i| 2 * i - 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpo55q7hvi.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut current = n;\n \
    \   while current > 1 {\n        current = match current % 2 {\n            0\
    \ => current / 2,\n            _ => (current - 1) / 2,\n        };\n        result.push(current);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmphmpgkhk4.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|i| if i % 2 == 0 { 2 * i } else { 2 * i -\
    \ 1 }).collect()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 5]`,\n right: `[3, 5, 7]`', /tmp/tmptqvw2suz.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut n = n;\n    while\
    \ n > 0 {\n        n = if n % 2 == 0 { n + 1 } else { n + 2 };\n        result.push(n);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975628
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ result = vec![];\n    let mut idx = n;\n    while idx != 0 {\n        result.push(idx);\n\
    \        if idx % 2 == 0 {\n            idx -= 1;\n        } else {\n        \
    \    idx -= 2;\n        }\n    }\n    result.reverse();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975629
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut stones = n;\n    loop\
    \ {\n        if stones > 1 {\n            stones = if stones % 2 == 0 {\n    \
    \            stones / 2\n            } else {\n                (stones + 1) /\
    \ 2\n            };\n            pile.push(stones);\n        } else {\n      \
    \      break;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp60h8w_zq.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    ret.push(n);\n\
    \    for i in 1.. {\n        if i % 2 == 0 {\n            ret.push(ret[i - 1]\
    \ + 2);\n        } else {\n            ret.push(ret[i - 1] + 1);\n        }\n\
    \        if ret[i] == n {\n            return ret;\n        }\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975628
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n);\n   \
    \ while n > 1 {\n        if n % 2 == 0 {\n            stones.push(n - 1);\n  \
    \          n -= 1;\n        } else {\n            stones.push(n - 2);\n      \
    \      n -= 2;\n        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpdbc1jocr.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n -= 1;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpdbc1jocr.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n -= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1659975623
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut i = n;\n    while\
    \ i > 0 {\n        i = if i % 2 == 0 { i / 2 } else { (i - 1) / 2 };\n       \
    \ pile.push(i);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmp49s_vush.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975624
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut i = n;\n    while\
    \ i >= 1 {\n        stones.push(i);\n        if i % 2 == 0 {\n            i +=\
    \ 1;\n        } else {\n            i += 2;\n        }\n    }\n    stones\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975629
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    while result.last().unwrap()\
    \ != &1 {\n        let last = result.last().unwrap();\n        if last % 2 ==\
    \ 0 {\n            result.push(last - 1);\n        } else {\n            result.push(last\
    \ + 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975629
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while let Some(x) = pile.last()\
    \ {\n        if *x == 1 {\n            break;\n        }\n        pile.push(if\
    \ *x % 2 == 0 { x + 1 } else { x + 2 });\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975629
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while pile.last().unwrap()\
    \ != &1 {\n        pile.push(if pile.last().unwrap() % 2 == 0 {\n            pile.last().unwrap()\
    \ + 1\n        } else {\n            pile.last().unwrap() - 1\n        });\n \
    \   }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975629
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!(\"Make a pile of {} levels of stones\",\
    \ n);\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Make a pile of 3 levels
    of stones'', /tmp/tmpi_5bpg_5.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975626
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ vec = vec![n];\n    let mut j = n;\n    loop {\n        if j % 2 == 0 {\n  \
    \          j += 1;\n        } else {\n            j += 2;\n        }\n       \
    \ vec.push(j);\n        if j <= 1 {\n            break;\n        }\n    }\n  \
    \  vec\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975632
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut curr = n;\n    while\
    \ curr != 1 {\n        if curr % 2 == 0 {\n            curr += 1;\n        } else\
    \ {\n            curr -= 1;\n        }\n        pile.push(curr);\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975632
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n\n    let\
    \ mut piles = vec![n];\n    let mut current = n;\n    while piles.len() < 100\
    \ {\n        if current % 2 == 0 {\n            current += 1;\n        } else\
    \ {\n            current += 2;\n        }\n        piles.push(current);\n    }\n\
    \    piles\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41,\
    \ 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79,\
    \ 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115,\
    \ 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147,\
    \ 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179,\
    \ 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201]`,\n right: `[3, 5, 7]`',\
    \ /tmp/tmp82ux4916.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659975627
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n\n    let\
    \ mut next = if n % 2 == 0 {\n        n + 2\n    } else {\n        n + 1\n   \
    \ };\n\n    let mut result = vec![n];\n\n    while next > 2 {\n        result.push(next);\n\
    \        next = if next % 2 == 0 {\n            next + 2\n        } else {\n \
    \           next + 1\n        };\n    }\n\n    result.push(2);\n\n    result\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975632
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    let mut next = n;\n    loop\
    \ {\n        next = if next % 2 == 0 { next + 1 } else { next + 2 };\n       \
    \ stones.push(next);\n        if next >= n * 2 {\n            break;\n       \
    \ }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpouni73_3.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975627
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    while result.last().unwrap()\
    \ > &1 {\n        result.push(if result.last().unwrap() % 2 == 0 {\n         \
    \   result.last().unwrap() - 1\n        } else {\n            result.last().unwrap()\
    \ - 2\n        });\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpyif55ufc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975627
- exit_code: 0
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let v = (0..n).into_iter().map(|x| {\n        match x {\n\
    \            0 => n,\n            x => n + 2 * x,\n        }\n    });\n    let\
    \ mut res = vec![];\n    for x in v {\n        res.push(x);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975627
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    vec![n, n + 2, n + 4]\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 6, 8]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpr7ow6rqt.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n    let mut\
    \ result = vec![n];\n    let mut last = n;\n    while last > 1 {\n        if last\
    \ % 2 == 0 {\n            last = last - 1;\n        } else {\n            last\
    \ = last - 2;\n        }\n        result.push(last);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpptxhjt9z.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975627
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    match n {\n        n if n <= 0 => vec![],\n        n =>\
    \ {\n            let mut v = vec![n];\n            let next = match n % 2 {\n\
    \                1 => n + 2,\n                _ => n + 1,\n            };\n  \
    \          v.append(&mut make_a_pile(next));\n            v\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975633
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut n = n;\n    while\
    \ n > 0 {\n        if n % 2 == 0 {\n            n += 1;\n        } else {\n  \
    \          n += 2;\n        }\n        result.push(n);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975633
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones: Vec<isize> = Vec::new();\n    let mut start:\
    \ isize = n;\n    while start > 0 {\n        stones.push(start);\n        if start\
    \ % 2 == 0 {\n            start -= 1;\n        } else {\n            start -=\
    \ 2;\n        }\n    }\n    stones.reverse();\n    stones\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpqukp083g.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while pile.last().unwrap()\
    \ != &1 {\n        let last = pile.last().unwrap();\n        pile.push(if last\
    \ % 2 == 0 { last + 1 } else { last - 1 });\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975633
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut out = vec![n];\n    let mut current = n;\n    loop\
    \ {\n        let next = if current % 2 == 0 {\n            current + 2\n     \
    \   } else {\n            current + 1\n        };\n        out.push(next);\n \
    \       current = next;\n        if current > 100 {\n            break;\n    \
    \    }\n    }\n    out\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,\
    \ 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,\
    \ 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102]`,\n right: `[3, 5, 7]`', /tmp/tmpgrukb790.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut arr = vec![n];\n    let mut i = 0;\n    while i\
    \ < n {\n        if i % 2 == 0 {\n            arr.push(arr[i] + 2);\n        }\
    \ else {\n            arr.push(arr[i] + 1);\n        }\n        i += 1;\n    }\n\
    \    arr\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8m_hzr_a.rs:16:22\n\
    \   |\n16 |             arr.push(arr[i] + 2);\n   |                      ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8m_hzr_a.rs:18:22\n\
    \   |\n18 |             arr.push(arr[i] + 1);\n   |                      ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975627
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    let mut i = n;\n    while\
    \ i > 1 {\n        i = if i % 2 == 0 { i / 2 } else { (i / 2) + 1 };\n       \
    \ result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp_9tc64gx.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // TODO\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpof56u0oa.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut arr = vec![n];\n    while arr.last().unwrap() !=\
    \ &1 {\n        let next = if arr.last().unwrap() % 2 == 0 {\n            arr.last().unwrap()\
    \ - 1\n        } else {\n            arr.last().unwrap() - 2\n        };\n   \
    \     arr.push(next);\n    }\n    arr\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp_q6a43s2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut cur = n;\n    loop\
    \ {\n        cur = if cur % 2 == 0 { cur + 1 } else { cur + 2 };\n        if cur\
    \ > n * 2 {\n            break;\n        }\n        res.push(cur);\n    }\n  \
    \  res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpmdvvs90o.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..n+1).map(|x| 2*x+1).collect()\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpfv8yi8fi.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).map(|x| 2 * x - 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmp26gumroe.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph06ddzkm.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975616
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ans = vec![n];\n    let mut start = n + (n % 2)\
    \ + 1;\n    for _ in 0..n {\n        ans.push(start);\n        start += 2;\n \
    \   }\n    ans\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9]`,\n right: `[3, 5, 7]`', /tmp/tmp3wnwsnbd.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while pile.last().unwrap()\
    \ != &1 {\n        if pile.last().unwrap() % 2 == 0 {\n            pile.push(pile.last().unwrap()\
    \ - 1);\n        } else {\n            pile.push(pile.last().unwrap() - 2);\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpxyvp0yz1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ result = vec![];\n    let mut current = n;\n    while current > 0 {\n      \
    \  result.push(current);\n        current = next_odd_even(current);\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `next_odd_even` in this scope\n  -->\
    \ /tmp/tmpk2nz81d1.rs:19:19\n   |\n19 |         current = next_odd_even(current);\n\
    \   |                   ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (1..=n).scan(n, |state, _| {\n        let old = *state;\n\
    \        *state = if old % 2 == 0 { old + 1 } else { old + 2 };\n        Some(old)\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpb4tyuuiy.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    let mut next = n;\n    while\
    \ next != 1 {\n        next = if next % 2 == 0 {\n            next / 2\n     \
    \   } else {\n            (next - 1) / 2\n        };\n        res.push(next);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpvtkl2lap.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!(\"make a pile of {} levels\", n);\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: make a pile of 3 levels'',
    /tmp/tmpwhiuaqjx.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while pile.last().unwrap()\
    \ >= &2 {\n        let last = pile.last().unwrap() - 1;\n        pile.push(if\
    \ last % 2 == 0 { last - 1 } else { last });\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpsx21fp1i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while i >\
    \ 1 {\n        i = if i % 2 == 0 { i / 2 } else { i * 3 + 1 };\n        v.push(i);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 10, 5, 16, 8, 4, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpgeg382sk.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975629
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n    let (mut\
    \ v, mut i) = (vec![n], n);\n    while i > 1 {\n        if i % 2 == 0 {\n    \
    \        i = i / 2;\n        } else {\n            i = (i - 1) / 2;\n        }\n\
    \        v.push(i);\n    }\n    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp4fszfp45.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975628
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let next_odd = |n: isize| 2 * n + 1;\n    let next_even\
    \ = |n: isize| 2 * n + 2;\n    let next = |n: isize| if n % 2 == 0 { next_even(n)\
    \ } else { next_odd(n) };\n    let mut ans = vec![n];\n    let mut num = n;\n\
    \    loop {\n        num = next(num);\n        if num > n {\n            break;\n\
    \        }\n        ans.push(num);\n    }\n    ans\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpiphumvue.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975629
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt4dl0n1j.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975617
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    let mut\
    \ v = make_a_pile(n - 1);\n    v.push(if n % 2 == 0 { n + 1 } else { n + 2 });\n\
    \    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpxtcz43mq.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975629
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    while pile.last().unwrap()\
    \ != &1 {\n        let x = pile.last().unwrap();\n        pile.push(if x % 2 ==\
    \ 0 { x + 1 } else { x - 1 });\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975634
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    (0..n).scan(n, |state, _| {\n        let number = *state;\n\
    \        if number % 2 == 0 {\n            *state = number + 1;\n        } else\
    \ {\n            *state = number + 2;\n        }\n        Some(number)\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 7, 9]`,\n right: `[4, 6, 8, 10]`', /tmp/tmpctzs1k55.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975629
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n];\n    let mut a = if n % 2 == 0 { 2\
    \ } else { 1 };\n    while a < n {\n        v.push(a);\n        a += 2;\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpkqird9mf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975629
