name: HumanEval_79_decimal_to_binary
language: rs
prompt: "/// You will be given a number in decimal form and your task is to convert\
  \ it to\n/// binary format. The function should return a string, with each character\
  \ representing a binary\n/// number. Each character in the string will be '0' or\
  \ '1'.\n/// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n/// The extra characters are there to help with the\
  \ format.\n/// Examples:\n/// >>> decimal_to_binary(15)\n/// String::from(\"db1111db\"\
  )\n/// >>> decimal_to_binary(32)\n/// String::from(\"db100000db\")\nfn decimal_to_binary(decimal:\
  \ isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
  \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
  ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
  \ String::from(\"db1111db\"));\n}\n"
completions: ['    format!("db{:b}db", decimal)', "    // TODO\n    \"\".to_string()",
  '    format!("db{:b}db", decimal)', '    format!("db{:b}db", decimal)', "    let\
    \ mut binary: String = String::from(\"db\");\n    if decimal == 0 {\n        binary.push('0');\n\
    \    } else {\n        let mut dec = decimal;\n        let base = 2;\n       \
    \ while dec > 0 {\n            binary.push_str(&format!(\"{}\", dec % base));\n\
    \            dec /= base;\n        }\n    }\n    binary.push('d');\n    binary.push('b');\n\
    \    binary.chars().rev().collect()", "    fn helper(decimal: isize, result: &mut\
    \ String) {\n        if decimal < 2 {\n            result.push_str(&format!(\"\
    {}\", decimal));\n            return;\n        }\n        helper(decimal / 2,\
    \ result);\n        result.push_str(&format!(\"{}\", decimal % 2));\n    }\n \
    \   let mut result = String::from(\"db\");\n    helper(decimal, &mut result);\n\
    \    result.push_str(\"db\");\n    result", '    unimplemented!();', "    let\
    \ mut res = String::from(\"db\");\n    let mut tmp = decimal;\n    while tmp >\
    \ 0 {\n        let rem = tmp % 2;\n        tmp = tmp / 2;\n        res.push_str(&rem.to_string());\n\
    \    }\n    res.push_str(\"db\");\n    res", "    let mut binary = String::from(\"\
    db\");\n    let mut rest = decimal;\n    while rest > 0 {\n        binary.push(match\
    \ rest % 2 {\n            0 => '0',\n            1 => '1',\n            _ => '?',\n\
    \        });\n        rest /= 2;\n    }\n    let mut length = binary.len();\n\
    \    if length < 2 {\n        binary.push('0');\n        length += 1;\n    }\n\
    \    binary.push_str(&String::from(\"db\"));\n    length += 2;\n    let mut binary\
    \ = binary.chars().collect::<Vec<char>>();\n    for _ in 0..length / 2 {\n   \
    \     let front = binary.pop().unwrap();\n        let back = binary.remove(0);\n\
    \        binary.insert(0, front);\n        binary.push(back);\n    }\n    binary.iter().collect()",
  "    let mut str: String = String::from(\"db\");\n    let mut num = decimal;\n \
    \   while num > 0 {\n        if num % 2 == 0 {\n            str.push('0');\n \
    \       } else {\n            str.push('1');\n        }\n        num /= 2;\n \
    \   }\n    str.push_str(\"db\");\n    str.chars().rev().collect()", "    // add\
    \ the 'db' part at the beginning\n    let mut binary = String::from(\"db\");\n\
    \    // you can use .push_str() to add characters to a string one at a time\n\
    \    // for each number in the binary string we'll check if the current number\
    \ is 1 or 0\n    // at each iteration we'll remove the last digit of the decimal\
    \ and add a 1 or 0 to the binary string\n    while decimal > 0 {\n        if decimal\
    \ % 2 == 0 {\n            binary.push_str(\"0\");\n        } else {\n        \
    \    binary.push_str(\"1\");\n        }\n        decimal /= 2;\n    }\n    //\
    \ add the 'db' part at the end\n    binary.push_str(\"db\");\n    binary", " \
    \   let mut result = String::from(\"db\");\n    let mut decimal = decimal;\n \
    \   while decimal > 0 {\n        result.push_str(&format!(\"{}\", decimal % 2));\n\
    \        decimal /= 2;\n    }\n    result.push_str(\"db\");\n    result", "  \
    \  let mut decimal = decimal;\n    let mut binary = String::from(\"db\");\n  \
    \  while decimal > 0 {\n        let remainder = decimal % 2;\n        decimal\
    \ = decimal / 2;\n        binary.push_str(&remainder.to_string());\n    }\n  \
    \  binary.push_str(\"db\");\n    binary.chars().rev().collect()", "    let mut\
    \ result = String::from(\"db\");\n    let mut dec = decimal;\n    while dec >\
    \ 0 {\n        let bin = dec % 2;\n        result.push_str(&bin.to_string());\n\
    \        dec /= 2;\n    }\n    result.push_str(\"db\");\n    result", '    format!("db{:b}db",
    decimal)', "    let mut binary = String::from(\"db\");\n    let mut number = decimal;\n\
    \    let mut result = String::new();\n    loop {\n        if number == 0 {\n \
    \           break;\n        }\n        result.push_str(&(number % 2).to_string());\n\
    \        number /= 2;\n    }\n    result.chars().rev().for_each(|x| binary.push(x));\n\
    \    binary.push('d');\n    binary.push('b');\n    binary", '    format!("db{:08b}db",
    decimal)', '    format!("db{:b}db", decimal)', "    // There is an extra couple\
    \ of characters ('db') at the beginning and at the end of the string.\n    //\
    \ The extra characters are there to help with the format.\n    let mut binary\
    \ = String::from(\"db\");\n    let mut number = decimal;\n    loop {\n       \
    \ if number == 0 {\n            break;\n        }\n        binary.push_str(&(number\
    \ % 2).to_string());\n        number /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()", "    let mut res = String::from(\"db\"\
    );\n    let mut decimal = decimal;\n    while decimal != 0 {\n        let remainder\
    \ = decimal % 2;\n        res.push_str(&remainder.to_string());\n        decimal\
    \ /= 2;\n    }\n    res.push_str(\"db\");\n    res"]
stop_tokens:
- "\n}"
