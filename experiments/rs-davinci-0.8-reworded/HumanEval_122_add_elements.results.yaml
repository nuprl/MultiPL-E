language: rs
name: HumanEval_122_add_elements
results:
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let element = arr[i as usize];\n\
    \        if element.abs() < 10 || element.abs() > -100 {\n            sum += element;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `232`,\n right: `0`', /tmp/tmp5bnoz689.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut arr: Vec<isize> = arr;\n    arr.sort();\n    let mut result = 0;\n    for\
    \ i in 0..k {\n        if arr[i as usize] > 99 {\n            continue;\n    \
    \    }\n        result += arr[i as usize];\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmp_41ezxno.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for n in arr.iter().take(k as usize) {\n        if n > &99\
    \ {\n            sum += 99;\n        } else {\n            sum += n;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmpaqj8ti44.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    if\
    \ k == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in 0..k\
    \ {\n        if arr[i as usize] <= 99 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, &a) in arr.iter().enumerate() {\n        if i >= k\
    \ as usize {\n            break;\n        }\n        if a < 100 {\n          \
    \  sum += a;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut ret = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        ret += arr[i as usize];\n        }\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    if\
    \ k <= 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in 0..k\
    \ {\n        if arr[i as usize] >= 10 && arr[i as usize] < 100 {\n           \
    \ sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmptvddsq4l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let element = arr[i as usize];\n\
    \        if element > 9 && element < 100 {\n            sum += element;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpm798dn6h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x < &100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for &n in arr.iter().take(k as usize) {\n        if n >=\
    \ 0 && n < 100 {\n            result += n;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp0kf5xn1x.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, num) in arr.iter().enumerate() {\n        let mut\
    \ digits = 0;\n        let mut num = *num;\n        while num > 0 {\n        \
    \    num /= 10;\n            digits += 1;\n        }\n        if digits < 3 {\n\
    \            sum += num;\n        }\n        if i + 1 == k as usize {\n      \
    \      break;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-5`,\n right: `-4`', /tmp/tmpqeslexj8.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ vec_len = arr.len();\n    let mut sum = 0;\n    for i in 0..vec_len {\n    \
    \    let num = arr[i];\n        if num < 100 {\n            sum += num;\n    \
    \    }\n        if i + 1 == k as usize {\n            break;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for item in arr.iter().take(k as usize) {\n        if item\
    \ < &10 || item > &99 {\n            result += item;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `232`,\n right: `0`', /tmp/tmpl7nxktt8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] <= 99 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut new_arr = arr.clone();\n    new_arr.sort();\n    new_arr.iter().take(k as\
    \ usize).filter(|&n| n < 100).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpccqkrv_f.rs:12:53\n   |\n\
    12 |     new_arr.iter().take(k as usize).filter(|&n| n < 100).sum()\n   |    \
    \                                                 ^^^\n   |                  \
    \                                   |\n   |                                  \
    \                   expected `&isize`, found integer\n   |                   \
    \                                  help: consider borrowing here: `&100`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ sum: isize = arr.iter().filter(|&x| x <= &99).take(k as usize).sum();\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmpo2hp2n6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for elem in arr.iter().take(k as usize) {\n        if elem\
    \ >= &100 {\n            continue;\n        } else {\n            sum += elem;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
