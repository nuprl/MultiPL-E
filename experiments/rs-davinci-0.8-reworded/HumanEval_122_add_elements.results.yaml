language: rs
name: HumanEval_122_add_elements
results:
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let element = arr[i as usize];\n\
    \        if element.abs() < 10 || element.abs() > -100 {\n            sum += element;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `232`,\n right: `0`', /tmp/tmp5bnoz689.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut arr: Vec<isize> = arr;\n    arr.sort();\n    let mut result = 0;\n    for\
    \ i in 0..k {\n        if arr[i as usize] > 99 {\n            continue;\n    \
    \    }\n        result += arr[i as usize];\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmp_41ezxno.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for n in arr.iter().take(k as usize) {\n        if n > &99\
    \ {\n            sum += 99;\n        } else {\n            sum += n;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmpaqj8ti44.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    if\
    \ k == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in 0..k\
    \ {\n        if arr[i as usize] <= 99 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, &a) in arr.iter().enumerate() {\n        if i >= k\
    \ as usize {\n            break;\n        }\n        if a < 100 {\n          \
    \  sum += a;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut ret = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        ret += arr[i as usize];\n        }\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    if\
    \ k <= 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in 0..k\
    \ {\n        if arr[i as usize] >= 10 && arr[i as usize] < 100 {\n           \
    \ sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmptvddsq4l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let element = arr[i as usize];\n\
    \        if element > 9 && element < 100 {\n            sum += element;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpm798dn6h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x < &100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for &n in arr.iter().take(k as usize) {\n        if n >=\
    \ 0 && n < 100 {\n            result += n;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp0kf5xn1x.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, num) in arr.iter().enumerate() {\n        let mut\
    \ digits = 0;\n        let mut num = *num;\n        while num > 0 {\n        \
    \    num /= 10;\n            digits += 1;\n        }\n        if digits < 3 {\n\
    \            sum += num;\n        }\n        if i + 1 == k as usize {\n      \
    \      break;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-5`,\n right: `-4`', /tmp/tmpqeslexj8.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ vec_len = arr.len();\n    let mut sum = 0;\n    for i in 0..vec_len {\n    \
    \    let num = arr[i];\n        if num < 100 {\n            sum += num;\n    \
    \    }\n        if i + 1 == k as usize {\n            break;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for item in arr.iter().take(k as usize) {\n        if item\
    \ < &10 || item > &99 {\n            result += item;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `232`,\n right: `0`', /tmp/tmpl7nxktt8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] <= 99 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut new_arr = arr.clone();\n    new_arr.sort();\n    new_arr.iter().take(k as\
    \ usize).filter(|&n| n < 100).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpccqkrv_f.rs:12:53\n   |\n\
    12 |     new_arr.iter().take(k as usize).filter(|&n| n < 100).sum()\n   |    \
    \                                                 ^^^\n   |                  \
    \                                   |\n   |                                  \
    \                   expected `&isize`, found integer\n   |                   \
    \                                  help: consider borrowing here: `&100`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ sum: isize = arr.iter().filter(|&x| x <= &99).take(k as usize).sum();\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmpo2hp2n6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for elem in arr.iter().take(k as usize) {\n        if elem\
    \ >= &100 {\n            continue;\n        } else {\n            sum += elem;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut k = k;\n    let mut sum = 0;\n    for x in arr {\n        if k == 0 {\n\
    \            break;\n        }\n        if x < 100 {\n            sum += x;\n\
    \        }\n        k -= 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for &num in arr.iter().take(k as usize) {\n        if num\
    \ >= 100 {\n            continue;\n        }\n        sum += num;\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let elem = arr[i as usize];\n   \
    \     if elem >= 100 || elem < 0 {\n            continue;\n        }\n       \
    \ sum += elem;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp_oqwiiv5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for &n in arr.iter().take(k as usize) {\n        if n >= 10\
    \ && n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpjhz8e665.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for v in arr.iter().take(k as usize) {\n        if *v < 100\
    \ {\n            sum += *v;\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut elements = vec![];\n    for elem in arr.iter().take(k as usize) {\n    \
    \    if elem.to_string().len() <= 2 {\n            elements.push(elem.clone());\n\
    \        }\n    }\n    elements.iter().sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n \
    \           result += arr[i as usize];\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|x| **x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let elem = arr[i as usize];\n   \
    \     if elem >= 10 && elem < 100 {\n            sum += elem;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpun4_z5et.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ total = arr.iter().take(k as usize).filter(|&i| i >= 10 && i < 100).sum();\n\
    \    total\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk07ve84n.rs:10:62\n   |\n\
    10 |     let total = arr.iter().take(k as usize).filter(|&i| i >= 10 && i < 100).sum();\n\
    \   |                                                              ^^\n   |  \
    \                                                            |\n   |         \
    \                                                     expected `&isize`, found\
    \ integer\n   |                                                              help:\
    \ consider borrowing here: `&10`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk07ve84n.rs:10:72\n\
    \   |\n10 |     let total = arr.iter().take(k as usize).filter(|&i| i >= 10 &&\
    \ i < 100).sum();\n   |                                                      \
    \                  ^^^\n   |                                                 \
    \                       |\n   |                                              \
    \                          expected `&isize`, found integer\n   |            \
    \                                                            help: consider borrowing\
    \ here: `&100`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, x) in arr.iter().enumerate() {\n        if i == k\
    \ as usize {\n            break;\n        }\n        if *x >= 100 || *x <= -100\
    \ {\n            continue;\n        }\n        sum += x;\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for &v in arr.iter().take(k as usize) {\n        if v < 10\
    \ {\n            sum += v;\n        } else if v < 100 {\n            sum += v\
    \ / 10 + v % 10;\n        } else {\n            sum += v / 100 + (v / 10) % 10\
    \ + v % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpnlxxwp8a.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (index, elem) in arr.iter().enumerate() {\n        if\
    \ index > k as usize {\n            break;\n        }\n\n        if elem >= &100\
    \ || elem <= &-100 {\n            continue;\n        }\n\n        sum += elem;\n\
    \    }\n\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `37`,\n right: `-4`', /tmp/tmplexhin79.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    if\
    \ k <= 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in 0..arr.len()\
    \ {\n        let x = arr[i];\n        if x < 100 {\n            sum += x;\n  \
    \      }\n        if i == k as usize - 1 {\n            break;\n        }\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut res = 0;\n    for (i, &x) in arr.iter().enumerate() {\n        if i < k\
    \ as usize && x < 100 {\n            res += x;\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x >= 10 && x < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmm6d9p5l.rs:10:50\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&x| x >= 10 && x < 100).sum()\n \
    \  |                                                  ^^\n   |               \
    \                                   |\n   |                                  \
    \                expected `&isize`, found integer\n   |                      \
    \                            help: consider borrowing here: `&10`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmm6d9p5l.rs:10:60\n   |\n10 |     arr.iter().take(k\
    \ as usize).filter(|&x| x >= 10 && x < 100).sum()\n   |                      \
    \                                      ^^^\n   |                             \
    \                               |\n   |                                      \
    \                      expected `&isize`, found integer\n   |                \
    \                                            help: consider borrowing here: `&100`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for element in arr.iter().take(k as usize) {\n        let\
    \ str_elem = element.to_string();\n        if str_elem.len() <= 2 {\n        \
    \    result += element;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).map(|&x| if x > 99 { 0 } else { x }).sum()\n}\n\nfn main() {\n   \
    \ let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|x| *x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp80_9ydx0.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|x| *x < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num >= 10 && num < 100 {\n            sum += num;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpl60ddvzc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n \
    \       if num / 10 == 0 || num / 100 == 0 {\n            result += num;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for elem in arr {\n        if elem < 100 {\n            sum\
    \ += elem;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `444`,\n right: `-4`', /tmp/tmpw2_s6006.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ initialize answer variable\n    let mut answer: isize = 0;\n    // add the first\
    \ k integers\n    for i in 0..k {\n        // check if the number is two digits\
    \ or less\n        if arr[i as usize] < 100 {\n            // add to answer\n\
    \            answer += arr[i as usize];\n        }\n    }\n    // return answer\n\
    \    answer\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for v in arr {\n        if v < 100 {\n            sum += v;\n\
    \        }\n        if k == 0 {\n            break;\n        }\n        k -= 1;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `k`\n  --> /tmp/tmpgwcmsafm.rs:18:9\n\
    \   |\n9  | fn add_elements(arr: Vec<isize>, k: isize) -> isize {\n   |      \
    \                            - help: consider making this binding mutable: `mut\
    \ k`\n...\n18 |         k -= 1;\n   |         ^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().filter(|&n|\
    \ n < 100).take(k as usize).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpel39f571.rs:10:32\n   |\n\
    10 |     arr.iter().filter(|&n| n < 100).take(k as usize).sum()\n   |        \
    \                        ^^^\n   |                                |\n   |    \
    \                            expected `&isize`, found integer\n   |          \
    \                      help: consider borrowing here: `&100`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let element = arr[i as usize];\n\
    \        if element < 100 {\n            sum += element;\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ The code must be here..\n    let mut sum = 0;\n    for i in 0..k {\n       \
    \ if arr[i as usize] <= 99 {\n            sum += arr[i as usize];\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).fold(0, |sum, &x| sum + (x / 10).abs() % 10 + (x / 100).abs() % 10)\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpkqxnnajg.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut arr = arr;\n    arr.sort();\n    let count = if k >= arr.len() as isize\
    \ {\n        arr.len()\n    } else {\n        k as usize\n    };\n    arr[..count].iter().fold(0,\
    \ |mut acc, x| {\n        if *x > 99 {\n            acc += *x / 100;\n       \
    \ } else if *x > 9 {\n            acc += *x / 10;\n        } else {\n        \
    \    acc += *x;\n        }\n        acc\n    })\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmp_600dxbl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for n in arr {\n        if n <= 99 {\n            sum += n;\n\
    \        }\n        if sum == k {\n            break;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `444`,\n right: `-4`', /tmp/tmpbib17tq2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().filter(|&x|\
    \ *x < 100).take(k as usize).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmpp9i_3qau.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x.abs() < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut s = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n      \
    \      s += arr[i as usize];\n        }\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|x| *x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp80_9ydx0.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|x| *x < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num / 10 == 0 || num / 100 == 0 {\n            sum += num;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //let\
    \ mut answer = 0;\n    //for i in 0..k {\n    //    let cur = arr[i as usize];\n\
    \    //    if cur > 99 {\n    //        answer += 99;\n    //    } else {\n  \
    \  //        answer += cur;\n    //    }\n    //}\n    //answer\n    arr.iter().take(k\
    \ as usize).map(|&x| min(x, 99)).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmprfi2tzab.rs:20:42\n\
    \   |\n20 |     arr.iter().take(k as usize).map(|&x| min(x, 99)).sum()\n   | \
    \                                         ^^^\n...\n23 | fn main() {\n   | ---------\
    \ similarly named function `main` defined here\n   |\nhelp: a function with a\
    \ similar name exists\n   |\n20 |     arr.iter().take(k as usize).map(|&x| main(x,\
    \ 99)).sum()\n   |                                          ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] <= 99 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, num) in arr.iter().enumerate() {\n        if i ==\
    \ k as usize {\n            break;\n        }\n\n        if num < 100 {\n    \
    \        sum += num;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxq4s1v09.rs:16:18\n   |\n\
    16 |         if num < 100 {\n   |                  ^^^\n   |                 \
    \ |\n   |                  expected `&isize`, found integer\n   |            \
    \      help: consider borrowing here: `&100`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).map(|e| add_digits(*e)).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `add_digits` in this scope\n  --> /tmp/tmpzmblmhk5.rs:10:41\n\
    \   |\n10 |     arr.iter().take(k as usize).map(|e| add_digits(*e)).sum()\n  \
    \ |                                         ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ 24 min\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ >= 10 && arr[i as usize] < 100 {\n            sum += arr[i as usize];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpe7u0hqpu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n      \
    \  if n < 10 {\n            sum += n;\n        } else if n < 100 {\n         \
    \   sum += n % 10 + n / 10;\n        } else {\n            sum += 3;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `0`', /tmp/tmpwpsi9odp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut elements = arr.into_iter().take(k as usize).filter(|x| *x > 10 && *x < 100);\n\
    \    elements.sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpz6uh46g1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut i = 0;\n    let mut sum = 0;\n    while i < k && i < arr.len() as isize\
    \ {\n        let mut num = arr[i as usize];\n        while num > 9 {\n       \
    \     num /= 10;\n        }\n        sum += num;\n        i += 1;\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmps5rjp24e.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ two_digits = |x: &isize| x.to_string().len() <= 2;\n    arr.iter().take(k as\
    \ usize).filter(two_digits).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0631]: type mismatch in closure arguments\n   --> /tmp/tmp9tu3o59j.rs:11:40\n\
    \    |\n10  |     let two_digits = |x: &isize| x.to_string().len() <= 2;\n   \
    \ |                      ------------------------------------ found signature\
    \ of `for<'r> fn(&'r isize) -> _`\n11  |     arr.iter().take(k as usize).filter(two_digits).sum()\n\
    \    |                                 ------ ^^^^^^^^^^ expected signature of\
    \ `for<'r> fn(&'r &isize) -> _`\n    |                                 |\n   \
    \ |                                 required by a bound introduced by this call\n\
    \    |\nnote: required by a bound in `filter`\n\nerror[E0599]: the method `sum`\
    \ exists for struct `Filter<std::iter::Take<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp9tu3o59j.rs:10:22:\
    \ 10:58]>`, but its trait bounds were not satisfied\n  --> /tmp/tmp9tu3o59j.rs:11:52\n\
    \   |\n10 |       let two_digits = |x: &isize| x.to_string().len() <= 2;\n   |\
    \                        ------------------------------------\n   |          \
    \              |\n   |                        doesn't satisfy `<_ as FnOnce<(&&isize,)>>::Output\
    \ = bool`\n   |                        doesn't satisfy `_: FnMut<(&&isize,)>`\n\
    11 |       arr.iter().take(k as usize).filter(two_digits).sum()\n   |        \
    \                                              ^^^ method cannot be called on\
    \ `Filter<std::iter::Take<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp9tu3o59j.rs:10:22:\
    \ 10:58]>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<[closure@/tmp/tmp9tu3o59j.rs:10:22:\
    \ 10:58] as FnOnce<(&&isize,)>>::Output = bool`\n           which is required\
    \ by `Filter<std::iter::Take<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp9tu3o59j.rs:10:22:\
    \ 10:58]>: Iterator`\n           `[closure@/tmp/tmp9tu3o59j.rs:10:22: 10:58]:\
    \ FnMut<(&&isize,)>`\n           which is required by `Filter<std::iter::Take<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmp9tu3o59j.rs:10:22: 10:58]>: Iterator`\n          \
    \ `Filter<std::iter::Take<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp9tu3o59j.rs:10:22:\
    \ 10:5"
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&n| n < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnf8vjhgj.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&n| n < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut total = 0;\n    for i in 0..k {\n        let current = arr[i as usize];\n\
    \        if current < 100 {\n            total += current;\n        }\n    }\n\
    \    total\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for e in arr.iter().take(k as usize) {\n        if *e < 100\
    \ {\n            sum += *e;\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] <= 99 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    if\
    \ k > arr.len() as isize {\n        return 0;\n    }\n    let mut res = 0;\n \
    \   for i in 0..k {\n        if arr[i as usize] > 99 {\n            continue;\n\
    \        }\n        res += arr[i as usize];\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        let curr = arr[i as usize];\n\
    \        if curr < 10 {\n            result += curr;\n        } else if curr <\
    \ 100 {\n            result += curr / 10 + curr % 10;\n        } else {\n    \
    \        result += 9;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `0`', /tmp/tmprm6zcjuo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut two_digit_sum = 0;\n    let mut one_digit_sum = 0;\n    let mut iter = arr.iter();\n\
    \    for _ in 0..k {\n        match iter.next() {\n            Some(n) if *n <\
    \ 100 => one_digit_sum += *n,\n            Some(n) => two_digit_sum += *n,\n \
    \           None => return two_digit_sum + one_digit_sum,\n        }\n    }\n\
    \    two_digit_sum + one_digit_sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `232`,\n right: `0`', /tmp/tmpibbie8li.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if 0 <= num && num <= 99 {\n            sum += num;\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp0e7j8rt6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, v) in arr.iter().enumerate() {\n        if i as isize\
    \ == k {\n            break;\n        }\n        if v < &100 {\n            sum\
    \ += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, item) in arr.iter().enumerate() {\n        if i >\
    \ k as usize {\n            break;\n        }\n        if item < 100 {\n     \
    \       sum += item;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpukj_o9vy.rs:15:19\n   |\n\
    15 |         if item < 100 {\n   |                   ^^^\n   |               \
    \    |\n   |                   expected `&isize`, found integer\n   |        \
    \           help: consider borrowing here: `&100`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..arr.len() {\n        if i < k as usize {\n   \
    \         sum += match arr[i] {\n                x if x >= 10 && x < 100 => x,\n\
    \                _ => 0,\n            };\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpb8b6j_u2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut acc = 0;\n    for item in arr.iter().take(k as usize) {\n        acc +=\
    \ if (*item >= 10) && (*item < 100) {\n            *item\n        } else {\n \
    \           0\n        }\n    }\n    acc\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpjo0ox7ft.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n   \
    \     if n < 100 {\n            result += n;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&n| n < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnf8vjhgj.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&n| n < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ n = arr.len();\n    let k = std::cmp::min(k as usize, n);\n    let mut new_arr\
    \ = vec![0; n];\n    for i in 0..n {\n        new_arr[i] = arr[i] / 10 + arr[i]\
    \ % 10;\n    }\n    new_arr[..k].iter().sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `25`,\n right: `0`', /tmp/tmpu6zmgbdm.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ k = k as usize;\n    arr[..k].iter().filter(|x| x.abs() < 100).sum()\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|x| **x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ My solution\n    let mut total = 0;\n    for i in 0..k {\n        let len =\
    \ arr[i as usize].to_string().len();\n        if len <= 2 {\n            total\
    \ += arr[i as usize];\n        }\n    }\n    total\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for elem in arr.iter().take(k as usize) {\n        if elem\
    \ < &100 {\n            sum += elem;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ n = arr.len();\n    if k as usize > n {\n        panic!(\"Constraint Violation:\
    \ k <= len(arr)\");\n    }\n    let mut sum = 0;\n    for i in 0..k as usize {\n\
    \        let c = arr[i];\n        if c > 99 {\n            continue;\n       \
    \ }\n        sum += c;\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ TODO\n    0\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpaj809nky.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|x| x < &100 && x > &-100).sum()\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9ngd4vhg.rs:10:48\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|x| x < &100 && x > &-100).sum()\n\
    \   |                                                ^^^^ expected `&isize`, found\
    \ integer\n   |\n   = note: expected reference `&&isize`\n              found\
    \ reference `&{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ngd4vhg.rs:10:60\n\
    \   |\n10 |     arr.iter().take(k as usize).filter(|x| x < &100 && x > &-100).sum()\n\
    \   |                                                            ^^^^^ expected\
    \ `&isize`, found integer\n   |\n   = note: expected reference `&&isize`\n   \
    \           found reference `&{integer}`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for e in arr.iter().take(k as usize) {\n        if *e >= 10\
    \ && *e < 100 {\n            sum += *e;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpe5idzlj1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut res = 0;\n    for (i, &val) in arr.iter().enumerate() {\n        if i >\
    \ k as usize {\n            break;\n        }\n        if val > 99 {\n       \
    \     continue;\n        }\n        res += val;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `37`,\n right: `-4`', /tmp/tmpwq6ckm55.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).fold(0, |acc, &x| acc + (x.abs() % 100) / 10 + x.abs() % 10)\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `-4`', /tmp/tmp_ayink14.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x.abs() < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ Sum of first k elements\n    let sum = arr[..k as usize].iter().sum();\n   \
    \ // Find the amount of elements with at least 3 digits\n    let mut three_digits\
    \ = 0;\n    for n in arr[..k as usize].iter() {\n        if n >= 100 {\n     \
    \       three_digits += 1;\n        }\n    }\n    // subtracting the numbers with\
    \ 3 digits will give the ones with at most 2 digits\n    sum - three_digits *\
    \ 100\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6et2q6ym.rs:15:17\n   |\n\
    15 |         if n >= 100 {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&100`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let v = arr[i as usize];\n      \
    \  if v < 100 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ isize::max_value() is the largest value in isize.\n    let mut acc = isize::max_value();\n\
    \    let mut counter = 0;\n    for i in arr {\n        if counter >= k {\n   \
    \         break;\n        }\n        if i < 100 {\n            acc = acc.saturating_add(i);\n\
    \        }\n        counter += 1;\n    }\n    acc\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775802`,\n right: `-4`', /tmp/tmpa6dn1di5.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n \
    \           result += arr[i as usize];\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x > &9 && x < &100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpn_2ah54g.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for x in arr.iter().take(k as usize) {\n        if x < 100\
    \ {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp61qtmia_.rs:12:16\n   |\n\
    12 |         if x < 100 {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&100`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).fold(0, |acc, &x| {\n        if x > 99 {\n            acc\n      \
    \  } else {\n            acc + x\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut res = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        res += arr[i as usize];\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ Initialize result with 0.\n    let mut res = 0;\n\n    // Run a loop while there\
    \ are elements in arr\n    // and k is greater than 0.\n    let mut i = 0;\n \
    \   while i < arr.len() && k > 0 {\n        // Add the first k elements of arr\
    \ which\n        // are of atmost 2 digits.\n        if arr[i] < 100 {\n     \
    \       res += arr[i];\n            k -= 1;\n        }\n\n        // Increment\
    \ count of arr\n        i += 1;\n    }\n\n    // Return required sum.\n    res\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `k`\n  --> /tmp/tmp34ugd2sy.rs:21:13\n\
    \   |\n9  | fn add_elements(arr: Vec<isize>, k: isize) -> isize {\n   |      \
    \                            - help: consider making this binding mutable: `mut\
    \ k`\n...\n21 |             k -= 1;\n   |             ^^^^^^ cannot assign to\
    \ immutable argument\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| *x > 9 && *x < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmp9pmxzvvj.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut n = 0;\n    for elem in arr.iter().take(k as usize) {\n        if *elem\
    \ > 99 {\n            n += *elem / 100;\n        } else if *elem > 9 {\n     \
    \       n += *elem / 10;\n        } else {\n            n += *elem;\n        }\n\
    \    }\n    n\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpd59f804k.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for &n in arr.iter().take(k as usize) {\n        if 0 <= n\
    \ && n <= 99 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp2_p01l6p.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n \
    \       if num < 100 {\n            result += num;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if i >= arr.len() {\n           \
    \ break;\n        }\n        if arr[i as usize] >= 100 {\n            continue;\n\
    \        }\n        sum += arr[i as usize];\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdvhio1h1.rs:12:17\n   |\n\
    12 |         if i >= arr.len() {\n   |                 ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |         if i >= arr.len().try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut res = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num >= 10 && num < 100 {\n            res += num;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpld67d2w_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut number = arr[i as usize];\n\
    \        let mut digits = 0;\n        while number > 0 {\n            number /=\
    \ 10;\n            digits += 1;\n        }\n        if digits <= 2 {\n       \
    \     sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut sum = 0;\n    for i in 0..arr.len() {\n        if\
    \ count == k {\n            break;\n        }\n        if arr[i] > 99 {\n    \
    \        sum += arr[i] / 100;\n        } else {\n            sum += arr[i];\n\
    \        }\n        count += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpe9szab1h.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x > 9 && x < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl7oymo68.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&x| x > 9 && x < 100).sum()\n   |\
    \                                                 ^\n   |                    \
    \                             |\n   |                                        \
    \         expected `&isize`, found integer\n   |                             \
    \                    help: consider borrowing here: `&9`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl7oymo68.rs:10:58\n   |\n10 |     arr.iter().take(k as\
    \ usize).filter(|&x| x > 9 && x < 100).sum()\n   |                           \
    \                               ^^^\n   |                                    \
    \                      |\n   |                                               \
    \           expected `&isize`, found integer\n   |                           \
    \                               help: consider borrowing here: `&100`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).fold(0, |acc, &x| {\n        if x > 99 {\n            acc\n      \
    \  } else {\n            acc + x\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).fold(0, |acc, x| {\n        if *x < 100 {\n            acc + x\n \
    \       } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwqsetuoo.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for element in arr.iter().take(k as usize) {\n        if *element\
    \ >= 100 {\n            continue;\n        }\n        sum += element;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let v = arr[i as usize];\n      \
    \  if v < 10 {\n            sum += v;\n        } else if v < 100 {\n         \
    \   sum += v % 10 + v / 10;\n        } else {\n            sum += v % 10 + v /\
    \ 10 % 10 + v / 100;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp8wqkeb56.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).fold(0, |acc, &x| {\n        acc + if x < 100 { x } else { 0 }\n \
    \   })\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ TODO\n    0\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpaj809nky.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().filter(|&n|\
    \ n < &100).take(k as usize).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmpyab9d6o8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ Your code here.\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i\
    \ as usize] < 100 {\n            sum += arr[i as usize];\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut res = 0;\n    for i in 0..k {\n        let v = arr[i as usize];\n      \
    \  if v < 100 {\n            res += v;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let val = arr[i as usize];\n    \
    \    if val < 10 {\n            sum += val;\n        } else if val < 100 {\n \
    \           sum += val / 10 + val % 10;\n        } else {\n            sum +=\
    \ val / 100 + (val % 100) / 10 + val % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpudx03nyl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut total = 0;\n    for num in arr.iter().take(k as usize) {\n        total\
    \ += if num < &100 { *num } else { 0 };\n    }\n    total\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num < 10 {\n            sum += num;\n        } else if num < 100 {\n \
    \           sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for num in arr {\n        if num < 100 {\n            sum\
    \ += num;\n        }\n        if sum >= k {\n            break;\n        }\n \
    \   }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `37`,\n right: `-4`', /tmp/tmplsauz95f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut v = arr;\n    v.sort();\n    let mut sum = 0;\n    for i in 0..k {\n   \
    \     if v[i as usize] >= 100 {\n            break;\n        }\n        sum +=\
    \ v[i as usize];\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmpxnjlpn9k.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwqsetuoo.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ Create a helper function to check if value is > 9 and < 100\n    fn check_100(n:\
    \ isize) -> bool {\n        n > 9 && n < 100\n    }\n\n    let mut k_count = 0;\n\
    \    let mut sum = 0;\n\n    for i in 0..arr.len() {\n        if check_100(arr[i])\
    \ {\n            sum += arr[i];\n            k_count += 1;\n        }\n      \
    \  if k_count == k {\n            break;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `174`,\n right: `-4`', /tmp/tmpzlmlhvvg.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).fold(0, |acc, n| {\n        if n < 100 {\n            acc + n\n  \
    \      } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppx1427_8.rs:11:16\n   |\n\
    11 |         if n < 100 {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&100`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut res = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num >= 10 && num < 100 {\n            res += num;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpld67d2w_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ Do your magic!\n    let mut res = 0;\n    for i in 0..k {\n        if arr[i\
    \ as usize] < 100 {\n            res += arr[i as usize];\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        let number = arr[i as usize];\n\
    \        if number > 99 {\n            result += 0;\n        } else if number\
    \ > 9 {\n            result += number / 10;\n        } else {\n            result\
    \ += number;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `125`', /tmp/tmpjbm_eu11.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for x in &arr[..k as usize] {\n        if *x >= 100 {\n  \
    \          sum += *x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpvaezd8ut.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    if\
    \ k < 1 || k > arr.len() as isize {\n        panic!(\"k should be 1 <= k <= len(arr)\"\
    );\n    }\n    let mut acc = 0;\n    for i in 0..k {\n        let n = arr[i as\
    \ usize];\n        if n >= 100 {\n            acc += n / 100 + n % 100 / 10 +\
    \ n % 10;\n        } else if n >= 10 {\n            acc += n / 10 + n % 10;\n\
    \        } else {\n            acc += n;\n        }\n    }\n    acc\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpcrguktxd.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] >= 10 && arr[i\
    \ as usize] < 100 {\n            sum += arr[i as usize];\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpqxcokj14.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for &i in arr.iter().take(k as usize) {\n        sum += (i\
    \ / 10).min(10) * 10 + i % 10;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `202`,\n right: `0`', /tmp/tmpomsd7yue.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n \
    \       if num < 100 {\n            result += num;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, x) in arr.iter().enumerate() {\n        if i < k as\
    \ usize && *x > -100 && *x < 100 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut k = k as usize;\n    if k >= arr.len() {\n        k = arr.len();\n    }\n\
    \    let mut count = 0;\n    for i in 0..k {\n        if arr[i] < 100 {\n    \
    \        count += arr[i];\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x.abs() < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut total = 0;\n    for num in arr.iter().take(k as usize) {\n        if num\
    \ > &100 {\n            continue;\n        }\n        total += num;\n    }\n \
    \   total\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for (index, number) in arr.iter().enumerate() {\n     \
    \   if index < k as usize {\n            result += number;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `232`,\n right: `0`', /tmp/tmptkcdwwbh.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ sum: isize = arr\n        .iter()\n        .take(k as usize)\n        .filter(|&e|\
    \ e >= &10 && e < &100)\n        .sum();\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpedxqmm1c.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for (i, v) in arr.iter().enumerate() {\n        if i == k\
    \ as usize {\n            break;\n        }\n        if *v < 100 {\n         \
    \   sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| *x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&&x| x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ Write your code here\n    let mut sum = 0;\n    for i in 0..k {\n        let\
    \ mut n = arr[i as usize];\n        let mut d = 0;\n        while n > 0 {\n  \
    \          n /= 10;\n            d += 1;\n        }\n        if d <= 2 {\n   \
    \         sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] <= 99 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&n| n < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnf8vjhgj.rs:10:49\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|&n| n < 100).sum()\n   |        \
    \                                         ^^^\n   |                          \
    \                       |\n   |                                              \
    \   expected `&isize`, found integer\n   |                                   \
    \              help: consider borrowing here: `&100`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] >= 10 && arr[i\
    \ as usize] < 100 {\n            sum += arr[i as usize];\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpqxcokj14.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| *x < 100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n    \
    \    if num >= 100 || num < 0 {\n            sum += 0;\n        } else {\n   \
    \         sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp8zyvvtdd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut res = 0;\n    for i in 0..k {\n        let a = arr[i as usize];\n      \
    \  if a < 100 {\n            res += a;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut res = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        res += arr[i as usize];\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for v in arr.iter().take(k as usize) {\n        if *v >\
    \ 99 {\n            result += 99;\n        } else {\n            result += *v;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmphcx1hzdd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().filter(|n|\
    \ **n < 100).take(k as usize).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmp4sh4cd6x.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut ans = 0;\n    for i in 0..k {\n        if arr[i as usize] >= 100 {\n   \
    \         continue;\n        }\n        ans += arr[i as usize];\n    }\n    ans\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|n| *n >= 10 && *n < 100).sum()\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm5mgb122.rs:10:50\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|n| *n >= 10 && *n < 100).sum()\n\
    \   |                                                  ^^\n   |              \
    \                                    |\n   |                                 \
    \                 expected `&isize`, found integer\n   |                     \
    \                             help: consider borrowing here: `&10`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm5mgb122.rs:10:61\n   |\n10 |     arr.iter().take(k\
    \ as usize).filter(|n| *n >= 10 && *n < 100).sum()\n   |                     \
    \                                        ^^^\n   |                           \
    \                                  |\n   |                                   \
    \                          expected `&isize`, found integer\n   |            \
    \                                                 help: consider borrowing here:\
    \ `&100`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|&x| x.abs() < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ k = k as usize;\n    let len = arr.len();\n    if k < len {\n        return\
    \ 0;\n    }\n    let mut sum = 0;\n    for i in 0..len {\n        if arr[i] >\
    \ 99 {\n            continue;\n        }\n        sum += arr[i];\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmp340x275a.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    if\
    \ k > arr.len() as isize {\n        return 0;\n    }\n    let mut sum = 0;\n \
    \   for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum += arr[i\
    \ as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|x| x.abs() < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ k = k as usize;\n    let mut summ = 0;\n    for i in 0..k {\n        let item\
    \ = arr[i];\n        if item < 100 {\n            summ += item;\n        }\n \
    \   }\n    summ\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().filter(|x|\
    \ x < &100).take(k as usize).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnfq9k8v2.rs:10:31\n   |\n\
    10 |     arr.iter().filter(|x| x < &100).take(k as usize).sum()\n   |        \
    \                       ^^^^ expected `&isize`, found integer\n   |\n   = note:\
    \ expected reference `&&isize`\n              found reference `&{integer}`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut sum = 0;\n    for x in arr {\n        if x < 100\
    \ {\n            sum += x;\n            count += 1;\n        }\n        if count\
    \ == k {\n            break;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmp8k51r1ny.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).map(|&x| if x > 99 { 100 } else { x }).sum()\n}\n\nfn main() {\n \
    \   let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `200`,\n right: `0`', /tmp/tmpufru72gh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ k = k as usize;\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i]\
    \ < 100 {\n            sum += arr[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|x| x < &100).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjuimk67h.rs:10:48\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|x| x < &100).sum()\n   |        \
    \                                        ^^^^ expected `&isize`, found integer\n\
    \   |\n   = note: expected reference `&&isize`\n              found reference\
    \ `&{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n   \
    \     if n > 99 {\n            result += n;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmpqv8t57ve.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().filter(|x|\
    \ *x < 100).take(k as usize).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfywzuizb.rs:10:32\n   |\n\
    10 |     arr.iter().filter(|x| *x < 100).take(k as usize).sum()\n   |        \
    \                        ^^^\n   |                                |\n   |    \
    \                            expected `&isize`, found integer\n   |          \
    \                      help: consider borrowing here: `&100`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n \
    \           result += arr[i as usize];\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        let mut x = arr[i as usize];\n  \
    \      let mut count = 0;\n        while x != 0 {\n            x /= 10;\n    \
    \        count += 1;\n        }\n        if count <= 2 {\n            sum += arr[i\
    \ as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    arr.iter().take(k\
    \ as usize).filter(|n| n.abs() < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for elem in arr {\n        if elem < 100 {\n            sum\
    \ += elem;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `444`,\n right: `-4`', /tmp/tmpw2_s6006.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979025
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut output = 0;\n    for (i, val) in arr.iter().enumerate() {\n        if i\
    \ < k as usize {\n            output += *val;\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `232`,\n right: `0`', /tmp/tmpn28y6xlk.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for x in arr.iter().take(k as usize) {\n        if *x > 99\
    \ {\n            continue;\n        }\n        sum += x;\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for n in arr {\n        if n > 9 && n < 100 {\n          \
    \  sum += n;\n        }\n        if sum > k {\n            break;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `-4`', /tmp/tmpgcn1qrkt.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n    \
    \        sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for x in arr.iter().take(k as usize) {\n        if x <\
    \ &100 {\n            result += x;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for x in arr {\n        if 0 <= x && x <= 99 {\n      \
    \      result += x;\n        } else if x <= 999 {\n            result += x % 100;\n\
    \        }\n        if k <= 0 {\n            break;\n        }\n        k -= 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `k`\n  --> /tmp/tmpx027biuo.rs:20:9\n\
    \   |\n9  | fn add_elements(arr: Vec<isize>, k: isize) -> isize {\n   |      \
    \                            - help: consider making this binding mutable: `mut\
    \ k`\n...\n20 |         k -= 1;\n   |         ^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for n in &arr[..k as usize] {\n        if n < 10 {\n     \
    \       sum += n;\n        } else if n < 100 {\n            sum += n % 10 + n\
    \ / 10;\n        } else {\n            sum += n % 10 + n / 10 % 10 + n / 100;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp137yxtwv.rs:12:16\n   |\n\
    12 |         if n < 10 {\n   |                ^^\n   |                |\n   |\
    \                expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&10`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp137yxtwv.rs:14:23\n\
    \   |\n14 |         } else if n < 100 {\n   |                       ^^^\n   |\
    \                       |\n   |                       expected `&isize`, found\
    \ integer\n   |                       help: consider borrowing here: `&100`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    //\
    \ The two-digit integers are represented in form aa..a,\n    // where a is a digit.\n\
    \    // The upper bound of the two-digit integers is 99 = 99..9,\n    // where\
    \ 9 is a digit.\n    // Hence, the two-digit integers are a two-digit representation\
    \ of\n    // a number in the range [0, 99].\n    arr.iter().take(k as usize).filter(|&num|\
    \ num <= &99).sum()\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut result = 0;\n    for v in arr.iter().take(k as usize) {\n        if v <\
    \ &100 {\n            result += v;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ two_digits = 100;\n    arr.iter().take(k as usize).filter(|x| x < &two_digits).sum()\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpns8457p2.rs:11:48\n   |\n\
    11 |     arr.iter().take(k as usize).filter(|x| x < &two_digits).sum()\n   | \
    \                                               ^^^^^^^^^^^ expected `&isize`,\
    \ found integer\n   |\n   = note: expected reference `&&isize`\n             \
    \ found reference `&{integer}`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 101
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    let\
    \ mut v: Vec<isize> = Vec::new();\n    for n in arr {\n        if 0 <= n && n\
    \ <= 99 {\n            v.push(n);\n        }\n    }\n    if k > v.len() as isize\
    \ {\n        return -1;\n    }\n    return v.iter().take(k as usize).sum();\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `99`,\n right: `-4`', /tmp/tmp2nul_bbu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979026
- exit_code: 0
  program: "/// Given a non-empty vector of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <=\
    \ k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n    (0..k).map(|i|\
    \ arr[i as usize]).filter(|&n| n < 100).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979026
