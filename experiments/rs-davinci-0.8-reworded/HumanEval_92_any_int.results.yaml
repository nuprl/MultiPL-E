language: rs
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) &&\n\
    \        ((x == y + z) || (y == x + z) || (z == x + y))\n}\n\nfn main() {\n  \
    \  let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpwsl_17fx.rs:14:8\n   |\n14 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |        ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpwsl_17fx.rs:14:26\n   |\n14 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpwsl_17fx.rs:14:44\n   |\n\
    14 |     (x.is_integer() && y.is_integer() && z.is_integer()) &&\n   |       \
    \                                     ^^^^^^^^^^ method not found in `f64`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiw3j7c_t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x + y == z || x + z == y || y + z == x) &&\n    (x.fract()\
    \ == 0.0 && y.fract() == 0.0 && z.fract() == 0.0)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5mvj20e5.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut numbers = [x, y, z];\n    numbers.sort_by(|a, b|\
    \ a.partial_cmp(b).unwrap());\n    numbers[0] + numbers[1] == numbers[2] && numbers.iter().all(|x|\
    \ x.fract() == 0.0)\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8yn3qp9t.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() &&\n\
    \        ((x + y == z) || (x + z == y) || (y + z == x))\n}\n\nfn main() {\n  \
    \  let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpbuea1iga.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |       ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpbuea1iga.rs:14:25\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpbuea1iga.rs:14:43\n   |\n\
    14 |     x.is_integer() && y.is_integer() && z.is_integer() &&\n   |         \
    \                                  ^^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ == y + z || x == y - z || x == z - y)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpztxtmtau.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x == y + z || x == y - z || x == z -\
    \ y)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpztxtmtau.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x == y\
    \ + z || x == y - z || x == z - y)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpztxtmtau.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || x == y\
    \ - z || x == z - y)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x_int = x.trunc() == x;\n    let y_int = y.trunc() ==\
    \ y;\n    let z_int = z.trunc() == z;\n    let sum_xyz = x + y + z;\n    let x_y_sum\
    \ = x + y;\n    let x_z_sum = x + z;\n    let y_z_sum = y + z;\n    if (x_int\
    \ && y_int && z_int) &&\n        (sum_xyz == x_y_sum || sum_xyz == x_z_sum ||\
    \ sum_xyz == y_z_sum) {\n        true\n    } else {\n        false\n    }\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp85w_o6h.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let xi = x.round() as i64;\n    let yi = y.round() as i64;\n\
    \    let zi = z.round() as i64;\n    xi == yi + zi || yi == xi + zi || zi == xi\
    \ + yi\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp54_da6im.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum: f64 = (x + y + z) - x - y;\n    if x.is_integer()\
    \ == true && y.is_integer() == true && z.is_integer() == true {\n        if x\
    \ == sum || y == sum || z == sum {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp1_jxgz5o.rs:15:10\n   |\n15 |     if x.is_integer()\
    \ == true && y.is_integer() == true && z.is_integer() == true {\n   |        \
    \  ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method named `is_integer`\
    \ found for type `f64` in the current scope\n  --> /tmp/tmp1_jxgz5o.rs:15:36\n\
    \   |\n15 |     if x.is_integer() == true && y.is_integer() == true && z.is_integer()\
    \ == true {\n   |                                    ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp1_jxgz5o.rs:15:62\n   |\n15 |     if x.is_integer()\
    \ == true && y.is_integer() == true && z.is_integer() == true {\n   |        \
    \                                                      ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x.abs() < std::f64::EPSILON {\n            return (y + z).abs() <\
    \ std::f64::EPSILON;\n        } else if y.abs() < std::f64::EPSILON {\n      \
    \      return (x + z).abs() < std::f64::EPSILON;\n        } else if z.abs() <\
    \ std::f64::EPSILON {\n            return (x + y).abs() < std::f64::EPSILON;\n\
    \        } else {\n            return (x + y - z).abs() < std::f64::EPSILON ||\
    \ (x + z - y).abs() < std::f64::EPSILON || (y + z - x).abs() < std::f64::EPSILON;\n\
    \        }\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n   \
    \ let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpyx5pjmmj.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpyx5pjmmj.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpyx5pjmmj.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // TODO\n    false\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6b_vexqd.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x == y + z || y == x + z || z == x + y {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpasuutoyk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // x + y == z || x + z == y || y + z == x\n    let x_int\
    \ = x.floor() == x;\n    let y_int = y.floor() == y;\n    let z_int = z.floor()\
    \ == z;\n    if x_int && y_int && z_int {\n        x + y == z || x + z == y ||\
    \ y + z == x\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkxamexnd.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_i64() && y.is_i64() && z.is_i64() {\n        return\
    \ x == y + z || y == x + z || z == x + y;\n    } else {\n        return false;\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_i64` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp37zdcl7o.rs:14:10\n   |\n14 |     if x.is_i64() && y.is_i64()\
    \ && z.is_i64() {\n   |          ^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_i64` found for type `f64` in the current scope\n  --> /tmp/tmp37zdcl7o.rs:14:24\n\
    \   |\n14 |     if x.is_i64() && y.is_i64() && z.is_i64() {\n   |            \
    \            ^^^^^^ method not found in `f64`\n\nerror[E0599]: no method named\
    \ `is_i64` found for type `f64` in the current scope\n  --> /tmp/tmp37zdcl7o.rs:14:38\n\
    \   |\n14 |     if x.is_i64() && y.is_i64() && z.is_i64() {\n   |            \
    \                          ^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x == y + z || x == y - z || x == z - y\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp08y0ib3h.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_finite() && y.is_finite() && z.is_finite() {\n \
    \       x.round() == y.round() + z.round() || y.round() == x.round() + z.round()\
    \ || z.round() == x.round() + y.round()\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8_ztgied.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut result = false;\n    let x_int = x.floor() == x;\n\
    \    let y_int = y.floor() == y;\n    let z_int = z.floor() == z;\n    if x_int\
    \ && y_int && z_int {\n        if x == y + z || y == x + z || z == x + y {\n \
    \           result = true;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppmh8erxs.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.round() == y.round() + z.round() || y.round() == x.round()\
    \ + z.round() || z.round() == x.round() + y.round()\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7ohjz0yu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x == y + z || y == x + z || z == x + y) && x == x.round()\
    \ && y == y.round() && z == z.round()\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpifd1jcbf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum = x + y + z;\n    if (x - (sum - x)).abs() < std::f64::EPSILON\n\
    \        || (y - (sum - y)).abs() < std::f64::EPSILON\n        || (z - (sum -\
    \ z)).abs() < std::f64::EPSILON\n    {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9wkp28ff.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    return x.is_integer() && y.is_integer() && z.is_integer()\
    \ && (x + y == z || x + z == y || y + z == x);\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpoh3y1802.rs:14:14\n   |\n14 |     return x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x);\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpoh3y1802.rs:14:32\n   |\n14 |     return x.is_integer() && y.is_integer()\
    \ && z.is_integer() && (x + y == z || x + z == y || y + z == x);\n   |       \
    \                         ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpoh3y1802.rs:14:50\n   |\n14 |     return x.is_integer() && y.is_integer()\
    \ && z.is_integer() && (x + y == z || x + z == y || y + z == x);\n   |       \
    \                                           ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.round() == x && y.round() == y && z.round() == z {\n\
    \        if x + y == z || x + z == y || y + z == x {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt0x1xm7w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    ((x + y == z) || (x + z == y) || (y + z == x)) && (x.fract()\
    \ == 0.0) && (y.fract() == 0.0) && (z.fract() == 0.0)\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmsx6chpn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) &&\n\
    \        ((x + y == z) || (x + z == y) || (y + z == x))\n}\n\nfn main() {\n  \
    \  let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp4n1rs14h.rs:14:8\n   |\n14 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |        ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp4n1rs14h.rs:14:26\n   |\n14 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp4n1rs14h.rs:14:44\n   |\n\
    14 |     (x.is_integer() && y.is_integer() && z.is_integer()) &&\n   |       \
    \                                     ^^^^^^^^^^ method not found in `f64`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum = x + y + z;\n    if sum == x.round() + y.round()\
    \ + z.round() {\n        return true;\n    }\n    false\n}\n\nfn main() {\n  \
    \  let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpohupbj1v.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x == y + z) || (y == x + z) || (z == x + y)\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpif3l5z9y.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpy3kf2lys.rs:15:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.round();\n    let y = y.round();\n    let z =\
    \ z.round();\n    return x == y + z || y == x + z || z == x + y;\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1_3vyd1g.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() ==\
    \ 0.0 {\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n         \
    \   return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfnk5o8nh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.trunc();\n    let y = y.trunc();\n    let z =\
    \ z.trunc();\n    if x == y + z || y == x + z || z == x + y {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwcihvrvb.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // hint: not sure how to check that all the numbers are\
    \ integers?\n    // You will need to use the \"type ascription\" syntax for this.\n\
    \    let xi: i64 = x as i64;\n    let yi: i64 = y as i64;\n    let zi: i64 = z\
    \ as i64;\n    if xi + yi == zi || xi + zi == yi || yi + zi == xi {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp36cdacdj.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    return x.is_sign_positive() && y.is_sign_positive() && z.is_sign_positive()\
    \ && (x.round() == y.round() + z.round() || y.round() == x.round() + z.round()\
    \ || z.round() == x.round() + y.round());\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplhp80pzv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        return x + y == z || x + z == y || y + z == x;\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpxmn2j2dp.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpxmn2j2dp.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpxmn2j2dp.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x + y == z || x + z == y || y + z == x {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpzox8o145.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpzox8o145.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpzox8o145.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && ((x\
    \ + y == z) || (x + z == y) || (y + z == x))\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpun5_wghm.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && ((x + y == z) || (x + z == y) || (y +\
    \ z == x))\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpun5_wghm.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && ((x + y\
    \ == z) || (x + z == y) || (y + z == x))\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpun5_wghm.rs:14:43\n   |\n\
    14 |     x.is_integer() && y.is_integer() && z.is_integer() && ((x + y == z) ||\
    \ (x + z == y) || (y + z == x))\n   |                                        \
    \   ^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    match (x, y, z) {\n        (a, b, c) if a as i64 + b as\
    \ i64 == c as i64 => true,\n        (a, b, c) if a as i64 + c as i64 == b as i64\
    \ => true,\n        (a, b, c) if b as i64 + c as i64 == a as i64 => true,\n  \
    \      _ => false,\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptoyebs_z.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp17cmv11_.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        x == y + z || y == x + z || z == x + y\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpq5so7gd1.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpq5so7gd1.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpq5so7gd1.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x1 = x.floor();\n    let y1 = y.floor();\n    let z1\
    \ = z.floor();\n    if (x == x1) && (y == y1) && (z == z1) {\n        if (x +\
    \ y == z) || (x + z == y) || (y + z == x) {\n            return true;\n      \
    \  }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3hbwzsnr.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // unimplemented!()\n    let sum_of_2 = x + y;\n    let\
    \ sum_of_3 = x + y + z;\n    if sum_of_2.floor() == sum_of_2 && z.floor() == z\
    \ && sum_of_3.floor() == sum_of_3 {\n        if sum_of_2 == z || sum_of_3 == x\
    \ || sum_of_3 == y {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvq5tv23v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // insert your code here\n    let mut x = x;\n    let mut\
    \ y = y;\n    let mut z = z;\n    if x.round() == x && y.round() == y && z.round()\
    \ == z {\n        x = x.round();\n        y = y.round();\n        z = z.round();\n\
    \        if x + y == z || x + z == y || y + z == x {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvl3qsfu4.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x == y + z || x == y - z || x == z - y {\n        return\
    \ true;\n    } else if y == x + z || y == x - z || y == z - x {\n        return\
    \ true;\n    } else if z == x + y || z == x - y || z == y - x {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp74jkmdah.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x + y == z || x + z == y || y + z == x) && x.fract() ==\
    \ 0.0 && y.fract() == 0.0 && z.fract() == 0.0\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqa3aq7bf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if is_int(x) && is_int(y) && is_int(z) {\n        x == y\
    \ + z || y == x + z || z == x + y\n    } else {\n        false\n    }\n}\n\nfn\
    \ main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0),\
    \ true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_int` in this scope\n  --> /tmp/tmpbf7u3ydu.rs:14:8\n\
    \   |\n14 |     if is_int(x) && is_int(y) && is_int(z) {\n   |        ^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_int` in this scope\n\
    \  --> /tmp/tmpbf7u3ydu.rs:14:21\n   |\n14 |     if is_int(x) && is_int(y) &&\
    \ is_int(z) {\n   |                     ^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_int` in this scope\n  --> /tmp/tmpbf7u3ydu.rs:14:34\n\
    \   |\n14 |     if is_int(x) && is_int(y) && is_int(z) {\n   |               \
    \                   ^^^^^^ not found in this scope\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if (x + y) == z || (x + z) == y || (y + z) == x {\n    \
    \    true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcxbzbxc7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x_int = x.is_finite() && (x - x.round()).abs() < 0.00001;\n\
    \    let y_int = y.is_finite() && (y - y.round()).abs() < 0.00001;\n    let z_int\
    \ = z.is_finite() && (z - z.round()).abs() < 0.00001;\n    if x_int && y_int &&\
    \ z_int {\n        return (x + y == z) || (x + z == y) || (y + z == x);\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr_28rn3g.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x + y == z || x + z == y || y + z == x {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpzox8o145.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpzox8o145.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpzox8o145.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum = x + y + z;\n    (sum == x && sum == y && sum ==\
    \ z)\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpetsz5914.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut is_int = false;\n    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        is_int = true;\n    }\n    let sum = x + y;\n \
    \   let is_true = if z == sum || y == sum || x == sum {\n        true\n    } else\
    \ {\n        false\n    };\n    is_int && is_true\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpa1n3pj5z.rs:15:10\n   |\n15 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpa1n3pj5z.rs:15:28\n   |\n15 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpa1n3pj5z.rs:15:46\n   |\n\
    15 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpsbvbmwkw.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x == y + z || x == y - z || y == x + z || y == x - z ||\
    \ z == x + y || z == x - y\n}\n\nfn main() {\n    let candidate = any_int;\n \
    \   assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphly5y7a3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.floor() == x) && (y.floor() == y) && (z.floor() == z)\
    \ && (x + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmvjxahal.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // We don't need to check for NaN, as any math operation\
    \ on NaN returns NaN\n    // and the match for NaN always fails\n    if x.is_nan()\
    \ || y.is_nan() || z.is_nan() {\n        return false;\n    }\n\n    if x.is_infinite()\
    \ || y.is_infinite() || z.is_infinite() {\n        return false;\n    }\n\n  \
    \  // Using absolute to avoid double counting, e.g. if x is 1 and y is -1,\n \
    \   // both of them can be added to z to give 0\n    let x = x.abs();\n    let\
    \ y = y.abs();\n    let z = z.abs();\n\n    // Check if any number is equal to\
    \ any other number\n    if x == y || x == z || y == z {\n        return false;\n\
    \    }\n\n    // Return true if any two numbers are equal to the third\n    x\
    \ + y == z || x + z == y || y + z == x\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbh44w9pq.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        x + y == z || x + z == y || y + z == x\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpnurn2jkx.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpnurn2jkx.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpnurn2jkx.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x == y + z || x == y - z || y == x + z || y == x - z ||\
    \ z == x + y || z == x - y\n}\n\nfn main() {\n    let candidate = any_int;\n \
    \   assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphly5y7a3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x + y) == z || (x + z) == y || (y + z) == x\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjpz6qag6.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() == false || y.is_integer() == false ||\
    \ z.is_integer() == false {\n        return false;\n    }\n    let mut max = x;\n\
    \    let mut min1 = y;\n    let mut min2 = z;\n    if max < y {\n        max =\
    \ y;\n        min1 = x;\n        min2 = z;\n    }\n    if max < z {\n        max\
    \ = z;\n        min1 = x;\n        min2 = y;\n    }\n    if min1 + min2 == max\
    \ {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp9oyusdp0.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ == false || y.is_integer() == false || z.is_integer() == false {\n   |     \
    \     ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method named `is_integer`\
    \ found for type `f64` in the current scope\n  --> /tmp/tmp9oyusdp0.rs:14:37\n\
    \   |\n14 |     if x.is_integer() == false || y.is_integer() == false || z.is_integer()\
    \ == false {\n   |                                     ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp9oyusdp0.rs:14:64\n   |\n14 |     if x.is_integer()\
    \ == false || y.is_integer() == false || z.is_integer() == false {\n   |     \
    \                                                           ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum = x + y + z;\n    if sum == 0.0 {\n        return\
    \ false;\n    }\n    (sum / 3.0).fract() == 0.0\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp71_6solq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x + y == z || x + z == y || y + z == x) && (x.fract() ==\
    \ 0.0 && y.fract() == 0.0 && z.fract() == 0.0)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_5dzbxjr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.round() == y.round() + z.round() || y.round() == x.round()\
    \ + z.round() || z.round() == x.round() + y.round()\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7ohjz0yu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    return (x.floor() == (y + z).floor()) || (y.floor() == (x\
    \ + z).floor()) || (z.floor() == (x + y).floor());\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp61w689jb.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiw3j7c_t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // write your code here\n    false\n}\n\nfn main() {\n \
    \   let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpej_t2z7t.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let a = x + y;\n    let b = x + z;\n    let c = y + z;\n\
    \    if a % 1.0 == 0.0 || b % 1.0 == 0.0 || c % 1.0 == 0.0 {\n        return true;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_skqekhi.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp17cmv11_.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum_xy = x + y;\n    let sum_xz = x + z;\n    let sum_yz\
    \ = y + z;\n    let vector: Vec<f64> = vec![sum_xy, sum_xz, sum_yz];\n    let\
    \ mut res = false;\n    for num in vector {\n        if f64::floor(num) == num\
    \ {\n            res = true;\n        }\n    }\n    res\n}\n\nfn main() {\n  \
    \  let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptmk8aj_9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x % 1.0 == 0.0 || y % 1.0 == 0.0 || z % 1.0 == 0.0) &&\
    \ (x + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjukzqp8z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.round() + y.round() == z.round()) || (x.round() + z.round()\
    \ == y.round()) || (y.round() + z.round() == x.round())\n}\n\nfn main() {\n  \
    \  let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprxwknxhw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if (x - y).abs() < std::f64::EPSILON && x - z < std::f64::EPSILON\
    \ {\n        true\n    } else if (x - z).abs() < std::f64::EPSILON && x - y <\
    \ std::f64::EPSILON {\n        true\n    } else if (y - z).abs() < std::f64::EPSILON\
    \ && y - x < std::f64::EPSILON {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9_lqg_34.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ == y + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp37383epl.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x == y + z || y == x + z || z == x +\
    \ y)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp37383epl.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x == y\
    \ + z || y == x + z || z == x + y)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp37383epl.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || y == x\
    \ + z || z == x + y)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() ==\
    \ 0.0 {\n        let sum = x + y;\n        if sum == z {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9bb6etkr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.floor();\n    let y = y.floor();\n    let z =\
    \ z.floor();\n    match (x, y, z) {\n        (a, b, c) if a == b + c || b == a\
    \ + c || c == a + b => true,\n        _ => false,\n    }\n}\n\nfn main() {\n \
    \   let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0he7lil7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let d = x + y;\n    x == d || y == d || z == d\n}\n\nfn\
    \ main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0),\
    \ true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5web0s1f.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x + y == z || x + z == y || y + z == x) && x.is_int() &&\
    \ y.is_int() && z.is_int()\n}\n\nfn main() {\n    let candidate = any_int;\n \
    \   assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_int` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpn_7p99b0.rs:14:51\n   |\n14 |     (x + y == z || x + z\
    \ == y || y + z == x) && x.is_int() && y.is_int() && z.is_int()\n   |        \
    \                                           ^^^^^^ help: there is an associated\
    \ function with a similar name: `is_finite`\n\nerror[E0599]: no method named `is_int`\
    \ found for type `f64` in the current scope\n  --> /tmp/tmpn_7p99b0.rs:14:65\n\
    \   |\n14 |     (x + y == z || x + z == y || y + z == x) && x.is_int() && y.is_int()\
    \ && z.is_int()\n   |                                                        \
    \         ^^^^^^ help: there is an associated function with a similar name: `is_finite`\n\
    \nerror[E0599]: no method named `is_int` found for type `f64` in the current scope\n\
    \  --> /tmp/tmpn_7p99b0.rs:14:79\n   |\n14 |     (x + y == z || x + z == y ||\
    \ y + z == x) && x.is_int() && y.is_int() && z.is_int()\n   |                \
    \                                                               ^^^^^^ help: there\
    \ is an associated function with a similar name: `is_finite`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if (x.is_integer() && y.is_integer() && z.is_integer())\
    \ {\n        return x == y + z || y == x + z || z == x + y;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphdu_9_2g.rs:14:8\n\
    \   |\n14 |     if (x.is_integer() && y.is_integer() && z.is_integer()) {\n  \
    \ |        ^                                                  ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    14 -     if (x.is_integer() && y.is_integer() && z.is_integer()) {\n14 +     if\
    \ x.is_integer() && y.is_integer() && z.is_integer() {\n   | \n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmphdu_9_2g.rs:14:11\n   |\n14 |     if (x.is_integer() && y.is_integer()\
    \ && z.is_integer()) {\n   |           ^^^^^^^^^^ method not found in `f64`\n\n\
    error[E0599]: no method named `is_integer` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmphdu_9_2g.rs:14:29\n   |\n14 |     if (x.is_integer() &&\
    \ y.is_integer() && z.is_integer()) {\n   |                             ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmphdu_9_2g.rs:14:47\n   |\n\
    14 |     if (x.is_integer() && y.is_integer() && z.is_integer()) {\n   |     \
    \                                          ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        return x + y == z || x + z == y || y + z == x;\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpxmn2j2dp.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpxmn2j2dp.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpxmn2j2dp.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum_xy = x + y;\n    let sum_xz = x + z;\n    let sum_yz\
    \ = y + z;\n    (x == sum_yz || y == sum_xz || z == sum_xy) && (x.fract() == 0.0\
    \ || y.fract() == 0.0 || z.fract() == 0.0)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpypexxl12.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if !x.is_integer() || !y.is_integer() || !z.is_integer()\
    \ {\n        return false;\n    }\n    return x + y == z || x + z == y || y +\
    \ z == x;\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpv6wd565h.rs:14:11\n   |\n14 |     if !x.is_integer()\
    \ || !y.is_integer() || !z.is_integer() {\n   |           ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpv6wd565h.rs:14:30\n   |\n14 |    \
    \ if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n   |           \
    \                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpv6wd565h.rs:14:49\n\
    \   |\n14 |     if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n \
    \  |                                                 ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.trunc() == (y + z).trunc() || y.trunc() == (x + z).trunc()\
    \ || z.trunc() == (x + y).trunc()\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4njzphkt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.trunc();\n    let y = y.trunc();\n    let z =\
    \ z.trunc();\n    return x + y == z || x + z == y || y + z == x;\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpen6ovxs9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() ==\
    \ 0.0 {\n        if x + y == z || x + z == y || y + z == x {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9zur1n0w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0\
    \ && (x + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4jvy49k_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_i64() && y.is_i64() && z.is_i64() {\n        if\
    \ x.abs() + y.abs() == z.abs() || x.abs() + z.abs() == y.abs() || y.abs() + z.abs()\
    \ == x.abs() {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0),\
    \ true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_i64` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpr38jfdqq.rs:14:10\n   |\n14 |     if x.is_i64() && y.is_i64()\
    \ && z.is_i64() {\n   |          ^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_i64` found for type `f64` in the current scope\n  --> /tmp/tmpr38jfdqq.rs:14:24\n\
    \   |\n14 |     if x.is_i64() && y.is_i64() && z.is_i64() {\n   |            \
    \            ^^^^^^ method not found in `f64`\n\nerror[E0599]: no method named\
    \ `is_i64` found for type `f64` in the current scope\n  --> /tmp/tmpr38jfdqq.rs:14:38\n\
    \   |\n14 |     if x.is_i64() && y.is_i64() && z.is_i64() {\n   |            \
    \                          ^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let a = x.floor() == x;\n    let b = y.floor() == y;\n \
    \   let c = z.floor() == z;\n    if a && b && c {\n        if (x+y) == z || (x+z)\
    \ == y || (y+z) == x {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfr1e0mja.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if !(x.is_sign_positive() && y.is_sign_positive() && z.is_sign_positive())\
    \ {\n        if x.round() == (y + z).round() || x.round() == (y - z).round() ||\
    \ x.round() == (z - y).round() {\n            return true;\n        }\n    } else\
    \ {\n        if x.round() == (y + z).round() || x.round() == (z - y).round() {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbc9yr7wt.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    fn sum(a: f64, b: f64) -> f64 {\n        return a + b;\n\
    \    }\n    return (x == sum(y, z) || y == sum(x, z) || z == sum(x, y)) && (x.floor()\
    \ == x && y.floor() == y && z.floor() == z);\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeo856ozj.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_sign_positive() && y.is_sign_positive() && z.is_sign_positive()\
    \ {\n        if x.is_integer() && y.is_integer() && z.is_integer() {\n       \
    \     if x + y == z || x + z == y || y + z == x {\n                return true;\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpfksl2k8r.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |              ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpfksl2k8r.rs:15:32\n   |\n15 |    \
    \     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |          \
    \                      ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpfksl2k8r.rs:15:50\n\
    \   |\n15 |         if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \   |                                                  ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.round();\n    let y = y.round();\n    let z =\
    \ z.round();\n    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n \
    \   let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0u40fxce.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x == y + z || x == y - z || x == z - y) && x.fract() ==\
    \ 0.0 && y.fract() == 0.0 && z.fract() == 0.0\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm5iip550.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x + y == z || x + z == y || y + z == x) && (x.is_integer()\
    \ && y.is_integer() && z.is_integer())\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpgrn_m21b.rs:14:52\n   |\n14 |     (x + y == z ||\
    \ x + z == y || y + z == x) && (x.is_integer() && y.is_integer() && z.is_integer())\n\
    \   |                                                    ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpgrn_m21b.rs:14:70\n   |\n14 |    \
    \ (x + y == z || x + z == y || y + z == x) && (x.is_integer() && y.is_integer()\
    \ && z.is_integer())\n   |                                                   \
    \                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpgrn_m21b.rs:14:88\n\
    \   |\n14 |     (x + y == z || x + z == y || y + z == x) && (x.is_integer() &&\
    \ y.is_integer() && z.is_integer())\n   |                                    \
    \                                                    ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let a = x - (y + z);\n    let b = y - (x + z);\n    let\
    \ c = z - (x + y);\n    (a == 0.0 || b == 0.0 || c == 0.0) && (x % 1.0 == 0.0)\
    \ && (y % 1.0 == 0.0) && (z % 1.0 == 0.0)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcxtjy3nk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x_int = x as i64;\n    let y_int = y as i64;\n    let\
    \ z_int = z as i64;\n    return (x_int + y_int == z_int) || (x_int + z_int ==\
    \ y_int) || (y_int + z_int == x_int);\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx5n6js3z.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && ((x\
    \ == y + z) || (y == x + z) || (z == x + y))\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpho4rfyp5.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && ((x == y + z) || (y == x + z) || (z ==\
    \ x + y))\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpho4rfyp5.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && ((x == y\
    \ + z) || (y == x + z) || (z == x + y))\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpho4rfyp5.rs:14:43\n   |\n\
    14 |     x.is_integer() && y.is_integer() && z.is_integer() && ((x == y + z) ||\
    \ (y == x + z) || (z == x + y))\n   |                                        \
    \   ^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.round();\n    let y = y.round();\n    let z =\
    \ z.round();\n    return (x == y + z) || (y == x + z) || (z == x + y);\n}\n\n\
    fn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqbkv28p7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    //unimplemented!()\n    if x.round() == y.round() + z.round()\
    \ {\n        return true;\n    } else if y.round() == x.round() + z.round() {\n\
    \        return true;\n    } else if z.round() == x.round() + y.round() {\n  \
    \      return true;\n    } else {\n        return false;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsx3e6a4w.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() ==\
    \ 0.0 {\n        if x + y == z || x + z == y || y + z == x {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9zur1n0w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let a = (x + y + z) as i64;\n    let b = (x - y - z) as\
    \ i64;\n    let c = (x + y - z) as i64;\n    let d = (x - y + z) as i64;\n   \
    \ let e = (y + z - x) as i64;\n    let f = (y - z + x) as i64;\n    let g = (z\
    \ + x - y) as i64;\n    let h = (z - x + y) as i64;\n    a == 0 || b == 0 || c\
    \ == 0 || d == 0 || e == 0 || f == 0 || g == 0 || h == 0\n}\n\nfn main() {\n \
    \   let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp946k5oqd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // not sure why solution uses integers if the function accepts\
    \ floats\n    if x == y + z || y == x + z || z == x + y {\n        true\n    }\
    \ else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpma_g3n6u.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.round() == y.round() + z.round()) || (y.round() == x.round()\
    \ + z.round()) || (z.round() == x.round() + y.round())\n}\n\nfn main() {\n   \
    \ let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_sp0r4sa.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let min = cmp::min(x, cmp::min(y, z));\n    let max = cmp::max(x,\
    \ cmp::max(y, z));\n    let mid = x + y + z - min - max;\n    (x % 1.0 == 0.0)\
    \ && (y % 1.0 == 0.0) && (z % 1.0 == 0.0) && (max == min + mid)\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpu2d9agj6.rs:14:15\n   |\n14 |     let min = cmp::min(x, cmp::min(y,\
    \ z));\n   |               ^^^ use of undeclared crate or module `cmp`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `cmp`\n  --> /tmp/tmpu2d9agj6.rs:14:27\n\
    \   |\n14 |     let min = cmp::min(x, cmp::min(y, z));\n   |                 \
    \          ^^^ use of undeclared crate or module `cmp`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `cmp`\n  --> /tmp/tmpu2d9agj6.rs:15:15\n\
    \   |\n15 |     let max = cmp::max(x, cmp::max(y, z));\n   |               ^^^\
    \ use of undeclared crate or module `cmp`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `cmp`\n  --> /tmp/tmpu2d9agj6.rs:15:27\n \
    \  |\n15 |     let max = cmp::max(x, cmp::max(y, z));\n   |                  \
    \         ^^^ use of undeclared crate or module `cmp`\n\nerror: aborting due to\
    \ 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut r = false;\n    if (x != 0.0) && (y != 0.0) && (z\
    \ != 0.0) {\n        let x = x.round();\n        let y = y.round();\n        let\
    \ z = z.round();\n        if x == y + z || y == x + z || z == x + y {\n      \
    \      r = true;\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5n4yslpv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if !(x.is_integer() && y.is_integer() && z.is_integer())\
    \ {\n        return false;\n    }\n    x == y + z || y == x + z || z == x + y\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpqp1xxbuu.rs:14:12\n   |\n14 |     if !(x.is_integer()\
    \ && y.is_integer() && z.is_integer()) {\n   |            ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpqp1xxbuu.rs:14:30\n   |\n14 |    \
    \ if !(x.is_integer() && y.is_integer() && z.is_integer()) {\n   |           \
    \                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpqp1xxbuu.rs:14:48\n\
    \   |\n14 |     if !(x.is_integer() && y.is_integer() && z.is_integer()) {\n \
    \  |                                                ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp17cmv11_.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum = x + y + z;\n    sum % 1.0 == 0.0\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5sv5fcd5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let args = [x, y, z];\n    let mut min = 0;\n    let mut\
    \ mid = 0;\n    let mut max = 0;\n    for i in 0..args.len() {\n        if args[i]\
    \ < args[min] {\n            mid = min;\n            min = i;\n        } else\
    \ if args[i] < args[mid] {\n            mid = i;\n        }\n        if args[i]\
    \ > args[max] {\n            max = i;\n        }\n    }\n    if args[min].fract()\
    \ == 0.0 && args[mid].fract() == 0.0 && args[max].fract() == 0.0 {\n        if\
    \ args[max] == args[min] + args[mid] {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4hl53djx.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.floor();\n    let y = y.floor();\n    let z =\
    \ z.floor();\n    let x = x as i64;\n    let y = y as i64;\n    let z = z as i64;\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true;\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptjk37vtj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // fn cmp_f64(a: f64, b: f64) -> bool {\n    //     let\
    \ epsilon = 0.000000001;\n    //     (a - b).abs() < epsilon\n    // }\n    let\
    \ xi = x.floor();\n    let yi = y.floor();\n    let zi = z.floor();\n    (x -\
    \ xi).abs() == 0.0 && (y - yi).abs() == 0.0 && (z - zi).abs() == 0.0 &&\n    (x\
    \ == y + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq97vsz4e.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() ==\
    \ 0.0 {\n        if (x + y) == z || (x + z) == y || (y + z) == x {\n         \
    \   return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1mkfnnlb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let is_int = |x: f64| (x - x.floor()).abs() < 1e-6;\n  \
    \  let (x, y, z) = (x.round(), y.round(), z.round());\n    (x + y == z) || (x\
    \ + z == y) || (y + z == x) && is_int(x) && is_int(y) && is_int(z)\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4jtmrn3x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if (x - y).abs() == z || (x - z).abs() == y || (y - z).abs()\
    \ == x {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9jehx6km.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x.round() == y.round() + z.round() {\n            return true;\n \
    \       } else if y.round() == x.round() + z.round() {\n            return true;\n\
    \        } else if z.round() == x.round() + y.round() {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpfy1cwad0.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpfy1cwad0.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpfy1cwad0.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    vec![x, y, z]\n        .iter()\n        .any(|&val| (val\
    \ - (x + y + z - val)).abs() < f64::EPSILON)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsp8lxtyy.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp17cmv11_.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x + y == z || x + z == y || y + z == x {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpzox8o145.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpzox8o145.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpzox8o145.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let (x, y, z) = (x.round(), y.round(), z.round());\n   \
    \ x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp42rru27t.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let a = x + y;\n    let b = x + z;\n    let c = y + z;\n\
    \    if x.is_sign_positive() && y.is_sign_positive() && z.is_sign_positive() {\n\
    \        if x.floor() == x && y.floor() == y && z.floor() == z {\n           \
    \ if a == z || b == y || c == x {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp03t6b0vv.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let a = x.round() == y.round() + z.round();\n    let b =\
    \ y.round() == x.round() + z.round();\n    let c = z.round() == x.round() + y.round();\n\
    \    a || b || c\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnz0tkb1d.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x == y + z || y == x + z || z == x + y {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgytj9t33.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_finite() && y.is_finite() && z.is_finite() &&\n   \
    \ (x.fract() == 0.0 || y.fract() == 0.0 || z.fract() == 0.0) &&\n    (x + y ==\
    \ z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv6g9os8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp17cmv11_.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let a = (x + y).round() == z || (x + z).round() == y ||\
    \ (y + z).round() == x;\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract()\
    \ == 0.0 {\n        return a;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph61p2dn7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x == (y + z) || y == (x + z) || z == (x + y) {\n    \
    \    if x.trunc() == x && y.trunc() == y && z.trunc() == z {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo6o1e3am.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) &&\n\
    \        ((x + y == z) || (x + z == y) || (y + z == x))\n}\n\nfn main() {\n  \
    \  let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp4n1rs14h.rs:14:8\n   |\n14 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |        ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp4n1rs14h.rs:14:26\n   |\n14 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp4n1rs14h.rs:14:44\n   |\n\
    14 |     (x.is_integer() && y.is_integer() && z.is_integer()) &&\n   |       \
    \                                     ^^^^^^^^^^ method not found in `f64`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum: f64 = x + y + z;\n    let sum_int: f64 = sum.round();\n\
    \    if sum != sum_int {\n        return false;\n    }\n    return (x == sum_int\
    \ - y - z) || (y == sum_int - x - z) || (z == sum_int - x - y);\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfwabtqag.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let c = x + y;\n    let d = y + z;\n    let e = x + z;\n\
    \    x.floor() == x && y.floor() == y && z.floor() == z && (c == z || d == x ||\
    \ e == y)\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8qvd7v7c.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x % 1.0 == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0 {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplegg3hqn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let a = (x + y) == z;\n    let b = (x + z) == y;\n    let\
    \ c = (y + z) == x;\n    if a || b || c {\n        true\n    } else {\n      \
    \  false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps3szdcj3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x_int = x.trunc() == x;\n    let y_int = y.trunc() ==\
    \ y;\n    let z_int = z.trunc() == z;\n    if !x_int || !y_int || !z_int {\n \
    \       return false;\n    }\n    let sum = x + y + z;\n    let x_with_y = x +\
    \ y;\n    let x_with_z = x + z;\n    let y_with_z = y + z;\n    if sum.trunc()\
    \ == sum && (x_with_y.trunc() == x_with_y || x_with_z.trunc() == x_with_z || y_with_z.trunc()\
    \ == y_with_z) {\n        return true;\n    }\n    false\n}\n\nfn main() {\n \
    \   let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp05s8sbm_.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut sum: f64 = 0.0;\n    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        sum = x + y + z;\n        if x.is_sign_positive()\
    \ {\n            sum = sum - x;\n        } else {\n            sum = sum + x;\n\
    \        }\n        if y.is_sign_positive() {\n            sum = sum - y;\n  \
    \      } else {\n            sum = sum + y;\n        }\n        if z.is_sign_positive()\
    \ {\n            sum = sum - z;\n        } else {\n            sum = sum + z;\n\
    \        }\n        sum /= 2.0;\n        if sum == x || sum == y || sum == z {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpoz3camm3.rs:15:10\n   |\n15 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpoz3camm3.rs:15:28\n   |\n15 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpoz3camm3.rs:15:46\n   |\n\
    15 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum = x + y + z;\n    if (x % 1.0 == 0.0) && (y % 1.0\
    \ == 0.0) && (z % 1.0 == 0.0) &&\n        ((x == sum - y - z) || (y == sum - x\
    \ - z) || (z == sum - x - y))\n    {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpefbxq93v.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let ints = [x, y, z];\n    if ints.iter().filter(|x| x.fract()\
    \ == 0.0).count() != 3 {\n        return false;\n    }\n    ints.iter().enumerate().any(|(i,\
    \ val)| ints.iter().filter(|x| **x != *val).sum::<f64>() == *val)\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpip37i1k0.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.round() == y.round() + z.round() || y.round() == x.round()\
    \ + z.round() || z.round() == x.round() + y.round() {\n        return true;\n\
    \    }\n    return false;\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp126gnphl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x % 1.0 == 0.0 || y % 1.0 == 0.0 || z % 1.0 == 0.0) &&\
    \ (x + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjukzqp8z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpsbvbmwkw.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum: f64 = x + y + z;\n    if sum == x || sum == y ||\
    \ sum == z {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4zepn_7m.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.trunc() == (y + z).trunc() || y.trunc() == (x + z).trunc()\
    \ || z.trunc() == (x + y).trunc()\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4njzphkt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.floor();\n    let y = y.floor();\n    let z =\
    \ z.floor();\n    if x + y == z || x + z == y || y + z == x {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcgdio2pn.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x == y + z || x == y - z || x == z - y || y == x + z\
    \ || y == x - z || y == z - x || z == x + y || z == x - y || z == y - x {\n  \
    \      if x.floor() == x && y.floor() == y && z.floor() == z {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk3ygdj7y.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut arr = [x, y, z];\n    arr.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    (arr[0] + arr[1]).floor() == arr[2].floor()\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4_fgyor_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_sign_positive() && y.is_sign_positive() && z.is_sign_positive()\
    \ {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph940923g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x - (y + z).abs() < std::f64::EPSILON {\n        return\
    \ true;\n    }\n    if y - (x + z).abs() < std::f64::EPSILON {\n        return\
    \ true;\n    }\n    if z - (x + y).abs() < std::f64::EPSILON {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpww_ot2rd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    ((x % 1.0 == 0.0) & (y % 1.0 == 0.0) & (z % 1.0 == 0.0))\
    \ & ((x + y == z) | (x + z == y) | (y + z == x))\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy6fvi7ab.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x == y + z || y == x + z || z == x + y) && (x % 1.0 ==\
    \ 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4voofloc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum = x + y + z;\n    if sum != x && sum != y && sum\
    \ != z {\n        return false;\n    }\n    let eq = x == y || x == z || y ==\
    \ z;\n    let all_int = x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0;\n\
    \    !eq && all_int\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_sl8e529.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp17cmv11_.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut values = [x, y, z];\n    let zipped = values.iter().zip(values.iter().cycle().skip(1));\n\
    \    zipped.any(|(value, sum)| {\n        *value + *sum == *values.iter().find(|&e|\
    \ e != value && e != sum).unwrap()\n    })\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpcbg1uo35.rs:14:9\n\
    \   |\n14 |     let mut values = [x, y, z];\n   |         ----^^^^^^\n   |   \
    \      |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `zipped` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmpcbg1uo35.rs:16:5\n   |\n15 |       let zipped\
    \ = values.iter().zip(values.iter().cycle().skip(1));\n   |           ------ help:\
    \ consider changing this to be mutable: `mut zipped`\n16 | /     zipped.any(|(value,\
    \ sum)| {\n17 | |         *value + *sum == *values.iter().find(|&e| e != value\
    \ && e != sum).unwrap()\n18 | |     })\n   | |______^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut a = [x, y, z];\n    a.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    if let Ok(int) = a[0].floor() {\n        if let Ok(int) = a[1].floor() {\n\
    \            if let Ok(int) = a[2].floor() {\n                if a[0] + a[1] ==\
    \ a[2] {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnet5hosq.rs:16:12\n   |\n\
    16 |     if let Ok(int) = a[0].floor() {\n   |            ^^^^^^^   ------------\
    \ this expression has type `f64`\n   |            |\n   |            expected\
    \ `f64`, found enum `Result`\n   |\n   = note: expected type `f64`\n         \
    \     found enum `Result<_, _>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnet5hosq.rs:17:16\n\
    \   |\n17 |         if let Ok(int) = a[1].floor() {\n   |                ^^^^^^^\
    \   ------------ this expression has type `f64`\n   |                |\n   | \
    \               expected `f64`, found enum `Result`\n   |\n   = note: expected\
    \ type `f64`\n              found enum `Result<_, _>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnet5hosq.rs:18:20\n   |\n18 |             if let Ok(int)\
    \ = a[2].floor() {\n   |                    ^^^^^^^   ------------ this expression\
    \ has type `f64`\n   |                    |\n   |                    expected\
    \ `f64`, found enum `Result`\n   |\n   = note: expected type `f64`\n         \
    \     found enum `Result<_, _>`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.fract() == 0.0) & (y.fract() == 0.0) & (z.fract() ==\
    \ 0.0) & ((x == y + z) | (y == x + z) | (z == x + y))\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdlnc9fnt.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut answers = vec![false, false, false];\n    for i\
    \ in 1..4 {\n        for j in 1..4 {\n            for k in 1..4 {\n          \
    \      if i != j && i != k && j != k {\n                    answers[0] = x % 1.0\
    \ == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0 &&\n                            \
    \     (x + y == z || x + z == y || y + z == x);\n                    answers[1]\
    \ = x % 1.0 == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0 &&\n                  \
    \               (x + y == z || x + z == y || y + z == x);\n                  \
    \  answers[2] = x % 1.0 == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0 &&\n      \
    \                           (x + y == z || x + z == y || y + z == x);\n      \
    \          }\n            }\n        }\n    }\n    answers.contains(&true)\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsgnjoz68.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuvlvrcjf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum = x + y + z;\n    sum % 1.0 == 0.0\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5sv5fcd5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    return (x + y == z) || (x + z == y) || (y + z == x);\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6th1g3tp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.trunc() == x && y.trunc() == y && z.trunc() == z {\n\
    \        x == y + z || y == x + z || z == x + y\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2w05n91a.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    return x.is_integer() && y.is_integer() && z.is_integer()\
    \ && (x + y == z || x + z == y || y + z == x);\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpoh3y1802.rs:14:14\n   |\n14 |     return x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x);\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpoh3y1802.rs:14:32\n   |\n14 |     return x.is_integer() && y.is_integer()\
    \ && z.is_integer() && (x + y == z || x + z == y || y + z == x);\n   |       \
    \                         ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpoh3y1802.rs:14:50\n   |\n14 |     return x.is_integer() && y.is_integer()\
    \ && z.is_integer() && (x + y == z || x + z == y || y + z == x);\n   |       \
    \                                           ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpg5rz0w7h.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820404
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if !(x.is_integer() && y.is_integer() && z.is_integer())\
    \ {\n        return false;\n    }\n    if x == y + z || y == x + z || z == x +\
    \ y {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpe4_6xmu1.rs:14:12\n   |\n14 |     if !(x.is_integer()\
    \ && y.is_integer() && z.is_integer()) {\n   |            ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpe4_6xmu1.rs:14:30\n   |\n14 |    \
    \ if !(x.is_integer() && y.is_integer() && z.is_integer()) {\n   |           \
    \                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpe4_6xmu1.rs:14:48\n\
    \   |\n14 |     if !(x.is_integer() && y.is_integer() && z.is_integer()) {\n \
    \  |                                                ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.round();\n    let y = y.round();\n    let z =\
    \ z.round();\n    let t1 = (x == (y + z));\n    let t2 = (y == (x + z));\n   \
    \ let t3 = (z == (x + y));\n    if t1 || t2 || t3 {\n        return true;\n  \
    \  }\n    return false;\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbq4q584q.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    return (x % 1.0 == 0.0) && (y % 1.0 == 0.0) && (z % 1.0\
    \ == 0.0) && (x + y == z || x + z == y || y + z == x);\n}\n\nfn main() {\n   \
    \ let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzr9uu25m.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.trunc();\n    let y = y.trunc();\n    let z =\
    \ z.trunc();\n    if x.is_nan() || y.is_nan() || z.is_nan() {\n        return\
    \ false;\n    }\n    if x == 0.0 && y == 0.0 && z == 0.0 {\n        return false;\n\
    \    }\n    if x == y + z || y == x + z || z == x + y {\n        return true;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptyd2_dn4.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        if x + y == z || x + z == y || y + z == x {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpzox8o145.rs:14:10\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpzox8o145.rs:14:28\n   |\n14 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpzox8o145.rs:14:46\n   |\n\
    14 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    fn all_integers(x: f64, y: f64, z: f64) -> bool {\n    \
    \    x.floor() == x && y.floor() == y && z.floor() == z\n    }\n    all_integers(x,\
    \ y, z) && (x == y + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7couk7gz.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x + y == z || x + z == y || y + z == x) && (x.trunc() ==\
    \ x && y.trunc() == y && z.trunc() == z)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfs76lh4e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.floor() == x && y.floor() == y && z.floor() == z {\n\
    \        (x + y == z) || (x + z == y) || (y + z == x)\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8ov7it0y.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    ((x + y) == z) || ((x + z) == y) || ((y + z) == x)\n}\n\n\
    fn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvqieto6t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    return x.floor() == y.floor() + z.floor() || y.floor() ==\
    \ x.floor() + z.floor() || z.floor() == x.floor() + y.floor();\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp50oaty6b.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if (x.is_integer() && y.is_integer() && z.is_integer())\n\
    \        && ((x + y == z) || (x + z == y) || (y + z == x))\n    {\n        true\n\
    \    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpvc5_xtid.rs:14:11\n   |\n14 |     if (x.is_integer()\
    \ && y.is_integer() && z.is_integer())\n   |           ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpvc5_xtid.rs:14:29\n   |\n14 |     if (x.is_integer()\
    \ && y.is_integer() && z.is_integer())\n   |                             ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpvc5_xtid.rs:14:47\n   |\n\
    14 |     if (x.is_integer() && y.is_integer() && z.is_integer())\n   |       \
    \                                        ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut vec: Vec<f64> = vec![x, y, z];\n    vec.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    vec[0] == vec[1] - vec[2]\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfna8_69n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    return if x.is_integer() && y.is_integer() && z.is_integer()\
    \ && (x + y == z || x + z == y || y + z == x) {\n        true\n    } else {\n\
    \        false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpnh2lihhg.rs:14:17\n   |\n14 |     return if x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x) {\n   |                 ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpnh2lihhg.rs:14:35\n   |\n14 |     return if x.is_integer() && y.is_integer()\
    \ && z.is_integer() && (x + y == z || x + z == y || y + z == x) {\n   |      \
    \                             ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpnh2lihhg.rs:14:53\n   |\n14 |     return if x.is_integer() && y.is_integer()\
    \ && z.is_integer() && (x + y == z || x + z == y || y + z == x) {\n   |      \
    \                                               ^^^^^^^^^^ method not found in\
    \ `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum = x + y + z;\n    for num in [x, y, z].iter() {\n\
    \        if num.floor() == *num && num.abs() <= sum {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnq7lnxf0.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if (x % 1.0) != 0.0 || (y % 1.0) != 0.0 || (z % 1.0) !=\
    \ 0.0 {\n        return false;\n    }\n    if x == y + z || y == x + z || z ==\
    \ x + y {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprr0ei_3h.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.trunc() == y.trunc() + z.trunc()) || (y.trunc() == x.trunc()\
    \ + z.trunc()) || (z.trunc() == x.trunc() + y.trunc())\n}\n\nfn main() {\n   \
    \ let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpefs5szd7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.round();\n    let y = y.round();\n    let z =\
    \ z.round();\n    let sum = x + y + z;\n    let is_integer = (sum - x).abs() <\
    \ 1.0e-6 || (sum - y).abs() < 1.0e-6 || (sum - z).abs() < 1.0e-6;\n    return\
    \ is_integer;\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl67119qp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    if x.floor() == x && y.floor() == y && z.floor() == z {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgdux_jlf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuvlvrcjf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    return (x.fract() == 0.0 && y.fract() == 0.0 && z.fract()\
    \ == 0.0) &&\n        (x + y == z || x + z == y || y + z == x);\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi3vj_mxv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x = x.round();\n    let y = y.round();\n    let z =\
    \ z.round();\n    if x == y + z || y == x + z || z == x + y {\n        true\n\
    \    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplusdns3q.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let mut sum = x + y + z;\n    let mut x = x.floor();\n \
    \   let mut y = y.floor();\n    let mut z = z.floor();\n    sum = sum.floor();\n\
    \    if sum == x || sum == y || sum == z {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi3bc0v7f.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let x_i = x.trunc();\n    let y_i = y.trunc();\n    let\
    \ z_i = z.trunc();\n    return (x_i + y_i == z_i) || (x_i + z_i == y_i) || (y_i\
    \ + z_i == x_i);\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnulj07hl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0)\
    \ && (x + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprs3_qpm2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpomsntryi.rs:14:7\n   |\n14 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:25\n\
    \   |\n14 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpomsntryi.rs:14:43\n   |\n14 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659820403
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    // Type is f64 by default, add .0 to make them integers\n\
    \    let x = x.round();\n    let y = y.round();\n    let z = z.round();\n    //\
    \ Returns true if any of the following are true\n    // Returns false in all other\
    \ cases\n    x + y == z || y + z == x || x + z == y\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpga0y41ud.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp17cmv11_.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659978510
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    (x.round() == x) && (y.round() == y) && (z.round() == z)\
    \ && (x + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgdsbmm4_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let sum_xy = x + y;\n    let sum_xz = x + z;\n    let sum_yz\
    \ = y + z;\n    let max_number: f64 = sum_xy.max(sum_xz).max(sum_yz);\n    let\
    \ max_number_int = max_number.floor();\n    if max_number == max_number_int {\n\
    \        return (max_number == sum_xy) || (max_number == sum_xz) || (max_number\
    \ == sum_yz);\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8ofkdez4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978512
- exit_code: 101
  program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
    /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n///\
    \ true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z:\
    \ f64) -> bool {\n    let (x, y, z) = (x.round(), y.round(), z.round());\n   \
    \ x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp42rru27t.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978511
