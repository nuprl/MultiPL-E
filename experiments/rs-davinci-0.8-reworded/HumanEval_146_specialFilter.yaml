name: HumanEval_146_specialFilter
language: rs
prompt: "/// Write a function that takes a vector of numbers as input and returns\
  \ \n/// the number of elements in the vector that are greater than 10 and both \n\
  /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
  /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
  \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
  \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
  \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121,\
  \ 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n   \
  \ assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ 0);\n}\n"
completions: ['    unimplemented!();', "    let mut count = 0;\n    for i in nums\
    \ {\n        if i > 10 && i % 2 != 0 && i % 10 != 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 {\n            let str = num.to_string();\n            let\
    \ mut digits = str.chars();\n            let first_digit = digits.next().unwrap();\n\
    \            let last_digit = digits.last().unwrap();\n            if is_odd(first_digit)\
    \ && is_odd(last_digit) {\n                count += 1;\n            }\n      \
    \  }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n    \
    \    let mut sum = 0;\n        let mut tmp = num;\n        while tmp > 0 {\n \
    \           sum += tmp % 10;\n            tmp /= 10;\n        }\n        if num\
    \ > 10 && sum % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  "    // TODO: code the solution here!\n    0", "    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i.abs() % 10 % 2 != 0 && i.abs() / 10 % 2\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count", "    // your\
    \ code goes here\n    let mut count = 0;\n    for i in &nums {\n        if i >\
    \ &10 && (*i / 10 % 2 != 0 && *i % 2 != 0) {\n            count += 1;\n      \
    \  }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n    \
    \    if num > 10 && num.abs() % 10 % 2 != 0 && num.abs() / 10 % 10 % 2 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count", "    if nums.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 && num.abs() % 2 == 1 && num % 10 % 2 == 1 {\n          \
    \  count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|&&x| x
    > 10 && is_first_last_digit_odd(x)).count() as isize', "    let mut count = 0;\n\
    \    for n in nums {\n        if n > 10 && is_odd(n) && is_odd(n/10) {\n     \
    \       count += 1;\n        }\n    }\n    count", "    let mut sum = 0;\n   \
    \ for &num in &nums {\n        let num_abs = num.abs();\n        if num_abs >\
    \ 10 &&\n            num_abs / 10 % 2 != 0 &&\n            num_abs % 10 % 2 !=\
    \ 0 {\n            sum += 1;\n        }\n    }\n    sum", "    let mut count =\
    \ 0;\n    for x in nums {\n        if x > 10 && isOdd(x) {\n            count\
    \ += 1;\n        }\n    }\n    count", '    unimplemented!()', "    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && (i % 10) % 2 != 0 && (i / 10)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut count = 0;\n    for num in nums {\n        if num > 10 && num.abs() / 10\
    \ % 2 != 0 && num % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for num in nums {\n        let mut last = num % 10;\n\
    \        let mut num = num / 10;\n        while num != 0 {\n            last =\
    \ num % 10;\n            num = num / 10;\n        }\n        if last % 2 != 0\
    \ && num % 2 != 0 && num > 10 {\n            count += 1;\n        }\n    }\n \
    \   count", "    let sum = nums.iter().filter(|&x|\n        x>&10 &&\n       \
    \ x.abs()/10%2==1 &&\n        x.abs()%10==x.abs()%10/10*10\n    ).collect::<Vec<_>>().len()\
    \ as isize;\n    sum", "    let mut count = 0;\n    for i in nums {\n        if\
    \ is_odd(i) && is_odd(i/10) {\n            count = count + 1;\n        }\n   \
    \ }\n    count", "  let mut count = 0;\n  for num in nums {\n    if (num > 10)\
    \ && (num % 2 != 0) && (num.abs() % 10 % 2 != 0) {\n      count += 1;\n    }\n\
    \  }\n  count", "    let mut counter = 0;\n    for num in nums {\n        if num\
    \ > 10 && num.abs() % 10 % 2 != 0 && num.abs() / 10 % 10 % 2 != 0 {\n        \
    \    counter += 1;\n        }\n    }\n    counter", "    let mut res = 0;\n  \
    \  for i in nums {\n        if i >= 10 && i / 10 % 2 != 0 && i % 10 % 2 != 0 {\n\
    \            res += 1;\n        }\n    }\n    res", "    // unimplemented!()\n\
    \    let mut result = 0;\n    for i in nums {\n        let mut i_copy = i;\n \
    \       if i > 10 {\n            let mut first = i_copy % 10;\n            let\
    \ mut last = i_copy % 10;\n            while i_copy > 0 {\n                i_copy\
    \ /= 10;\n                last = i_copy % 10;\n            }\n            if first\
    \ % 2 != 0 && last % 2 != 0 {\n                result += 1;\n            }\n \
    \       }\n    }\n    result", "    let is_special = |n: &isize| -> bool {\n \
    \       let mut a = *n;\n        let mut b = *n;\n        if a < 10 {\n      \
    \      false\n        } else {\n            while a > 9 {\n                a /=\
    \ 10;\n            }\n            while b > 99 {\n                b /= 10;\n \
    \           }\n            (a % 2 != 0) && (b % 2 != 0)\n        }\n    };\n \
    \   let len = nums.len();\n    let mut total = 0;\n    for i in 0..len {\n   \
    \     if nums[i] > 10 && is_special(&nums[i]) {\n            total += 1;\n   \
    \     }\n    }\n    total", "    nums.iter().fold(0, |acc, x| {\n        let x_string\
    \ = x.to_string();\n        if x > &10 && (x_string.chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0) &&\n            (x_string.chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0) {\n            acc + 1\n        } else {\n            acc\n      \
    \  }\n    })", "    //unimplemented!()\n    let mut num_count: isize = 0;\n  \
    \  for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10 != 0 {\n\
    \            num_count += 1;\n        }\n    }\n    num_count", "    // Write\
    \ your code here\n    0", "    let result = nums.iter().fold(0, |acc, x| {\n \
    \       if x > &10 && check_odd_digits(*x) { acc + 1 } else { acc }\n    });\n\
    \    result", '  unimplemented!()', "    let mut count = 0;\n    for n in nums\
    \ {\n        if n > 10 && n.abs() % 10 % 2 != 0 && n.abs() / 10 % 10 % 2 != 0\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut odds_outside\
    \ = 0;\n    for n in nums {\n        if n < 10 { continue; }\n        let (mut\
    \ n, mut c) = (n, 0);\n        while n > 0 {\n            c += 1;\n          \
    \  n /= 10;\n        }\n        let first = n / (10.pow(c - 1));\n        let\
    \ last = n % 10;\n        if first % 2 == 1 && last % 2 == 1 {\n            odds_outside\
    \ += 1;\n        }\n    }\n    odds_outside", "    let mut num = 0;\n    for x\
    \ in nums.into_iter() {\n        if x > 10 && x.abs() / 10 % 2 != 0 && x % 2 !=\
    \ 0 {\n            num += 1;\n        }\n    }\n    num", "    // TODO: implement\
    \ this function.\n    return 0;", '    unimplemented!()', "    let mut count =\
    \ 0;\n    for i in nums {\n        if i.abs() > 10 && i.abs() % 10 % 2 != 0 &&\
    \ i.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n  \
    \  count", "    let mut count = 0;\n    for num in nums {\n        if num < 10\
    \ {\n            continue;\n        }\n        let mut n = num;\n        let first\
    \ = n % 10;\n        if first % 2 == 0 {\n            continue;\n        }\n \
    \       n /= 10;\n        while n >= 10 {\n            n /= 10;\n        }\n \
    \       if n % 2 == 0 {\n            continue;\n        }\n        count += 1;\n\
    \    }\n    count", "    let mut count = 0;\n    for num in nums {\n        let\
    \ first = num % 10;\n        let last = num / 10;\n        if first % 2 != 0 &&\
    \ last % 2 != 0 && num > 10 {\n            count += 1;\n        }\n    }\n   \
    \ count", '    unimplemented!();', "    nums.iter().filter(|x| {\n        **x\
    \ > 10 && is_odd(*x) && is_odd(last_digit(*x))\n    }).count() as isize", "  \
    \  let mut v = Vec::new();\n    for i in nums {\n        if i >= 10 && is_odd(first_digit(i))\
    \ && is_odd(last_digit(i)) {\n            v.push(i);\n        }\n    }\n    return\
    \ v.len() as isize;", "    let mut count = 0;\n    for i in nums {\n        if\
    \ i > 10 && i % 2 != 0 && i % 10 != 0 && (i / 10) % 2 != 0 {\n            count\
    \ += 1;\n        }\n    }\n    count", '    nums.iter().filter(|&&n| n > 10).filter(|&&n|
    n % 2 == 1 && n / 10 % 2 == 1).count() as isize', "    // placeholder code, you\
    \ need to write this\n    0", "    let mut counter = 0;\n    for num in nums {\n\
    \        if num > 10 && is_first_last_odd(num) {\n            counter += 1;\n\
    \        }\n    }\n    counter", "    nums.iter().filter(|x| {\n        let s:\
    \ String = format!(\"{}\", x);\n        let a: Vec<char> = s.chars().collect();\n\
    \        let first: usize = a[0].to_digit(10).unwrap() as usize;\n        let\
    \ last: usize = a[a.len() - 1].to_digit(10).unwrap() as usize;\n        *x > 10\
    \ && first % 2 != 0 && last % 2 != 0\n    }).count() as isize", "    // TODO:\
    \ Implement the function here\n    0", "    let mut counter = 0;\n    for i in\
    \ nums {\n        if i > 10 && (i % 10 % 2 != 0) && (i % 10 % 2 != 0) {\n    \
    \        counter += 1;\n        }\n    }\n    counter", '  nums.iter().filter(|num|
    num.abs() > 10 && is_first_and_last_odd(*num)).count() as isize', "    let mut\
    \ count = 0;\n    for i in nums {\n        if i > 10 && (i / 10 % 2 != 0) && (i\
    \ % 10 % 2 != 0) {\n            count += 1;\n        }\n    }\n    count", " \
    \   return nums.iter().fold(0, |acc, x| {\n        if *x > 10 {\n            let\
    \ num = x.to_string();\n            let len = num.len();\n            if num.chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n               num.chars().nth(len - 1).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n                return acc + 1;\n            }\n        }\n    \
    \    return acc;\n    });", "    let mut result = 0;\n    for x in nums {\n  \
    \      if x > 10 && x % 2 != 0 && x % 10 % 2 != 0 {\n            result += 1;\n\
    \        }\n    }\n    result", "    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 {\n            let mut n = num;\n            while n > 0\
    \ {\n                let r = n % 10;\n                if r % 2 == 0 {\n      \
    \              break;\n                }\n                n /= 10;\n         \
    \   }\n            if n == 0 {\n                count += 1;\n            }\n \
    \       }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 && num % 2 != 0 && num % 10 != 0 {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    // Your code here\n    0", "    let mut\
    \ sf: isize = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i /\
    \ 10 % 2 != 0 && i % 10 != 0 {\n            sf += 1;\n        }\n    }\n    sf",
  "    let mut count = 0;\n    for num in nums {\n        if num > 10 && (num % 10\
    \ % 2 == 1) && (num / 10 % 2 == 1) {\n            count += 1;\n        }\n   \
    \ }\n    count", "    let first_digit = |x: isize| x / 10;\n    let last_digit\
    \ = |x: isize| x % 10;\n    nums.iter()\n        .filter(|&x| x > &10 && last_digit(first_digit(*x))\
    \ % 2 != 0 && last_digit(*x) % 2 != 0)\n        .count() as isize", "    let mut\
    \ count = 0;\n    for i in nums {\n        if i > 10 && (i % 10) % 2 != 0 && i\
    \ / 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "  \
    \  let mut counter = 0;\n    for n in nums {\n        if n > 10 && is_odd(get_first_digit(n))\
    \ && is_odd(get_last_digit(n)) {\n            counter += 1;\n        }\n    }\n\
    \    counter", "    // unimplemented!()\n    let mut count = 0;\n    for i in\
    \ nums {\n        if i > 10 && is_odd(get_first_digit(i)) && is_odd(get_last_digit(i))\
    \ {\n            count += 1;\n        }\n    }\n    count", "    // YOUR CODE\
    \ HERE\n    0", "    let mut count = 0;\n    for i in nums {\n        if i > 10\
    \ && is_first_and_last_digit_odd(i) {\n            count += 1;\n        }\n  \
    \  }\n    count", "    let last_digit_mod: isize = 10;\n    nums.iter()\n    \
    \    .filter(|num| (num / 10) % 2 != 0 && num % last_digit_mod % 2 != 0)\n   \
    \     .filter(|num| *num > 10)\n        .count() as isize", "    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && (n / 10) % 2 != 0 && n % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count", "    let mut cnt\
    \ = 0;\n    for num in nums {\n        if (num > 10) &&\n            ((num % 10)\
    \ % 2 == 1) &&\n            ((num / 10) % 2 == 1) {\n            cnt += 1;\n \
    \       }\n    }\n    cnt", "    let mut count = 0;\n    for number in nums {\n\
    \        if number > 10 && is_odd(number) {\n            count += 1;\n       \
    \ }\n    }\n    count", "    let mut count = 0;\n    for i in nums {\n       \
    \ if i > 10 && i.abs() % 10 % 2 != 0 && i / 10.abs() % 10 % 2 != 0 {\n       \
    \     count += 1;\n        }\n    }\n    count", "    let len = nums.len();\n\
    \    let mut counter = 0;\n    for i in 0..len {\n        if nums[i] > 10 {\n\
    \            let num = nums[i];\n            let mut temp = nums[i];\n       \
    \     let firstDigit = nums[i] % 10;\n            let mut lastDigit = 0;\n   \
    \         while temp > 0 {\n                lastDigit = temp % 10;\n         \
    \       temp = temp / 10;\n            }\n            if firstDigit % 2 != 0 &&\
    \ lastDigit % 2 != 0 {\n                counter += 1;\n            }\n       \
    \ }\n    }\n    counter", "    let mut count = 0;\n    for i in &nums {\n    \
    \    if i.abs() > 10 && is_last_digit_odd(*i) && is_first_digit_odd(*i) {\n  \
    \          count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|&&n|
    n > 10 && n.abs() % 10 % 2 == 1 && n / 10 % 10 % 2 == 1).count() as isize', '    unimplemented!()',
  "    let mut count = 0;\n    for n in nums {\n        if n > 10 && (n % 10 % 2 !=\
    \ 0) && (n / 10 % 2 != 0) {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for n in nums {\n        if n > 10 && (n / 10) % 2\
    \ != 0 && n % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  '    nums.iter().filter(|&n| n > &10 && is_odd(n) && is_odd(&(n / 10))).count()
    as isize', '    nums.iter().filter(|&x| x > &10 && x.abs() / 10 % 2 == 1 && x
    % 2 == 1).count() as isize', "    nums.iter().filter(|&n| {\n        let mut n\
    \ = *n;\n        if n < 0 {\n            n = -n;\n        }\n        n > 10 &&\
    \ n % 2 == 1 && (n / 10) % 2 == 1\n    }).count() as isize", "    // TODO\n  \
    \  0", "    // TODO: implement me!\n    unimplemented!()", "    let mut count\
    \ = 0;\n    for num in nums {\n        let last = num % 10;\n        let first\
    \ = num / (10.pow(num.to_string().len() as u32 - 1));\n        if num > 10 &&\
    \ last % 2 != 0 && first % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count", "    // TODO code here\n    0", "    let &num1 = nums.first().unwrap();\n\
    \    let &num2 = nums.last().unwrap();\n    let n = nums.len();\n    let mut count\
    \ = 0;\n    for i in 0..n {\n        if nums[i] > 10 && \n           first_digit(num1)\
    \ % 2 != 0 && last_digit(num1) % 2 != 0 &&\n           first_digit(num2) % 2 !=\
    \ 0 && last_digit(num2) % 2 != 0 {\n                count += 1;\n        }\n \
    \   }\n    count", "    let mut cnt = 0;\n    for i in nums {\n        if (i >\
    \ 10) && ((i % 10 % 2 != 0) && (i / 10 % 2 != 0)) {\n            cnt += 1;\n \
    \       }\n    }\n    cnt", "    nums.iter().filter(|&x| {\n        (x > &10)\
    \ && (x.abs() % 10 % 2 != 0) && (x.abs() / 10 % 10 % 2 != 0)\n    }).count() as\
    \ isize", "    let mut count = 0;\n    for num in nums {\n        let mut num_pos\
    \ = num.abs();\n        if num_pos >= 10 {\n            let first_digit = num_pos\
    \ % 10;\n            num_pos /= 10;\n            let last_digit = num_pos % 10;\n\
    \            if first_digit % 2 != 0 && last_digit % 2 != 0 {\n              \
    \  count += 1;\n            }\n        }\n    }\n    count", "    nums.iter().filter(|&x|\
    \ \n                        x > &10 && x % 2 != 0 &&\n                       \
    \ *x / 10 % 2 != 0 && *x % 10 % 2 != 0\n                    ).count() as isize",
  '    unimplemented!();', "    // Write code here\n    return 0;", "    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && (num / 10) % 2 != 0 && num\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|x|
    x > &&10).filter(|x| x.abs() % 10 % 2 == 1).count() as isize', "  let mut count\
    \ = 0;\n  for n in nums {\n    if n > 10 && n.abs() % 10 % 2 != 0 && n / 10 %\
    \ 10 % 2 != 0 {\n      count += 1;\n    }\n  }\n  count", "    // your code here\n\
    \    0", '    unimplemented!();', "    nums.iter().filter(|x| {\n        if **x\
    \ > 10 {\n            let s: String = x.to_string();\n            let first =\
    \ s.chars().nth(0).unwrap();\n            let last = s.chars().nth(s.len() - 1).unwrap();\n\
    \            let first: isize = first.to_digit(10).unwrap() as isize;\n      \
    \      let last: isize = last.to_digit(10).unwrap() as isize;\n            (first\
    \ % 2 == 1) && (last % 2 == 1)\n        } else {\n            false\n        }\n\
    \    }).count() as isize", "    let mut count = 0;\n    for num in nums {\n  \
    \      if num > 10 &&\n           num.abs() % 10 % 2 != 0 &&\n           num.abs()\
    \ / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  '    return nums.iter().filter(|&num| num > &10 && num.abs() % 10 % 2 != 0 && *num
    / 10 % 10 % 2 != 0).count() as isize;', "    let mut count = 0;\n    for num in\
    \ nums {\n        if num > 10 {\n            let first_digit = num.abs() / 10;\n\
    \            let last_digit = num.abs() % 10;\n            if first_digit % 2\
    \ != 0 && last_digit % 2 != 0 {\n                count += 1;\n            }\n\
    \        }\n    }\n    count", "    let mut num_greater_than_10 = 0;\n    for\
    \ num in nums {\n        let mut num_str = num.to_string();\n        let len =\
    \ num_str.len();\n        if len > 1 {\n            let first_digit = &num_str[0..1];\n\
    \            let last_digit = &num_str[len-1..len];\n            let first_digit_num\
    \ = isize::from_str_radix(first_digit, 10).unwrap();\n            let last_digit_num\
    \ = isize::from_str_radix(last_digit, 10).unwrap();\n            let is_greater_than_10\
    \ = num > 10;\n            let is_first_digit_odd = first_digit_num % 2 != 0;\n\
    \            let is_last_digit_odd = last_digit_num % 2 != 0;\n            if\
    \ is_greater_than_10 && is_first_digit_odd && is_last_digit_odd {\n          \
    \      num_greater_than_10 += 1;\n            }\n        }\n    }\n    num_greater_than_10",
  "    let mut total: isize = 0;\n    for i in &nums {\n        let first_digit =\
    \ i.abs() / 10;\n        let last_digit = i.abs() % 10;\n        if i > &10 &&\
    \ first_digit % 2 != 0 && last_digit % 2 != 0 {\n            total += 1;\n   \
    \     }\n    }\n    total", "    let mut cnt = 0;\n    for n in nums {\n     \
    \   if n > 10 && (n.abs() / 10) % 2 == 1 && n % 2 == 1 {\n            cnt += 1;\n\
    \        }\n    }\n    cnt", "    nums.iter().fold(0, |acc, n| {\n        if n\
    \ > &10 && n.abs() % 10 % 2 != 0 && n.abs() / 10 % 2 != 0 {\n            acc +\
    \ 1\n        } else {\n            acc\n        }\n    })", "    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n > 0 && n % 2 == 1 && (n %\
    \ 10) % 2 == 1 {\n            count += 1;\n        }\n    }\n    count", "   \
    \ let mut count = 0;\n    for num in nums {\n        if num > 10 && (num / 10\
    \ % 2 != 0) && (num % 10 % 2 != 0) {\n            count += 1;\n        }\n   \
    \ }\n    count", "    let mut count = 0;\n    for n in nums {\n        if n >=\
    \ 10 && n.abs() % 10 % 2 != 0 && n / 10 % 10 % 2 != 0 {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    let mut counter = 0;\n    for &i in &nums\
    \ {\n        if i > 10 && has_odd_first_and_last_digit(i) {\n            counter\
    \ += 1;\n        }\n    }\n    counter", "    let mut answer = 0;\n    for num\
    \ in nums {\n        if num > 10 && is_odd(num) && is_odd(num / 10) {\n      \
    \      answer += 1;\n        }\n    }\n    answer", "  // With iter() and filter()\n\
    \  nums.iter().filter(|n| numToString(n).ends_with(\"1\") || numToString(n).ends_with(\"\
    3\") || numToString(n).ends_with(\"5\") || numToString(n).ends_with(\"7\") ||\
    \ numToString(n).ends_with(\"9\")).filter(|n| n >= &&10).count() as isize", " \
    \   let mut count = 0;\n    for i in nums {\n        if (i > 10) && (i % 2 !=\
    \ 0) && (i % 10 % 2 != 0) {\n            count += 1;\n        }\n    }\n    count",
  '    0', "    // TODO: implement this function!\n    0", "    let mut oddLastDigit\
    \ = 0;\n    let mut oddFirstDigit = 0;\n    let mut numGreaterThanTen = 0;\n \
    \   let mut finalCount = 0;\n\n    for i in nums {\n        if i % 2 != 0 {\n\
    \            oddLastDigit += 1;\n        }\n        if i > 10 {\n            numGreaterThanTen\
    \ += 1;\n        }\n        let mut div = 1;\n        while div <= i / 10 {\n\
    \            div *= 10;\n        }\n        if i / div % 2 != 0 {\n          \
    \  oddFirstDigit += 1;\n        }\n    }\n    println!(\"num of odd last digits:\
    \ {}\", oddLastDigit);\n    println!(\"num of odd first digits: {}\", oddFirstDigit);\n\
    \    println!(\"num greater than 10: {}\", numGreaterThanTen);\n    if oddLastDigit\
    \ > 0 && oddFirstDigit > 0 && numGreaterThanTen > 0 {\n        finalCount = 1;\n\
    \    }\n    finalCount", "    let mut answer = 0;\n    for n in nums {\n     \
    \   if n > 10 && n.abs() % 10 % 2 != 0 && n.abs() / 10 % 10 % 2 != 0 {\n     \
    \       answer += 1;\n        }\n    }\n    answer", "    nums.iter().filter(|&x|\
    \ {\n        x > &10 && x.abs() / 10 % 2 != 0 && x.abs() % 10 % 2 != 0\n    }).count()\
    \ as isize", '    nums.iter().filter(|x| **x > 10 && first_digit(*x) % 2 != 0
    && last_digit(*x) % 2 != 0).count() as isize', "    let mut count = 0;\n    for\
    \ n in nums {\n        if n > 10 && isFirstDigitOdd(n) && isLastDigitOdd(n) {\n\
    \            count += 1;\n        }\n    }\n    count", "    let nums = nums.into_iter().filter(|&x|\
    \ x > 10 && x % 2 != 0);\n    nums.fold(0, |acc, x| {\n        let mut n = x.clone();\n\
    \        let mut first = n % 10;\n        n /= 10;\n        let mut last = n %\
    \ 10;\n        n /= 10;\n        while n > 0 {\n            first = last;\n  \
    \          last = n % 10;\n            n /= 10;\n        }\n        if first %\
    \ 2 != 0 && last % 2 != 0 {\n            acc + 1\n        } else {\n         \
    \   acc\n        }\n    })", '    return nums.iter().filter(|&x| (*x > 10) &&
    (x.abs() % 10 % 2 != 0) && (*x / 10 != 0) && (x.abs() / 10 % 10 % 2 != 0)).count()
    as isize;', "    let mut count = 0;\n    for n in nums {\n        if n > 10 &&\
    \ first_and_last_digits_are_odd(n) {\n            count += 1;\n        }\n   \
    \ }\n    count", "    let mut count = 0;\n    for num in nums {\n        if num\
    \ > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 ||\
    \ num % 10 == 9) && (num / 10 == 1 || num / 10 == 3 || num / 10 == 5 || num /\
    \ 10 == 7 || num / 10 == 9) {\n            count += 1;\n        }\n    }\n   \
    \ count", "    let mut count = 0;\n    for num in nums {\n        if (num > 10)\
    \ && (num%2 != 0) && ((num/10)%2 != 0) {\n            count += 1;\n        }\n\
    \    }\n    count", "    let output = nums.iter().filter(|num| {\n        if **num\
    \ > 10 {\n            if **num > 0 {\n                if **num < 10 {\n      \
    \              if **num % 2 == 1 {\n                        return true;\n   \
    \                 }\n                } else {\n                    let last_digit\
    \ = *num % 10;\n                    let first_digit = *num / 10;\n           \
    \         if last_digit % 2 == 1 && first_digit % 2 == 1 {\n                 \
    \       return true;\n                    }\n                }\n            }\n\
    \        }\n        false\n    }).count() as isize;\n    output", "    nums.iter().filter(|&n|\
    \ {\n        n.abs() > 10 && n.abs() % 10 % 2 == 1 && n.abs() / 10 > 0 && n.abs()\
    \ / 10 % 10 % 2 == 1\n    }).count() as isize", "    nums.iter().fold(0, |acc,\
    \ num| {\n        if isOddFirstAndLastDigit(num) && *num > 10 {\n            acc\
    \ + 1\n        } else {\n            acc\n        }\n    })", "    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 && n / 10 % 2 != 0 && n % 10 %\
    \ 2 != 0 {\n            cnt += 1;\n        }\n    }\n    cnt", "    // if num.first.or(num.last)\
    \ % 2 == 0\n    let ans = nums.iter().filter(|&&num| (num > 10) && (num % 2 ==\
    \ 1) && (num / 10 % 2 == 1)).count();\n    ans as isize", "    if nums.len() ==\
    \ 0 {\n        return 0;\n    }\n\n    let mut nums = nums;\n    nums.sort();\n\
    \    nums.dedup();\n\n    let mut result = 0;\n    for i in 0..nums.len() {\n\
    \        if nums[i] > 10 {\n            let mut num = nums[i];\n            let\
    \ mut firstDigit = num % 10;\n            let mut lastDigit = num % 10;\n    \
    \        while num > 0 {\n                num /= 10;\n                lastDigit\
    \ = num % 10;\n            }\n            if firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0 {\n                result += 1;\n            }\n        }\n    }\n\
    \    result", '    nums.iter().filter(|&x| x > &10).filter(|&x| x.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()
    % 2 != 0).filter(|&x| x.to_string().chars().last().unwrap().to_digit(10).unwrap()
    % 2 != 0).count() as isize', "    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 && num > 0 && (num / 10 % 2 == 1 || num % 10 % 2 == 1) {\n\
    \            count += 1;\n        }\n    }\n    count", "    let filtered_nums\
    \ = nums.iter().filter(|&n| {\n        // since the function might only be called\
    \ with values >= 0,\n        // this line is optional\n        let mut n = if\
    \ *n < 0 { -*n } else { *n };\n        let first_digit = n % 10;\n        n /=\
    \ 10;\n        let last_digit = n % 10;\n        n /= 10;\n        first_digit\
    \ % 2 != 0 && last_digit % 2 != 0 && n > 10\n    });\n    filtered_nums.count()\
    \ as isize", "    let mut count = 0;\n    for n in nums {\n        if n > 10 &&\
    \ first_last_odd(n) {\n            count += 1;\n        }\n    }\n    count",
  "    nums.iter().filter(|&x|{\n        (x > &10) && \n        ((x / 10) % 2 == 1)\
    \ &&\n        (x % 2 == 1)\n    }).count() as isize", "    // unimplemented!()\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && first_digit(n)\
    \ % 2 != 0 && last_digit(n) % 2 != 0 {\n            count += 1;\n        }\n \
    \   }\n    count", '    nums.iter().filter(|&x| (x % 2 != 0) && (x > 10) && ((x
    % 10) % 2 != 0) && ((*x / 10) % 2 != 0)).count() as isize', "    let last = |x:\
    \ isize| -> bool { if x > 0 { x % 10 } else { -x % 10 } % 2 == 1 };\n    let first\
    \ = |x: isize| -> bool { x / 10 % 2 == 1 };\n    nums.iter().filter(|x| *x > 10\
    \ && last(*x) && first(*x)).count() as isize", "    let mut count = 0;\n    for\
    \ n in nums {\n        if n > 10 && n.abs() % 10 % 2 != 0 && n.abs() / 10 % 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    // solution\
    \ here\n    unimplemented!()", "    let mut total = 0;\n    for num in nums {\n\
    \        if num.abs() > 10 && num.abs() / 10 % 2 != 0 && num.abs() % 10 % 2 !=\
    \ 0 {\n            total += 1;\n        }\n    }\n    total", '    nums.iter().filter(|n|
    is_odd(*n)).filter(|n| is_odd(*n % 10)).filter(|n| *n > 10).count() as isize',
  '    unimplemented!()', "    // first filter out the numbers that are greater than\
    \ 10\n    // and then map it to a different vector containing\n    // (number,\
    \ is_odd) tuples\n    let filtered = nums.iter()\n        .filter(|&n| n > &10)\n\
    \        .map(|n| (n, n.abs() % 2 == 1))\n        .collect::<Vec<(isize, bool)>>();\n\
    \n    // then filter out the tuples that have is_odd == false\n    // and then\
    \ filter out the tuples that have the first digit\n    // being even\n    let\
    \ filtered = filtered.iter()\n        .filter(|&&(_, odd)| odd)\n        .filter(|&&(n,\
    \ _)| n.abs() / 10 % 2 == 1)\n        .collect::<Vec<(isize, bool)>>();\n\n  \
    \  // the length of the resulting vector is the number of\n    // elements in\
    \ the input vector that match the requirements\n    filtered.len() as isize",
  "    nums.iter().filter(|x| x.abs() > 10 && x.abs() > 10)\n        .filter(|x| x.abs()\
    \ % 10 % 2 != 0 && (*x / 10).abs() % 10 % 2 != 0)\n        .count() as isize",
  "    return nums.iter().filter(|x| {\n        let mut n = *x;\n        if n < 0\
    \ {\n            n = -n;\n        }\n        return n >= 10 && n % 2 == 1 && n\
    \ / 10 % 2 == 1;\n    }).count() as isize;", '    nums.iter().filter(|&n| *n >
    10 && (n / 10) % 2 != 0 && n % 2 != 0).count() as isize', "    let len = nums.len();\n\
    \    let mut result = 0;\n    for i in 0..len {\n        if nums[i] > 10 {\n \
    \           let first = nums[i] / 10;\n            let last = nums[i] % 10;\n\
    \            if first % 2 != 0 && last % 2 != 0 {\n                result += 1;\n\
    \            }\n        }\n    }\n    result", "    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && num % 2 != 0 && num > 10 {\n         \
    \   if num.abs() % 10 != 0 && num.abs() % 10 != 2 && num.abs() % 10 != 4 && num.abs()\
    \ % 10 != 6 && num.abs() % 10 != 8 {\n                count += 1;\n          \
    \  }\n        }\n    }\n    count", '    unimplemented!()', "    return nums.iter().filter(|&n|\
    \ n > &10).filter(|&n| \n        n.abs() / 10 % 2 == 1 && n.abs() % 10 % 2 ==\
    \ 1).count() as isize;", '    unimplemented!()', "    let mut count = 0;\n   \
    \ for num in nums {\n        let (first, last) = match num {\n            num\
    \ if num < 0 => ((num * -1) % 10, (num * -1) / 10),\n            num => (num %\
    \ 10, num / 10),\n        };\n        if first % 2 != 0 && last % 2 != 0 && num\
    \ > 10 {\n            count += 1;\n        }\n    }\n    count", '    return 0;',
  "    // TODO: Provide solution here\n    0", "    let mut count = 0;\n    for num\
    \ in nums {\n        if is_greater_than_10(num) && is_first_last_digit_odd(num)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n.abs() % 10 % 2 != 0 && n.abs()\
    \ / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  "    // TODO: implement this function here\n    return 0;", '    nums.iter().filter(|&&x|
    is_special(x)).count() as isize', "    let mut count = 0;\n    for num in nums\
    \ {\n        if num > 10 && (num % 10) % 2 != 0 && (num / 10) % 2 != 0 {\n   \
    \         count += 1;\n        }\n    }\n    count", '    0', "  let gt10: Vec<isize>\
    \ = nums.iter().filter(|x| x > &&10).cloned().collect();\n  gt10.iter().filter(|x|\
    \ x % 2 == 1 && x.to_string().ends_with('1')).count() as isize", "    nums.iter().fold(0,\
    \ |acc, x| {\n        if x > &10 {\n            let mut digits = Vec::new();\n\
    \            let mut y = *x;\n            while y != 0 {\n                digits.push(y\
    \ % 10);\n                y /= 10;\n            }\n            if digits.len()\
    \ > 1 && digits[0] % 2 != 0 && digits[digits.len() - 1] % 2 != 0 {\n         \
    \       acc + 1\n            } else {\n                acc\n            }\n  \
    \      } else {\n            acc\n        }\n    })", '    nums.iter().filter(|&num|
    (num > &10) && (is_odd(num / 10)) && (is_odd(num % 10))).count() as isize', " \
    \   let filter_even_len = |x: isize| -> bool {\n        let mut x = x;\n     \
    \   let mut f = true;\n        while x > 0 {\n            f = f && x % 2 == 1;\n\
    \            x /= 10;\n        }\n        f\n    };\n    let filter_odd_len =\
    \ |x: isize| -> bool {\n        let mut x = x;\n        let mut f = true;\n  \
    \      while x > 0 {\n            f = f && x % 2 == 1;\n            x /= 10;\n\
    \        }\n        f\n    };\n    let mut l = 0;\n    for i in &nums {\n    \
    \    if *i > 10 {\n            if *i < 0 {\n                if filter_even_len(-i)\
    \ {\n                    l += 1;\n                }\n            } else {\n  \
    \              if filter_odd_len(i) {\n                    l += 1;\n         \
    \       }\n            }\n        }\n    }\n    l", '    unimplemented!()', '    nums.iter().filter(|&&x|
    x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count() as isize', "    let\
    \ mut filtered_nums = 0;\n    for i in nums {\n        if i > 10 && i > 0 {\n\
    \            let first_digit = i % 10;\n            let last_digit = i / 10;\n\
    \            if first_digit % 2 != 0 && last_digit % 2 != 0 {\n              \
    \  filtered_nums += 1;\n            }\n        }\n    }\n    filtered_nums", '    return
    nums.iter().filter(|x| *x >= 10 && (x.abs() / 10) % 2 == 1 && *x % 2 == 1).count()
    as isize;', "    let mut count = 0;\n    for i in nums {\n        if (i > 10)\
    \ && (i % 2 != 0) && ((i/10) % 2 != 0) {\n            count += 1;\n        }\n\
    \    }\n    count", "    // unimplemented!();\n    let mut i = 0;\n    for num\
    \ in nums.iter() {\n        if *num > 10 && (*num/10)%2 != 0 && (*num % 10)%2\
    \ != 0 {\n            i += 1;\n        }\n    }\n    i", "    let filtered = nums.iter().filter(|&n|\
    \ {\n        let d1 = n / 10;\n        let d2 = n % 10;\n        d1 > 0 && d2\
    \ > 0 && n > 10 && d1 % 2 == 1 && d2 % 2 == 1\n    });\n    filtered.count() as\
    \ isize", "    let filtered = nums.iter().filter(|&n| {\n        let abs = n.abs();\n\
    \        abs > 10 && abs % 2 == 1 && abs % 10 % 2 == 1\n    });\n    filtered.count()\
    \ as isize", '  unimplemented!()', "    let mut count = 0;\n    for i in nums\
    \ {\n        if (i > 10) && (i.abs()/10 % 2 != 0) && (i % 2 != 0) {\n        \
    \    count += 1;\n        }\n    }\n    count", "    // TODO: Write your code\
    \ here\n    unimplemented!();", "    let total = nums.iter().filter(|&n| n > &10\
    \ && \n                                   first_digit(*n) % 2 != 0 && \n     \
    \                              last_digit(*n) % 2 != 0).count();\n    total as\
    \ isize", "    nums.iter().filter(|&n|\n        n > &10 && n.abs() % 10 % 2 !=\
    \ 0 && n.abs() / 10 % 10 % 2 != 0\n    ).count() as isize", '    return 0;', " \
    \   let mut count = 0;\n    for n in nums {\n        if n > 10 && has_odd_digits(n)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    // TODO: implement\n\
    \    0", "    let mut result = 0;\n    for num in nums {\n        let digits =\
    \ getDigits(num);\n        if num > 10 && digits[0] % 2 != 0 && digits[digits.len()\
    \ - 1] % 2 != 0 {\n            result += 1;\n        }\n    }\n    result", " \
    \   let mut count = 0;\n    for i in nums {\n        if (i > 10) & (first_last_odd(i))\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut counter\
    \ = 0;\n    for num in nums {\n        if num > 10 && num / 10 % 2 != 0 && num\
    \ % 10 % 2 != 0 {\n            counter += 1;\n        }\n    }\n    counter",
  "    let mut counter = 0;\n    for num in nums {\n        let num_str = num.to_string();\n\
    \        if num > 10 && num_str.chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 && num_str.chars().last().unwrap().to_digit(10).unwrap() % 2 != 0 {\n\
    \            counter += 1;\n        }\n    }\n    counter", "    // TODO: Insert\
    \ code here\n    0", "    let mut count = 0;\n    for num in nums {\n        if\
    \ num > 10 {\n            let digits = vec![\n                (num / 10) % 10,\n\
    \                num % 10,\n            ];\n            if digits.iter().all(|x|\
    \ x % 2 == 1) {\n                count += 1;\n            }\n        }\n    }\n\
    \    count", '    return nums.iter().filter(|&x| *x > 10 && is_odd(x) && is_odd(&x.abs()/10)
    && is_odd(&x.abs()%10)).count() as isize;', "    nums.iter().fold(0, |acc, x|\
    \ {\n        if x.abs() > 10 && x.abs() % 10 % 2 != 0 && x.abs() / 10 % 10 % 2\
    \ != 0 {\n            acc + 1\n        } else {\n            acc\n        }\n\
    \    })", "    let mut cnt = 0;\n    for n in nums {\n        if n > 10 && n %\
    \ 2 == 1 && n / 10 % 2 == 1 {\n            cnt += 1;\n        }\n    }\n    cnt",
  '    nums.iter().filter(|&x| x > &10 && first_digit(*x) % 2 != 0 && last_digit(*x)
    % 2 != 0).count() as isize', '    unimplemented!();', "    let mut count = 0;\n\
    \    for num in nums {\n        let mut copy = num;\n        let mut first_digit\
    \ = 0;\n        let mut last_digit = 0;\n        if num >= 10 {\n            last_digit\
    \ = num % 10;\n            copy = copy / 10;\n            if copy != 0 {\n   \
    \             first_digit = copy % 10;\n            }\n        }\n        if (first_digit\
    \ == 1 || first_digit == 3 || first_digit == 5 || first_digit == 7 || first_digit\
    \ == 9) && (last_digit == 1 || last_digit == 3 || last_digit == 5 || last_digit\
    \ == 7 || last_digit == 9) {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 &&\
    \ is_odd(i) {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!()',
  "    let mut result = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0 &&\
    \ n % 10 != 0 {\n            result += 1;\n        }\n    }\n    result", "  \
    \  let (mut first, mut last) = (0, 0);\n    let mut count = 0;\n    for num in\
    \ nums {\n        let mut digits = num;\n        if digits < 0 {\n           \
    \ digits = -1 * digits;\n        }\n        first = digits;\n        while digits\
    \ >= 10 {\n            digits /= 10;\n        }\n        last = digits;\n    \
    \    if num > 10 && first % 2 != 0 && last % 2 != 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 {\n            let (mut first, mut last) = (num, num);\n\
    \            while first >= 10 {\n                first /= 10;\n            }\n\
    \            while last < -10 {\n                last /= 10;\n            }\n\
    \            if first % 2 == 1 && last % 2 == 1 {\n                count += 1;\n\
    \            }\n        }\n    }\n    count", '    nums.iter().filter(|&num| num
    > &10 && first_digit(num) % 2 != 0 && last_digit(num) % 2 != 0).count() as isize',
  '    unimplemented!()', "    let mut count = 0;\n    for num in nums {\n       \
    \ if num >= 10 && num.abs() > 10 && ((num % 10) % 2 != 0) && (num / 10) % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count", "    let mut n =\
    \ 0;\n    for i in &nums {\n        if is_odd(i) && is_greater_than_10(i) {\n\
    \            n += 1;\n        }\n    }\n    n", "    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0 && num.abs() /\
    \ 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|&i|
    i > &10 && i.abs() / 10 % 2 != 0 && i % 2 != 0).count() as isize', "    let mut\
    \ count = 0;\n    for num in nums {\n        let isOdd = num % 2 != 0;\n     \
    \   let isGreaterThanTen = num > 10;\n        let fd = num / 10;\n        let\
    \ ld = num % 10;\n        let isFirstDigitOdd = fd % 2 != 0;\n        let isLastDigitOdd\
    \ = ld % 2 != 0;\n        if isOdd && isGreaterThanTen && isFirstDigitOdd && isLastDigitOdd\
    \ {\n            count += 1;\n        }\n    }\n    count"]
stop_tokens:
- "\n}"
