name: HumanEval_146_specialFilter
language: rs
prompt: "/// Write a function that takes a vector of numbers as input and returns\
  \ \n/// the number of elements in the vector that are greater than 10 and both \n\
  /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
  /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
  \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
  \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
  \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121,\
  \ 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n   \
  \ assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ 0);\n}\n"
completions: ['    unimplemented!();', "    let mut count = 0;\n    for i in nums\
    \ {\n        if i > 10 && i % 2 != 0 && i % 10 != 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 {\n            let str = num.to_string();\n            let\
    \ mut digits = str.chars();\n            let first_digit = digits.next().unwrap();\n\
    \            let last_digit = digits.last().unwrap();\n            if is_odd(first_digit)\
    \ && is_odd(last_digit) {\n                count += 1;\n            }\n      \
    \  }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n    \
    \    let mut sum = 0;\n        let mut tmp = num;\n        while tmp > 0 {\n \
    \           sum += tmp % 10;\n            tmp /= 10;\n        }\n        if num\
    \ > 10 && sum % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  "    // TODO: code the solution here!\n    0", "    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i.abs() % 10 % 2 != 0 && i.abs() / 10 % 2\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count", "    // your\
    \ code goes here\n    let mut count = 0;\n    for i in &nums {\n        if i >\
    \ &10 && (*i / 10 % 2 != 0 && *i % 2 != 0) {\n            count += 1;\n      \
    \  }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n    \
    \    if num > 10 && num.abs() % 10 % 2 != 0 && num.abs() / 10 % 10 % 2 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count", "    if nums.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 && num.abs() % 2 == 1 && num % 10 % 2 == 1 {\n          \
    \  count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|&&x| x
    > 10 && is_first_last_digit_odd(x)).count() as isize', "    let mut count = 0;\n\
    \    for n in nums {\n        if n > 10 && is_odd(n) && is_odd(n/10) {\n     \
    \       count += 1;\n        }\n    }\n    count", "    let mut sum = 0;\n   \
    \ for &num in &nums {\n        let num_abs = num.abs();\n        if num_abs >\
    \ 10 &&\n            num_abs / 10 % 2 != 0 &&\n            num_abs % 10 % 2 !=\
    \ 0 {\n            sum += 1;\n        }\n    }\n    sum", "    let mut count =\
    \ 0;\n    for x in nums {\n        if x > 10 && isOdd(x) {\n            count\
    \ += 1;\n        }\n    }\n    count", '    unimplemented!()', "    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && (i % 10) % 2 != 0 && (i / 10)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut count = 0;\n    for num in nums {\n        if num > 10 && num.abs() / 10\
    \ % 2 != 0 && num % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for num in nums {\n        let mut last = num % 10;\n\
    \        let mut num = num / 10;\n        while num != 0 {\n            last =\
    \ num % 10;\n            num = num / 10;\n        }\n        if last % 2 != 0\
    \ && num % 2 != 0 && num > 10 {\n            count += 1;\n        }\n    }\n \
    \   count", "    let sum = nums.iter().filter(|&x|\n        x>&10 &&\n       \
    \ x.abs()/10%2==1 &&\n        x.abs()%10==x.abs()%10/10*10\n    ).collect::<Vec<_>>().len()\
    \ as isize;\n    sum", "    let mut count = 0;\n    for i in nums {\n        if\
    \ is_odd(i) && is_odd(i/10) {\n            count = count + 1;\n        }\n   \
    \ }\n    count", "  let mut count = 0;\n  for num in nums {\n    if (num > 10)\
    \ && (num % 2 != 0) && (num.abs() % 10 % 2 != 0) {\n      count += 1;\n    }\n\
    \  }\n  count"]
stop_tokens:
- "\n}"
