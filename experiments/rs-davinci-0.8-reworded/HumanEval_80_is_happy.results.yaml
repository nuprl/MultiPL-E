language: rs
name: HumanEval_80_is_happy
results:
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s_len = s.len();\n    if\
    \ s_len < 3 {\n        return false;\n    }\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for i in 0..s_len - 2 {\n        if chars[i] == chars[i + 1] {\n        \
    \    continue;\n        }\n        if chars[i] == chars[i + 2] {\n           \
    \ continue;\n        }\n        if chars[i + 1] == chars[i + 2] {\n          \
    \  continue;\n        }\n        return true;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwhakyp4g.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    if len\
    \ < 3 {\n        return false;\n    }\n    for i in 0..(len - 2) {\n        if\
    \ s.chars().nth(i) == s.chars().nth(i + 1) || s.chars().nth(i) == s.chars().nth(i\
    \ + 2)\n            || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n\
    \            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n   \
    \ let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (0..(s.len()\
    \ - 2)).all(|x| {\n        let a = s.chars().nth(x).unwrap();\n        let b =\
    \ s.chars().nth(x + 1).unwrap();\n        let c = s.chars().nth(x + 2).unwrap();\n\
    \        a != b && b != c && a != c\n    })\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    // delete me\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpg4tsgfvb.rs:19:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut vec = Vec::new();\n\
    \    vec.push(chars.next().unwrap());\n    vec.push(chars.next().unwrap());\n\
    \    while let Some(c) = chars.next() {\n        vec.push(c);\n        if vec[0]\
    \ == vec[1] || vec[1] == vec[2] || vec[0] == vec[2] {\n            return false;\n\
    \        }\n        vec.remove(0);\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    s.chars().collect::<Vec<char>>().windows(3).all(|x| x[0]\
    \ != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpsgux8clc.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let v: Vec<char> = s.chars().collect();\n\
    \    if v.len() < 3 {\n        return false;\n    }\n    for i in 0..v.len() -\
    \ 2 {\n        if v[i] == v[i + 1] || v[i] == v[i + 2] || v[i + 1] == v[i + 2]\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((c1,\
    \ c2), c3)| {\n        c1 != c2 && c2 != c3 && c1 != c3\n    })\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (1..).take_while(|i|\
    \ i*3 <= s.len()).all(|i| {\n        s.chars().skip(i*3-3).take(3).all(|c| c !=\
    \ s.chars().nth(i*3-3).unwrap())\n    })\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj7kui8p2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let char_vec: Vec<char> = s.chars().collect();\n\
    \    if char_vec.len() < 3 {\n        return false;\n    }\n    let mut i = 0;\n\
    \    while i < char_vec.len() - 2 {\n        if char_vec[i] == char_vec[i + 1]\
    \ || char_vec[i] == char_vec[i + 2] || char_vec[i + 1] == char_vec[i + 2] {\n\
    \            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().enumerate().zip(s.chars().enumerate().skip(1)).all(|((i,\
    \ first), (j, second))| {\n        i + 1 != j || first != second\n    })\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpps55luul.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let chars: Vec<char> = s.chars().collect();\n\
    \    let l = chars.len();\n    if l < 3 {\n        return false;\n    }\n    let\
    \ mut idx = 0;\n    while idx < l - 2 {\n        if chars[idx] == chars[idx +\
    \ 1] || chars[idx] == chars[idx + 2] || chars[idx + 1] == chars[idx + 2] {\n \
    \           return false;\n        }\n        idx += 1;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s = s.as_str();\n    let\
    \ mut iter = s.chars();\n    if s.len() < 3 {\n        return false;\n    }\n\
    \    let mut a = iter.next().unwrap();\n    let mut b = iter.next().unwrap();\n\
    \    let mut c = iter.next().unwrap();\n    if a == b || a == c || b == c {\n\
    \        return false;\n    }\n    while let Some(d) = iter.next() {\n       \
    \ if c == d {\n            return false;\n        }\n        a = b;\n        b\
    \ = c;\n        c = d;\n    }\n    true\n}\n\nfn main() {\n    let candidate =\
    \ is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnumwk82p.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut last = chars.next().unwrap();\n\
    \    let mut penult = chars.next().unwrap();\n    let mut antepenult = chars.next().unwrap();\n\
    \    for c in chars {\n        if last == penult || last == antepenult || penult\
    \ == antepenult {\n            return false;\n        }\n        antepenult =\
    \ penult;\n        penult = last;\n        last = c;\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp11eml_nl.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (0..s.len() -\
    \ 2).all(|n| s.chars().nth(n) != s.chars().nth(n + 2))\n}\n\nfn main() {\n   \
    \ let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6g0an3n6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut i = 1;\n    for ch in s.chars() {\n        if i ==\
    \ 3 {\n            i = 1;\n        }\n        if i == 1 {\n            let mut\
    \ j = 2;\n            for ch1 in s.chars() {\n                if j == 3 {\n  \
    \                  j = 1;\n                }\n                if j == 2 {\n  \
    \                  let mut k = 3;\n                    for ch2 in s.chars() {\n\
    \                        if k == 3 {\n                            k = 1;\n   \
    \                     }\n                        if k == 3 {\n               \
    \             if ch != ch1 && ch != ch2 && ch1 != ch2 {\n                    \
    \            return true;\n                            }\n                   \
    \     }\n                        k += 1;\n                    }\n            \
    \    }\n                j += 1;\n            }\n        }\n        i += 1;\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp199rglbw.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (1..s.len() -\
    \ 1).all(|i| s.chars().nth(i) != s.chars().nth(i - 1) && s.chars().nth(i) != s.chars().nth(i\
    \ + 1))\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqtz4uvva.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823206
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let last_chars = vec![chars.next().unwrap(), chars.next().unwrap(), chars.next().unwrap()];\n\
    \    if last_chars[0] == last_chars[1] || last_chars[1] == last_chars[2] || last_chars[0]\
    \ == last_chars[2] {\n        return false;\n    }\n    for c in chars {\n   \
    \     last_chars[0] = last_chars[1];\n        last_chars[1] = last_chars[2];\n\
    \        last_chars[2] = c;\n        if last_chars[0] == last_chars[1] || last_chars[1]\
    \ == last_chars[2] || last_chars[0] == last_chars[2] {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `last_chars` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpxbfc9dt7.rs:24:9\n   |\n19 |     let last_chars =\
    \ vec![chars.next().unwrap(), chars.next().unwrap(), chars.next().unwrap()];\n\
    \   |         ---------- help: consider changing this to be mutable: `mut last_chars`\n\
    ...\n24 |         last_chars[0] = last_chars[1];\n   |         ^^^^^^^^^^ cannot\
    \ borrow as mutable\n\nerror[E0596]: cannot borrow `last_chars` as mutable, as\
    \ it is not declared as mutable\n  --> /tmp/tmpxbfc9dt7.rs:25:9\n   |\n19 |  \
    \   let last_chars = vec![chars.next().unwrap(), chars.next().unwrap(), chars.next().unwrap()];\n\
    \   |         ---------- help: consider changing this to be mutable: `mut last_chars`\n\
    ...\n25 |         last_chars[1] = last_chars[2];\n   |         ^^^^^^^^^^ cannot\
    \ borrow as mutable\n\nerror[E0596]: cannot borrow `last_chars` as mutable, as\
    \ it is not declared as mutable\n  --> /tmp/tmpxbfc9dt7.rs:26:9\n   |\n19 |  \
    \   let last_chars = vec![chars.next().unwrap(), chars.next().unwrap(), chars.next().unwrap()];\n\
    \   |         ---------- help: consider changing this to be mutable: `mut last_chars`\n\
    ...\n26 |         last_chars[2] = c;\n   |         ^^^^^^^^^^ cannot borrow as\
    \ mutable\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut is_happy = false;\n \
    \   let mut chars = s.chars();\n    if s.len() >= 3 {\n        let first = chars.next().unwrap();\n\
    \        let second = chars.next().unwrap();\n        let third = chars.next().unwrap();\n\
    \        is_happy = first != second && first != third && second != third;\n  \
    \      for char in chars {\n            is_happy = is_happy && (char != first\
    \ && char != second && char != third);\n            first = second;\n        \
    \    second = third;\n            third = char;\n        }\n    }\n    is_happy\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `first`\n  -->\
    \ /tmp/tmpkvwh5i4v.rs:27:13\n   |\n21 |         let first = chars.next().unwrap();\n\
    \   |             -----\n   |             |\n   |             first assignment\
    \ to `first`\n   |             help: consider making this binding mutable: `mut\
    \ first`\n...\n27 |             first = second;\n   |             ^^^^^^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice\
    \ to immutable variable `second`\n  --> /tmp/tmpkvwh5i4v.rs:28:13\n   |\n22 |\
    \         let second = chars.next().unwrap();\n   |             ------\n   | \
    \            |\n   |             first assignment to `second`\n   |          \
    \   help: consider making this binding mutable: `mut second`\n...\n28 |      \
    \       second = third;\n   |             ^^^^^^^^^^^^^^ cannot assign twice to\
    \ immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable\
    \ `third`\n  --> /tmp/tmpkvwh5i4v.rs:29:13\n   |\n23 |         let third = chars.next().unwrap();\n\
    \   |             -----\n   |             |\n   |             first assignment\
    \ to `third`\n   |             help: consider making this binding mutable: `mut\
    \ third`\n...\n29 |             third = char;\n   |             ^^^^^^^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut x = s.chars();\n    x.next().map_or(false,\
    \ |a| {\n        x.next().map_or(false, |b| {\n            x.map(|c| a != b &&\
    \ b != c && a != c).all(|b| b)\n        })\n    })\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6nrdxa4u.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpsgux8clc.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    s.chars().collect::<Vec<char>>().windows(3).all(|window|\
    \ {\n        window[0] != window[1] && window[1] != window[2] && window[0] !=\
    \ window[2]\n    })\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let v: Vec<char> = s.chars().collect();\n\
    \    if v.len() < 3 {\n        return false;\n    }\n    let mut i = 0;\n    while\
    \ i + 2 < v.len() {\n        if v[i] == v[i + 1] || v[i] == v[i + 2] || v[i +\
    \ 1] == v[i + 2] {\n            return false;\n        }\n        i += 1;\n  \
    \  }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    if len\
    \ < 3 {\n        return false;\n    }\n    for i in 0..len - 2 {\n        if s.chars().nth(i)\
    \ == s.chars().nth(i + 1) || s.chars().nth(i) == s.chars().nth(i + 2)\n      \
    \      || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n          \
    \  return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for w in s.as_bytes().windows(3) {\n        if w[0] == w[1]\
    \ || w[1] == w[2] || w[0] == w[2] {\n            return false;\n        }\n  \
    \  }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut ch1 = chars.next();\n    let mut ch2 = chars.next();\n    let mut\
    \ ch3 = chars.next();\n    if ch1.is_none() || ch2.is_none() || ch3.is_none()\
    \ {\n        return false;\n    }\n    while let Some(ch) = ch3 {\n        if\
    \ ch1 == ch2 || ch1 == ch3 || ch2 == ch3 {\n            return false;\n      \
    \  }\n        ch1 = ch2;\n        ch2 = ch3;\n        ch3 = chars.next();\n  \
    \  }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut current_three: Vec<char>\
    \ = vec![];\n    let mut last_char: char = s.chars().nth(0).unwrap();\n    current_three.push(last_char);\n\
    \    for c in s.chars().skip(1) {\n        if c == last_char {\n            current_three.push(c);\n\
    \        } else {\n            if current_three.len() == 3 {\n               \
    \ return false;\n            }\n            current_three.clear();\n         \
    \   current_three.push(c);\n        }\n        last_char = c;\n    }\n    if current_three.len()\
    \ == 3 {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n \
    \   let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpje8itc05.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() > 2 && !s.chars().collect::<Vec<char>>().windows(3).any(|w|\
    \ w[0] == w[1] && w[1] == w[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp74drwpy1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut is_prev_satisfied = false;\n    let mut is_pre_pre_satisfied\
    \ = false;\n    let mut prev_ch = s.chars().nth(0).unwrap();\n    let mut pre_pre_ch\
    \ = s.chars().nth(1).unwrap();\n    for ch in s.chars().skip(2) {\n        if\
    \ prev_ch != ch && pre_pre_ch != ch {\n            is_prev_satisfied = true;\n\
    \            is_pre_pre_satisfied = true;\n        } else {\n            if is_prev_satisfied\
    \ && is_pre_pre_satisfied {\n                return false;\n            }\n  \
    \          is_prev_satisfied = is_pre_pre_satisfied;\n            is_pre_pre_satisfied\
    \ = false;\n        }\n        pre_pre_ch = prev_ch;\n        prev_ch = ch;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn1yd675k.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (1..).all(|n|\
    \ s[n..].chars().all(|c| c != s[n - 1]))\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpt57a6990.rs:18:63\n\
    \   |\n18 |     s.len() >= 3 && (1..).all(|n| s[n..].chars().all(|c| c != s[n\
    \ - 1]))\n   |                                                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut set = HashSet::new();\n    for i in 0..s.len() -\
    \ 2 {\n        let sub_str = &s[i..i + 3];\n        if set.contains(sub_str) {\n\
    \            return false;\n        }\n        set.insert(sub_str);\n    }\n \
    \   true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmponijsobm.rs:21:19\n   |\n21 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut s = s.chars().peekable();\n\
    \    while let Some(char1) = s.next() {\n        let char2 = s.next().unwrap();\n\
    \        let char3 = s.next().unwrap();\n        if char1 == char2 || char2 ==\
    \ char3 || char1 == char3 {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpibvxbp2c.rs:20:30

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().tuple_windows().all(|(a,\
    \ b, c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `tuple_windows` found for struct `Chars`\
    \ in the current scope\n  --> /tmp/tmpwm_nsfes.rs:18:31\n   |\n18 |     s.len()\
    \ >= 3 && s.chars().tuple_windows().all(|(a, b, c)| a != b && b != c && a != c)\n\
    \   |                               ^^^^^^^^^^^^^ method not found in `Chars<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut it = s.chars();\n    let mut chars = (it.next().unwrap(),\
    \ it.next().unwrap(), it.next().unwrap());\n    for ch in it {\n        if chars.0\
    \ == chars.1 || chars.1 == chars.2 || chars.0 == chars.2 {\n            return\
    \ false;\n        }\n        chars = (chars.1, chars.2, ch);\n    }\n    chars.0\
    \ != chars.1 && chars.1 != chars.2 && chars.0 != chars.2\n}\n\nfn main() {\n \
    \   let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut last = chars.next().unwrap();\n\
    \    let mut second_last = chars.next().unwrap();\n    for c in chars {\n    \
    \    if c == last || c == second_last {\n            return false;\n        }\n\
    \        second_last = last;\n        last = c;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (s.len() == 3\
    \ || !s.chars().collect::<Vec<char>>().windows(3).any(|w| w[0] == w[1] && w[1]\
    \ == w[2]))\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj51wk_jg.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let v: Vec<char> = s.chars().collect();\n\
    \    for i in 0..v.len() - 2 {\n        if v[i] == v[i + 1] || v[i] == v[i + 2]\
    \ || v[i + 1] == v[i + 2] {\n            return false;\n        }\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp1omhife6.rs:19:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let str = s.as_str();\n    if\
    \ str.len() >= 3 {\n        for i in 0..str.len()-2 {\n            let a = str.chars().nth(i).unwrap();\n\
    \            let b = str.chars().nth(i+1).unwrap();\n            let c = str.chars().nth(i+2).unwrap();\n\
    \            if a == b || b == c || a == c {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    return false;\n}\n\
    \nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for c in s.chars() {\n        let (l, r) = s.split_at(3);\n\
    \        let temp: String = l.to_string();\n        if temp.contains(c) {\n  \
    \          return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyimnfts1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut first = chars.next().unwrap();\n\
    \    let mut second = chars.next().unwrap();\n    let mut third = chars.next().unwrap();\n\
    \    while chars.as_str().len() > 0 {\n        if first == second || second ==\
    \ third || first == third {\n            return false;\n        }\n        first\
    \ = second;\n        second = third;\n        third = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpib56rqt3.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut str = s.as_str();\n    while str.len() >= 3 {\n \
    \       if str.chars().take(3).nth(0) == str.chars().take(3).nth(1) ||\n     \
    \      str.chars().take(3).nth(0) == str.chars().take(3).nth(2) ||\n         \
    \  str.chars().take(3).nth(1) == str.chars().take(3).nth(2) {\n            return\
    \ false;\n        }\n        str = &str[1..];\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let chars: Vec<char> = s.chars().collect();\n    for i in\
    \ 0..chars.len() - 2 {\n        if chars[i] == chars[i + 1] || chars[i] == chars[i\
    \ + 2] || chars[i + 1] == chars[i + 2] {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut consecutive_letters:\
    \ Vec<String> = vec![];\n    for (idx, _) in s.chars().enumerate() {\n       \
    \ if idx + 3 <= s.len() {\n            consecutive_letters.push(s[idx..idx + 3].to_string());\n\
    \        }\n    }\n    consecutive_letters.len() >= 3 && consecutive_letters.into_iter().all(|s|\
    \ s.len() == 3 && s.chars().collect::<HashSet<char>>().len() == 3)\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpddbdpwe3.rs:24:115\n\
    \   |\n24 | ...iter().all(|s| s.len() == 3 && s.chars().collect::<HashSet<char>>().len()\
    \ == 3)\n   |                                                       ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashSet;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut last_char = None;\n \
    \   let mut counter = 0;\n    for c in s.chars() {\n        if let Some(last)\
    \ = last_char {\n            if last == c {\n                counter += 1;\n \
    \           } else {\n                counter = 1;\n            }\n        } else\
    \ {\n            counter = 1;\n        }\n        if counter >= 3 {\n        \
    \    return false;\n        }\n        last_char = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpldeo5r1m.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut result = true;\n    if\
    \ s.len() < 3 {\n        result = false;\n    } else {\n        let mut chars\
    \ = s.chars();\n        let first = chars.next().unwrap();\n        let second\
    \ = chars.next().unwrap();\n        for ch in chars {\n            if first ==\
    \ second && second == ch {\n                result = false;\n                break;\n\
    \            }\n            first = second;\n            second = ch;\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_happy;\n   \
    \ assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `first`\n  -->\
    \ /tmp/tmpzb35464_.rs:30:13\n   |\n23 |         let first = chars.next().unwrap();\n\
    \   |             -----\n   |             |\n   |             first assignment\
    \ to `first`\n   |             help: consider making this binding mutable: `mut\
    \ first`\n...\n30 |             first = second;\n   |             ^^^^^^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice\
    \ to immutable variable `second`\n  --> /tmp/tmpzb35464_.rs:31:13\n   |\n24 |\
    \         let second = chars.next().unwrap();\n   |             ------\n   | \
    \            |\n   |             first assignment to `second`\n   |          \
    \   help: consider making this binding mutable: `mut second`\n...\n31 |      \
    \       second = ch;\n   |             ^^^^^^^^^^^ cannot assign twice to immutable\
    \ variable\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    len >=\
    \ 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w| w[0] != w[1] && w[1]\
    \ != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let v: Vec<char> = s.chars().collect();\n\
    \    if v.len() < 3 {\n        return false;\n    }\n\n    for i in 0..v.len()-2\
    \ {\n        if v[i] == v[i+1] || v[i] == v[i+2] || v[i+1] == v[i+2] {\n     \
    \       return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && {\n        s.char_indices().step_by(3).all(|(i,\
    \ c)|\n            s.chars().nth(i + 1) != Some(c) && s.chars().nth(i + 2) !=\
    \ Some(c)\n        )\n    }\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpagndh424.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut it = s.chars();\n    let mut c1 = it.next().unwrap();\n\
    \    let mut c2 = it.next().unwrap();\n    for c3 in it {\n        if c1 == c2\
    \ || c2 == c3 || c1 == c3 {\n            return false;\n        }\n        c1\
    \ = c2;\n        c2 = c3;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 2..s.len() {\n        if &s[i - 2..i + 1] == &s[i\
    \ - 1..i + 2] {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''byte index 5 is out of bounds of `abcd`'',
    library/core/src/str/mod.rs:107:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (0..s.len() -\
    \ 2).all(|i| s.as_bytes()[i] != s.as_bytes()[i + 1] && s.as_bytes()[i] != s.as_bytes()[i\
    \ + 2] && s.as_bytes()[i + 1] != s.as_bytes()[i + 2])\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && !s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).any(|((a,\
    \ b), c)| a == b && b == c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_dpdao3c.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    return is_happy_len_3(s) ||\n\
    \           is_happy_len_4(s) ||\n           is_happy_len_5(s) ||\n          \
    \ is_happy_len_6(s) ||\n           is_happy_len_7(s) ||\n           is_happy_len_8(s)\
    \ ||\n           is_happy_len_9(s) ||\n           is_happy_len_10(s) ||\n    \
    \       is_happy_len_11(s) ||\n           is_happy_len_12(s) ||\n           is_happy_len_13(s)\
    \ ||\n           is_happy_len_14(s) ||\n           is_happy_len_15(s) ||\n   \
    \        is_happy_len_16(s) ||\n           is_happy_len_17(s) ||\n           is_happy_len_18(s)\
    \ ||\n           is_happy_len_19(s) ||\n           is_happy_len_20(s) ||\n   \
    \        is_happy_len_21(s) ||\n           is_happy_len_22(s) ||\n           is_happy_len_23(s)\
    \ ||\n           is_happy_len_24(s) ||\n           is_happy_len_25(s) ||\n   \
    \        is_happy_len_26(s) ||\n           is_happy_len_27(s) ||\n           is_happy_len_28(s)\
    \ ||\n           is_happy_len_29(s) ||\n           is_happy_len_30(s) ||\n   \
    \        is_happy_len_31(s) ||\n           is_happy_len_32(s) ||\n           is_happy_len_33(s)\
    \ ||\n           is_happy_len_34(s) ||\n           is_happy_len_35(s) ||\n   \
    \        is_happy_len_36(s) ||\n           is_happy_len_37(s) ||\n           is_happy_len_38(s)\
    \ ||\n           is_happy_len_39(s) ||\n           is_happy_len_40(s) ||\n   \
    \        is_happy_len_41(s) ||\n           is_\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_happy_len_3` in this scope\n  -->\
    \ /tmp/tmp3dqfpdjk.rs:18:12\n   |\n18 |     return is_happy_len_3(s) ||\n   |\
    \            ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_happy_len_4` in this scope\n  --> /tmp/tmp3dqfpdjk.rs:19:12\n \
    \  |\n19 |            is_happy_len_4(s) ||\n   |            ^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_happy_len_5` in\
    \ this scope\n  --> /tmp/tmp3dqfpdjk.rs:20:12\n   |\n20 |            is_happy_len_5(s)\
    \ ||\n   |            ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_happy_len_6` in this scope\n  --> /tmp/tmp3dqfpdjk.rs:21:12\n\
    \   |\n21 |            is_happy_len_6(s) ||\n   |            ^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_happy_len_7` in\
    \ this scope\n  --> /tmp/tmp3dqfpdjk.rs:22:12\n   |\n22 |            is_happy_len_7(s)\
    \ ||\n   |            ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_happy_len_8` in this scope\n  --> /tmp/tmp3dqfpdjk.rs:23:12\n\
    \   |\n23 |            is_happy_len_8(s) ||\n   |            ^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_happy_len_9` in\
    \ this scope\n  --> /tmp/tmp3dqfpdjk.rs:24:12\n   |\n24 |            is_happy_len_9(s)\
    \ ||\n   |            ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_happy_len_10` in this scope\n  --> /tmp/tmp3dqfpdjk.rs:25:12\n\
    \   |\n25 |            is_happy_len_10(s) ||\n   |            ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `is_happy_len_11`\
    \ in this scope\n  --> /tmp/tmp3dqfpdjk.rs:26:12\n   |\n26 |            is_happy_len_11(s)\
    \ ||\n   |            ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_happy_len_12` in this scope\n  --> /tmp/tmp3dqfpdjk.rs:27:12\n\
    \   |\n27 |            is_happy_len_12(s) ||\n   |            ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `is_happy_len_13`\
    \ in this scope\n  --> /tmp/t"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut count = 0;\n    let mut\
    \ prev_char = '\\0';\n    let mut prev_prev_char = '\\0';\n    for ch in s.chars()\
    \ {\n        if ch == prev_char {\n            count += 1;\n        } else {\n\
    \            count = 1;\n        }\n        if count == 3 && prev_char == prev_prev_char\
    \ {\n            return false;\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = ch;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyh5legwe.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut s = s.chars();\n    let mut current_char = s.next().unwrap();\n\
    \    let mut next_char = s.next().unwrap();\n    for c in s {\n        if current_char\
    \ == next_char || next_char == c || current_char == c {\n            return false;\n\
    \        }\n        current_char = next_char;\n        next_char = c;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let n = s.len();\n    if n <\
    \ 3 {\n        return false;\n    }\n    let bytes = s.as_bytes();\n    for i\
    \ in 0..(n - 2) {\n        if bytes[i] == bytes[i + 1] || bytes[i] == bytes[i\
    \ + 2] || bytes[i + 1] == bytes[i + 2] {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let is_happy_iter = |s: &String|\
    \ -> bool {\n        let mut it = s.chars();\n        if let Some(c1) = it.next()\
    \ {\n            if let Some(c2) = it.next() {\n                if let Some(c3)\
    \ = it.next() {\n                    c1 != c2 && c2 != c3 && c1 != c3\n      \
    \          } else {\n                    true\n                }\n           \
    \ } else {\n                true\n            }\n        } else {\n          \
    \  true\n        }\n    };\n    let is_hapr = |s: &String| -> bool {\n       \
    \ s.len() >= 3 && is_happy_iter(s)\n    };\n    is_hapr(&s)\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl2xl28rz.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let l = s.len();\n    if l <\
    \ 3 {\n        return false;\n    }\n\n    for i in 0..l - 2 {\n        if s.chars().nth(i)\
    \ == s.chars().nth(i + 1)\n            || s.chars().nth(i) == s.chars().nth(i\
    \ + 2)\n            || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n\
    \            return false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n \
    \   let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    len >=\
    \ 3 && (0..len-2).all(|i| s.chars().nth(i) != s.chars().nth(i+1) && s.chars().nth(i)\
    \ != s.chars().nth(i+2) && s.chars().nth(i+1) != s.chars().nth(i+2))\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut previous_char: char = chars.next().unwrap();\n    let mut duplicate_found\
    \ = false;\n    for c in chars {\n        if c == previous_char {\n          \
    \  duplicate_found = true;\n            break;\n        }\n        previous_char\
    \ = c;\n    }\n    return !duplicate_found && s.len() >= 3;\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz8xkt0xa.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let chars: Vec<char> = s.chars().collect();\n\
    \    // length must be at least 3\n    if chars.len() < 3 {\n        return false;\n\
    \    }\n    // every 3 consecutive letters must be distinct\n    for i in 0..chars.len()-2\
    \ {\n        if chars[i] == chars[i+1] || chars[i] == chars[i+2] || chars[i+1]\
    \ == chars[i+2] {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut s = s.chars();\n    loop {\n        if s.clone().count()\
    \ < 3 {\n            return true;\n        }\n        let a = s.next().unwrap();\n\
    \        let b = s.next().unwrap();\n        let c = s.next().unwrap();\n    \
    \    if a == b || b == c || a == c {\n            return false;\n        }\n \
    \   }\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa17zgxio.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev1 = chars.next().unwrap();\n\
    \    let mut prev2 = chars.next().unwrap();\n    let mut i = 3;\n    for ch in\
    \ chars {\n        if ch == prev1 || ch == prev2 {\n            return false;\n\
    \        }\n        prev1 = prev2;\n        prev2 = ch;\n        i += 1;\n   \
    \ }\n    i >= 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let n = s.len();\n    if n <\
    \ 3 {\n        return false;\n    }\n    let mut a: Vec<u8> = Vec::new();\n  \
    \  for c in s.bytes() {\n        a.push(c);\n    }\n    for i in 0..n - 2 {\n\
    \        if a[i] == a[i + 1] || a[i] == a[i + 2] || a[i + 1] == a[i + 2] {\n \
    \           return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let n = s.len();\n    if n <\
    \ 3 {\n        return false;\n    }\n    let mut p1 = 0;\n    let mut p2 = 0;\n\
    \    while p2 + 2 < n {\n        while p2 + 2 < n && s.as_bytes()[p2] == s.as_bytes()[p2\
    \ + 1] {\n            p2 += 1;\n        }\n        while p2 + 2 < n && s.as_bytes()[p2]\
    \ == s.as_bytes()[p2 + 2] {\n            p2 += 1;\n        }\n        p1 = p2;\n\
    \        p2 += 1;\n    }\n    if p2 + 1 < n && s.as_bytes()[p2] == s.as_bytes()[p2\
    \ + 1] {\n        p2 += 1;\n    }\n    p2 == n - 1\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpx7ag7bbe.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let s = s.as_bytes();\n    let mut i = 0;\n    while i <\
    \ s.len() - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2] {\n            return false;\n        }\n        i += 1;\n    }\n \
    \   true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let chs: Vec<char> = s.chars().collect();\n    for i in 0..s.len()\
    \ - 2 {\n        if chs[i] == chs[i + 1] || chs[i] == chs[i + 2] || chs[i + 1]\
    \ == chs[i + 2] {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let res = s.chars().collect::<Vec<char>>();\n\
    \    if res.len() < 3 {\n        return false;\n    }\n    for i in 0..res.len()\
    \ - 2 {\n        if res[i] == res[i + 1] || res[i] == res[i + 2] || res[i + 1]\
    \ == res[i + 2] {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 0..s.len()-2 {\n        if &s[i..i+3] == \"aaa\"\
    \ || &s[i..i+3] == \"bbb\" || &s[i..i+3] == \"ccc\" || &s[i..i+3] == \"ddd\"\n\
    \            || &s[i..i+3] == \"eee\" || &s[i..i+3] == \"fff\" || &s[i..i+3] ==\
    \ \"ggg\" || &s[i..i+3] == \"hhh\"\n            || &s[i..i+3] == \"iii\" || &s[i..i+3]\
    \ == \"jjj\" || &s[i..i+3] == \"kkk\" || &s[i..i+3] == \"lll\"\n            ||\
    \ &s[i..i+3] == \"mmm\" || &s[i..i+3] == \"nnn\" || &s[i..i+3] == \"ooo\" || &s[i..i+3]\
    \ == \"ppp\"\n            || &s[i..i+3] == \"qqq\" || &s[i..i+3] == \"rrr\" ||\
    \ &s[i..i+3] == \"sss\" || &s[i..i+3] == \"ttt\"\n            || &s[i..i+3] ==\
    \ \"uuu\" || &s[i..i+3] == \"vvv\" || &s[i..i+3] == \"www\" || &s[i..i+3] == \"\
    xxx\"\n            || &s[i..i+3] == \"yyy\" || &s[i..i+3] == \"zzz\"\n       \
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwd4twfiw.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvrsp6mkv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut last: char = ' ';\n    let mut last_but_one: char = ' ';\n    let\
    \ mut counter = 0;\n    while let Some(x) = chars.next() {\n        if x == last\
    \ && x == last_but_one {\n            return false;\n        }\n        last_but_one\
    \ = last;\n        last = x;\n        counter += 1;\n    }\n    counter >= 3\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9og_i3oy.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut it = s.chars();\n   \
    \ let mut first = it.next();\n    let mut second = it.next();\n    let mut third\
    \ = it.next();\n    if first.is_none() || second.is_none() || third.is_none()\
    \ {\n        return false;\n    }\n    if first == second || second == third ||\
    \ first == third {\n        return false;\n    }\n    for ch in it {\n       \
    \ if ch == first || ch == second || ch == third {\n            return false;\n\
    \        }\n        first = second;\n        second = third;\n        third =\
    \ Some(ch);\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnvsl_g7x.rs:29:18\n   |\n\
    29 |         if ch == first || ch == second || ch == third {\n   |           \
    \       ^^^^^ expected `char`, found enum `Option`\n   |\n   = note: expected\
    \ type `char`\n              found enum `Option<char>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnvsl_g7x.rs:29:33\n   |\n29 |         if ch == first ||\
    \ ch == second || ch == third {\n   |                                 ^^^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnvsl_g7x.rs:29:49\n\
    \   |\n29 |         if ch == first || ch == second || ch == third {\n   |    \
    \                                             ^^^^^ expected `char`, found enum\
    \ `Option`\n   |\n   = note: expected type `char`\n              found enum `Option<char>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s_vec: Vec<_> = s.chars().collect();\n\
    \    if s_vec.len() < 3 {\n        return false;\n    }\n    for i in 0..(s_vec.len()\
    \ - 2) {\n        if s_vec[i] == s_vec[i + 1] || s_vec[i] == s_vec[i + 2] || s_vec[i\
    \ + 1] == s_vec[i + 2] {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() > 2 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    if len\
    \ < 3 {\n        return false;\n    }\n    for (i, _) in s.chars().enumerate()\
    \ {\n        if i < len - 2 {\n            let current = &s[i..i + 3];\n     \
    \       if current.chars().nth(0) == current.chars().nth(1) {\n              \
    \  return false;\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpipbtimcq.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (s.chars().collect::<Vec<char>>()).windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 &&\n    (0..=s.len()-3).all(|x|\
    \ s.as_bytes()[x] != s.as_bytes()[x+1] &&\n                           s.as_bytes()[x]\
    \ != s.as_bytes()[x+2] &&\n                           s.as_bytes()[x+1] != s.as_bytes()[x+2])\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut is_happy: bool = true;\n\
    \    if s.len() < 3 {\n        is_happy = false;\n    } else {\n        for i\
    \ in 0..s.len() - 2 {\n            if &s[i..i + 3] == &s[i + 1..i + 4] {\n   \
    \             is_happy = false;\n                break;\n            }\n     \
    \   }\n    }\n    is_happy\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''byte index 5 is out of bounds of `abcd`'',
    library/core/src/str/mod.rs:107:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 2..s.len() {\n        if s.chars().nth(i - 2) ==\
    \ s.chars().nth(i - 1)\n            || s.chars().nth(i - 2) == s.chars().nth(i)\n\
    \            || s.chars().nth(i - 1) == s.chars().nth(i)\n        {\n        \
    \    return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut current_char = chars.next().unwrap();\n\
    \    let mut next_char = chars.next().unwrap();\n    let mut next_next_char =\
    \ chars.next().unwrap();\n    while chars.as_str().len() > 0 {\n        if current_char\
    \ == next_char || next_char == next_next_char || current_char == next_next_char\
    \ {\n            return false;\n        }\n        current_char = next_char;\n\
    \        next_char = next_next_char;\n        next_next_char = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps7db1ahj.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut new_str = String::new();\n\
    \    for c in s.chars() {\n        if c == 'a' || c == 'b' || c == 'c' || c ==\
    \ 'd' {\n            new_str.push(c);\n        }\n    }\n    if new_str.len()\
    \ < 3 {\n        return false;\n    } else {\n        for i in 0..new_str.len()\
    \ - 2 {\n            let temp_str = &new_str[i..i + 3];\n            if temp_str.contains(\"\
    a\") && temp_str.contains(\"b\") && temp_str.contains(\"c\") && temp_str.contains(\"\
    d\") {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1mmavzol.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && !s.chars().step_by(3).any(|x|\
    \ x == s.chars().nth(1).unwrap())\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp2kap85h.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut index = 0;\n    while index + 3 <= s.len() {\n  \
    \      let mut chars: Vec<char> = s.chars().collect();\n        let char_one =\
    \ chars[index];\n        let char_two = chars[index + 1];\n        let char_three\
    \ = chars[index + 2];\n        if char_one == char_two || char_one == char_three\
    \ || char_two == char_three {\n            return false;\n        }\n        index\
    \ += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n  \
    \  assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let string_len = s.len();\n \
    \   if string_len < 3 {\n        return false;\n    }\n    let mut chars = s.chars();\n\
    \    let mut a = chars.next().unwrap();\n    let mut b = chars.next().unwrap();\n\
    \    let mut c = chars.next().unwrap();\n    for d in chars {\n        if a ==\
    \ b || b == c || c == d {\n            return false;\n        }\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk68rlviv.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut result = true;\n    if\
    \ s.len() < 3 {\n        result = false;\n    } else {\n        let mut prev_char_1\
    \ = ' ';\n        let mut prev_char_2 = ' ';\n        for c in s.chars() {\n \
    \           if c == prev_char_1 || c == prev_char_2 {\n                result\
    \ = false;\n                break;\n            }\n            prev_char_2 = prev_char_1;\n\
    \            prev_char_1 = c;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() >= 3 {\n        for\
    \ i in 0..(s.len() - 2) {\n            let subs = &s[i..(i + 3)];\n          \
    \  let mut chars = subs.chars();\n            let c1 = chars.next().unwrap();\n\
    \            let c2 = chars.next().unwrap();\n            let c3 = chars.next().unwrap();\n\
    \            if c1 == c2 || c1 == c3 || c2 == c3 {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    return false;\n}\n\
    \nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s = s.into_bytes();\n   \
    \ let mut is_happy = false;\n    if s.len() >= 3 {\n        is_happy = true;\n\
    \        for i in 0..s.len() - 2 {\n            if s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2] {\n                is_happy = false;\n    \
    \            break;\n            }\n        }\n    }\n    is_happy\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    // Define accumulator\n    let\
    \ mut acc = ' ';\n    // Return false if string length is too short\n    if s.len()\
    \ < 3 {\n        return false;\n    } else {\n        // Iterate through the string\n\
    \        for (i, c) in s.chars().enumerate() {\n            // If index is greater\
    \ than 1\n            if i > 1 {\n                // If last character is equal\
    \ to current character or\n                // last character is equal to previous\
    \ character\n                if acc == c || s.chars().nth(i - 2).unwrap() == c\
    \ {\n                    // Return false\n                    return false;\n\
    \                }\n            }\n            // Update accumulator\n       \
    \     acc = c;\n        }\n    }\n    // Return true if all checks pass\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1).zip(s.chars().skip(2))).all(|(x,\
    \ (y, z))| x != y && x != z && y != z)\n}\n\nfn main() {\n    let candidate =\
    \ is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let chars: Vec<char> = s.chars().collect();\n    for index\
    \ in 0..(chars.len() - 2) {\n        if chars[index] == chars[index + 1] || chars[index]\
    \ == chars[index + 2] || chars[index + 1] == chars[index + 2] {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.chars().enumerate().fold(\n\
    \        (0, vec![]),\n        |(count, mut v), (i, c)| {\n            if count\
    \ == 3 {\n                if v.contains(&c) {\n                    return (count,\
    \ v);\n                }\n                v.clear();\n                v.push(c);\n\
    \                (1, v)\n            } else {\n                if v.contains(&c)\
    \ {\n                    return (count, v);\n                }\n             \
    \   v.push(c);\n                (count + 1, v)\n            }\n        },\n  \
    \  )\n        .0\n        == 3\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0aqmv31y.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut first_char: char = '\
    \ ';\n    let mut second_char: char = ' ';\n    let mut third_char: char = ' ';\n\
    \    let mut iter = s.chars();\n    first_char = iter.next().unwrap();\n    if\
    \ first_char == ' ' {\n        return false;\n    }\n    second_char = iter.next().unwrap();\n\
    \    if second_char == ' ' {\n        return false;\n    }\n    third_char = iter.next().unwrap();\n\
    \    if third_char == ' ' {\n        return false;\n    }\n    if first_char ==\
    \ second_char || first_char == third_char || second_char == third_char {\n   \
    \     return false;\n    }\n    for c in iter {\n        if first_char == second_char\
    \ || first_char == third_char || second_char == third_char {\n            return\
    \ false;\n        }\n        first_char = second_char;\n        second_char =\
    \ third_char;\n        third_char = c;\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp7r819qe7.rs:26:31

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let chars: Vec<char> = s.chars().collect();\n    for i in\
    \ 0..(chars.len() - 2) {\n        if chars[i] == chars[i + 1] || chars[i] == chars[i\
    \ + 2] || chars[i + 1] == chars[i + 2] {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 0..s.len() - 2 {\n        if &s[i..i + 3] == s[i..i\
    \ + 3].chars().collect::<Vec<char>>().dedup().join(\"\") {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `join` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpdsp9fktt.rs:22:79\n   |\n22 |         if &s[i..i + 3] ==\
    \ s[i..i + 3].chars().collect::<Vec<char>>().dedup().join(\"\") {\n   |      \
    \                                                                         ^^^^\
    \ method not found in `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let string_len = s.len();\n \
    \   if string_len < 3 {\n        return false;\n    }\n    for i in 0..string_len\
    \ - 2 {\n        let slice = &s[i..i + 3];\n        if slice.chars().collect::<HashSet<char>>().len()\
    \ != 3 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpo2qmvf2v.rs:24:36\n\
    \   |\n24 |         if slice.chars().collect::<HashSet<char>>().len() != 3 {\n\
    \   |                                    ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976531
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 0..s.len() - 2 {\n        if &s[i..i + 3] == &s[i..i\
    \ + 3].chars().rev().collect::<String>() {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpui43zj0v.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    // your code here\n    if s.len()\
    \ < 3 {\n        return false;\n    }\n    let mut s_old = &s[0..3];\n    let\
    \ mut s_new = &s[1..];\n    while s_new.len() >= 3 {\n        if s_old[0..2] ==\
    \ s_new[0..2] || s_old[1..3] == s_new[1..3] {\n            return false;\n   \
    \     }\n        s_old = &s_new[0..3];\n        s_new = &s_new[1..];\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5hovpgih.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut vector = Vec::new();\n\
    \    vector.extend(s.chars());\n    vector.len() >= 3 && vector.windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let chars: Vec<char> = s.chars().collect();\n\
    \    chars.len() >= 3 && chars.windows(3).all(|s| s[0] != s[1] && s[1] != s[2]\
    \ && s[0] != s[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let a: Vec<char> = s.chars().collect();\n    let mut i =\
    \ 0;\n    while i < a.len() - 2 {\n        if a[i] == a[i + 1] || a[i] == a[i\
    \ + 2] || a[i + 1] == a[i + 2] {\n            return false;\n        }\n     \
    \   i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 0..s.len()-2 {\n        if &s[i..i+3] == \"aaa\"\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbk_ju6_6.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let v: Vec<char> = s.chars().collect();\n\
    \    if v.len() < 3 {\n        return false;\n    }\n    let mut state = true;\n\
    \    for i in 0..v.len() - 2 {\n        if v[i] == v[i + 1] || v[i] == v[i + 2]\
    \ || v[i + 1] == v[i + 2] {\n            state = false;\n            break;\n\
    \        }\n    }\n    state\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpsgux8clc.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let v: Vec<char> = s.chars().collect();\n    let mut i =\
    \ 0;\n    while i < v.len() - 2 {\n        if v[i] == v[i + 1] || v[i] == v[i\
    \ + 2] || v[i + 1] == v[i + 2] {\n            return false;\n        }\n     \
    \   i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut i = 0;\n    let mut result\
    \ = true;\n    let v: Vec<char> = s.chars().collect();\n    let length = v.len();\n\
    \    while result && i < length - 2 {\n        if (v[i] == v[i + 1]) || (v[i]\
    \ == v[i + 2]) || (v[i + 1] == v[i + 2]) {\n            result = false;\n    \
    \    }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp1c22rs7y.rs:22:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976532
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    return s.len() >= 3 && is_happy_inner(&s,\
    \ 1, 0);\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_happy_inner` in this scope\n  -->\
    \ /tmp/tmp_hq958m0.rs:18:28\n   |\n18 |     return s.len() >= 3 && is_happy_inner(&s,\
    \ 1, 0);\n   |                            ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut count = 1;\n    let mut last = s.chars().nth(0).unwrap();\n\
    \    for letter in s.chars().skip(1) {\n        if last == letter {\n        \
    \    count += 1;\n        } else {\n            last = letter;\n            count\
    \ = 1;\n        }\n        if count == 3 {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptj2dfl0n.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpsgux8clc.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut count = 0;\n    let mut\
    \ chars: Vec<char> = s.chars().collect();\n    let mut len = chars.len();\n  \
    \  if len >= 3 {\n        for i in 1..len - 1 {\n            if chars[i - 1] !=\
    \ chars[i] && chars[i] != chars[i + 1] && chars[i - 1] != chars[i + 1] {\n   \
    \             count += 1;\n            }\n        }\n        if count == len -\
    \ 2 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut iter = s.chars();\n \
    \   let mut p1 = iter.next();\n    let mut p2 = iter.next();\n    let mut p3 =\
    \ iter.next();\n    while let Some(p) = p3 {\n        if p == p2 || p == p1 {\n\
    \            return false;\n        }\n        p1 = p2;\n        p2 = p3;\n  \
    \      p3 = iter.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphghzi942.rs:23:17\n   |\n\
    23 |         if p == p2 || p == p1 {\n   |                 ^^ expected `char`,\
    \ found enum `Option`\n   |\n   = note: expected type `char`\n              found\
    \ enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphghzi942.rs:23:28\n\
    \   |\n23 |         if p == p2 || p == p1 {\n   |                            ^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<char>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut previous = &s[0..3];\n    for i in 1..s.len() - 2\
    \ {\n        let current = &s[i..i + 3];\n        if current == previous {\n \
    \           return false;\n        }\n        previous = current;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt7rbe5al.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if s.chars().nth(i)\
    \ == s.chars().nth(i + 1) || s.chars().nth(i) == s.chars().nth(i + 2)\n      \
    \      || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n          \
    \  return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1).zip(s.chars().skip(2))).all(|(a,\
    \ (b, c))| a != b && a != c && b != c)\n}\n\nfn main() {\n    let candidate =\
    \ is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut v = s.chars().collect::<Vec<char>>();\n\
    \    if v.len() < 3 {\n        return false;\n    }\n    for i in 0..v.len()-2\
    \ {\n        if v[i] == v[i+1] || v[i] == v[i+2] || v[i+1] == v[i+2] {\n     \
    \       return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let len = s.len();\n    for i in 0..len - 2 {\n        if\
    \ &s[i..i + 3] == s[i..i + 3].chars().next().unwrap().to_string().repeat(3).as_str()\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptcucqtyh.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let chars: Vec<char> = s.chars().collect();\n\
    \    let size = chars.len();\n    if size < 3 {\n        return false;\n    }\n\
    \    for i in 0..size - 2 {\n        if chars[i] == chars[i + 1] || chars[i] ==\
    \ chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s: Vec<char> = s.chars().collect();\n\
    \    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..s.len()-2\
    \ {\n        if s[i] == s[i+1] && s[i] == s[i+2] {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_7ho8spj.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut i = 0;\n    let mut j\
    \ = 1;\n    let mut k = 2;\n    let length = s.len();\n    let mut happy = true;\n\
    \    while k < length {\n        let mut chars = vec![s.chars().nth(i).unwrap(),\
    \ s.chars().nth(j).unwrap(), s.chars().nth(k).unwrap()];\n        chars.sort();\n\
    \        if chars[0] == chars[1] || chars[1] == chars[2] {\n            happy\
    \ = false;\n            break;\n        }\n        i += 1;\n        j += 1;\n\
    \        k += 1;\n    }\n    happy\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm3z5a_5_.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    if len\
    \ < 3 {\n        return false;\n    }\n    let chars: Vec<char> = s.chars().collect();\n\
    \    let mut i = 0;\n    while i < len - 2 {\n        if chars[i] == chars[i +\
    \ 1] {\n            return false;\n        }\n        if chars[i] == chars[i +\
    \ 2] {\n            return false;\n        }\n        if chars[i + 1] == chars[i\
    \ + 2] {\n            return false;\n        }\n        i += 1;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut iter = s.chars();\n \
    \   let mut last: char = '-';\n    let mut last_prev: char = '-';\n    for c in\
    \ iter {\n        if last == c || last_prev == c {\n            return false;\n\
    \        }\n        last_prev = last;\n        last = c;\n    }\n    return true;\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcr2y6uyq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 2..s.len() {\n        if s.chars().nth(i - 2) ==\
    \ s.chars().nth(i - 1) || s.chars().nth(i - 1) == s.chars().nth(i) {\n       \
    \     return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxbgxzst8.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    // Check string length\n    if\
    \ s.len() < 3 {\n        return false;\n    }\n\n    let mut last_two_chars =\
    \ String::new();\n    let mut last_char = ' ';\n\n    for character in s.chars()\
    \ {\n        if last_two_chars.contains(character) {\n            return false;\n\
    \        }\n\n        if last_char != ' ' {\n            last_two_chars.push(last_char);\n\
    \        }\n\n        last_char = character;\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpptdh009k.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut previous_chars = HashSet::new();\n    for (i, ch)\
    \ in s.chars().enumerate() {\n        if i >= 3 {\n            previous_chars.remove(&s.chars().nth(i\
    \ - 3).unwrap());\n        }\n        if previous_chars.contains(&ch) {\n    \
    \        return false;\n        }\n        previous_chars.insert(ch);\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpxv_pqgbb.rs:21:30\n   |\n21 |     let mut previous_chars = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    // Do your magic here\n    let\
    \ mut chars = s.chars();\n    let first = chars.next();\n    let second = chars.next();\n\
    \    let third = chars.next();\n    match (first, second, third) {\n        (Some(a),\
    \ Some(b), Some(c)) => {\n            if a == b || b == c || a == c {\n      \
    \          false\n            } else {\n                true\n            }\n\
    \        }\n        _ => false,\n    }\n}\n\nfn main() {\n    let candidate =\
    \ is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd5609hwt.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    fn is_happy_rec(s: &[char]) ->\
    \ bool {\n        if s.len() <= 3 {\n            false\n        } else if s[0]\
    \ == s[1] || s[1] == s[2] || s[0] == s[2] {\n            is_happy_rec(&s[1..])\n\
    \        } else {\n            true\n        }\n    }\n\n    is_happy_rec(&s.chars().collect::<Vec<_>>())\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7ukj1s34.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut v = vec![];\n   \
    \ while let Some(c) = chars.next() {\n        if v.len() == 3 {\n            if\
    \ v.contains(&c) {\n                return false;\n            }\n           \
    \ v.drain(0..1);\n        }\n        v.push(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_j2ryhak.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 0..s.len() - 2 {\n        if s.chars().nth(i) ==\
    \ s.chars().nth(i + 1) || s.chars().nth(i) == s.chars().nth(i + 2)\n         \
    \   || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 0..s.len() - 2 {\n        if s.chars().nth(i) ==\
    \ s.chars().nth(i + 1)\n            || s.chars().nth(i) == s.chars().nth(i + 2)\n\
    \            || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n    \
    \        return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    if len\
    \ < 3 {\n        return false;\n    }\n    let s_char = s.chars().collect::<Vec<char>>();\n\
    \    for i in 0..len - 2 {\n        if s_char[i] == s_char[i + 1] || s_char[i]\
    \ == s_char[i + 2] || s_char[i + 1] == s_char[i + 2] {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut queue: VecDeque<char>\
    \ = VecDeque::new();\n    let mut was: HashSet<char> = HashSet::new();\n    let\
    \ mut count = 0;\n    for c in s.chars() {\n        count += 1;\n        if queue.len()\
    \ == 3 {\n            let tmp = queue.pop_front().unwrap();\n            was.remove(&tmp);\n\
    \        }\n        if queue.contains(&c) || was.contains(&c) {\n            return\
    \ false;\n        }\n        was.insert(c);\n        queue.push_back(c);\n   \
    \ }\n    count >= 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `VecDeque` in this scope\n  --> /tmp/tmpka7l19w1.rs:18:20\n\
    \   |\n18 |     let mut queue: VecDeque<char> = VecDeque::new();\n   |       \
    \             ^^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `VecDeque`\n  --> /tmp/tmpka7l19w1.rs:18:37\n\
    \   |\n18 |     let mut queue: VecDeque<char> = VecDeque::new();\n   |       \
    \                              ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpka7l19w1.rs:19:18\n\
    \   |\n19 |     let mut was: HashSet<char> = HashSet::new();\n   |           \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpka7l19w1.rs:19:34\n   |\n19\
    \ |     let mut was: HashSet<char> = HashSet::new();\n   |                   \
    \               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1).zip(s.chars().skip(2))).all(|(x,\
    \ (y, z))| x != y && x != z && y != z)\n}\n\nfn main() {\n    let candidate =\
    \ is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976532
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let s = s.as_bytes();\n    let mut i = 0;\n    let mut j\
    \ = 1;\n    let mut k = 2;\n    while k < s.len() {\n        if s[i] == s[j] ||\
    \ s[j] == s[k] || s[i] == s[k] {\n            return false;\n        }\n     \
    \   i += 1;\n        j += 1;\n        k += 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2))).all(|((x,\
    \ y), z)| x != y && y != z && x != z)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    len >\
    \ 2 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((c0, c1),\
    \ c2)| c0 != c1 && c1 != c2 && c0 != c2)\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4yzso5ay.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut last = s.chars().nth(0).unwrap();\n    let mut last_prev\
    \ = s.chars().nth(1).unwrap();\n    for c in s.chars().skip(2) {\n        if c\
    \ == last || c == last_prev {\n            return false;\n        }\n        last_prev\
    \ = last;\n        last = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut last_letter: char = '\\\
    0';\n    let mut counter: u32 = 0;\n    for letter in s.chars() {\n        if\
    \ last_letter == letter {\n            counter += 1;\n        } else {\n     \
    \       counter = 1;\n        }\n        if counter == 3 {\n            return\
    \ false;\n        }\n        last_letter = letter;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2hphv3gs.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    // write your code here\n   \
    \ let s = s.as_bytes();\n    let len = s.len();\n    if len < 3 {\n        return\
    \ false;\n    }\n    for i in 0..len - 2 {\n        if s[i] == s[i + 1] || s[i]\
    \ == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let mut triple = chars.next().unwrap();\n    for _ in 0..2 {\n        match\
    \ chars.next() {\n            Some(c) => triple.push(c),\n            None =>\
    \ return false,\n        }\n    }\n    triple.len() >= 3 && chars.all(|c| triple.push(c),\
    \ |c| !triple.contains(c))\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpxk8e_v9i.rs:22:31\n   |\n22 |             Some(c) => triple.push(c),\n\
    \   |                               ^^^^ method not found in `char`\n\nerror[E0599]:\
    \ no method named `len` found for type `char` in the current scope\n  --> /tmp/tmpxk8e_v9i.rs:26:12\n\
    \   |\n26 |     triple.len() >= 3 && chars.all(|c| triple.push(c), |c| !triple.contains(c))\n\
    \   |            ^^^ method not found in `char`\n\nerror[E0599]: no method named\
    \ `push` found for type `char` in the current scope\n  --> /tmp/tmpxk8e_v9i.rs:26:47\n\
    \   |\n26 |     triple.len() >= 3 && chars.all(|c| triple.push(c), |c| !triple.contains(c))\n\
    \   |                                               ^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `contains` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpxk8e_v9i.rs:26:68\n   |\n26 |     triple.len() >= 3 &&\
    \ chars.all(|c| triple.push(c), |c| !triple.contains(c))\n   |               \
    \                                                     ^^^^^^^^ method not found\
    \ in `char`\n\nerror[E0061]: this function takes 1 argument but 2 arguments were\
    \ supplied\n    --> /tmp/tmpxk8e_v9i.rs:26:32\n     |\n26   |     triple.len()\
    \ >= 3 && chars.all(|c| triple.push(c), |c| !triple.contains(c))\n     |     \
    \                           ^^^ ------------------  ----------------------- supplied\
    \ 2 arguments\n     |                                |\n     |               \
    \                 expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    return s.len() >= 3 && (1..s.len()-1).all(|i|\
    \ s.chars().nth(i-1) != s.chars().nth(i) && s.chars().nth(i+1) != s.chars().nth(i));\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjcfimh7f.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut letters = s.chars();\n    let mut first_char = letters.next().unwrap();\n\
    \    let mut second_char = letters.next().unwrap();\n    let mut third_char =\
    \ letters.next().unwrap();\n    loop {\n        if first_char == second_char ||\
    \ first_char == third_char || second_char == third_char {\n            return\
    \ false;\n        }\n        if let Some(n) = letters.next() {\n            first_char\
    \ = second_char;\n            second_char = third_char;\n            third_char\
    \ = n;\n        } else {\n            break;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut pre = s.chars().next().unwrap();\n    let mut mid\
    \ = s.chars().nth(1).unwrap();\n    for ch in s.chars().skip(2) {\n        if\
    \ ch == pre || ch == mid {\n            return false;\n        }\n        pre\
    \ = mid;\n        mid = ch;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ {\n        w[0] != w[1] && w[1] != w[2] && w[0] != w[2]\n    })\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpapcx_tua.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    if len\
    \ < 3 {\n        return false;\n    }\n    for i in 2..len {\n        if s.chars().nth(i).unwrap()\
    \ == s.chars().nth(i - 1).unwrap() {\n            if s.chars().nth(i).unwrap()\
    \ == s.chars().nth(i - 2).unwrap() {\n                return false;\n        \
    \    }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8au0fo12.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut it = s.chars();\n    let mut last_char: char = '\
    \ ';\n    let mut already_present = HashSet::new();\n    while let Some(c) = it.next()\
    \ {\n        if c == last_char {\n            return false;\n        }\n     \
    \   if !already_present.insert(c) {\n            return false;\n        }\n  \
    \      last_char = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate =\
    \ is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp4xqj93tq.rs:23:31\n   |\n23 |     let mut already_present = HashSet::new();\n\
    \   |                               ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut res = false;\n    let\
    \ s = s.into_bytes();\n    if s.len() < 3 {\n        return res;\n    }\n    for\
    \ i in 0..s.len() - 2 {\n        if s[i] != s[i + 1] && s[i] != s[i + 2] && s[i\
    \ + 1] != s[i + 2] {\n            res = true;\n        } else {\n            res\
    \ = false;\n            break;\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    // First convert our string into\
    \ a vector of chars\n    let mut chars: Vec<char> = s.chars().collect();\n   \
    \ if chars.len() < 3 {\n        return false;\n    }\n    // Now we want to check\
    \ that every 3 consecutive characters are distinct\n    // If they are then we\
    \ are good\n    while chars.len() >= 3 {\n        if chars[0] == chars[1] || chars[0]\
    \ == chars[2] || chars[1] == chars[2] {\n            return false;\n        }\n\
    \        chars.remove(0);\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let s = s.into_bytes();\n    for idx in 0..s.len() - 2 {\n\
    \        if s[idx] == s[idx + 1] {\n            return false;\n        }\n   \
    \     if s[idx] == s[idx + 2] {\n            return false;\n        }\n    }\n\
    \    if s[s.len() - 1] == s[s.len() - 2] {\n        return false;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let (mut hap, mut bap) = (0,\
    \ 0);\n    let mut prev = s.chars().nth(0).unwrap();\n    for ch in s.chars().skip(1)\
    \ {\n        if ch == prev {\n            hap += 1;\n        } else {\n      \
    \      bap += 1;\n        }\n        prev = ch;\n    }\n    bap >= 3 && hap <=\
    \ bap - 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgxur4pyy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    // \u5C0F\
    \u4E8E3\u76F4\u63A5\u8FD4\u56DEfalse\n    if len < 3 {\n        return false;\n\
    \    }\n    let mut chars = s.chars();\n    let a = chars.next().unwrap();\n \
    \   let b = chars.next().unwrap();\n    let c = chars.next().unwrap();\n    //\
    \ \u5224\u65AD\u7B2C\u4E00\u6B21\u7684\u4E09\u4E2A\u5B57\u7B26\u662F\u5426\u90FD\
    \u4E0D\u540C\n    if a == b || b == c || a == c {\n        return false;\n   \
    \ }\n    // \u5F00\u59CB\u904D\u5386\u5B57\u7B26\u4E32\u4E2D\u7684\u6BCF\u4E2A\
    \u5B57\u7B26\uFF0C\u5224\u65AD\u662F\u5426\u6709\u4E09\u4E2A\u5B57\u7B26\u90FD\
    \u76F8\u540C\u7684\uFF0C\u5982\u679C\u6709\uFF0C\u8FD4\u56DEfalse\n    for ch\
    \ in chars {\n        if a == b && b == c {\n            return false;\n     \
    \   }\n        a = b;\n        b = c;\n        c = ch;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `a`\n  --> /tmp/tmpu20bb4f6.rs:36:9\n\
    \   |\n24 |     let a = chars.next().unwrap();\n   |         -\n   |         |\n\
    \   |         first assignment to `a`\n   |         help: consider making this\
    \ binding mutable: `mut a`\n...\n36 |         a = b;\n   |         ^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable\
    \ variable `b`\n  --> /tmp/tmpu20bb4f6.rs:37:9\n   |\n25 |     let b = chars.next().unwrap();\n\
    \   |         -\n   |         |\n   |         first assignment to `b`\n   |  \
    \       help: consider making this binding mutable: `mut b`\n...\n37 |       \
    \  b = c;\n   |         ^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `c`\n  --> /tmp/tmpu20bb4f6.rs:38:9\n\
    \   |\n26 |     let c = chars.next().unwrap();\n   |         -\n   |         |\n\
    \   |         first assignment to `c`\n   |         help: consider making this\
    \ binding mutable: `mut c`\n...\n38 |         c = ch;\n   |         ^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823206
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let n = s.len();\n    if n <\
    \ 3 {\n        return false;\n    }\n    for i in 0..n - 2 {\n        if &s[i..i\
    \ + 3] == \"aaa\" || &s[i..i + 3] == \"bbb\" || &s[i..i + 3] == \"ccc\"\n    \
    \        || &s[i..i + 3] == \"ddd\" || &s[i..i + 3] == \"eee\" || &s[i..i + 3]\
    \ == \"fff\"\n            || &s[i..i + 3] == \"ggg\" || &s[i..i + 3] == \"hhh\"\
    \ || &s[i..i + 3] == \"iii\"\n            || &s[i..i + 3] == \"jjj\" || &s[i..i\
    \ + 3] == \"kkk\" || &s[i..i + 3] == \"lll\"\n            || &s[i..i + 3] == \"\
    mmm\" || &s[i..i + 3] == \"nnn\" || &s[i..i + 3] == \"ooo\"\n            || &s[i..i\
    \ + 3] == \"ppp\" || &s[i..i + 3] == \"qqq\" || &s[i..i + 3] == \"rrr\"\n    \
    \        || &s[i..i + 3] == \"sss\" || &s[i..i + 3] == \"ttt\" || &s[i..i + 3]\
    \ == \"uuu\"\n            || &s[i..i + 3] == \"vvv\" || &s[i..i + 3] == \"www\"\
    \ || &s[i..i + 3] == \"xxx\"\n            || &s[i..i + 3] == \"yyy\" || &s[i..i\
    \ + 3] == \"zzz\"\n        {\n            return false;\n        }\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnt8qtil5.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut count = 0;\n    let mut\
    \ index = 0;\n    let mut list = Vec::new();\n    let size = s.len();\n    let\
    \ chars = s.chars();\n    for c in chars {\n        if count == 3 {\n        \
    \    break;\n        }\n        index += 1;\n        if !list.contains(&c) {\n\
    \            list.push(c);\n            count += 1;\n        }\n    }\n    if\
    \ count < 3 {\n        return false;\n    } else if index == size {\n        return\
    \ true;\n    } else {\n        return is_happy(s[index..].to_string());\n    }\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpb6k397c0.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let a = chars.next().unwrap();\n\
    \    let b = chars.next().unwrap();\n    let c = chars.next().unwrap();\n    if\
    \ a == b || b == c || a == c {\n        return false;\n    }\n    for c in chars\
    \ {\n        if a == b || b == c || a == c {\n            return false;\n    \
    \    }\n        a = b;\n        b = c;\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `a`\n  --> /tmp/tmpaqsracsb.rs:32:9\n\
    \   |\n22 |     let a = chars.next().unwrap();\n   |         -\n   |         |\n\
    \   |         first assignment to `a`\n   |         help: consider making this\
    \ binding mutable: `mut a`\n...\n32 |         a = b;\n   |         ^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable\
    \ variable `b`\n  --> /tmp/tmpaqsracsb.rs:33:9\n   |\n23 |     let b = chars.next().unwrap();\n\
    \   |         -\n   |         |\n   |         first assignment to `b`\n   |  \
    \       help: consider making this binding mutable: `mut b`\n...\n33 |       \
    \  b = c;\n   |         ^^^^^ cannot assign twice to immutable variable\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut index = 0;\n    while index + 3 <= s.len() {\n  \
    \      let s = &s[index..index + 3];\n        let mut chars = s.chars();\n   \
    \     let a = chars.next().unwrap();\n        let b = chars.next().unwrap();\n\
    \        let c = chars.next().unwrap();\n        if a == b || b == c || a == c\
    \ {\n            return false;\n        }\n        index += 1;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    // Write your code here\n   \
    \ let mut result = false;\n    let s_len = s.len();\n    if s_len >= 3 {\n   \
    \     result = true;\n        for i in 0..s_len - 2 {\n            if s.chars().nth(i)\
    \ == s.chars().nth(i + 1) || s.chars().nth(i) == s.chars().nth(i + 2)\n      \
    \          || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_happy;\n   \
    \ assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let a = chars.next();\n    let b = chars.next();\n    let c = chars.next();\n\
    \    if let (Some(a), Some(b), Some(c)) = (a, b, c) {\n        a != b && b !=\
    \ c && a != c && is_happy(chars.collect())\n    } else {\n        true\n    }\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplq_aracw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut num = 0;\n    for (i,\
    \ c) in s.chars().enumerate() {\n        if i % 3 == 0 {\n            num = 0;\n\
    \        }\n        if c == 'a' {\n            num += 1;\n        } else if c\
    \ == 'b' {\n            num += 2;\n        } else if c == 'c' {\n            num\
    \ += 4;\n        } else if c == 'd' {\n            num += 8;\n        } else if\
    \ c == 'e' {\n            num += 16;\n        } else if c == 'f' {\n         \
    \   num += 32;\n        } else if c == 'g' {\n            num += 64;\n       \
    \ } else if c == 'h' {\n            num += 128;\n        } else if c == 'i' {\n\
    \            num += 256;\n        } else if c == 'j' {\n            num += 512;\n\
    \        } else if c == 'k' {\n            num += 1024;\n        } else if c ==\
    \ 'l' {\n            num += 2048;\n        } else if c == 'm' {\n            num\
    \ += 4096;\n        } else if c == 'n' {\n            num += 8192;\n        }\
    \ else if c == 'o' {\n            num += 16384;\n        } else if c == 'p' {\n\
    \            num += 32768;\n        } else if c == 'q' {\n            num += 65536;\n\
    \        } else if c == 'r' {\n            num += 131072;\n        } else if c\
    \ == 's' {\n            num += 262144;\n        } else if c == 't' {\n       \
    \     num += 524288;\n        } else if c == 'u' {\n            num += 1048576;\n\
    \        } else if c == 'v' {\n            num += 2097152;\n        } else if\
    \ c == 'w' {\n            num += 4194304;\n        } else if c == 'x' {\n    \
    \        num += 8388608;\n        } else if c == 'y' {\n            num += 16777216;\n\
    \        } else if c == 'z' {\n            num += 33554432;\n        }\n\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp6kshd4sb.rs:89:3\n\
    \   |\n17 | fn is_happy(s: String) -> bool {\n   |                           \
    \     - unclosed delimiter\n18 |     let mut num = 0;\n19 |     for (i, c) in\
    \ s.chars().enumerate() {\n   |                                         - this\
    \ delimiter might not be properly closed...\n...\n77 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n89 | }\n   |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6kshd4sb.rs:17:27\n   |\n17 | fn is_happy(s:\
    \ String) -> bool {\n   |    --------               ^^^^ expected `bool`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    // first, check length\n    if\
    \ s.len() < 3 {\n        return false;\n    }\n\n    // then, check if every 3\
    \ consecutive letters are distinct\n    for i in 0..s.len()-2 {\n        let a\
    \ = s.as_bytes()[i];\n        let b = s.as_bytes()[i+1];\n        let c = s.as_bytes()[i+2];\n\
    \        if a == b || b == c || a == c {\n            return false;\n        }\n\
    \    }\n\n    return true;\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && (0..s.len()-2).all(|i|\
    \ &s[i..i+3] == &*s[i..i+1].repeat(3))\n}\n\nfn main() {\n    let candidate =\
    \ is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpb6j8dj33.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|c|\
    \ c[0] != c[1] && c[1] != c[2] && c[0] != c[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && !s.chars().collect::<Vec<char>>().windows(3).any(|w|\
    \ w[0] == w[1] && w[1] == w[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyfzklma5.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let bs = s.as_bytes();\n    for i in 0..bs.len() - 2 {\n\
    \        if bs[i] == bs[i + 1] || bs[i] == bs[i + 2] || bs[i + 1] == bs[i + 2]\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut chars = s.chars();\n\
    \    let first = chars.next();\n    let second = chars.next();\n    if second.is_none()\
    \ {\n        return false;\n    }\n    let mut previous = first.unwrap();\n  \
    \  for c in chars {\n        if c == previous {\n            return false;\n \
    \       }\n        previous = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu5mgc676.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let letters = s.chars().collect::<Vec<char>>();\n\
    \    letters.len() < 3 || letters.windows(3).all(|v| v[0] != v[1] && v[1] != v[2]\
    \ && v[0] != v[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkm5t1z_5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for i in 2..s.len() {\n        if s.as_bytes()[i - 2] ==\
    \ s.as_bytes()[i - 1] && s.as_bytes()[i - 1] == s.as_bytes()[i] {\n          \
    \  return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwc2_ps18.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let bs = s.as_bytes();\n    let mut i = 0;\n    while i <\
    \ bs.len() - 2 {\n        if bs[i] == bs[i + 1] || bs[i] == bs[i + 2] || bs[i\
    \ + 1] == bs[i + 2] {\n            return false;\n        }\n        i += 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4yzso5ay.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut happy = true;\n    let mut iter = s.chars();\n  \
    \  let mut first_char = iter.next().unwrap();\n    let mut second_char = iter.next().unwrap();\n\
    \    let mut third_char = iter.next().unwrap();\n    for c in iter {\n       \
    \ if c == first_char || c == second_char || c == third_char {\n            happy\
    \ = false;\n            break;\n        }\n        first_char = second_char;\n\
    \        second_char = third_char;\n        third_char = c;\n    }\n    happy\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxzzyv48u.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let letters = s.chars().collect::<Vec<char>>();\n\
    \    if letters.len() < 3 {\n        return false;\n    }\n    for i in 0..(letters.len()\
    \ - 2) {\n        if letters[i] == letters[i + 1] || letters[i] == letters[i +\
    \ 2] || letters[i + 1] == letters[i + 2] {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    s.bytes().chunks(3).all(|chunk| chunk[0] != chunk[1] && chunk[1]\
    \ != chunk[2] && chunk[0] != chunk[2])\n}\n\nfn main() {\n    let candidate =\
    \ is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chunks` found for struct `std::str::Bytes`\
    \ in the current scope\n  --> /tmp/tmpjp02w45g.rs:21:15\n   |\n21 |     s.bytes().chunks(3).all(|chunk|\
    \ chunk[0] != chunk[1] && chunk[1] != chunk[2] && chunk[0] != chunk[2])\n   |\
    \               ^^^^^^ method not found in `std::str::Bytes<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976531
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let l = s.len();\n    l >= 3\
    \ && s.chars().collect::<Vec<char>>().windows(3).all(|c| c[0] != c[1] && c[1]\
    \ != c[2] && c[0] != c[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut x = String::new();\n\
    \    x.push_str(&s[0..1]);\n    x.push_str(&s[1..2]);\n    x.push_str(&s[2..3]);\n\
    \    if x[0] == x[1] || x[0] == x[2] || x[1] == x[2] {\n        false\n    } else\
    \ {\n        let mut s = s.clone();\n        s.remove(0);\n        is_happy(s)\n\
    \    }\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpzuwoe5zp.rs:22:8\n   |\n22 |     if x[0] == x[1] || x[0] == x[2] ||\
    \ x[1] == x[2] {\n   |        ^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpzuwoe5zp.rs:22:16\n   |\n22 |     if x[0] == x[1] || x[0] == x[2]\
    \ || x[1] == x[2] {\n   |                ^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpzuwoe5zp.rs:22:24\n   |\n22 |     if x[0] == x[1] || x[0] == x[2]\
    \ || x[1] == x[2] {\n   |                        ^^^^ `String` cannot be indexed\
    \ by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <S"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    for index in 0..s.len() - 2 {\n        let three = s.get(index..index\
    \ + 3).unwrap();\n        let mut chars = three.chars();\n        let first =\
    \ chars.next().unwrap();\n        if chars.all(|c| c == first) {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd8ccadxn.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let s = s.chars().collect::<Vec<_>>();\n\
    \    s.len() >= 3 &&\n    (0..s.len() - 2).all(|i| s[i] != s[i + 1] && s[i] !=\
    \ s[i + 2] && s[i + 1] != s[i + 2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let str_len = s.len();\n    if\
    \ str_len < 3 {\n        return false;\n    }\n\n    let s_vec: Vec<char> = s.chars().collect();\n\
    \    for i in 0..str_len-2 {\n        if s_vec[i] == s_vec[i+1] || s_vec[i] ==\
    \ s_vec[i+2] || s_vec[i+1] == s_vec[i+2] {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let mut is_happy = true;\n  \
    \  let mut sub_str = String::from(\"\");\n    let mut prev_sub_str = String::from(\"\
    \");\n    let mut prev_prev_sub_str = String::from(\"\");\n    for letter in s.chars()\
    \ {\n        sub_str.push(letter);\n        if sub_str.len() >= 3 {\n        \
    \    prev_prev_sub_str = prev_sub_str;\n            prev_sub_str = sub_str;\n\
    \            sub_str = String::from(\"\");\n            if prev_prev_sub_str ==\
    \ prev_sub_str {\n                is_happy = false;\n                break;\n\
    \            }\n        }\n    }\n    is_happy\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp79mti5t8.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut curr = None;\n    let mut count = 0;\n    for c in\
    \ s.chars() {\n        match curr {\n            None => {\n                curr\
    \ = Some(c);\n                count = 1;\n            }\n            Some(x) =>\
    \ {\n                if x == c {\n                    count += 1;\n          \
    \      } else {\n                    curr = Some(c);\n                    count\
    \ = 1;\n                }\n            }\n        }\n        if count >= 3 {\n\
    \            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n   \
    \ let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9quolho3.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8dbvetvn.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823206
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut a = chars.next().unwrap();\n\
    \    let mut b = chars.next().unwrap();\n    for c in chars {\n        if a ==\
    \ b || b == c || a == c {\n            return false;\n        }\n        a = b;\n\
    \        b = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    let len = s.len();\n    if len\
    \ < 3 {\n        return false;\n    }\n    for i in 0..(len - 2) {\n        if\
    \ s.chars().nth(i) == s.chars().nth(i + 1) || s.chars().nth(i) == s.chars().nth(i\
    \ + 2) || s.chars().nth(i + 1) == s.chars().nth(i + 2) {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976533
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is haprs or not.\n/// A string is haprs if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(a)\n\
    /// false\n/// >>> is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n\
    /// >>> is_happy(aabb)\n/// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n\
    /// false\nfn is_happy(s: String) -> bool {\n    if s.len() < 3 {\n        return\
    \ false;\n    }\n    let mut chars = s.chars();\n    let mut prev: char = chars.next().unwrap();\n\
    \    let mut curr: char = chars.next().unwrap();\n    let mut next: char = chars.next().unwrap();\n\
    \    while next != '\\0' {\n        if prev == curr || curr == next || prev ==\
    \ next {\n            return false;\n        }\n        prev = curr;\n       \
    \ curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp492wp_1m.rs:31:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976533
