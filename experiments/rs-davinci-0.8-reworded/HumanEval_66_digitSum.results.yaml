language: rs
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    if s.is_empty() {\n        return 0;\n    }\n    s.chars().filter(|&ch|\
    \ ch.is_ascii_uppercase()).map(|ch| ch as isize).sum()\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmpp7gvs2q4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + (c as isize)).abs()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp5osirnhp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    //your code here\n    let mut sum = 0;\n    let mut sum2 = 0;\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c\
    \ as isize;\n        }\n        if c.is_lowercase() {\n            sum2 += c as\
    \ isize;\n        }\n    }\n    sum - sum2\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-64`,\n right: `131`', /tmp/tmpq6bo4v2b.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        let num = c\
    \ as isize;\n        if (num >= 65) && (num <= 90) {\n            sum += num;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut r: isize = 0;\n    for c in s.chars() {\n        let mut\
    \ cnt = c as isize;\n        if cnt >= 65 && cnt <= 90 {\n            r += cnt;\n\
    \        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = digitSum;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    let mut chars = s.chars();\n    loop {\n\
    \        match chars.next() {\n            Some(c) => {\n                if let\
    \ Some(n) = c.to_digit(10) {\n                    sum += n as isize;\n       \
    \         }\n            }\n            None => break,\n        }\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `131`', /tmp/tmpdahzie02.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6jz1dnk3.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    if s.is_empty() {\n        return 0;\n    }\n    s.chars().filter(|x|\
    \ x.is_uppercase()).map(|x| x as isize).sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.bytes().filter(|&c| c >= 65 && c <= 90).map(|c| (c - 64) as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpg6z0m1o5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let string_iter = s.chars();\n    let mut answer: isize = 0;\n\
    \    for x in string_iter {\n        if x.is_uppercase() {\n            answer\
    \ += x as isize;\n        }\n    }\n    answer\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    0\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `131`', /tmp/tmpxrg89rn9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for i in s.chars() {\n        let c = i as\
    \ isize;\n        if c >= 65 && c <= 90 {\n            sum += c;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823115
