language: rs
name: HumanEval_26_remove_duplicates
results:
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut set = std::collections::HashSet::new();\n\
    \    for num in numbers {\n        if !set.contains(&num) {\n            result.push(num);\n\
    \            set.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpthnj1fx2.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3nmmnsvi.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_numbers = HashSet::new();\n    let mut result\
    \ = Vec::new();\n\n    for number in numbers {\n        if unique_numbers.contains(&number)\
    \ {\n            continue;\n        }\n\n        unique_numbers.insert(number);\n\
    \        result.push(number);\n    }\n\n    result\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpkoqoyxv9.rs:6:30\n  |\n6 |     let mut unique_numbers = HashSet::new();\n\
    \  |                              ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        if !seen.contains(&n) {\n            seen.insert(n);\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1fnfirzi.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // Your code here\n    Vec::new()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp80zl0dfc.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for n in numbers\
    \ {\n        if !res.contains(&n) {\n            res.push(n);\n        }\n   \
    \ }\n    res\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp3858kn2h.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // (1) Turn into a list\n    let mut numbers: LinkedList<isize>\
    \ = numbers.into_iter().collect();\n\n    // (2) Remove duplicates\n    for number\
    \ in numbers.iter() {\n        let mut cursor = numbers.cursor();\n        let\
    \ found = cursor.find(|x| *x == number);\n        match found {\n            Some(cursor)\
    \ => {\n                cursor.remove();\n            }\n            None => (),\n\
    \        }\n    }\n\n    // (3) Return vector\n    numbers.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `LinkedList` in this scope\n --> /tmp/tmpxtnse16b.rs:7:22\n\
    \  |\n7 |     let mut numbers: LinkedList<isize> = numbers.into_iter().collect();\n\
    \  |                      ^^^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::LinkedList;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut seen: HashSet<isize> = HashSet::new();\n  let mut unique:\
    \ Vec<isize> = Vec::new();\n  for n in numbers {\n    if !seen.contains(&n) {\n\
    \      seen.insert(n);\n      unique.push(n);\n    }\n  }\n  unique\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpxa1g9ef5.rs:6:17\n\
    \  |\n6 |   let mut seen: HashSet<isize> = HashSet::new();\n  |              \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpxa1g9ef5.rs:6:34\n  |\n6 |  \
    \ let mut seen: HashSet<isize> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = numbers.into_iter().collect::<HashSet<isize>>();\n\
    \    let mut result = Vec::new();\n    result.extend(numbers_set.drain());\n \
    \   result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpsyigf6m3.rs:6:57\n\
    \  |\n6 |     let mut numbers_set = numbers.into_iter().collect::<HashSet<isize>>();\n\
    \  |                                                         ^^^^^^^ not found\
    \ in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        if !seen.contains(&n) {\n            seen.insert(n);\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1fnfirzi.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for n in numbers {\n        if !seen.contains(&n) {\n\
    \            v.push(n);\n            seen.insert(n);\n        }\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpu58784oh.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpu58784oh.rs:7:36\n  |\n7 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: Implement me\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpz1th73yj.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for num in numbers {\n \
    \       if !result.contains(&num) {\n            result.push(num);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpw4powve_.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n   \
    \     if !result.contains(&n) {\n            result.push(n);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpf5bbbxvs.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut found = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for number in numbers {\n        if !found.contains(&number) {\n        \
    \    found.insert(number);\n            result.push(number);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpye25pdki.rs:6:21\n  |\n6 |     let mut found = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut hash_table = HashMap::new();\n    for num in numbers\
    \ {\n        let count = hash_table.entry(num).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    let mut result = Vec::new();\n    for num in numbers {\n    \
    \    if *hash_table.get(&num).unwrap() == 1 {\n            result.push(num);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp541heuei.rs:6:26\n  |\n6 |     let mut hash_table = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut counter = HashMap::new();\n    let mut output: Vec<isize>\
    \ = Vec::new();\n\n    for number in numbers {\n        if counter.contains_key(&number)\
    \ {\n            counter.insert(number, counter.get(&number).unwrap() + 1);\n\
    \        } else {\n            counter.insert(number, 1);\n        }\n    }\n\n\
    \    for number in numbers {\n        if counter.get(&number).unwrap() == &1 {\n\
    \            output.push(number);\n        }\n    }\n\n    output\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp1w0ag5p6.rs:6:23\n  |\n6 |     let mut counter = HashMap::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for number in numbers {\n\
    \        if !result.contains(&number) {\n            result.push(number);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpoejjp1t7.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = Vec::new();\n    for i in numbers {\n   \
    \     if !unique.contains(&i) {\n            unique.push(i);\n        }\n    }\n\
    \    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp4sxd7uw_.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for number in numbers {\n        if !seen.contains(&number) {\n         \
    \   seen.insert(number);\n            result.push(number);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplevw7gkm.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        if !seen.contains(&n) {\n            seen.insert(n);\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1fnfirzi.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let mut unique_numbers\
    \ = Vec::new();\n    let mut previous_number: Option<isize> = None;\n\n    while\
    \ let Some(current_number) = numbers_iter.next() {\n        if previous_number.is_none()\
    \ || previous_number.unwrap() != *current_number {\n            unique_numbers.push(*current_number);\n\
    \        }\n        previous_number = Some(*current_number);\n    }\n\n    unique_numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp60qj35fr.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n\
    \    for item in numbers {\n        if !set.contains(&item) {\n            result.push(item);\n\
    \            set.insert(item);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpa0ulqrqm.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().dedup().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp07piehzi.rs:6:25\n  |\n6 |     numbers.into_iter().dedup().collect()\n\
    \  |                         ^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut vec = Vec::new();\n    for i in numbers {\n      \
    \  if !vec.contains(&i) {\n            vec.push(i);\n        }\n    }\n    vec\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpfg0fewvq.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO\n    let mut ret: Vec<isize> = Vec::new();\n    let\
    \ mut already_here: Vec<isize> = Vec::new();\n    for n in numbers {\n       \
    \ if !already_here.contains(&n) {\n            ret.push(n);\n            already_here.push(n);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp0q511_xn.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for i in numbers {\n       \
    \ if !result.contains(&i) {\n            result.push(i);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpj_gnm6ok.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut hash_map = HashMap::new();\n    for i in numbers {\n\
    \        if !hash_map.contains_key(&i) {\n            hash_map.insert(i, 1);\n\
    \        } else {\n            *hash_map.get_mut(&i).unwrap() += 1;\n        }\n\
    \    }\n    let mut result = Vec::new();\n    for (k, v) in hash_map {\n     \
    \   if v == 1 {\n            result.push(k);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpc6x865bz.rs:6:24\n  |\n6 |     let mut hash_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = vec![];\n    for num in numbers {\n        if\
    \ !(l.contains(&num)) {\n            l.push(num);\n        }\n    }\n    l\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgvy_xa9_.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().dedup().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp07piehzi.rs:6:25\n  |\n6 |     numbers.into_iter().dedup().collect()\n\
    \  |                         ^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().cloned().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpdn16aymj.rs:6:39\n\
    \  |\n6 |     numbers.iter().cloned().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                       ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<isize> = vec![];\n    for i in numbers {\n\
    \        if !v.contains(&i) {\n            v.push(i);\n        }\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpicohfvbh.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_vector = Vec::new();\n    for n in numbers {\n\
    \        if new_vector.contains(&n) {\n            continue;\n        }\n    \
    \    new_vector.push(n);\n    }\n    new_vector\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpip5nurwv.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_deduped = numbers.clone();\n    numbers_deduped.dedup();\n\
    \    numbers_deduped\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpa80cdvfh.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut no_dupes: Vec<isize> = Vec::new();\n    let mut counts:\
    \ HashMap<isize, isize> = HashMap::new();\n\n    for number in numbers {\n   \
    \     let count = counts.entry(number).or_insert(0);\n        *count += 1;\n \
    \   }\n\n    for number in numbers {\n        let count = counts.get(&number).unwrap();\n\
    \        if *count == 1 {\n            no_dupes.push(number);\n        }\n   \
    \ }\n\n    no_dupes\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpli8k9bay.rs:7:21\n\
    \  |\n7 |     let mut counts: HashMap<isize, isize> = HashMap::new();\n  |   \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpli8k9bay.rs:7:45\n\
    \  |\n7 |     let mut counts: HashMap<isize, isize> = HashMap::new();\n  |   \
    \                                          ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        if !set.contains(&n) {\n            set.insert(n);\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpsi3h9qmd.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for num in numbers {\n        if !seen.contains(&num) {\n            seen.insert(num);\n\
    \            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpsyd7u1wz.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for number in numbers {\n\
    \        if !result.contains(&number) {\n            result.push(number);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpoejjp1t7.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 0
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        let mut count = 0;\n        for j in 0..numbers.len() {\n       \
    \     if numbers[i] == numbers[j] {\n                count += 1;\n           \
    \ }\n        }\n        if count == 1 {\n            vec.push(numbers[i]);\n \
    \       }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = Vec::new();\n    let mut output = Vec::new();\n\
    \    for i in numbers {\n        if !seen.contains(&i) {\n            seen.push(i);\n\
    \            output.push(i);\n        }\n    }\n    output\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpv4ovssib.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n\
    \    for n in numbers {\n        if !set.contains(&n) {\n            result.push(n);\n\
    \            set.insert(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp77frwimo.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for i in numbers {\n        if !seen.contains(&i) {\n            seen.insert(i);\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpjw4x10_7.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut duplicates = HashSet::new();\n    let mut unique =\
    \ Vec::new();\n    for number in numbers {\n        if duplicates.contains(&number)\
    \ {\n            continue;\n        }\n        if unique.contains(&number) {\n\
    \            duplicates.insert(number);\n            continue;\n        }\n  \
    \      unique.push(number);\n    }\n    unique\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpn1gzxdpk.rs:6:26\n  |\n6 |     let mut duplicates = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = HashSet::new();\n\
    \  for number in numbers {\n    if !seen.contains(&number) {\n      result.push(number);\n\
    \      seen.insert(number);\n    }\n  }\n  result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpi_k0pkjs.rs:7:18\n  |\n7 |   let mut seen = HashSet::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3nmmnsvi.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 0
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = Vec::new();\n    for n in numbers {\n        if\
    \ v.contains(&n) {\n            v.retain(|&x| x != n);\n        } else {\n   \
    \         v.push(n);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().fold(Vec::new(), |mut v, n| {\n      \
    \  if !v.contains(&n) {\n            v.push(n);\n        }\n        v\n    })\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpdhz53lv0.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_numbers = vec![];\n    for n in numbers {\n\
    \        if !unique_numbers.contains(&n) {\n            unique_numbers.push(n);\n\
    \        }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1ce35y2p.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: implement the function\n    vec![]\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpz0j4rbha.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut output = vec![];\n    let mut set = HashSet::new();\n\
    \    for number in numbers {\n        if !set.contains(&number) {\n          \
    \  output.push(number);\n            set.insert(number);\n        }\n    }\n \
    \   output\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp23dol1lm.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut is_unique = HashSet::new();\n    let mut output =\
    \ Vec::new();\n    for number in numbers {\n        if !is_unique.contains(&number)\
    \ {\n            is_unique.insert(number);\n            output.push(number);\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp48f1kikb.rs:6:25\n  |\n6 |     let mut is_unique = HashSet::new();\n\
    \  |                         ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for num in numbers {\n        if !seen.contains(&num) {\n            result.push(num);\n\
    \            seen.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpht4ut1rp.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_numbers = HashSet::new();\n    let mut filtered_numbers\
    \ = Vec::new();\n\n    for number in numbers {\n        if unique_numbers.insert(number)\
    \ {\n            filtered_numbers.push(number);\n        }\n    }\n\n    filtered_numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp_5yfvq0s.rs:6:30\n  |\n6 |     let mut unique_numbers = HashSet::new();\n\
    \  |                              ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut found = HashSet::new();\n    let mut res = Vec::new();\n\
    \    for number in numbers {\n        if !found.contains(&number) {\n        \
    \    found.insert(number);\n            res.push(number);\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpixwzjk33.rs:6:21\n  |\n6 |     let mut found = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut vec = Vec::new();\n    for number in numbers {\n \
    \       if !vec.contains(&number) {\n            vec.push(number);\n        }\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpetyuxh8r.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    let mut numbers: Vec<isize>\
    \ = numbers\n        .into_iter()\n        .filter(|&number| {\n            let\
    \ already_occurred = set.contains(&number);\n            set.insert(number);\n\
    \            !already_occurred\n        })\n        .collect();\n    numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpz8eev427.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for &number in &numbers\
    \ {\n        if !result.contains(&number) {\n            result.push(number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_mhv2rx0.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().filter(|n| numbers.iter().filter(|m| m\
    \ == n).count() < 2).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmpza4eqzc9.rs:6:64\n\
    \  |\n6 |     numbers.into_iter().filter(|n| numbers.iter().filter(|m| m == n).count()\
    \ < 2).collect()\n  |                                                        \
    \        ^^ no implementation for `&isize == isize`\n  |\n  = help: the trait\
    \ `PartialEq<isize>` is not implemented for `&isize`\n  = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n            f32\n           \
    \ f64\n            i128\n            i16\n            i32\n            i64\n \
    \           i8\n            isize\n          and 6 others\n  = note: required\
    \ because of the requirements on the impl of `PartialEq<&isize>` for `&&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut num = numbers;\n    num.sort();\n    num.dedup();\n\
    \    num\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpr0h3hncu.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_numbers = Vec::new();\n    for i in numbers {\n\
    \        if !new_numbers.contains(&i) {\n            new_numbers.push(i);\n  \
    \      }\n    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpm2wetinr.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut out = Vec::new();\n    let mut elements = HashSet::new();\n\
    \    for n in numbers {\n        if !elements.contains(&n) {\n            out.push(n);\n\
    \            elements.insert(n);\n        }\n    }\n    out\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp27kuno7o.rs:7:24\n  |\n7 |     let mut elements = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut distinct = Vec::new();\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for n in numbers {\n        if !seen.contains(&n) {\n\
    \            distinct.push(n);\n            seen.insert(n);\n        }\n    }\n\
    \    distinct\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpcy0nog0e.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpcy0nog0e.rs:7:36\n  |\n7 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    let mut vec = Vec::new();\n\
    \    for i in numbers {\n        if !set.contains(&i) {\n            set.insert(i);\n\
    \            vec.push(i);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpj0ov_odq.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_numbers = Vec::new();\n    let mut cache = HashSet::new();\n\
    \    for number in numbers {\n        if !cache.contains(&number) {\n        \
    \    new_numbers.push(number);\n            cache.insert(number);\n        }\n\
    \    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplnqbwh_4.rs:7:21\n  |\n7 |     let mut cache = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().fold(Vec::new(), |mut acc, x| {\n    \
    \    if !acc.contains(&x) {\n            acc.push(x);\n        }\n        acc\n\
    \    })\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpwbl4stvt.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for num in numbers {\n \
    \       if !result.contains(&num) {\n            result.push(num);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpw4powve_.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut ret: Vec<isize> = Vec::new();\n  for i in numbers {\n\
    \    if ret.contains(&i) {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1v147j27.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::<isize>::new();\n    for i in numbers\
    \ {\n        if !result.contains(&i) {\n            result.push(i);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpw61xzs9z.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for num in numbers {\n        if !seen.contains(&num)\
    \ {\n            ret.push(num);\n            seen.insert(num);\n        }\n  \
    \  }\n    ret\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmptq8gpfgu.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmptq8gpfgu.rs:7:36\n  |\n7 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3nmmnsvi.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for num in numbers {\n        if !seen.contains(&num) {\n            seen.insert(num);\n\
    \            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpsyd7u1wz.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        if !seen.contains(&n) {\n            seen.insert(n);\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1fnfirzi.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().unique().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unique` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpkf0_teyj.rs:6:25\n  |\n6 |     numbers.into_iter().unique().collect()\n\
    \  |                         ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut uniques = Vec::new();\n  for i in numbers {\n    if\
    \ !uniques.contains(&i) {\n      uniques.push(i);\n    }\n  }\n  uniques\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxoeij6vz.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_numbers = Vec::new();\n    for i in numbers {\n\
    \        if !new_numbers.contains(&i) {\n            new_numbers.push(i);\n  \
    \      }\n    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpm2wetinr.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: implement\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1_g4vw8h.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    let mut set = std::collections::HashSet::new();\n\
    \    for n in numbers {\n        if !set.contains(&n) {\n            res.push(n);\n\
    \            set.insert(n);\n        }\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmprj3hll1c.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 0
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers;\n    let mut remove_list = Vec::new();\n\
    \    let mut count = 0;\n    for i in 0..numbers.len() {\n        for n in numbers.iter()\
    \ {\n            if n == &numbers[i] {\n                count += 1;\n        \
    \    }\n        }\n        if count >= 2 {\n            remove_list.push(numbers[i]);\n\
    \        }\n        count = 0;\n    }\n    for n in remove_list.iter() {\n   \
    \     numbers.retain(|&x| x != *n);\n    }\n    numbers\n}\n\nfn main() {\n  \
    \  let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().dedup().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp07piehzi.rs:6:25\n  |\n6 |     numbers.into_iter().dedup().collect()\n\
    \  |                         ^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    use std::collections::HashSet;\n    let set: HashSet<isize>\
    \ = numbers.iter().cloned().collect();\n    set.into_iter().collect()\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 1]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpc88q0u28.rs:14:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for n in numbers {\n      \
    \  if res.contains(&n) {\n            continue;\n        }\n        res.push(n);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmptin6e6nx.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3nmmnsvi.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_no_dups = Vec::new();\n    let mut numbers_seen\
    \ = HashSet::new();\n\n    for n in numbers {\n        if !numbers_seen.contains(&n)\
    \ {\n            numbers_no_dups.push(n);\n            numbers_seen.insert(n);\n\
    \        }\n    }\n\n    numbers_no_dups\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp45fpribx.rs:7:28\n  |\n7 |     let mut numbers_seen = HashSet::new();\n\
    \  |                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8srvcmn1.rs:6:3

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for n in numbers {\n       \
    \ if result.iter().find(|x| **x == n).is_none() {\n            result.push(n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmps35ll1tg.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().collect::<std::collections::HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 2, 3]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp53c_sswz.rs:12:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for n in numbers {\n        if !seen.contains(&n)\
    \ {\n            seen.insert(n);\n            result.push(n);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp7t26su5z.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp7t26su5z.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in numbers {\n   \
    \     if !result.contains(&i) {\n            result.push(i);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp8drzr40.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut\
    \ without_duplicates: Vec<isize> = Vec::new();\n\n    for number in numbers {\n\
    \        if !seen.contains(&number) {\n            seen.insert(number);\n    \
    \        without_duplicates.push(number);\n        }\n    }\n\n    without_duplicates\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3vzozvrq.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp3vzozvrq.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    let mut result\
    \ = Vec::new();\n    for number in numbers {\n        if !numbers_set.contains(&number)\
    \ {\n            result.push(number);\n            numbers_set.insert(number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpu552doyy.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut uniques = Vec::new();\n    for n in numbers {\n  \
    \      if !uniques.contains(&n) {\n            uniques.push(n);\n        }\n \
    \   }\n    uniques\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1j77jgbw.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_numbers = Vec::new();\n    for number in numbers\
    \ {\n        if !unique_numbers.contains(&number) {\n            unique_numbers.push(number);\n\
    \        }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpbeowfqpf.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut out = vec![];\n    for num in numbers {\n        if\
    \ !out.contains(&num) {\n            out.push(num);\n        }\n    }\n    out\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp7men6os1.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    let mut vec = Vec::new();\n\
    \    for &i in &numbers {\n        if !set.contains(&i) {\n            set.insert(i);\n\
    \            vec.push(i);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpvjmatnht.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for number in numbers {\n  \
    \      if !result.contains(&number) {\n            result.push(number);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgdheh4_9.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  if numbers.len() == 0 {\n    return vec![];\n  }\n  let mut\
    \ result = vec![numbers[0]];\n  for i in 1..numbers.len() {\n    if result.contains(&numbers[i])\
    \ {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  result\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp69gx8b75.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().map(|i| i).collect::<HashSet<&isize>>().iter().map(|i|\
    \ *i).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpysk7fg3e.rs:6:41\n\
    \  |\n6 |     numbers.iter().map(|i| i).collect::<HashSet<&isize>>().iter().map(|i|\
    \ *i).collect::<Vec<isize>>()\n  |                                         ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = HashSet::new();\n    numbers.into_iter().filter(|&x|\
    \ unique.insert(x)).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmptnuape2d.rs:6:22\n  |\n6 |     let mut unique = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for num in numbers {\n     \
    \   if !result.contains(&num) {\n            result.push(num);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp98aszxij.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers;\n    numbers.sort();\n    numbers.dedup();\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmphcrtl__9.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().dedup().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp07piehzi.rs:6:25\n  |\n6 |     numbers.into_iter().dedup().collect()\n\
    \  |                         ^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for &i in &numbers {\n        if !seen.contains(&i) {\n            seen.insert(i);\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp5okc6bqh.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().collect::<LinkedHashSet<_>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `LinkedHashSet` in this scope\n --> /tmp/tmpwdkr784b.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<LinkedHashSet<_>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = vec![];\n    for num in numbers {\n     \
    \   if !unique.contains(&num) {\n            unique.push(num);\n        }\n  \
    \  }\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpbz9lml1h.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut uniques = Vec::new();\n\
    \    for number in numbers {\n        if !seen.contains(&number) {\n         \
    \   uniques.push(number);\n            seen.insert(number);\n        }\n    }\n\
    \    uniques\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpjbid_uyr.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut iter = numbers.into_iter();\n    let mut out: Vec<isize>\
    \ = Vec::new();\n    while let Some(x) = iter.next() {\n        if !out.contains(&x)\
    \ {\n            out.push(x);\n        }\n    }\n    out\n}\n\nfn main() {\n \
    \   let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp9xwcg8g1.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for number in numbers {\n        if !seen.contains(&number) {\n         \
    \   seen.insert(number);\n            result.push(number);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplevw7gkm.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    use std::collections::HashSet;\n    let set: HashSet<isize>\
    \ = numbers.iter().cloned().collect();\n    set.into_iter().collect()\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 1]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpc88q0u28.rs:14:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = HashSet::new();\n    let mut output = Vec::new();\n\
    \    for num in numbers {\n        if !unique.contains(&num) {\n            unique.insert(num);\n\
    \            output.push(num);\n        }\n    }\n    output\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpmonlt237.rs:6:22\n  |\n6 |     let mut unique = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().collect::<HashSet<_>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmphyv5xuqc.rs:6:30\n\
    \  |\n6 |     numbers.iter().collect::<HashSet<_>>().into_iter().collect()\n \
    \ |                              ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().unique().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unique` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpkf0_teyj.rs:6:25\n  |\n6 |     numbers.into_iter().unique().collect()\n\
    \  |                         ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut out = vec![];\n    for n in numbers {\n        if\
    \ !out.contains(&n) {\n            out.push(n);\n        }\n    }\n    out\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkqgmd8yt.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut remove_duplicates = HashSet::new();\n    let mut remove_duplicates_numbers\
    \ = Vec::new();\n    for i in numbers {\n        if !remove_duplicates.contains(&i)\
    \ {\n            remove_duplicates.insert(i);\n            remove_duplicates_numbers.push(i);\n\
    \        }\n    }\n    remove_duplicates_numbers\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp36aagkmz.rs:6:33\n  |\n6 |     let mut remove_duplicates = HashSet::new();\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3nmmnsvi.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3nmmnsvi.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in numbers {\n   \
    \     if !result.contains(&i) {\n            result.push(i);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp8drzr40.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for n in numbers {\n       \
    \ if !result.contains(&n) {\n            result.push(n);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgz2fz5df.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut output = Vec::new();\n\
    \    for n in numbers {\n        if !seen.contains(&n) {\n            seen.insert(n);\n\
    \            output.push(n);\n        }\n    }\n    output\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp5ldy5kep.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // Create a new vector to hold the unique values\n    let\
    \ mut unique_numbers = Vec::new();\n\n    // For each number in the input vector\n\
    \    for number in numbers {\n        // If it isn't already in the unique numbers\
    \ vector, add it\n        if !unique_numbers.contains(&number) {\n           \
    \ unique_numbers.push(number);\n        }\n    }\n\n    unique_numbers\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpry7csyez.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut state = HashMap::new();\n    let mut result = Vec::new();\n\
    \    for num in numbers {\n        match state.get(&num) {\n            Some(cnt)\
    \ => {\n                if *cnt == 1 {\n                    result.push(num);\n\
    \                }\n                state.insert(num, cnt + 1);\n            }\n\
    \            None => {\n                state.insert(num, 1);\n              \
    \  result.push(num);\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmphdnbrwde.rs:6:21\n  |\n6 |     let mut state = HashMap::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n   \
    \     if !result.contains(&n) {\n            result.push(n);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpf5bbbxvs.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::<isize>::new();\n    let mut was = HashSet::<isize>::new();\n\
    \    for n in numbers {\n        if !was.contains(&n) {\n            result.push(n);\n\
    \            was.insert(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpw8b3a17s.rs:7:19\n  |\n7 |     let mut was = HashSet::<isize>::new();\n\
    \  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_vec = Vec::new();\n    let mut uniques = HashSet::new();\n\
    \    for n in numbers {\n        if !uniques.contains(&n) {\n            new_vec.push(n);\n\
    \            uniques.insert(n);\n        }\n    }\n    new_vec\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpdibucx6o.rs:7:23\n  |\n7 |     let mut uniques = HashSet::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for num in numbers {\n \
    \       if !result.contains(&num) {\n            result.push(num);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpw4powve_.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut tracker = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        if !tracker.contains(&n) {\n            tracker.insert(n);\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpa6_hf17w.rs:6:23\n  |\n6 |     let mut tracker = HashSet::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut seen = HashSet::new();\n  let mut result = Vec::new();\n\
    \  for i in numbers {\n    if !seen.contains(&i) {\n      seen.insert(i);\n  \
    \    result.push(i);\n    }\n  }\n  result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp_6kkk8ob.rs:6:18\n  |\n6 |   let mut seen = HashSet::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers;\n    numbers.sort();\n    numbers.dedup();\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmphcrtl__9.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().fold(Vec::new(), |mut acc, num| {\n  \
    \      if !acc.contains(&num) {\n            acc.push(num);\n        }\n     \
    \   acc\n    })\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp5mvdzey4.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for number in numbers {\n        if !seen.contains(&number)\
    \ {\n            seen.insert(number);\n            result.push(number);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpf2rthvm3.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpf2rthvm3.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8qm6xxp1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in numbers {\n   \
    \     if !result.contains(&i) {\n            result.push(i);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp8drzr40.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::new();\n    let mut has_seen = HashSet::new();\n\
    \    for num in numbers {\n        if !has_seen.contains(&num) {\n           \
    \ ret.push(num);\n            has_seen.insert(num);\n        }\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpk3kfgsu9.rs:7:24\n  |\n7 |     let mut has_seen = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut unique_numbers =\
    \ BTreeSet::new();\n    for number in numbers {\n        if !unique_numbers.contains(&number)\
    \ {\n            unique_numbers.insert(number);\n            result.push(number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpk728mvi3.rs:7:30\n  |\n7 |     let mut unique_numbers = BTreeSet::new();\n\
    \  |                              ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut last_number = None;\n    let mut numbers_without_duplicates\
    \ = Vec::new();\n    for number in numbers {\n        if number != last_number.unwrap_or(number)\
    \ {\n            numbers_without_duplicates.push(number);\n        }\n       \
    \ last_number = Some(number);\n    }\n    numbers_without_duplicates\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp_bbbl1xj.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut duplicates = HashSet::new();\n    let mut non_duplicates\
    \ = Vec::new();\n\n    for number in numbers {\n        if duplicates.contains(&number)\
    \ {\n            continue;\n        }\n\n        non_duplicates.push(number);\n\
    \        duplicates.insert(number);\n    }\n\n    non_duplicates\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpj2sz3sn4.rs:6:26\n  |\n6 |     let mut duplicates = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    let mut result\
    \ = Vec::new();\n    for i in numbers {\n        if !numbers_set.contains(&i)\
    \ {\n            result.push(i);\n            numbers_set.insert(i);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpbowrojsw.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_numbers = vec![];\n    for number in numbers\
    \ {\n        if !unique_numbers.contains(&number) {\n            unique_numbers.push(number);\n\
    \        }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxi_imec7.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().unique().map(|x| *x).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unique` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp5i0qufbn.rs:6:20\n  |\n6 |     numbers.iter().unique().map(|x|\
    \ *x).collect()\n  |                    ^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut results = Vec::new();\n    for number in numbers {\n\
    \        if results.contains(&number) {\n            continue;\n        }\n  \
    \      results.push(number);\n    }\n    results\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkjatedfj.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut h: HashSet<isize> = HashSet::new();\n    let mut result:\
    \ Vec<isize> = Vec::new();\n    for n in numbers {\n        if !h.contains(&n)\
    \ {\n            h.insert(n);\n            result.push(n);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp27kgjcvq.rs:6:16\n\
    \  |\n6 |     let mut h: HashSet<isize> = HashSet::new();\n  |               \
    \ ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp27kgjcvq.rs:6:33\n  |\n6 |  \
    \   let mut h: HashSet<isize> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().enumerate().filter(|&(idx, item)| numbers.iter().position(|x|\
    \ x == item).unwrap() == idx).map(|(_, i)| i).collect()\n}\n\nfn main() {\n  \
    \  let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmpc3wwncba.rs:6:89\n\
    \  |\n6 |     numbers.into_iter().enumerate().filter(|&(idx, item)| numbers.iter().position(|x|\
    \ x == item).unwrap() == idx).map(|(_, i)| i).collect()\n  |                 \
    \                                                                        ^^ no\
    \ implementation for `&isize == isize`\n  |\n  = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            f32\n            f64\n            i128\n\
    \            i16\n            i32\n            i64\n            i8\n         \
    \   isize\n          and 6 others\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut seen_twice = HashSet::new();\n\
    \    let mut result = Vec::new();\n\n    for number in numbers {\n        if seen.contains(&number)\
    \ {\n            seen_twice.insert(number);\n        } else {\n            seen.insert(number);\n\
    \        }\n    }\n\n    for number in numbers {\n        if !seen_twice.contains(&number)\
    \ {\n            result.push(number);\n        }\n    }\n\n    result\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpgg684m4k.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpgg684m4k.rs:7:26\n\
    \  |\n7 |     let mut seen_twice = HashSet::new();\n  |                      \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = Vec::new();\n    for &number in &numbers\
    \ {\n        if !unique.contains(&number) {\n            unique.push(number);\n\
    \        }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmps_5t1zrl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut numbers_copy = numbers.clone();\n\
    \    while !numbers_copy.is_empty() {\n        let num = numbers_copy.pop().unwrap();\n\
    \        if !result.contains(&num) {\n            result.push(num);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpcv1pgact.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_numbers = Vec::new();\n    for number in numbers\
    \ {\n        if !unique_numbers.contains(&number) {\n            unique_numbers.push(number);\n\
    \        }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpbeowfqpf.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let set = numbers.into_iter().collect::<HashSet<_>>();\n \
    \   set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmplx2axnbc.rs:6:45\n\
    \  |\n6 |     let set = numbers.into_iter().collect::<HashSet<_>>();\n  |    \
    \                                         ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut prev = std::isize::MIN;\n    let mut res = Vec::new();\n\
    \    for n in numbers {\n        if n != prev {\n            res.push(n);\n  \
    \      }\n        prev = n;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpuoh46bhj.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    use std::collections::HashSet;\n    let set: HashSet<isize>\
    \ = numbers.iter().cloned().collect();\n    let mut result: Vec<isize> = Vec::new();\n\
    \    for element in &numbers {\n        if set.contains(element) {\n         \
    \   result.push(*element);\n            set.remove(element);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `set` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmppz779o37.rs:12:13\n   |\n7  |     let set: HashSet<isize>\
    \ = numbers.iter().cloned().collect();\n   |         --- help: consider changing\
    \ this to be mutable: `mut set`\n...\n12 |             set.remove(element);\n\
    \   |             ^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_seen = HashSet::new();\n    let mut result\
    \ = Vec::new();\n    for n in numbers {\n        if !numbers_seen.contains(&n)\
    \ {\n            result.push(n);\n            numbers_seen.insert(n);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1_di4rex.rs:6:28\n  |\n6 |     let mut numbers_seen = HashSet::new();\n\
    \  |                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut dedup = HashSet::new();\n    for &n in &numbers {\n\
    \        dedup.insert(n);\n    }\n    let mut v = Vec::new();\n    for n in dedup\
    \ {\n        v.push(n);\n    }\n    v\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp582jt4ww.rs:6:21\n  |\n6 |     let mut dedup = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 0
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = vec![];\n    let mut seen_once = vec![];\n\
    \    for number in numbers {\n        if seen.contains(&number) {\n          \
    \  seen_once.retain(|&x| x != number);\n        } else {\n            seen.push(number);\n\
    \            seen_once.push(number);\n        }\n    }\n    seen_once\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = Vec::new();\n    let mut set = std::collections::HashSet::new();\n\
    \    for num in numbers {\n        if !set.contains(&num) {\n            unique.push(num);\n\
    \            set.insert(num);\n        }\n    }\n    unique\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_ytxel8r.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmph0dv1dqu.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822420
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().fold(Vec::new(), |mut acc, &x| {\n        if\
    \ !acc.contains(&x) {\n            acc.push(x);\n        }\n        acc\n    })\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmptst_8dh7.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in numbers {\n   \
    \     if !result.contains(&i) {\n            result.push(i);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp8drzr40.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3nmmnsvi.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::<isize>::new();\n    let mut freq = HashMap::<isize,\
    \ usize>::new();\n    for number in numbers {\n        if freq.contains_key(&number)\
    \ {\n            let mut count = freq.get_mut(&number).unwrap();\n           \
    \ *count += 1;\n        } else {\n            freq.insert(number, 1);\n      \
    \  }\n    }\n    for number in numbers {\n        if freq.get(&number).unwrap()\
    \ == &1 {\n            ret.push(number);\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpbbgm5_sg.rs:7:20\n  |\n7 |     let mut freq = HashMap::<isize, usize>::new();\n\
    \  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut number_count = HashMap::new();\n    for n in numbers\
    \ {\n        *number_count.entry(n).or_insert(0) += 1;\n    }\n    let mut unique_numbers\
    \ = vec![];\n    for n in numbers {\n        if number_count[&n] == 1 {\n    \
    \        unique_numbers.push(n);\n        }\n    }\n    unique_numbers\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpfmi0_rot.rs:6:28\n  |\n6 |     let mut number_count = HashMap::new();\n\
    \  |                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    for n in numbers\
    \ {\n        if !v.contains(&n) {\n            v.push(n);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxl9q8z8p.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpi8oh5hcf.rs:6:33\n\
    \  |\n6 |   numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_numbers = Vec::new();\n    for num in numbers\
    \ {\n        if !new_numbers.contains(&num) {\n            new_numbers.push(num);\n\
    \        }\n    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp0pzg2izj.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = numbers;\n    nums.sort();\n    let mut res\
    \ = Vec::new();\n    let mut j = 0;\n    for i in 0..nums.len() {\n        if\
    \ nums[i] != nums[j] {\n            res.push(nums[i]);\n            j = i;\n \
    \       }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpwsd6wjqe.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n   \
    \     if !result.contains(&n) {\n            result.push(n);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpf5bbbxvs.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822420
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_numbers = HashSet::new();\n    numbers.into_iter().filter(|number|\
    \ unique_numbers.insert(*number)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpicok_5kj.rs:6:30\n  |\n6 |     let mut unique_numbers = HashSet::new();\n\
    \  |                              ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut result = vec![];\n  for number in numbers {\n    if\
    \ !result.contains(&number) {\n      result.push(number);\n    }\n  }\n  result\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmprusyj4kp.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for number in numbers {\n\
    \        if !result.contains(&number) {\n            result.push(number);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpoejjp1t7.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: implement it\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpa8fhncev.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976045
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().fold(vec![], |mut result, x| {\n        if\
    \ !result.contains(x) {\n            result.push(*x);\n        }\n        result\n\
    \    })\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxxxdpp9j.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
