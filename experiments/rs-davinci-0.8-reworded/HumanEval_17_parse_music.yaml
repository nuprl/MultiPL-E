name: HumanEval_17_parse_music
language: rs
prompt: "/// Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n/// Your task is to parse this string and return vector of integers\
  \ corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n\
  /// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n\
  /// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o|\
  \ .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
  \ String) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
  \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1,\
  \ 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2,\
  \ 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o\
  \ o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
completions: ['    unimplemented!()', "    let mut music_vec: Vec<isize> = Vec::new();\n\
    \    let mut counter: isize = 0;\n    let music_str = &music_string;\n    let\
    \ length = music_str.len();\n    while counter < length as isize {\n        let\
    \ a = &music_str[counter as usize..counter as usize + 1];\n        if a == \"\
    o\" {\n            music_vec.push(4);\n            counter += 1;\n        } else\
    \ if a == \"o\" {\n            music_vec.push(4);\n            counter += 1;\n\
    \        } else if a == \"o\" {\n            music_vec.push(4);\n            counter\
    \ += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n    \
    \        counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter += 1;\n        } else if a == \"o\" {\n            music_vec.push(4);\n\
    \            counter +=", "    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut last_beat: isize = 0;\n    for (idx, beat) in music_string.split_whitespace().enumerate()\
    \ {\n        match beat {\n            \"o\" => {\n                result.push(4);\n\
    \                last_beat = 4;\n            }\n            \"o|\" => {\n    \
    \            result.push(2);\n                last_beat = 2;\n            }\n\
    \            \".|\" => {\n                result.push(1);\n                last_beat\
    \ = 1;\n            }\n            \"o|.\" => {\n                result.push(3);\n\
    \                last_beat = 3;\n            }\n            \".\" => {\n     \
    \           result.push(last_beat);\n            }\n            _ => {\n     \
    \           panic!(\"{}: unknown beat {}\", idx, beat);\n            }\n     \
    \   }\n    }\n    result", '    unimplemented!()', "    // convert string into\
    \ chars\n    let chars = music_string.chars().collect::<Vec<char>>();\n    //\
    \ iterate over chars and return vector of ints\n    chars.iter().map(|&x| match\
    \ x {\n        'o' => 4,\n        'o' | '|' => 2,\n        '.' | '|' => 1,\n \
    \       _ => 0,\n    }).collect::<Vec<isize>>()", "    music_string.chars().fold(Vec::new(),\
    \ |mut output, c| {\n        let new_value = match c {\n            'o' => 4,\n\
    \            '|' => 2,\n            '.' => 1,\n            _ => 0,\n        };\n\
    \        if let Some(last_value) = output.last_mut() {\n            *last_value\
    \ += new_value;\n        } else {\n            output.push(new_value);\n     \
    \   }\n        output\n    })", '    unimplemented!()', "    let mut result: Vec<isize>\
    \ = Vec::new();\n    for c in music_string.chars() {\n        if c == 'o' {\n\
    \            result.push(4);\n        } else if c == '|' {\n            let prev_elem\
    \ = result.pop().unwrap();\n            result.push(prev_elem / 2);\n        }\
    \ else if c == '.' {\n            result.push(1);\n        }\n    }\n    result",
  '    unimplemented!()', '    unimplemented!("Implement the parse_music({:?}) function",
    music_string);', "    music_string.split_whitespace().map(|s| match s {\n    \
    \    \"o\" => 4,\n        \"o|\" => 2,\n        \".|\" => 1,\n        _ => unreachable!(),\n\
    \    }).collect()", "    //type ShortNote = (char, isize);\n    let notes = vec![('o',\
    \ 4), ('o', 2), ('.', 1)];\n    let note_pairs = music_string.split(\" \");\n\
    \    let pairs = note_pairs.map(|x| (x.chars().nth(0).unwrap(), x.chars().nth(1).unwrap()));\n\
    \    let mut new_vector = Vec::new();\n    for (l, r) in pairs {\n        if let\
    \ Some(note) = notes.iter().find(|&&(c, _)| c == l) {\n            new_vector.push(note.1);\n\
    \        }\n        if r == '|' {\n            new_vector.push(1);\n        }\n\
    \    }\n    new_vector", "    let mut result: Vec<isize> = Vec::new();\n    let\
    \ splitted_music = music_string.split(\" \");\n    for value in splitted_music\
    \ {\n        match value {\n            \"o\" => result.push(4),\n           \
    \ \"o|\" => result.push(2),\n            \".|\" => result.push(1),\n         \
    \   _ => panic!(\"wrong input\"),\n        }\n    }\n    result", '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!("Parse musical notes from {}", music_string);',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in music_string.split_whitespace()\
    \ {\n        match i {\n            \"o\" => result.push(4),\n            \"o|\"\
    \ => result.push(2),\n            \".|\" => result.push(1),\n            _ =>\
    \ (),\n        }\n    }\n    result", '    unimplemented!()', '    unimplemented!()',
  "    let mut beats = Vec::new();\n    let mut i = 0;\n    let mut in_beat = false;\n\
    \    while i < music_string.len() {\n        let mut count = 0;\n        let mut\
    \ finished = false;\n        while !finished {\n            match &music_string[i..i\
    \ + 1] {\n                \"o\" => {\n                    if in_beat {\n     \
    \                   count += 1;\n                    } else {\n              \
    \          in_beat = true;\n                        count = 1;\n             \
    \       }\n                }\n                \"|\" => {\n                   \
    \ in_beat = false;\n                    finished = true;\n                }\n\
    \                \" \" => {\n                    in_beat = false;\n          \
    \          finished = true;\n                }\n                _ => {\n     \
    \               count = 0;\n                    finished = true;\n           \
    \     }\n            }\n            i += 1;\n        }\n        if count > 0 {\n\
    \            beats.push(count);\n        }\n    }\n    beats"]
stop_tokens:
- "\n}"
