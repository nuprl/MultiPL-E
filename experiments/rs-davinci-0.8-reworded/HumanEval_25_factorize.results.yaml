language: rs
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut _n = n;\n    let\
    \ mut v = Vec::new();\n    for i in 2..=n {\n        while _n % i == 0 {\n   \
    \         v.push(i);\n            _n /= i;\n        }\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut v = Vec::new();\n\
    \    for i in 2..n + 1 {\n        if n % i == 0 {\n            v.push(i);\n  \
    \          let x = factorize(n / i);\n            for j in x {\n             \
    \   v.push(j);\n            }\n            break;\n        }\n    }\n    v\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut current = n;\n    let mut i = 2;\n    while i * i <= current {\n\
    \        if current % i == 0 {\n            factors.push(i);\n            current\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if current\
    \ > 1 {\n        factors.push(current);\n    }\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return\
    \ vec![];\n    }\n    let mut n = n;\n    let mut result = vec![];\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            n /= i;\n \
    \           result.push(i);\n        } else {\n            i += 1;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut m = n;\n    let mut\
    \ res = Vec::new();\n    let mut d = 2;\n    while m > 1 {\n        while m %\
    \ d == 0 {\n            res.push(d);\n            m /= d;\n        }\n       \
    \ d += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut primes = vec![2];\n\
    \    let mut primes_factors = vec![];\n    let mut n = n;\n    while n > 1 {\n\
    \        for p in primes.iter() {\n            if n % p == 0 {\n             \
    \   primes_factors.push(*p);\n                n /= p;\n                break;\n\
    \            }\n        }\n        if primes_factors.last() != Some(&2) {\n  \
    \          primes.push(2);\n        }\n        for i in 3..=n {\n            let\
    \ mut is_prime = true;\n            for p in primes.iter() {\n               \
    \ if i % p == 0 {\n                    is_prime = false;\n                   \
    \ break;\n                }\n            }\n            if is_prime {\n      \
    \          primes.push(i);\n                break;\n            }\n        }\n\
    \    }\n    primes_factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut temp = n;\n    let mut primes = get_prime_numbers(n);\n    while\
    \ temp > 1 {\n        for p in primes.iter_mut() {\n            if temp % p ==\
    \ 0 {\n                factors.push(*p);\n                temp /= p;\n       \
    \         break;\n            }\n        }\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_prime_numbers` in this scope\n\
    \  --> /tmp/tmpr909g005.rs:13:22\n   |\n13 |     let mut primes = get_prime_numbers(n);\n\
    \   |                      ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    assert!(n > 0);\n    let\
    \ mut n = n;\n    let mut factors = Vec::new();\n    let mut prime = 2;\n    while\
    \ n > 1 {\n        if n % prime == 0 {\n            factors.push(prime);\n   \
    \         n /= prime;\n        } else {\n            prime += 1;\n        }\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    let mut x = 2;\n    while n > 1 {\n        while n %\
    \ x == 0 {\n            factors.push(x);\n            n /= x;\n        }\n   \
    \     x += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut number = n;\n   \
    \ let mut result = Vec::new();\n    let mut factor = 2;\n    while number > 1\
    \ {\n        while number % factor == 0 {\n            result.push(factor);\n\
    \            number /= factor;\n        }\n        factor += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let prime_factors = prime_factors(n);\n\
    \    let mut res = vec![];\n    for i in prime_factors {\n        res.push(i);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `prime_factors` in this scope\n  -->\
    \ /tmp/tmp181tdxwy.rs:11:25\n   |\n11 |     let prime_factors = prime_factors(n);\n\
    \   |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut p_factors = Vec::new();\n\
    \    let mut n = n;\n    let mut div = 2;\n    while n > 1 {\n        if n % div\
    \ == 0 {\n            p_factors.push(div);\n            n /= div;\n        } else\
    \ {\n            div += 1;\n        }\n    }\n    p_factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut candidate = 2;\n    let mut remainder = n;\n    loop {\n        if\
    \ remainder % candidate == 0 {\n            factors.push(candidate);\n       \
    \     remainder /= candidate;\n        } else {\n            candidate += 1;\n\
    \        }\n        if remainder == 1 {\n            break;\n        }\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n  let mut v: Vec<isize> = Vec::new();\n\
    \  let mut n = n;\n  let mut i = 2;\n  while n > 1 {\n    if n % i == 0 {\n  \
    \    v.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  v\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut i = 2;\n    while i <= n {\n        if n\
    \ % i == 0 {\n            factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    factors\n}\n\nfn main() {\n  \
    \  let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut remaining = n;\n    for i in 2..n+1 {\n        if remaining % i ==\
    \ 0 {\n            result.push(i);\n            remaining /= i;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[2, 2]`', /tmp/tmpabsli_4c.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut divisor = 2;\n    while n > 1 {\n       \
    \ while n % divisor == 0 {\n            factors.push(divisor);\n            n\
    \ /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n < 2 {\n        return\
    \ vec![];\n    }\n    let mut n = n;\n    let mut res = vec![];\n    let mut d\
    \ = 2;\n    while n > 1 {\n        while n % d == 0 {\n            res.push(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    let mut i = 2;\n    while i * i <= n {\n        while\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n\
    \        i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n   \
    \ factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut divisor = 2;\n    loop {\n        if n ==\
    \ 1 {\n            break;\n        }\n        while n % divisor == 0 {\n     \
    \       result.push(divisor);\n            n /= divisor;\n        }\n        divisor\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n  let mut answer = Vec::new();\n\
    \  let mut divider = 2;\n  let mut num = n;\n  while num > 1 {\n    if num % divider\
    \ == 0 {\n      answer.push(divider);\n      num /= divider;\n    } else {\n \
    \     divider += 1;\n    }\n  }\n  answer\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut n = n;\n    let mut i = 2;\n    while i <= n {\n        if n % i\
    \ == 0 {\n            res.push(i);\n            n /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ prime_factors = Vec::new();\n    let mut p = 2;\n    while n > 1 {\n       \
    \ if n % p == 0 {\n            prime_factors.push(p);\n            n /= p;\n \
    \       } else {\n            p += 1;\n        }\n    }\n    prime_factors\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut x = n;\n    let mut divisor = 2;\n    while x !=\
    \ 1 {\n        while x % divisor == 0 {\n            result.push(divisor);\n \
    \           x /= divisor;\n        }\n        divisor += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut p = 2;\n    while n > 1 {\n        while\
    \ n % p == 0 {\n            factors.push(p);\n            n /= p;\n        }\n\
    \        p += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n == 0 {\n        vec![]\n\
    \    } else {\n        let divisor = divide_by_smallest_divisor(n);\n        let\
    \ mut factors = factorize(divisor.1);\n        factors.push(divisor.0);\n    \
    \    factors\n    }\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `divide_by_smallest_divisor` in this\
    \ scope\n  --> /tmp/tmpu68b2qyb.rs:14:23\n   |\n14 |         let divisor = divide_by_smallest_divisor(n);\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    let mut i = 2;\n    while i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    factors\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut n = n;\n    while n % 2 == 0 {\n        res.push(2);\n        n /=\
    \ 2;\n    }\n    let mut factor = 3;\n    while n > 1 {\n        while n % factor\
    \ == 0 {\n            res.push(factor);\n            n /= factor;\n        }\n\
    \        factor += 2;\n    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt76e8mh9.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut current = n;\n    for factor in 2..n {\n        if current % factor\
    \ == 0 {\n            factors.push(factor);\n            current /= factor;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmp_rmvdc6z.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut curr_fact = n;\n\
    \    let mut factors = Vec::new();\n    let mut curr_div = 2;\n    while curr_fact\
    \ != 1 {\n        if curr_fact % curr_div == 0 {\n            factors.push(curr_div);\n\
    \            curr_fact /= curr_div;\n        } else {\n            curr_div +=\
    \ 1;\n        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut d: isize = 2;\n \
    \   let mut v: Vec<isize> = Vec::new();\n    while n > 1 {\n        while n %\
    \ d == 0 {\n            v.push(d);\n            n /= d;\n        }\n        d\
    \ += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpd2zbo3ao.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= d;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut vec: Vec<isize> =\
    \ Vec::new();\n    let mut i = 2;\n    let mut n = n;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            n /= i;\n            vec.push(i);\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n       \
    \ vec.push(n);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    vec![]\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpmmyz4axq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut num = n;\n    let\
    \ mut factors = Vec::new();\n    let mut i = 2;\n    while i * i <= num {\n  \
    \      while num % i == 0 {\n            factors.push(i);\n            num /=\
    \ i;\n        }\n        i += 1;\n    }\n    if num > 1 {\n        factors.push(num);\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt76e8mh9.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut m = n;\n    let mut p = 2;\n    while m > 1 {\n        if m % p ==\
    \ 0 {\n            factors.push(p);\n            m /= p;\n        } else {\n \
    \           p += 1;\n        }\n    }\n    factors\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factorization = Vec::new();\n\
    \    let mut n = n;\n    for p in (2..).take_while(|x| x * x <= n) {\n       \
    \ while n % p == 0 {\n            factorization.push(p);\n            n /= p;\n\
    \        }\n    }\n    if n > 1 {\n        factorization.push(n);\n    }\n   \
    \ factorization\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0506]: cannot assign to `n` because it is borrowed\n  --> /tmp/tmpxwmuatp9.rs:16:13\n\
    \   |\n13 |     for p in (2..).take_while(|x| x * x <= n) {\n   |            \
    \  --------------------------------\n   |              |                |    \
    \        |\n   |              |                |            borrow occurs due\
    \ to use in closure\n   |              |                borrow of `n` occurs here\n\
    \   |              borrow later used here\n...\n16 |             n /= p;\n   |\
    \             ^^^^^^ assignment to borrowed `n` occurs here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0506`.\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut tmp = n;\n    for i in 2..n+1 {\n        while tmp % i == 0 {\n \
    \           factors.push(i);\n            tmp /= i;\n        }\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ current_prime = 2;\n    let mut result = Vec::new();\n    while n != 1 {\n \
    \       if n % current_prime == 0 {\n            result.push(current_prime);\n\
    \            n /= current_prime;\n        } else {\n            current_prime\
    \ += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut prime_factors = Vec::new();\n\
    \    let mut n = n;\n    let mut i = 2;\n    while i <= n {\n        if n % i\
    \ == 0 {\n            prime_factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    prime_factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n < 0 {\n        return\
    \ factorize(-n);\n    }\n    if n == 0 {\n        return vec![];\n    }\n    let\
    \ mut factor = 2;\n    let mut rem = n;\n    let mut result = vec![];\n    while\
    \ rem > 1 {\n        if rem % factor == 0 {\n            rem /= factor;\n    \
    \        result.push(factor);\n        } else {\n            factor += 1;\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut original_n = n;\n\
    \    let mut factors = Vec::new();\n    let mut candidate_prime_factor = 2;\n\
    \    loop {\n        if candidate_prime_factor > n {\n            break;\n   \
    \     }\n        if n % candidate_prime_factor == 0 {\n            factors.push(candidate_prime_factor);\n\
    \            n = n / candidate_prime_factor;\n        } else {\n            candidate_prime_factor\
    \ += 1;\n        }\n    }\n    let mut product = 1;\n    for factor in factors.iter()\
    \ {\n        product *= factor;\n    }\n    assert_eq!(product, original_n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpi1isjgc6.rs:11:9\n\
    \   |\n11 |     let mut original_n = n;\n   |         ----^^^^^^^^^^\n   |   \
    \      |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `n`\n  -->\
    \ /tmp/tmpi1isjgc6.rs:20:13\n   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n\
    \   |              - help: consider making this binding mutable: `mut n`\n...\n\
    20 |             n = n / candidate_prime_factor;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut x = n;\n    while x > 1 {\n        let factor = (2..=x).find(|f|\
    \ x % f == 0).unwrap();\n        factors.push(factor);\n        x /= factor;\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return\
    \ vec![];\n    }\n    let mut prime_factors = vec![];\n    let mut n = n;\n  \
    \  while n % 2 == 0 {\n        prime_factors.push(2);\n        n /= 2;\n    }\n\
    \    let mut d = 3;\n    while d <= n {\n        while n % d == 0 {\n        \
    \    prime_factors.push(d);\n            n /= d;\n        }\n        d += 2;\n\
    \    }\n    prime_factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut k = n;\n    let mut i = 2;\n    while k > 1 {\n        while k %\
    \ i == 0 {\n            factors.push(i);\n            k /= i;\n        }\n   \
    \     i += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut out: Vec<isize> =\
    \ Vec::new();\n    let mut prime_gen = PrimeGenerator::new();\n    let mut remainder\
    \ = n;\n    loop {\n        let prime = prime_gen.next();\n        if prime.is_none()\
    \ {\n            panic!(\"Expected more primes!\");\n        }\n        let prime\
    \ = prime.unwrap();\n        if remainder == 1 {\n            break;\n       \
    \ }\n        while remainder % prime == 0 {\n            out.push(prime);\n  \
    \          remainder /= prime;\n        }\n    }\n    out\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `PrimeGenerator`\n\
    \  --> /tmp/tmpmrvm7vbi.rs:12:25\n   |\n12 |     let mut prime_gen = PrimeGenerator::new();\n\
    \   |                         ^^^^^^^^^^^^^^ use of undeclared type `PrimeGenerator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut i = 2;\n    while i <= n {\n        if n\
    \ % i == 0 {\n            factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    factors\n}\n\nfn main() {\n  \
    \  let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // TODO: Implement prime\
    \ factorization.\n    unimplemented!();\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp9nvr20nt.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    let mut divisor = 2;\n    while num > 1 {\n       \
    \ while num % divisor == 0 {\n            factors.push(divisor);\n           \
    \ num /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut copy_of_n = n;\n    while copy_of_n % 2 == 0 {\n\
    \        result.push(2);\n        copy_of_n /= 2;\n    }\n    let mut factor =\
    \ 3;\n    while factor * factor <= copy_of_n {\n        if copy_of_n % factor\
    \ == 0 {\n            result.push(factor);\n            copy_of_n /= factor;\n\
    \        } else {\n            factor += 2;\n        }\n    }\n    if copy_of_n\
    \ > 1 {\n        result.push(copy_of_n);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut m = n;\n    let mut\
    \ factors = Vec::new();\n    let mut i = 2;\n    while m > 1 {\n        while\
    \ m % i == 0 {\n            factors.push(i);\n            m /= i;\n        }\n\
    \        i += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut factor = 2;\n    let mut remaining = n;\n    while remaining != 1\
    \ {\n        if remaining % factor == 0 {\n            factors.push(factor);\n\
    \            remaining /= factor;\n        } else {\n            factor += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut number = n;\n   \
    \ let mut primes = sieve(n as usize);\n    let mut factors = Vec::new();\n   \
    \ for (i, prime) in primes.drain(..).enumerate() {\n        while number % prime\
    \ == 0 {\n            factors.push(prime);\n            number /= prime;\n   \
    \     }\n        if number == 1 {\n            break;\n        }\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sieve` in this scope\n  --> /tmp/tmp4zw3t04f.rs:12:22\n\
    \   |\n12 |     let mut primes = sieve(n as usize);\n   |                    \
    \  ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factorization = Vec::new();\n\
    \    let mut current_divisor = 2;\n    let mut current_dividend = n;\n    while\
    \ current_dividend > 1 {\n        if current_dividend % current_divisor == 0 {\n\
    \            factorization.push(current_divisor);\n            current_dividend\
    \ /= current_divisor;\n        } else {\n            current_divisor += 1;\n \
    \       }\n    }\n    factorization\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    let mut factors = Vec::new();\n    while i * i <= n {\n        while\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n\
    \        i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n   \
    \ factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut prime_factors = Vec::new();\n\
    \    let mut i = 2;\n    let mut x = n;\n    while i <= x {\n        if x % i\
    \ == 0 {\n            prime_factors.push(i);\n            x /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    prime_factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut num = n;\n    let mut prime = 2;\n    while num >\
    \ 1 {\n        while num % prime == 0 {\n            result.push(prime);\n   \
    \         num /= prime;\n        }\n        prime += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut num = n;\n    while num > 1 {\n        for i in 2..=num {\n     \
    \       if num % i == 0 {\n                result.push(i);\n                num\
    \ /= i;\n                break;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut divisor = 2;\n    while n > 1 {\n        while\
    \ n % divisor == 0 {\n            result.push(divisor);\n            n /= divisor;\n\
    \        }\n        divisor += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // your code here\n    Vec::new()\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpwxw0y_pq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut prime_factors = Vec::new();\n\
    \    let mut n = n;\n    let mut d = 2;\n    while n > 1 {\n        while n %\
    \ d == 0 {\n            prime_factors.push(d);\n            n /= d;\n        }\n\
    \        d += 1;\n    }\n    prime_factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut temp = n;\n    let mut i = 2;\n    while temp != 1 {\n        if\
    \ temp % i == 0 {\n            res.push(i);\n            temp /= i;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut num = n;\n    let mut primes = (2..n).filter(|x| is_prime(*x)).collect::<Vec<isize>>();\n\
    \    for p in primes {\n        if num % p == 0 {\n            let n = n / p;\n\
    \            num = n;\n            res.push(p);\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmps2kbkuid.rs:13:40\n\
    \   |\n13 |     let mut primes = (2..n).filter(|x| is_prime(*x)).collect::<Vec<isize>>();\n\
    \   |                                        ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n == 1 {\n        return\
    \ vec![];\n    }\n    let mut k = n;\n    let mut factors = vec![];\n    let mut\
    \ p = 2;\n    while k > 1 {\n        while k % p == 0 {\n            factors.push(p);\n\
    \            k /= p;\n        }\n        p += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut prime = 2;\n    let mut num = n;\n    while num != 1 {\n        if\
    \ num % prime == 0 {\n            res.push(prime);\n            num /= prime;\n\
    \        } else {\n            prime += 1;\n        }\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut v = vec![];\n   \
    \ let mut i = 2;\n    let mut n = n;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            v.push(i);\n            n /= i;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    if n > 1 {\n        v.push(n);\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // TODO: implement factorization\n\
    \    let mut f = n;\n    let mut p = 2;\n    let mut res = Vec::new();\n    while\
    \ f > 1 {\n        if f % p == 0 {\n            res.push(p);\n            f /=\
    \ p;\n        } else {\n            p += 1;\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    let mut candidate = 2;\n    while num > 1 {\n     \
    \   while num % candidate == 0 {\n            factors.push(candidate);\n     \
    \       num /= candidate;\n        }\n        candidate += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut n = n;\n    for i in 2..n + 1 {\n        if n % i == 0 {\n      \
    \      n /= i;\n            res.push(i);\n            if n == 1 {\n          \
    \      break;\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n  \
    \  let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[2, 2]`', /tmp/tmptgferit6.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut num = n;\n    for i in 2..(n+1) {\n        while num % i == 0 {\n\
    \            res.push(i);\n            num /= i;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    let mut n = n;\n    while i * i <= n {\n        while\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n\
    \        i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n   \
    \ factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut start = 2;\n    let mut n = n;\n    while n > 1 {\n        if n %\
    \ start == 0 {\n            res.push(start);\n            n /= start;\n      \
    \  } else {\n            start += 1;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    let mut divisor = 2;\n    while num > 1 {\n       \
    \ while num % divisor == 0 {\n            factors.push(divisor);\n           \
    \ num /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    while n % 2 == 0 {\n        factors.push(2);\n  \
    \      n /= 2;\n    }\n    let mut factor = 3;\n    while n > 1 {\n        while\
    \ n % factor == 0 {\n            factors.push(factor);\n            n /= factor;\n\
    \        }\n        factor += 2;\n    }\n    factors\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    if n <= 0 {\n        return factors;\n    }\n    let mut num = n;\n    let\
    \ mut factor = 2;\n    while num > 1 {\n        while num % factor == 0 {\n  \
    \          factors.push(factor);\n            num /= factor;\n        }\n    \
    \    factor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut prime = 2;\n    while n > 1 {\n        if\
    \ n % prime == 0 {\n            factors.push(prime);\n            n /= prime;\n\
    \        } else {\n            prime += 1;\n        }\n    }\n    factors\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut n = n;\n    let mut divisor = 2;\n    while n > 1 {\n        if n\
    \ % divisor == 0 {\n            result.push(divisor);\n            n /= divisor;\n\
    \        } else {\n            divisor += 1;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut mut_n = n;\n    for i in 2..mut_n {\n        if is_prime(i) {\n \
    \           while mut_n % i == 0 {\n                res.push(i);\n           \
    \     mut_n /= i;\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp758pbnfp.rs:14:12\n\
    \   |\n14 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: -1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut mut_n = n;\n    for i in 2.. {\n        if mut_n <= 1 {\n       \
    \     break;\n        }\n        if mut_n % i == 0 {\n            result.push(i);\n\
    \            mut_n /= i;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976074
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut i = 2;\n    let mut num = n;\n    while i * i <= num {\n        if\
    \ num % i == 0 {\n            res.push(i);\n            num /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    if num > 1 {\n        res.push(num);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut val = n;\n    for i in 2..n {\n        while val % i == 0 {\n   \
    \         res.push(i);\n            val /= i;\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmp28gl83ex.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut num = n;\n    let mut i = 2;\n    while i <= num {\n        if num\
    \ % i == 0 {\n            result.push(i);\n            num /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut num = n;\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    let mut i = 2;\n    while i <= n {\n\
    \        if num % i == 0 {\n            vec.push(i);\n            num /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    while num % 2 == 0 {\n        factors.push(2);\n  \
    \      num /= 2;\n    }\n    for factor in (3..num).step_by(2) {\n        while\
    \ num % factor == 0 {\n            factors.push(factor);\n            num /= factor;\n\
    \        }\n    }\n    if num > 2 {\n        factors.push(num);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut i = 2;\n    let mut nn = n;\n    while i * i <= nn {\n        if\
    \ nn % i == 0 {\n            res.push(i);\n            nn /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    if nn > 1 {\n        res.push(nn);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt76e8mh9.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut n = n;\n    let mut k = 2;\n    while n > 1 {\n        while n %\
    \ k == 0 {\n            res.push(k);\n            n /= k;\n        }\n       \
    \ k += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut current = n;\n    let mut divider = 2;\n    loop {\n        if current\
    \ % divider == 0 {\n            result.push(divider);\n            current /=\
    \ divider;\n        } else {\n            divider += 1;\n        }\n        if\
    \ current == 1 {\n            break;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    let mut i = 2;\n    while i * i <= num {\n        while\
    \ num % i == 0 {\n            factors.push(i);\n            num /= i;\n      \
    \  }\n        i += 1;\n    }\n    if num > 1 {\n        factors.push(num);\n \
    \   }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n == 1 {\n        return\
    \ vec![];\n    }\n    let mut factors = vec![];\n    let mut current = n;\n  \
    \  while current > 1 {\n        let factor = (2..(current + 1)).find(|&x| current\
    \ % x == 0).unwrap();\n        factors.push(factor);\n        current /= factor;\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut candidate = 2;\n    while n > 1 {\n      \
    \  while n % candidate == 0 {\n            result.push(candidate);\n         \
    \   n /= candidate;\n        }\n        candidate += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut num = n;\n    while num > 1 {\n        for i in 2..=num {\n     \
    \       if num % i == 0 {\n                result.push(i);\n                num\
    \ /= i;\n                break;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        while\
    \ n % i == 0 {\n            result.push(i);\n            n /= i;\n        }\n\
    \        i += 1;\n    }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut k = n;\n    for i in 2..=n {\n        if is_prime(i) {\n        \
    \    while k % i == 0 {\n                res.push(i);\n                k /= i;\n\
    \            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpzsodtiy6.rs:14:12\n\
    \   |\n14 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ d = 2;\n    let mut ret = Vec::new();\n    while n > 1 {\n        if n % d ==\
    \ 0 {\n            ret.push(d);\n            n /= d;\n        } else {\n     \
    \       d += 1;\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut vec = Vec::new();\n\
    \    let mut n = n;\n    let mut prime = 2;\n    while n > 1 {\n        while\
    \ n % prime == 0 {\n            vec.push(prime);\n            n /= prime;\n  \
    \      }\n        prime += 1;\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut candidate = 2;\n    while n > 1 {\n     \
    \   while n % candidate == 0 {\n            factors.push(candidate);\n       \
    \     n /= candidate;\n        }\n        candidate += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut i = 2;\n    let mut\
    \ res = Vec::new();\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        res.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    if n > 1 {\n        res.push(n);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_8d0irb8.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut x = n;\n    let mut\
    \ primes = vec![];\n    while x > 1 {\n        let f = find_factor(x);\n     \
    \   primes.push(f);\n        x /= f;\n    }\n    primes\n}\n\nfn main() {\n  \
    \  let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `find_factor` in this scope\n  --> /tmp/tmp7si9wuik.rs:14:17\n\
    \   |\n14 |         let f = find_factor(x);\n   |                 ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut val = n;\n    let mut divisor = 2;\n    while val > 1 {\n       \
    \ while val % divisor == 0 {\n            factors.push(divisor);\n           \
    \ val /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n    while n > 1 {\n \
    \       while n % i == 0 {\n            result.push(i);\n            n /= i;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut k = n;\n    let mut\
    \ vec: Vec<isize> = Vec::new();\n    let mut i = 2;\n    while k > 1 {\n     \
    \   if k % i == 0 {\n            vec.push(i);\n            k /= i;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    vec\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut i = 2;\n    while i <= n {\n        if n %\
    \ i == 0 {\n            result.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ res = Vec::new();\n    let mut prime = 2;\n    while n > 1 {\n        while\
    \ n % prime == 0 {\n            res.push(prime);\n            n /= prime;\n  \
    \      }\n        prime += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let prime_factors = prime_factors(n);\n\
    \    let mut factors = Vec::with_capacity(prime_factors.len());\n    let mut factor\
    \ = 0;\n    let mut previous = 0;\n    for p in prime_factors {\n        if p\
    \ == previous {\n            factor += 1;\n        } else {\n            if previous\
    \ != 0 {\n                factors.push(factor);\n            }\n            previous\
    \ = p;\n            factor = 1;\n        }\n    }\n    factors.push(factor);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `prime_factors` in this scope\n  -->\
    \ /tmp/tmp6zhep687.rs:11:25\n   |\n11 |     let prime_factors = prime_factors(n);\n\
    \   |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut x = n;\n    let mut\
    \ result = Vec::new();\n    for i in 2..n {\n        if x % i == 0 {\n       \
    \     x /= i;\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmp0ywzaenr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // let mut num = n;\n   \
    \ // let mut result = Vec::new();\n    // let mut i = 2;\n    // while i * i <=\
    \ num {\n    //     if num % i == 0 {\n    //         result.push(i);\n    //\
    \         num /= i;\n    //     } else {\n    //         i += 1;\n    //     }\n\
    \    // }\n    // if num > 1 {\n    //     result.push(num);\n    // }\n    //\
    \ result\n    let mut factors = vec![];\n    let mut n = n;\n    let mut i = 2;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut d = 2;\n    while n > 1 {\n        while n\
    \ % d == 0 {\n            result.push(d);\n            n /= d;\n        }\n  \
    \      d += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut current = n;\n    let mut i = 2;\n    while i * i <= current {\n\
    \        while current % i == 0 {\n            result.push(i);\n            current\
    \ /= i;\n        }\n        i += 1;\n    }\n    if current > 1 {\n        result.push(current);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut x = n;\n    let mut\
    \ factors = Vec::new();\n    if x % 2 == 0 {\n        while x % 2 == 0 {\n   \
    \         factors.push(2);\n            x /= 2;\n        }\n    }\n    for i in\
    \ (3..(x + 1)).step_by(2) {\n        if x % i == 0 {\n            while x % i\
    \ == 0 {\n                factors.push(i);\n                x /= i;\n        \
    \    }\n        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut t = n;\n    let mut\
    \ vec = Vec::new();\n    let mut p = 2;\n    while t > 1 {\n        while t %\
    \ p == 0 {\n            vec.push(p);\n            t /= p;\n        }\n       \
    \ p += 1;\n    }\n    vec\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    for i in 2..n+1 {\n        while n % i == 0 {\n     \
    \       factors.push(i);\n            n /= i;\n        }\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut is_prime: Vec<bool> = vec![true; (n + 1) as usize];\n\
    \    is_prime[0] = false;\n    is_prime[1] = false;\n    let sqrt_n = (n as f64).sqrt()\
    \ as isize;\n    for i in 2..=sqrt_n {\n        if is_prime[i as usize] {\n  \
    \          for j in (i * i..=n).step_by(i as usize) {\n                is_prime[j\
    \ as usize] = false;\n            }\n        }\n    }\n    for i in 2..=n {\n\
    \        if is_prime[i as usize] {\n            let mut tmp = n;\n           \
    \ while tmp % i == 0 {\n                result.push(i);\n                tmp /=\
    \ i;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut n = n;\n    let mut i = 2;\n    while n > 1 {\n        while n %\
    \ i == 0 {\n            result.push(i);\n            n /= i;\n        }\n    \
    \    i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut v = vec![];\n   \
    \ let mut num = n;\n    while num % 2 == 0 {\n        v.push(2);\n        num\
    \ /= 2;\n    }\n    let mut i = 3;\n    while i <= (num as f64).sqrt() as isize\
    \ {\n        while num % i == 0 {\n            v.push(i);\n            num /=\
    \ i;\n        }\n        i += 2;\n    }\n    if num > 2 {\n        v.push(num);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut n = n;\n    let mut d = 2;\n    while n > 1 {\n        while n %\
    \ d == 0 {\n            res.push(d);\n            n /= d;\n        }\n       \
    \ d += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut m = n;\n    while m != 1 {\n        let mut i = 2;\n\
    \        while i * i <= m {\n            if m % i == 0 {\n                result.push(i);\n\
    \                m /= i;\n                break;\n            }\n            i\
    \ += 1;\n        }\n        if i * i > m {\n            result.push(m);\n    \
    \        break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n == 1 {\n        return\
    \ vec![];\n    }\n    for i in 2..(n + 1) {\n        if n % i == 0 {\n       \
    \     let mut v = factorize(n / i);\n            v.push(i);\n            return\
    \ v;\n        }\n    }\n    vec![]\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[19, 3]`,\n right: `[3, 19]`', /tmp/tmptew9ggz6.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut current = n;\n    let mut index = 2;\n    while current > 1 {\n \
    \       if current % index == 0 {\n            result.push(index);\n         \
    \   current /= index;\n        } else {\n            index += 1;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    if n <= 1 {\n        return factors;\n    }\n    let mut candidate = 2;\n\
    \    let mut rest = n;\n    while rest > 1 {\n        if rest % candidate == 0\
    \ {\n            factors.push(candidate);\n            rest /= candidate;\n  \
    \      } else {\n            candidate += 1;\n        }\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n\
    \    let mut m = n;\n    let mut i = 2;\n    loop {\n        if m == 1 {\n   \
    \         break;\n        }\n        while m % i == 0 {\n            v.push(i);\n\
    \            m /= i;\n        }\n        i += 1;\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut prime_candidate = 2;\n    let mut dividend = n;\n    while dividend\
    \ > 1 {\n        while dividend % prime_candidate == 0 {\n            res.push(prime_candidate);\n\
    \            dividend /= prime_candidate;\n        }\n        prime_candidate\
    \ += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n  \
    \  assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n\
    \    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3,\
    \ 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    if n == 1 {\n        return result;\n    }\n    let mut current = n;\n  \
    \  for i in 2..n {\n        if current % i == 0 {\n            result.push(i);\n\
    \            current /= i;\n            if current == 1 {\n                break;\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpwfj4_xno.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut i = 2;\n    while i <= n {\n        if n %\
    \ i == 0 {\n            result.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n  let mut x = n;\n  let mut primes:\
    \ Vec<isize> = Vec::new();\n  let mut res: Vec<isize> = Vec::new();\n  for i in\
    \ 2..=n {\n    if n % i == 0 {\n      primes.push(i);\n    }\n  }\n  for i in\
    \ primes {\n    let mut div: isize = i;\n    while x % div == 0 {\n      res.push(i);\n\
    \      div *= i;\n    }\n  }\n  res\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 4]`,\n right: `[2, 2]`', /tmp/tmpxuddyr8_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut divisor = 2;\n    while n > 1 {\n       \
    \ while n % divisor == 0 {\n            factors.push(divisor);\n            n\
    \ /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    let mut i = 2;\n    while i * i <= num {\n        while\
    \ num % i == 0 {\n            factors.push(i);\n            num /= i;\n      \
    \  }\n        i += 1;\n    }\n    if num > 1 {\n        factors.push(num);\n \
    \   }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut temp = n;\n    let\
    \ mut result = Vec::new();\n    let mut i = 2;\n    while temp != 1 {\n      \
    \  if temp % i == 0 {\n            result.push(i);\n            temp /= i;\n \
    \       } else {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    let mut d = 2;\n    while n > 1 {\n        while n %\
    \ d == 0 {\n            factors.push(d);\n            n /= d;\n        }\n   \
    \     d += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut number = n;\n    let mut divider = 2;\n    while number != 1 {\n\
    \        if number % divider == 0 {\n            factors.push(divider);\n    \
    \        number /= divider;\n        } else {\n            divider += 1;\n   \
    \     }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n == 1 {\n        return\
    \ vec![];\n    }\n    let p = smallest_prime_factor(n);\n    let mut factors =\
    \ factorize(n / p);\n    factors.push(p);\n    factors\n}\n\nfn main() {\n   \
    \ let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `smallest_prime_factor` in this scope\n\
    \  --> /tmp/tmpp8evhh9k.rs:14:13\n   |\n14 |     let p = smallest_prime_factor(n);\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // Write the body of this\
    \ function, don't forget to add some tests above\n    let mut factors: Vec<isize>\
    \ = Vec::new();\n    let mut current_factor = 2;\n    let mut current_number =\
    \ n;\n    loop {\n        if current_number == 1 {\n            break;\n     \
    \   }\n        if current_number % current_factor == 0 {\n            factors.push(current_factor);\n\
    \            current_number /= current_factor;\n        } else {\n           \
    \ current_factor += 1;\n        }\n    }\n    factors\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut n = n;\n    for i in 2..=n {\n        if n % i == 0 {\n         \
    \   res.push(i);\n            n /= i;\n            if n == 1 {\n             \
    \   break;\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[2, 2]`', /tmp/tmp_06525fh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ v = Vec::new();\n    for i in 2..n+1 {\n        while n % i == 0 {\n       \
    \     v.push(i);\n            n /= i;\n        }\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    for i in 2..n {\n        if num % i == 0 {\n      \
    \      factors.push(i);\n            num /= i;\n        }\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpwxy674cq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n <= 1 {\n        return\
    \ vec![];\n    }\n    let mut factors = vec![];\n    let mut tmp = n;\n    while\
    \ tmp % 2 == 0 {\n        factors.push(2);\n        tmp /= 2;\n    }\n    let\
    \ mut factor = 3;\n    while tmp > 1 {\n        while tmp % factor == 0 {\n  \
    \          factors.push(factor);\n            tmp /= factor;\n        }\n    \
    \    factor += 2;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut number = n;\n   \
    \ let mut result = Vec::new();\n    let mut i = 2;\n    while number > 1 {\n \
    \       while number % i == 0 {\n            result.push(i);\n            number\
    \ /= i;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt76e8mh9.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = n;\n    let mut i = 2;\n    while x != 1 {\n        if x % i\
    \ == 0 {\n            result.push(i);\n            x /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut index = 2;\n    while n > 1 {\n        if\
    \ n % index == 0 {\n            result.push(index);\n            n /= index;\n\
    \        } else {\n            index += 1;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut divisor = 2;\n    while n != 1 {\n      \
    \  while n % divisor == 0 {\n            factors.push(divisor);\n            n\
    \ /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // TODO: Implement a function\
    \ that given number will return a vector of its prime factors in the order\n \
    \   // of appearence from smallest to largest.\n    // Factors should be vectored\
    \ number of times, that corresponds to their multiplicity in factorization.\n\
    \    let mut a = n;\n    let mut b = 2;\n    let mut fac = Vec::new();\n    while\
    \ a > 1 {\n        while a % b == 0 {\n            fac.push(b);\n            a\
    \ /= b;\n        }\n        b += 1;\n    }\n    fac\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    for i in 2.. {\n        if n == 1 {\n            break;\n\
    \        }\n        while n % i == 0 {\n            result.push(i);\n        \
    \    n /= i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n < 0 {\n        panic!(\"\
    n must be positive\");\n    }\n    let mut res = Vec::new();\n    let mut remainder\
    \ = n;\n    let mut factor = 2;\n    while remainder > 1 {\n        while remainder\
    \ % factor == 0 {\n            res.push(factor);\n            remainder /= factor;\n\
    \        }\n        factor += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ res = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        while\
    \ n % i == 0 {\n            res.push(i);\n            n /= i;\n        }\n   \
    \     i += 1;\n    }\n    if n > 1 {\n        res.push(n);\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    let mut d = 2;\n    while n > 1 {\n        while n %\
    \ d == 0 {\n            factors.push(d);\n            n /= d;\n        }\n   \
    \     d += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    assert!(n > 0);\n    let\
    \ mut factors = Vec::new();\n    let mut i = 2;\n    let mut remaining = n;\n\
    \    while i * i <= remaining {\n        if remaining % i == 0 {\n           \
    \ factors.push(i);\n            remaining /= i;\n        } else {\n          \
    \  i += 1;\n        }\n    }\n    if remaining > 1 {\n        factors.push(remaining);\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut vector: Vec<isize>\
    \ = Vec::new();\n    let mut num = n;\n    let mut i = 2;\n    while num > 1 {\n\
    \        if num % i == 0 {\n            vector.push(i);\n            num /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    vector\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factor = n;\n   \
    \ let mut factors = Vec::new();\n    let mut divider = 2;\n    while factor >\
    \ 1 {\n        while factor % divider == 0 {\n            factors.push(divider);\n\
    \            factor /= divider;\n        }\n        divider += 1;\n    }\n   \
    \ factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut r = vec![];\n   \
    \ let mut div = 2;\n    let mut n = n;\n    while n != 1 {\n        if n % div\
    \ == 0 {\n            r.push(div);\n            n /= div;\n        } else {\n\
    \            div += 1;\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ primes = Vec::new();\n    let mut p = 2;\n    while n > 1 {\n        while n\
    \ % p == 0 {\n            primes.push(p);\n            n /= p;\n        }\n  \
    \      p += 1;\n    }\n    primes\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut dividend = n;\n    let mut factor = 2;\n    while dividend != 1 {\n\
    \        if dividend % factor == 0 {\n            factors.push(factor);\n    \
    \        dividend /= factor;\n        } else {\n            factor += 1;\n   \
    \     }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut x = n;\n    while x > 1 {\n        let mut f = 2;\n        while\
    \ x % f != 0 {\n            f += 1;\n        }\n        factors.push(f);\n   \
    \     x /= f;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut divisor = 2;\n    while n > 1 {\n        while\
    \ n % divisor == 0 {\n            result.push(divisor);\n            n /= divisor;\n\
    \        }\n        divisor += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976068
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt76e8mh9.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut num = n;\n    let\
    \ mut i = 2;\n    let mut v: Vec<isize> = Vec::new();\n    while i * i <= num\
    \ {\n        if num % i == 0 {\n            v.push(i);\n            num /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    if num > 1 {\n \
    \       v.push(num);\n    }\n    v\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ fact = vec![];\n    let mut i = 2;\n    while i * i <= n {\n        while n\
    \ % i == 0 {\n            fact.push(i);\n            n /= i;\n        }\n    \
    \    i += 1;\n    }\n    if n > 1 {\n        fact.push(n);\n    }\n    fact\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut x = n;\n    let mut\
    \ res = Vec::new();\n    while x % 2 == 0 {\n        res.push(2);\n        x /=\
    \ 2;\n    }\n    let mut f = 3;\n    while f * f <= x {\n        if x % f == 0\
    \ {\n            res.push(f);\n            x /= f;\n        } else {\n       \
    \     f += 2;\n        }\n    }\n    if x > 1 {\n        res.push(x);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt76e8mh9.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut tmp_n = n;\n    while tmp_n % 2 == 0 {\n        result.push(2);\n\
    \        tmp_n /= 2;\n    }\n    let mut i = 3;\n    while i <= (tmp_n as f64).sqrt()\
    \ as isize {\n        while tmp_n % i == 0 {\n            result.push(i);\n  \
    \          tmp_n /= i;\n        }\n        i += 2;\n    }\n    if tmp_n > 2 {\n\
    \        result.push(tmp_n);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let factors = get_factors(n);\n\
    \    let mut result = Vec::new();\n    let mut i = 0;\n    while i < factors.len()\
    \ {\n        result.push(factors[i]);\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_factors` in this scope\n  --> /tmp/tmp3myz_od8.rs:11:19\n\
    \   |\n11 |     let factors = get_factors(n);\n   |                   ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut p = 2;\n    let mut\
    \ n = n;\n    let mut factors = Vec::new();\n    while n > 1 {\n        while\
    \ n % p == 0 {\n            factors.push(p);\n            n /= p;\n        }\n\
    \        p += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut x = n;\n    for i in 2..=x {\n        if x % i == 0 {\n         \
    \   factors.push(i);\n            x /= i;\n            i -= 1;\n        }\n  \
    \  }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `i` is never read\n  --> /tmp/tmpwdxoj4dn.rs:17:13\n\
    \   |\n17 |             i -= 1;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `i`\n  --> /tmp/tmpwdxoj4dn.rs:17:13\n\
    \   |\n13 |     for i in 2..=x {\n   |         -\n   |         |\n   |       \
    \  first assignment to `i`\n   |         help: consider making this binding mutable:\
    \ `mut i`\n...\n17 |             i -= 1;\n   |             ^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976069
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut q = n;\n    let mut p = 2;\n    while q > 1 {\n        while q %\
    \ p == 0 {\n            factors.push(p);\n            q /= p;\n        }\n   \
    \     p += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n <= 1 {\n        return\
    \ vec![];\n    }\n    let mut res = vec![];\n    let mut n = n;\n    for i in\
    \ 2..n + 1 {\n        while n % i == 0 {\n            res.push(i);\n         \
    \   n /= i;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut current = n;\n    for i in 2..(n / 2) {\n        if current % i ==\
    \ 0 {\n            result.push(i);\n            current = current / i;\n     \
    \   }\n    }\n    if current != 1 {\n        result.push(current);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[2, 2]`', /tmp/tmpog1xz709.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976070
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut vec: Vec<isize> =\
    \ Vec::new();\n    let mut num = n;\n    while num != 1 {\n        let factor\
    \ = get_next_prime_factor(num);\n        vec.push(factor);\n        num /= factor;\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_next_prime_factor` in this scope\n\
    \  --> /tmp/tmpl052bwus.rs:14:22\n   |\n14 |         let factor = get_next_prime_factor(num);\n\
    \   |                      ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut candidate = 2;\n    let mut number = n;\n    while number > 1 {\n\
    \        if number % candidate == 0 {\n            result.push(candidate);\n \
    \           number /= candidate;\n        } else {\n            candidate += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut n = n;\n    let mut divisor = 2;\n    while n > 1 {\n        while\
    \ n % divisor == 0 {\n            res.push(divisor);\n            n /= divisor;\n\
    \        }\n        divisor += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    if n == 1 {\n        return result;\n    }\n    for i in 2.. {\n        if\
    \ i > n {\n            return result;\n        }\n        if n % i == 0 {\n  \
    \          let mut count = 0;\n            while n % i == 0 {\n              \
    \  count += 1;\n                n /= i;\n            }\n            for _ in 0..count\
    \ {\n                result.push(i);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpvhoiyzr8.rs:23:17\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n23 |                 n /=\
    \ i;\n   |                 ^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut t = n;\n    while t % 2 == 0 {\n        factors.push(2);\n      \
    \  t /= 2;\n    }\n    let mut i = 3;\n    while i <= t {\n        while t % i\
    \ == 0 {\n            factors.push(i);\n            t /= i;\n        }\n     \
    \   i += 2;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut x = n;\n    for i in 2..(n as f64).sqrt() as isize + 1 {\n      \
    \  while x % i == 0 {\n            res.push(i);\n            x /= i;\n       \
    \ }\n    }\n    if x > 1 {\n        res.push(x);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factor = 2;\n   \
    \ let mut n = n;\n    let mut result = Vec::new();\n    while n > 1 {\n      \
    \  while n % factor == 0 {\n            result.push(factor);\n            n /=\
    \ factor;\n        }\n        factor += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // let mut num = n;\n   \
    \ // let mut v: Vec<isize> = Vec::new();\n    // let mut i = 2;\n    // while\
    \ i * i <= num {\n    //     if num % i == 0 {\n    //         v.push(i);\n  \
    \  //         num /= i;\n    //     } else {\n    //         i += 1;\n    // \
    \    }\n    // }\n    // if num > 1 {\n    //     v.push(num);\n    // }\n   \
    \ // v\n    prime_factors(n).into_iter().map(|(x, y)| vec![x; y as usize]).flatten().collect()\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `prime_factors` in this scope\n  -->\
    \ /tmp/tmpn1lv6jqc.rs:26:5\n   |\n26 |     prime_factors(n).into_iter().map(|(x,\
    \ y)| vec![x; y as usize]).flatten().collect()\n   |     ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976070
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut l = 2;\n    let mut r = n / 2;\n    let mut count = 0;\n    while\
    \ l < r {\n        if n % l == 0 {\n            r = n / l;\n            result.push(l);\n\
    \            count += 1;\n        }\n        l += 1;\n    }\n    result.push(r);\n\
    \    count += 1;\n    result.iter().cycle().take(count).cloned().collect()\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp_jmb32z9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut number = n;\n    let mut factor = 2;\n    while number > 1 {\n  \
    \      while number % factor == 0 {\n            factors.push(factor);\n     \
    \       number /= factor;\n        }\n        factor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    //Implement\n    let mut\
    \ n = n;\n    let mut factors = Vec::new();\n    let mut factor = 2;\n    while\
    \ n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut number = n;\n    let mut divisor = 2;\n    while number > 1 {\n \
    \       while number % divisor == 0 {\n            factors.push(divisor);\n  \
    \          number /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut factor = 2;\n    while n > 1 {\n        while\
    \ n % factor == 0 {\n            factors.push(factor);\n            n /= factor;\n\
    \        }\n        factor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ res = Vec::new();\n    while n % 2 == 0 {\n        res.push(2);\n        n /=\
    \ 2;\n    }\n    let mut i = 3;\n    while i <= (n as f64).sqrt() as isize {\n\
    \        while n % i == 0 {\n            res.push(i);\n            n /= i;\n \
    \       }\n        i += 2;\n    }\n    if n > 2 {\n        res.push(n);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut num = n;\n    let\
    \ mut factors = Vec::new();\n    let mut i = 2;\n    while i <= num {\n      \
    \  if num % i == 0 {\n            factors.push(i);\n            num /= i;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ ret: Vec<isize> = Vec::new();\n    for i in 2..(n + 1) {\n        if n % i ==\
    \ 0 {\n            ret.push(i);\n            n /= i;\n            if n == 1 {\n\
    \                break;\n            }\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[2, 2]`', /tmp/tmpy_5ts_yv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976070
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // your code here\n    Vec::new()\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpwxw0y_pq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // \n    if n <= 0 {\n  \
    \      return vec![];\n    }\n\n    let mut divisor = 2;\n    let mut curr_fact\
    \ = n;\n    let mut factors = vec![];\n\n    while divisor <= curr_fact {\n  \
    \      if curr_fact % divisor == 0 {\n            factors.push(divisor);\n   \
    \         curr_fact /= divisor;\n        } else {\n            divisor += 1;\n\
    \        }\n    }\n\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut tmp_n = n;\n    while tmp_n % 2 == 0 {\n        factors.push(2);\n\
    \        tmp_n /= 2;\n    }\n    let mut divider = 3;\n    while tmp_n > 1 {\n\
    \        while tmp_n % divider == 0 {\n            factors.push(divider);\n  \
    \          tmp_n /= divider;\n        }\n        divider += 2;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    // your code goes here\n\
    \    let mut num = n;\n    let mut v = Vec::new();\n    let mut k = 2;\n    while\
    \ k <= num {\n        if num % k == 0 {\n            v.push(k);\n            num\
    \ /= k;\n        } else {\n            k += 1;\n        }\n    }\n    v\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976070
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt76e8mh9.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976068
