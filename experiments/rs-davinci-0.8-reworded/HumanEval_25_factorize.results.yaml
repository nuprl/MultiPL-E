language: rs
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut _n = n;\n    let\
    \ mut v = Vec::new();\n    for i in 2..=n {\n        while _n % i == 0 {\n   \
    \         v.push(i);\n            _n /= i;\n        }\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut v = Vec::new();\n\
    \    for i in 2..n + 1 {\n        if n % i == 0 {\n            v.push(i);\n  \
    \          let x = factorize(n / i);\n            for j in x {\n             \
    \   v.push(j);\n            }\n            break;\n        }\n    }\n    v\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut current = n;\n    let mut i = 2;\n    while i * i <= current {\n\
    \        if current % i == 0 {\n            factors.push(i);\n            current\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if current\
    \ > 1 {\n        factors.push(current);\n    }\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return\
    \ vec![];\n    }\n    let mut n = n;\n    let mut result = vec![];\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            n /= i;\n \
    \           result.push(i);\n        } else {\n            i += 1;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut m = n;\n    let mut\
    \ res = Vec::new();\n    let mut d = 2;\n    while m > 1 {\n        while m %\
    \ d == 0 {\n            res.push(d);\n            m /= d;\n        }\n       \
    \ d += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut primes = vec![2];\n\
    \    let mut primes_factors = vec![];\n    let mut n = n;\n    while n > 1 {\n\
    \        for p in primes.iter() {\n            if n % p == 0 {\n             \
    \   primes_factors.push(*p);\n                n /= p;\n                break;\n\
    \            }\n        }\n        if primes_factors.last() != Some(&2) {\n  \
    \          primes.push(2);\n        }\n        for i in 3..=n {\n            let\
    \ mut is_prime = true;\n            for p in primes.iter() {\n               \
    \ if i % p == 0 {\n                    is_prime = false;\n                   \
    \ break;\n                }\n            }\n            if is_prime {\n      \
    \          primes.push(i);\n                break;\n            }\n        }\n\
    \    }\n    primes_factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut temp = n;\n    let mut primes = get_prime_numbers(n);\n    while\
    \ temp > 1 {\n        for p in primes.iter_mut() {\n            if temp % p ==\
    \ 0 {\n                factors.push(*p);\n                temp /= p;\n       \
    \         break;\n            }\n        }\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_prime_numbers` in this scope\n\
    \  --> /tmp/tmpr909g005.rs:13:22\n   |\n13 |     let mut primes = get_prime_numbers(n);\n\
    \   |                      ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    assert!(n > 0);\n    let\
    \ mut n = n;\n    let mut factors = Vec::new();\n    let mut prime = 2;\n    while\
    \ n > 1 {\n        if n % prime == 0 {\n            factors.push(prime);\n   \
    \         n /= prime;\n        } else {\n            prime += 1;\n        }\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmptxwtc7bp.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    let mut x = 2;\n    while n > 1 {\n        while n %\
    \ x == 0 {\n            factors.push(x);\n            n /= x;\n        }\n   \
    \     x += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut number = n;\n   \
    \ let mut result = Vec::new();\n    let mut factor = 2;\n    while number > 1\
    \ {\n        while number % factor == 0 {\n            result.push(factor);\n\
    \            number /= factor;\n        }\n        factor += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 1
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let prime_factors = prime_factors(n);\n\
    \    let mut res = vec![];\n    for i in prime_factors {\n        res.push(i);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `prime_factors` in this scope\n  -->\
    \ /tmp/tmp181tdxwy.rs:11:25\n   |\n11 |     let prime_factors = prime_factors(n);\n\
    \   |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut p_factors = Vec::new();\n\
    \    let mut n = n;\n    let mut div = 2;\n    while n > 1 {\n        if n % div\
    \ == 0 {\n            p_factors.push(div);\n            n /= div;\n        } else\
    \ {\n            div += 1;\n        }\n    }\n    p_factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut candidate = 2;\n    let mut remainder = n;\n    loop {\n        if\
    \ remainder % candidate == 0 {\n            factors.push(candidate);\n       \
    \     remainder /= candidate;\n        } else {\n            candidate += 1;\n\
    \        }\n        if remainder == 1 {\n            break;\n        }\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n  let mut v: Vec<isize> = Vec::new();\n\
    \  let mut n = n;\n  let mut i = 2;\n  while n > 1 {\n    if n % i == 0 {\n  \
    \    v.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  v\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut i = 2;\n    while i <= n {\n        if n\
    \ % i == 0 {\n            factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    factors\n}\n\nfn main() {\n  \
    \  let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 101
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut remaining = n;\n    for i in 2..n+1 {\n        if remaining % i ==\
    \ 0 {\n            result.push(i);\n            remaining /= i;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[2, 2]`', /tmp/tmpabsli_4c.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut n = n;\n    let mut\
    \ factors = Vec::new();\n    let mut divisor = 2;\n    while n > 1 {\n       \
    \ while n % divisor == 0 {\n            factors.push(divisor);\n            n\
    \ /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    if n < 2 {\n        return\
    \ vec![];\n    }\n    let mut n = n;\n    let mut res = vec![];\n    let mut d\
    \ = 2;\n    while n > 1 {\n        while n % d == 0 {\n            res.push(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    let mut i = 2;\n    while i * i <= n {\n        while\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n\
    \        i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n   \
    \ factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
