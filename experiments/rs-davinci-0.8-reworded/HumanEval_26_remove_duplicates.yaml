name: HumanEval_26_remove_duplicates
language: rs
prompt: "/// From a vector of integers, remove all elements that occur more than once.\n\
  /// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
  \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
  \ Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
  \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
  }\n"
completions: ["    let mut result = Vec::new();\n    let mut set = std::collections::HashSet::new();\n\
    \    for num in numbers {\n        if !set.contains(&num) {\n            result.push(num);\n\
    \            set.insert(num);\n        }\n    }\n    result", '    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()',
  "    let mut unique_numbers = HashSet::new();\n    let mut result = Vec::new();\n\
    \n    for number in numbers {\n        if unique_numbers.contains(&number) {\n\
    \            continue;\n        }\n\n        unique_numbers.insert(number);\n\
    \        result.push(number);\n    }\n\n    result", "    let mut seen = HashSet::new();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        if !seen.contains(&n)\
    \ {\n            seen.insert(n);\n            result.push(n);\n        }\n   \
    \ }\n    result", "    // Your code here\n    Vec::new()", "    let mut res: Vec<isize>\
    \ = Vec::new();\n    for n in numbers {\n        if !res.contains(&n) {\n    \
    \        res.push(n);\n        }\n    }\n    res", "    // (1) Turn into a list\n\
    \    let mut numbers: LinkedList<isize> = numbers.into_iter().collect();\n\n \
    \   // (2) Remove duplicates\n    for number in numbers.iter() {\n        let\
    \ mut cursor = numbers.cursor();\n        let found = cursor.find(|x| *x == number);\n\
    \        match found {\n            Some(cursor) => {\n                cursor.remove();\n\
    \            }\n            None => (),\n        }\n    }\n\n    // (3) Return\
    \ vector\n    numbers.into_iter().collect()", '    unimplemented!()', "  let mut\
    \ seen: HashSet<isize> = HashSet::new();\n  let mut unique: Vec<isize> = Vec::new();\n\
    \  for n in numbers {\n    if !seen.contains(&n) {\n      seen.insert(n);\n  \
    \    unique.push(n);\n    }\n  }\n  unique", '    unimplemented!()', "    let\
    \ mut numbers_set = numbers.into_iter().collect::<HashSet<isize>>();\n    let\
    \ mut result = Vec::new();\n    result.extend(numbers_set.drain());\n    result",
  '    unimplemented!();', "    let mut seen = HashSet::new();\n    let mut result\
    \ = Vec::new();\n    for n in numbers {\n        if !seen.contains(&n) {\n   \
    \         seen.insert(n);\n            result.push(n);\n        }\n    }\n   \
    \ result", "    let mut v: Vec<isize> = Vec::new();\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for n in numbers {\n        if !seen.contains(&n) {\n\
    \            v.push(n);\n            seen.insert(n);\n        }\n    }\n    v",
  "    // TODO: Implement me\n    unimplemented!()", "    let mut result = Vec::new();\n\
    \    for num in numbers {\n        if !result.contains(&num) {\n            result.push(num);\n\
    \        }\n    }\n    result", "    let mut result = Vec::new();\n    for n in\
    \ numbers {\n        if !result.contains(&n) {\n            result.push(n);\n\
    \        }\n    }\n    result", "    let mut found = HashSet::new();\n    let\
    \ mut result = Vec::new();\n    for number in numbers {\n        if !found.contains(&number)\
    \ {\n            found.insert(number);\n            result.push(number);\n   \
    \     }\n    }\n    result", '    unimplemented!()', "    let mut hash_table =\
    \ HashMap::new();\n    for num in numbers {\n        let count = hash_table.entry(num).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = Vec::new();\n    for num in\
    \ numbers {\n        if *hash_table.get(&num).unwrap() == 1 {\n            result.push(num);\n\
    \        }\n    }\n    result"]
stop_tokens:
- "\n}"
