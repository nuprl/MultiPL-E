name: HumanEval_36_fizz_buzz
language: rs
prompt: "/// Return the number of times the digit 7 appears in integers less than\
  \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
  /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
  \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n  \
  \  assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
  \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
  \ 8026);\n}\n"
completions: ["    let mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0\
    \ || i % 13 == 0 {\n            let mut i = i;\n            while i > 0 {\n  \
    \              if i % 10 == 7 {\n                    count += 1;\n           \
    \     }\n                i /= 10;\n            }\n        }\n    }\n    count",
  '    unimplemented!()', "    let mut count = 0;\n    for i in 1..n {\n        if\
    \ i % 11 == 0 || i % 13 == 0 {\n            count += count_7s(i);\n        }\n\
    \    }\n    count", "  let mut total = 0;\n  for i in 0..n {\n    if i % 11 ==\
    \ 0 || i % 13 == 0 {\n      let mut j = i;\n      while j > 0 {\n        if j\
    \ % 10 == 7 {\n          total += 1;\n        }\n        j /= 10;\n      }\n \
    \   }\n  }\n  total", "    let mut n = n;\n    n -= n / 11;\n    n -= n / 13;\n\
    \    n -= n / 77;\n    n -= n / 143;\n    n -= n / 1001;\n    n -= n / 2197;\n\
    \    n -= n / 2744;\n    n -= n / 28561;\n    n -= n / 83521;\n    n /= 7;\n \
    \   n", '    unimplemented!();', "    if n < 0 {\n        return 0;\n    }\n\n\
    \    let mut count = 0;\n    for i in 11..n {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            count += 1;\n        }\n    }\n\n    count", "    let mut\
    \ div = 0;\n    for x in (1..n).filter(|x| x % 11 == 0 || x % 13 == 0) {\n   \
    \     let num_str = x.to_string();\n        div += num_str.chars().filter(|&c|\
    \ c == '7').count() as isize;\n    }\n    div", "    let is_div_eleven = |x: isize|\
    \ { (x % 11) == 0 };\n    let is_div_thirteen = |x: isize| { (x % 13) == 0 };\n\
    \    let is_div_by_eleven_or_thirteen = |x: isize| { is_div_eleven(x) || is_div_thirteen(x)\
    \ };\n    let is_div_by_eleven_or_thirteen_and_below_n = |x: isize| { is_div_by_eleven_or_thirteen(x)\
    \ && x < n };\n    let seven_count = |x: isize| {\n        let mut x = x;\n  \
    \      let mut count = 0;\n        while x > 0 {\n            if x % 10 == 7 {\n\
    \                count += 1;\n            }\n            x /= 10;\n        }\n\
    \        count\n    };\n    (0..n).fold(0, |acc, x| {\n        if is_div_by_eleven_or_thirteen_and_below_n(x)\
    \ {\n            acc + seven_count(x)\n        } else {\n            acc\n   \
    \     }\n    })", '    unimplemented!();', "    let mut sum = 0;\n    for i in\
    \ 11..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let mut j = i;\n\
    \            while j > 0 {\n                if j % 10 == 7 {\n               \
    \     sum += 1;\n                }\n                j /= 10;\n            }\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for i in 1..n {\n    \
    \    if i % 11 == 0 || i % 13 == 0 {\n            sum += count_digit(i, 7);\n\
    \        }\n    }\n    sum", '    unimplemented!();', '    unimplemented!()',
  "    let mut cnt = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            if i % 10 == 7 {\n                cnt += 1;\n            }\n\
    \            if i > 10 && (i / 10) % 10 == 7 {\n                cnt += 1;\n  \
    \          }\n        }\n    }\n    cnt", "    let mut count = 0;\n    for i in\
    \ 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += count_sevens(i)\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for i in 1..n {\n\
    \        if i % 11 == 0 || i % 13 == 0 {\n            let mut i = i;\n       \
    \     while i > 0 {\n                if i % 10 == 7 {\n                    count\
    \ += 1;\n                }\n                i /= 10;\n            }\n        }\n\
    \    }\n    count", '    unimplemented!();', "    let mut cnt = 0;\n    for i\
    \ in 11..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let mut cur\
    \ = i;\n            while cur > 0 {\n                if cur % 10 == 7 {\n    \
    \                cnt += 1;\n                }\n                cur /= 10;\n  \
    \          }\n        }\n    }\n    cnt", "    let mut m = 0;\n    for i in 1..n\
    \ {\n        if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"7\")\
    \ {\n            m += 1;\n        }\n    }\n    m"]
stop_tokens:
- "\n}"
