language: rs
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822512
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822512
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822512
- exit_code: 1
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().sorted().unique().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpagvswkr2.rs:5:14\n  |\n5 |     l.iter().sorted().unique().cloned().collect()\n\
    \  |              ^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822511
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822512
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = l;\n    res.sort();\n    res.dedup();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822511
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = l;\n    res.sort();\n    res.dedup();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822511
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822512
- exit_code: 1
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmphl2h6uaf.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822511
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ls = l;\n    ls.sort();\n    ls.dedup();\n    ls\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822511
- exit_code: 1
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmp0us05ifw.rs:5:29\n\
    \  |\n5 |     l.into_iter().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    \  |                             ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822511
- exit_code: 1
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmphl2h6uaf.rs:5:33\n\
    \  |\n5 |     l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822511
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l;\n    l.sort();\n    l.dedup();\n\
    \    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822511
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822512
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        if\
    \ !res.contains(&x) {\n            res.push(x);\n        }\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822511
- exit_code: 1
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    return l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>();\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3jcl01il.rs:5:40\n\
    \  |\n5 |     return l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>();\n\
    \  |                                        ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822511
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = l.clone();\n    r.sort();\n    r.dedup();\n\
    \    r\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822512
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut t = l;\n    t.sort();\n    t.dedup();\n    t\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822511
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = l.clone();\n    r.sort();\n    r.dedup();\n\
    \    r\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822512
- exit_code: 0
  program: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut uniq = l.clone();\n    uniq.sort();\n    uniq.dedup();\n\
    \    uniq\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822511
