name: HumanEval_16_count_distinct_characters
language: rs
prompt: "/// Given a string, find out how many distinct characters (regardless of\
  \ case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"\
  ))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn\
  \ count_distinct_characters(string: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
  abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")),\
  \ 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n"
completions: ["    let mut _char_set: HashSet<char> = HashSet::new();\n    for character\
    \ in string.chars() {\n        _char_set.insert(character.to_lowercase().to_string().chars().next().unwrap());\n\
    \    }\n    return _char_set.len() as isize;", "    // let mut characters = HashSet::new();\n\
    \    // for ch in string.chars() {\n    //     characters.insert(ch.to_lowercase().to_string());\n\
    \    // }\n    // characters.len() as isize\n    string.chars().map(|ch| ch.to_lowercase().to_string()).collect::<HashSet<String>>().len()\
    \ as isize", "    let mut count: isize = 0;\n    let mut st: HashSet<char> = HashSet::new();\n\
    \    for c in string.chars() {\n        st.insert(c.to_lowercase().nth(0).unwrap());\n\
    \    }\n    count = st.len() as isize;\n    count", "    let mut distinct = vec![];\n\
    \    for c in string.chars() {\n        if distinct.contains(&c.to_ascii_lowercase())\
    \ {\n            continue;\n        } else {\n            distinct.push(c.to_ascii_lowercase());\n\
    \        }\n    }\n    distinct.len() as isize", "    let mut distinct_chars =\
    \ vec![];\n    let str_slice = string.as_str();\n    for c in str_slice.chars()\
    \ {\n        if !distinct_chars.contains(&c.to_lowercase().collect::<String>())\
    \ {\n            distinct_chars.push(c.to_lowercase().collect::<String>());\n\
    \        }\n    }\n    distinct_chars.len() as isize", "    let distinct_characters:\
    \ HashSet<char> = string.chars().collect();\n    distinct_characters.len() as\
    \ isize", "    let mut seen_characters = HashSet::new();\n    for character in\
    \ string.chars() {\n        seen_characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    seen_characters.len() as isize", "    // Hint: You can use the .chars\
    \ method to iterate through a string\n    // Hint: You can use .collect() to turn\
    \ a collection into a set\n    string.chars().collect::<HashSet<char>>().len()\
    \ as isize", "    let mut map = HashMap::new();\n    let mut count = 0;\n    for\
    \ character in string.chars() {\n        let lower_case = character.to_lowercase().next().unwrap();\n\
    \        if !map.contains_key(&lower_case) {\n            map.insert(lower_case,\
    \ 1);\n            count += 1;\n        }\n    }\n    count", '    string.chars().count()
    as isize', '    unimplemented!()', "    let mut vec: Vec<char> = Vec::new();\n\
    \    for char in string.chars() {\n        if !vec.contains(&char.to_lowercase().collect::<Vec<char>>()[0])\
    \ {\n            vec.push(char.to_lowercase().collect::<Vec<char>>()[0]);\n  \
    \      }\n    }\n    vec.len() as isize", "    let string = string.to_lowercase();\n\
    \    let mut i = 0;\n    let mut chars = Vec::new();\n    while i < string.len()\
    \ {\n        let character = string.chars().nth(i).unwrap();\n        if !chars.contains(&character)\
    \ {\n            chars.push(character);\n        }\n        i += 1;\n    }\n \
    \   chars.len() as isize", "    let low_string = string.to_lowercase();\n    let\
    \ mut chars: Vec<char> = low_string.chars().collect();\n    chars.sort();\n  \
    \  let mut count = 1;\n    for i in 0..chars.len() - 1 {\n        if chars[i]\
    \ != chars[i + 1] {\n            count += 1;\n        }\n    }\n    count", '    string.to_lowercase().chars().collect::<HashSet<char>>().len()
    as isize', "    // TODO(implement the function)\n    let mut set = HashSet::new();\n\
    \    for (i, c) in string.chars().enumerate() {\n        set.insert(c.to_lowercase().collect::<String>());\n\
    \    }\n    set.len() as isize", '    unimplemented!();', '    unimplemented!();',
  "    // write your code here\n    0", "    let mut count = 0;\n    let mut chars\
    \ = string.chars().collect::<Vec<char>>();\n    chars.sort();\n    let mut last\
    \ = ' ';\n    for c in chars {\n        if c != last {\n            count += 1;\n\
    \            last = c;\n        }\n    }\n    count"]
stop_tokens:
- "\n}"
