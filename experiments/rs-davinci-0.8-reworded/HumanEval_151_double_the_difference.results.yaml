language: rs
name: HumanEval_151_double_the_difference
results:
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppj6ra741.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum: isize\
    \ = 0;\n    for i in lst {\n        if i > 0.0 && i % 2.0 == 1.0 {\n         \
    \   sum += (i * i) as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|&n| {\n            if n < &0.0 {\n                return false;\n\
    \            }\n            let temp: f64 = n.round();\n            if temp ==\
    \ *n {\n                return true;\n            }\n            return false;\n\
    \        })\n        .map(|&n| {\n            if n % 2.0 == 0.0 {\n          \
    \      return (n * n) as isize;\n            }\n            return n as isize;\n\
    \        })\n        .sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `25`', /tmp/tmp65mhik_2.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // let mut s = 0;\n\
    \    // for i in lst {\n    //     if i < 0 || i.floor() != i {\n    //      \
    \   continue;\n    //     }\n    //     if i % 2.0 == 1.0 {\n    //         s\
    \ += i.powi(2) as isize;\n    //     }\n    // }\n    // s * 2\n    // lst.iter().filter(|x|\
    \ *x < 0 && x.floor() != *x).sum::<isize>()\n\n    if lst.len() == 0 {\n     \
    \   return 0;\n    }\n    let mut s = 0;\n    for i in lst {\n        if i < 0\
    \ || i.floor() != i {\n            continue;\n        }\n        if i % 2.0 ==\
    \ 1.0 {\n            s += i.powi(2) as isize;\n        }\n    }\n    s * 2\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd5d69ymg.rs:30:16\n   |\n\
    30 |         if i < 0 || i.floor() != i {\n   |                ^\n   |       \
    \         |\n   |                expected `f64`, found integer\n   |         \
    \       help: use a float literal: `0.0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp07mzoo9a.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|&x| x.round() == *x && *x >= 0.0)\n        .filter(|&x| (x.round()\
    \ as isize) % 2 == 1)\n        .map(|x| (x.round() as isize).pow(2))\n       \
    \ .sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ me!\n    1\n}\n\nfn main() {\n    let candidate = double_the_difference;\n \
    \   assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpel11us2v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppj6ra741.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppj6ra741.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp07mzoo9a.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ this function, and implement the tests for it in tests.rs\n    return 0;\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmp12om8luv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppj6ra741.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    0\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmpuneba8xv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // use a for loop\
    \ to iterate over the list\n    let mut sum = 0;\n    for x in lst {\n       \
    \ // modulo the number to check if it is odd\n        if x % 2.0 == 1.0 {\n  \
    \          // if so add the square of the number to our result\n            sum\
    \ += x.powi(2) as isize;\n        }\n    }\n    // return the result\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    // TODO: Implement\
    \ this function.\n    return 0;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmps6f87mj0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `25`', /tmp/tmparr3hl__.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let sum_of_squares_of_odds\
    \ = lst.iter().filter(|x| (x % 2) == 1).map(|x| x.powi(2)).sum();\n    (sum_of_squares_of_odds\
    \ * 2) as isize\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmplqjn_vf_.rs:13:59\n\
    \   |\n13 |     let sum_of_squares_of_odds = lst.iter().filter(|x| (x % 2) ==\
    \ 1).map(|x| x.powi(2)).sum();\n   |                                         \
    \                - ^ - {integer}\n   |                                       \
    \                  |\n   |                                                   \
    \      &&f64\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in lst {\n  \
    \      if i % 2.0 == 1.0 && i > 0.0 {\n            sum += i.powi(2) as isize;\n\
    \        }\n    }\n    return sum * 2;\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp04m0xr2o.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n\n    let mut output = 0;\n    for i in lst {\n\
    \        if i >= 0.0 && i == i.round() {\n            if i.round() % 2 == 1 {\n\
    \                output += (i * i) as isize;\n            }\n        }\n    }\n\
    \    return output * 2;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp75568c4r.rs:20:26\n\
    \   |\n20 |             if i.round() % 2 == 1 {\n   |                        \
    \  ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>`\
    \ is not implemented for `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let lst = lst.into_iter().filter(|x|\
    \ *x >= 0.0 && *x.fract() == 0.0).collect::<Vec<f64>>();\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut res = 0;\n    for num in lst {\n\
    \        let num = num as isize;\n        if num % 2 == 1 {\n            res +=\
    \ num * num;\n        }\n    }\n    return res * 2;\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmphkaqyr9a.rs:13:55\n\
    \   |\n13 |     let lst = lst.into_iter().filter(|x| *x >= 0.0 && *x.fract() ==\
    \ 0.0).collect::<Vec<f64>>();\n   |                                          \
    \             ^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659823178
