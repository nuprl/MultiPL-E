language: rs
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    let mut d = 1;\n\n    for _ in 3..n {\n        d = a + b + c;\n        a\
    \ = b;\n        b = c;\n        c = d;\n    }\n\n    d\n}\n\nfn main() {\n   \
    \ let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpbsm3gqwd.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = [0,\
    \ 0, 1];\n    for i in 3..=n {\n        fibfib[(i + 1) % 3] = fibfib[i % 3] +\
    \ fibfib[(i - 1) % 3] + fibfib[(i - 2) % 3];\n    }\n    fibfib[n % 3]\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp1aqawt7z.rs:16:9\n   |\n16 |         fibfib[(i + 1) % 3] = fibfib[i\
    \ % 3] + fibfib[(i - 1) % 3] + fibfib[(i - 2) % 3];\n   |         ^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1aqawt7z.rs:16:31\n\
    \   |\n16 |         fibfib[(i + 1) % 3] = fibfib[i % 3] + fibfib[(i - 1) % 3]\
    \ + fibfib[(i - 2) % 3];\n   |                               ^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1aqawt7z.rs:16:47\n\
    \   |\n16 |         fibfib[(i + 1) % 3] = fibfib[i % 3] + fibfib[(i - 1) % 3]\
    \ + fibfib[(i - 2) % 3];\n   |                                               ^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1aqawt7z.rs:16:69\n\
    \   |\n16 |         fibfib[(i + 1) % 3] = fibfib[i % 3] + fibfib[(i - 1) % 3]\
    \ + fibfib[(i - 2) % 3];\n   |                                               \
    \                      ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tm"
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut f0 = 0;\n   \
    \ let mut f1 = 0;\n    let mut f2 = 1;\n    let mut f3 = 1;\n    for _ in 1..n\
    \ {\n        f0 = f1;\n        f1 = f2;\n        f2 = f3;\n        f3 = f1 + f2\
    \ + f0;\n    }\n    f3\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpm7ompdwj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut n_minus_3 = 0;\n\
    \    let mut n_minus_2 = 0;\n    let mut n_minus_1 = 1;\n    let mut result =\
    \ 0;\n    for _ in 0..n {\n        result = n_minus_3 + n_minus_2 + n_minus_1;\n\
    \        n_minus_3 = n_minus_2;\n        n_minus_2 = n_minus_1;\n        n_minus_1\
    \ = result;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpfgvsfth_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut array = [0; 3];\n    for i in 3..(n + 1)\
    \ {\n        array[0] = array[1];\n        array[1] = array[2];\n        array[2]\
    \ = array[0] + array[1] + array[2];\n    }\n    array[2]\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmph5sl53gb.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 { return 0;\
    \ }\n    if n == 2 { return 1; }\n    let mut n_2 = 0;\n    let mut n_1 = 0;\n\
    \    let mut n = 1;\n    for _ in 2..n {\n        let temp = n;\n        n = n_2\
    \ + n_1 + n;\n        n_2 = n_1;\n        n_1 = temp;\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp0x6i5dl0.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        a = b;\n      \
    \  b = c;\n        c = a + b + c;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpx67gcr84.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        n => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 2..n {\n        let d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    c\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsy_0dv9u.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = 1;\n    for _ in 0..n {\n        i = j;\n      \
    \  j = k;\n        k = i + j + k;\n    }\n    i\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmp6kz71yu0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // your code here\n \
    \   if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n\
    \    }\n    if n == 2 {\n        return 1;\n    }\n    let mut n1 = 0;\n    let\
    \ mut n2 = 0;\n    let mut n3 = 1;\n    let mut current = 0;\n    for _ in 3..n\
    \ + 1 {\n        current = n1 + n2 + n3;\n        n1 = n2;\n        n2 = n3;\n\
    \        n3 = current;\n    }\n    current\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut arr = vec![0,\
    \ 0, 1];\n    while arr.len() < n as usize {\n        arr.push(arr[arr.len() -\
    \ 1] + arr[arr.len() - 2] + arr[arr.len() - 3]);\n    }\n    return arr[n as usize\
    \ - 1];\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp5fpj_by1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823154
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        return\
    \ -1;\n    }\n\n    if n == 0 {\n        return 0;\n    }\n\n    if n == 1 {\n\
    \        return 0;\n    }\n\n    if n == 2 {\n        return 1;\n    }\n\n   \
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkbumay_z.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  // TODO: Implement me!\n\
    \  if n == 0 {\n    return 0;\n  }\n  if n == 1 {\n    return 0;\n  }\n  if n\
    \ == 2 {\n    return 1;\n  }\n  fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut acc = vec![0,\
    \ 0, 1];\n    if n < 3 {\n        return acc[n as usize];\n    }\n    for i in\
    \ 3..n + 1 {\n        let sum = acc[2] + acc[1] + acc[0];\n        acc[0] = acc[1];\n\
    \        acc[1] = acc[2];\n        acc[2] = sum;\n    }\n    acc[2]\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut last = 0;\n    let mut second_last = 0;\n\
    \    let mut third_last = 1;\n    let mut sum = 0;\n    for _ in 3..(n + 1) {\n\
    \        sum = last + second_last + third_last;\n        last = second_last;\n\
    \        second_last = third_last;\n        third_last = sum;\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut last_three: [isize;\
    \ 3] = [0, 0, 1];\n    for _ in 3..=n {\n        let new_num = last_three[0] +\
    \ last_three[1] + last_three[2];\n        last_three[0] = last_three[1];\n   \
    \     last_three[1] = last_three[2];\n        last_three[2] = new_num;\n    }\n\
    \    last_three[2]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwzr5hqjl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut arr = [0isize; 3];\n    for i in 2..n {\n       \
    \ arr[i % 3] = arr[(i - 1) % 3] + arr[(i - 2) % 3] + arr[(i - 3) % 3];\n    }\n\
    \    arr[(n - 1) % 3]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqdel2yps.rs:19:9\n\
    \   |\n19 |         arr[i % 3] = arr[(i - 1) % 3] + arr[(i - 2) % 3] + arr[(i\
    \ - 3) % 3];\n   |         ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpqdel2yps.rs:19:22\n   |\n19 |         arr[i % 3] = arr[(i - 1)\
    \ % 3] + arr[(i - 2) % 3] + arr[(i - 3) % 3];\n   |                      ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `[isize]`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqdel2yps.rs:19:41\n\
    \   |\n19 |         arr[i % 3] = arr[(i - 1) % 3] + arr[(i - 2) % 3] + arr[(i\
    \ - 3) % 3];\n   |                                         ^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqdel2yps.rs:19:60\n   |\n19 |  \
    \       arr[i % 3] = arr[(i - 1) % 3] + arr[(i - 2) % 3] + arr[(i - 3) % 3];\n\
    \   |                                                            ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the r"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ | 1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    let mut i = 2;\n    while i < n {\n    \
    \    let t = a + b + c;\n        a = b;\n        b = c;\n        c = t;\n    \
    \    i += 1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpt01tq378.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        let a1 = a;\n \
    \       let b1 = b;\n        let c1 = c;\n        a = c1;\n        b = a1;\n \
    \       c = a1 + b1 + c1;\n    }\n    a\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprd218231.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    return match n {\n  \
    \      1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n - 2) +\
    \ fibfib(n - 3),\n    };\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976488
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkbumay_z.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut cache = vec![0,\
    \ 0, 1];\n    fibfib_helper(n, &mut cache)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_helper` in this scope\n  -->\
    \ /tmp/tmp_qv7afod.rs:15:5\n   |\n15 |     fibfib_helper(n, &mut cache)\n   |\
    \     ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut n = n;\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 1;\n    }\n    n -= 3;\n    let mut a = 0;\n\
    \    let mut b = 0;\n    let mut c = 1;\n    while n > 0 {\n        let d = a\
    \ + b + c;\n        a = b;\n        b = c;\n        c = d;\n        n -= 1;\n\
    \    }\n    a + b + c\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_aux(n, 0, 0, 1)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_aux` in this scope\n  --> /tmp/tmp_7qgfk9v.rs:14:5\n\
    \   |\n14 |     fibfib_aux(n, 0, 0, 1)\n   |     ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    Negative n not supported.\");\n    } else if n < 2 {\n        0\n    } else if\
    \ n == 2 {\n        1\n    } else {\n        let mut prev = 0;\n        let mut\
    \ current = 1;\n        let mut next = 1;\n        for _ in 2..n {\n         \
    \   prev = current;\n            current = next;\n            next = prev + current\
    \ + prev;\n        }\n        next\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11`,\n right: `4`', /tmp/tmpt_5wph1w.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut n_minus_1\
    \ = 1;\n    let mut n_minus_2 = 1;\n    let mut n_minus_3 = 0;\n    let mut res\
    \ = 2;\n    for _ in 3..n {\n        res = n_minus_1 + n_minus_2 + n_minus_3;\n\
    \        n_minus_3 = n_minus_2;\n        n_minus_2 = n_minus_1;\n        n_minus_1\
    \ = res;\n    }\n    res\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    unimplemented!()\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpigushq5f.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976482
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 { return 0 }\n\
    \    if n == 2 { return 1 }\n    let mut vec = vec![0, 0, 1];\n    let mut i =\
    \ 3;\n    while i <= n {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n\
    \        i += 1;\n    }\n    vec[n as usize]\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp6iy3earg.rs:19:18\n   |\n19 |         vec.push(vec[i - 1] + vec[i -\
    \ 2] + vec[i - 3]);\n   |                  ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6iy3earg.rs:19:31\n   |\n19 |  \
    \       vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n   |                \
    \               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6iy3earg.rs:19:44\n\
    \   |\n19 |         vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n   |    \
    \                                        ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = -1;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let a1 = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = a1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpewxlfcfh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n1 = 0;\n    let mut n2 = 0;\n    let mut\
    \ n3 = 1;\n    let mut result = 0;\n    for _ in 3..n+1 {\n        result = n1\
    \ + n2 + n3;\n        n1 = n2;\n        n2 = n3;\n        n3 = result;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut i = 3;\n    while i <= n {\n        let d = c + b + a;\n\
    \        a = b;\n        b = c;\n        c = d;\n        i += 1;\n    }\n    c\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkbumay_z.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_helper(n, 0, 0,\
    \ 1)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_helper` in this scope\n  -->\
    \ /tmp/tmpe00ha_im.rs:14:5\n   |\n14 |     fibfib_helper(n, 0, 0, 1)\n   |   \
    \  ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_recurse(n)\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_recurse` in this scope\n  -->\
    \ /tmp/tmpvxeokxcc.rs:14:5\n   |\n14 |     fibfib_recurse(n)\n   |     ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut prev_prev_prev = 0;\n    let mut prev_prev = 0;\n\
    \    let mut prev = 1;\n    for _ in 3..=n {\n        let n = prev_prev_prev +\
    \ prev_prev + prev;\n        prev_prev_prev = prev_prev;\n        prev_prev =\
    \ prev;\n        prev = n;\n    }\n    prev\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        a = b;\n      \
    \  b = c;\n        c = a + b + c;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpx67gcr84.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n == 0 {\n    return\
    \ 0;\n  }\n  if n == 1 {\n    return 0;\n  }\n  if n == 2 {\n    return 1;\n \
    \ }\n  let mut a = 0;\n  let mut b = 0;\n  let mut c = 1;\n  let mut d = a + b\
    \ + c;\n  for _ in 4..n + 1 {\n    a = b;\n    b = c;\n    c = d;\n    d = a +\
    \ b + c;\n  }\n  d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut n0 = 0;\n   \
    \ let mut n1 = 0;\n    let mut n2 = 1;\n    for _ in 3..n+1 {\n        let temp\
    \ = n0 + n1 + n2;\n        n0 = n1;\n        n1 = n2;\n        n2 = temp;\n  \
    \  }\n    n2\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpa0r_vyao.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    let mut ret = 0;\n    for _ in 0..n {\n\
    \        ret = a + b + c;\n        a = b;\n        b = c;\n        c = ret;\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp70hnsnsj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut nth = 0;\n  \
    \  let mut n_1 = 0;\n    let mut n_2 = 0;\n    let mut n_3 = 0;\n    for i in\
    \ 0..n {\n        if i == 0 {\n            nth = 0;\n        } else if i == 1\
    \ {\n            nth = 0;\n        } else if i == 2 {\n            nth = 1;\n\
    \        } else {\n            nth = n_1 + n_2 + n_3;\n        }\n        n_3\
    \ = n_2;\n        n_2 = n_1;\n        n_1 = nth;\n    }\n    nth\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmph18pjpvp.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 1..n {\n        let d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    c\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1rf29r6s.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpbrwcg12v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    } else if n == 2 {\n        return 1;\n    }\n    let mut fb_prev =\
    \ 0;\n    let mut fb_prev2 = 0;\n    let mut fb_prev3 = 1;\n    let mut fb_curr\
    \ = 1;\n    for _ in 3..n+1 {\n        fb_prev = fb_prev2;\n        fb_prev2 =\
    \ fb_prev3;\n        fb_prev3 = fb_curr;\n        fb_curr = fb_prev + fb_prev2\
    \ + fb_prev3;\n    }\n    fb_curr\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmpvgxrkcud.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be greater than or equal to 0\");\n    }\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut f0 = 0;\n\
    \    let mut f1 = 0;\n    let mut f2 = 1;\n    for _ in 3..=n {\n        let f3\
    \ = f0 + f1 + f2;\n        f0 = f1;\n        f1 = f2;\n        f2 = f3;\n    }\n\
    \    f2\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    let mut\
    \ k = 1;\n    let mut t = 0;\n    for _ in 2..n {\n        t = i + j + k;\n  \
    \      i = j;\n        j = k;\n        k = t;\n    }\n    return t;\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut f1 = 0;\n   \
    \ let mut f2 = 0;\n    let mut f3 = 1;\n    for _ in 2..n {\n        let f4 =\
    \ f1 + f2 + f3;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n    }\n\
    \    f3\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpak7grgy1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut index = 3;\n    while index <= n {\n        let tmp = c;\n\
    \        c = a + b + c;\n        a = b;\n        b = tmp;\n        index += 1;\n\
    \    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..(n + 1) {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = a + b + c;\n    for _\
    \ in 4..n + 1 {\n        a = b;\n        b = c;\n        c = d;\n        d = a\
    \ + b + c;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut n_1 = 0;\n\
    \    let mut n_2 = 0;\n    let mut n_3 = 1;\n    let mut n_n = 0;\n    for _ in\
    \ 3..n {\n        n_n = n_1 + n_2 + n_3;\n        n_1 = n_2;\n        n_2 = n_3;\n\
    \        n_3 = n_n;\n    }\n    n_n\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpq3aeuqs3.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_recurse(n, 0,\
    \ 0, 1)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_recurse` in this scope\n  -->\
    \ /tmp/tmp723wuhho.rs:14:5\n   |\n14 |     fibfib_recurse(n, 0, 0, 1)\n   |  \
    \   ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        return\
    \ 0;\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n    \
    \    return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut\
    \ a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for\
    \ _ in 3..n+1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n    \
    \    c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // TODO\n    0\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpy03c9ux8.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_recursive(n, 0,\
    \ 0, 1)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_recursive` in this scope\n \
    \ --> /tmp/tmp9te728k3.rs:14:5\n   |\n14 |     fibfib_recursive(n, 0, 0, 1)\n\
    \   |     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    let mut k = 1;\n    while n > 0 {\n    \
    \    let tmp = i + j + k;\n        i = j;\n        j = k;\n        k = tmp;\n\
    \        n -= 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ | 1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut x = 0;\n    let\
    \ mut y = 0;\n    let mut z = 1;\n    for _ in 0..n {\n        x = y;\n      \
    \  y = z;\n        z = x + y + z;\n    }\n    x\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmp0u1y4wx4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut f1 = 0;\n   \
    \ let mut f2 = 0;\n    let mut f3 = 1;\n    for _ in 0..n {\n        let f4 =\
    \ f1 + f2 + f3;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n    }\n\
    \    f1\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n == 0 {\n    return\
    \ 0;\n  }\n  let mut result: isize = 0;\n  let mut n1: isize = 0;\n  let mut n2:\
    \ isize = 0;\n  let mut n3: isize = 1;\n  for _ in 0..n {\n    result = n1 + n2\
    \ + n3;\n    n1 = n2;\n    n2 = n3;\n    n3 = result;\n  }\n  result\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpkau2xhnh.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n\n    let mut a = -1;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    let mut current = 0;\n\n    for _ in 0..n {\n        current = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = current;\n    }\n\n    current\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpv9x3bck7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // TODO\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp_abzru34.rs:15:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ | 1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    let mut fibs = vec![0, 0, 1];\n    for i in 3..=n {\n       \
    \ fibs.push(fibs[i - 1] + fibs[i - 2] + fibs[i - 3]);\n    }\n    fibs[n as usize]\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpvpdort61.rs:19:19\n   |\n19 |         fibs.push(fibs[i - 1] + fibs[i\
    \ - 2] + fibs[i - 3]);\n   |                   ^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpvpdort61.rs:19:33\n   |\n19 |  \
    \       fibs.push(fibs[i - 1] + fibs[i - 2] + fibs[i - 3]);\n   |            \
    \                     ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpvpdort61.rs:19:47\n   |\n19 |         fibs.push(fibs[i\
    \ - 1] + fibs[i - 2] + fibs[i - 3]);\n   |                                   \
    \            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut v = vec![0, 0,\
    \ 1];\n    for i in 3..n + 1 {\n        v.push(v[i as usize - 1] + v[i as usize\
    \ - 2] + v[i as usize - 3]);\n    }\n    return v[n as usize];\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    Invalid n: {}\", n);\n    }\n\n    let n = n as usize;\n    if n == 0 {\n    \
    \    return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n    if n\
    \ == 2 {\n        return 1;\n    }\n\n    let mut prev = 0;\n    let mut curr\
    \ = 1;\n    let mut next = 1;\n    for _ in 3..n {\n        prev = curr;\n   \
    \     curr = next;\n        next = prev + curr + next;\n    }\n\n    next\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmpmv9kc7on.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        n => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n == 0 {\n    return\
    \ 0;\n  }\n  if n == 1 {\n    return 0;\n  }\n  if n == 2 {\n    return 1;\n \
    \ }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut fibs = vec![0, 0, 1];\n    for i in 3..n + 1 {\n\
    \        fibs.push(fibs[i as usize - 1] + fibs[i as usize - 2] + fibs[i as usize\
    \ - 3]);\n    }\n    fibs[n as usize]\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  let mut curr = 0;\n  let\
    \ mut curr_1 = 0;\n  let mut curr_2 = 1;\n  for _ in 0..n {\n    curr = curr_1\
    \ + curr_2 + curr_2;\n    curr_1 = curr_2;\n    curr_2 = curr;\n  }\n  curr\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `1`', /tmp/tmpv7rcu8y4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n < 0 {\n    return\
    \ -1;\n  }\n  if n == 0 {\n    return 0;\n  }\n  if n == 1 {\n    return 0;\n\
    \  }\n  if n == 2 {\n    return 1;\n  }\n  let mut x = 0;\n  let mut y = 0;\n\
    \  let mut z = 1;\n  let mut f = 0;\n  for _ in 3..(n + 1) {\n    f = x + y +\
    \ z;\n    x = y;\n    y = z;\n    z = f;\n  }\n  f\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_iter(n, 0, 0,\
    \ 1)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_iter` in this scope\n  --> /tmp/tmpumglhak4.rs:14:5\n\
    \   |\n14 |     fibfib_iter(n, 0, 0, 1)\n   |     ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut m = [0, 0, 1];\n\
    \    for _ in 3..=n {\n        m = [m[1], m[2], m[0] + m[1] + m[2]];\n    }\n\
    \    m[2]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3jwdzawx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut f0 = 0;\n    let mut f1 = 0;\n    let mut\
    \ f2 = 1;\n    let mut f3 = 0;\n    for _ in 4..n + 1 {\n        f3 = f2 + f1\
    \ + f0;\n        f0 = f1;\n        f1 = f2;\n        f2 = f3;\n    }\n    f3\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpez6cl2x7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibs = [0, 0,\
    \ 1];\n    let mut i = 3;\n    while i <= n {\n        fibs[i % 3] = fibs[(i -\
    \ 1) % 3] + fibs[(i - 2) % 3] + fibs[(i - 3) % 3];\n        i += 1;\n    }\n \
    \   fibs[n % 3]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmps7xv93fe.rs:17:9\n   |\n17 |         fibs[i % 3] = fibs[(i - 1) % 3]\
    \ + fibs[(i - 2) % 3] + fibs[(i - 3) % 3];\n   |         ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmps7xv93fe.rs:17:23\n   |\n17 |         fibs[i\
    \ % 3] = fibs[(i - 1) % 3] + fibs[(i - 2) % 3] + fibs[(i - 3) % 3];\n   |    \
    \                   ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmps7xv93fe.rs:17:43\n   |\n17 |         fibs[i % 3]\
    \ = fibs[(i - 1) % 3] + fibs[(i - 2) % 3] + fibs[(i - 3) % 3];\n   |         \
    \                                  ^^^^^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmps7xv93fe.rs:17:63\n   |\n17 |         fibs[i\
    \ % 3] = fibs[(i - 1) % 3] + fibs[(i - 2) % 3] + fibs[(i - 3) % 3];\n   |    \
    \                                                           ^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex"
  stdout: ''
  timestamp: 1659976483
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut cache = vec![0;\
    \ n as usize + 1];\n    fibfib_recursive(n, &mut cache)\n}\n\nfn main() {\n  \
    \  let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_recursive` in this scope\n \
    \ --> /tmp/tmp5ryhwrfk.rs:15:5\n   |\n15 |     fibfib_recursive(n, &mut cache)\n\
    \   |     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkbumay_z.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut i = 3;\n    while i <= n {\n\
    \        let temp = c;\n        c = a + b + c;\n        a = b;\n        b = temp;\n\
    \        i += 1;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_helper(n, 0, 0,\
    \ 1)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_helper` in this scope\n  -->\
    \ /tmp/tmpe00ha_im.rs:14:5\n   |\n14 |     fibfib_helper(n, 0, 0, 1)\n   |   \
    \  ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        n => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_helper(n, 0, 0,\
    \ 1)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_helper` in this scope\n  -->\
    \ /tmp/tmpe00ha_im.rs:14:5\n   |\n14 |     fibfib_helper(n, 0, 0, 1)\n   |   \
    \  ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut n_minus_3 = 0;\n\
    \    let mut n_minus_2 = 0;\n    let mut n_minus_1 = 1;\n    let mut n = 1;\n\
    \    for _ in 1..n {\n        n = n_minus_1 + n_minus_2 + n_minus_3;\n       \
    \ n_minus_3 = n_minus_2;\n        n_minus_2 = n_minus_1;\n        n_minus_1 =\
    \ n;\n    }\n    n\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_987j_9x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = 1;\n    let mut l = 0;\n    for _ in 0..n {\n  \
    \      l = i + j + k;\n        i = j;\n        j = k;\n        k = l;\n    }\n\
    \    return l;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpoe3eu9uy.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n == 0 {\n    return\
    \ 0;\n  }\n  if n == 1 {\n    return 0;\n  }\n  if n == 2 {\n    return 1;\n \
    \ }\n  let mut a = 0;\n  let mut b = 0;\n  let mut c = 1;\n  let mut sum = 1;\n\
    \  for _ in 1..n-1 {\n    sum = a + b + c;\n    a = b;\n    b = c;\n    c = sum;\n\
    \  }\n  sum\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n\
    \ == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n\
    \    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut v = vec![0, 0, 1];\n    for _ in 3..n {\n\
    \        let l = v.len();\n        v.push(v[l - 1] + v[l - 2] + v[l - 3]);\n \
    \   }\n    return v[n as usize - 1];\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp2r9d3x57.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 1..n {\n        a = b;\n      \
    \  b = c;\n        c = a + b + c;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpfb2gt9su.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_seq(n)[n as usize]\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_seq` in this scope\n  --> /tmp/tmpmtt82twa.rs:14:5\n\
    \   |\n14 |     fibfib_seq(n)[n as usize]\n   |     ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut prev1 = 0;\n\
    \    let mut prev2 = 0;\n    let mut prev3 = 1;\n    for _ in 2..n {\n       \
    \ let sum = prev1 + prev2 + prev3;\n        prev1 = prev2;\n        prev2 = prev3;\n\
    \        prev3 = sum;\n    }\n    prev3\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_khksd2k.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut first = 0;\n\
    \    let mut second = 0;\n    let mut third = 1;\n    let mut result = n;\n  \
    \  for _ in 3..n {\n        result = first + second + third;\n        first =\
    \ second;\n        second = third;\n        third = result;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpn4smvilc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    } else if n == 2 {\n        return 1;\n    }\n    let mut fib1 = 0;\n\
    \    let mut fib2 = 0;\n    let mut fib3 = 1;\n    let mut fib = 0;\n    for _\
    \ in 3..(n + 1) {\n        fib = fib1 + fib2 + fib3;\n        fib1 = fib2;\n \
    \       fib2 = fib3;\n        fib3 = fib;\n    }\n    fib\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpbrwcg12v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        a = b;\n      \
    \  b = c;\n        c = a + b + c;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpx67gcr84.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    return 0;\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6n9sn1n3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    let mut sum = 0;\n    for _ in 0..n {\n\
    \        sum = a + b + c;\n        a = b;\n        b = c;\n        c = sum;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpr9701my9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    let mut sum = 0;\n    for _ in 0..n {\n\
    \        sum = a + b + c;\n        a = b;\n        b = c;\n        c = sum;\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9lm6sx28.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut n1 = 0;\n    let mut n2 = 0;\n    let mut n3 = 1;\n\
    \    let mut i = 3;\n    while i <= n {\n        let tmp = n1 + n2 + n3;\n   \
    \     n1 = n2;\n        n2 = n3;\n        n3 = tmp;\n        i += 1;\n    }\n\
    \    n3\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        n => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    assert!(n >= 0);\n  \
    \  let mut result = 0;\n    let mut count = 0;\n    let mut i = 1;\n    let mut\
    \ s_pre = 1;\n    let mut s_pre_pre = 0;\n    while count < n {\n        i = s_pre\
    \ + s_pre_pre + i;\n        s_pre_pre = s_pre;\n        s_pre = i;\n        count\
    \ += 1;\n    }\n    result = i;\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `1`', /tmp/tmpf5ze0coj.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n < 2 {\n    return\
    \ 0;\n  }\n  if n == 2 {\n    return 1;\n  }\n  fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib_0 = 0;\n\
    \    let mut fibfib_1 = 0;\n    let mut fibfib_2 = 1;\n    for _ in 0..n {\n \
    \       let fibfib_3 = fibfib_2 + fibfib_1 + fibfib_0;\n        fibfib_0 = fibfib_1;\n\
    \        fibfib_1 = fibfib_2;\n        fibfib_2 = fibfib_3;\n    }\n    fibfib_0\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n == 0 {\n    return\
    \ 0;\n  }\n  if n == 1 {\n    return 0;\n  }\n  if n == 2 {\n    return 1;\n \
    \ }\n  fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    let mut cache = vec![0, 0, 1];\n    for i in 3..=n {\n      \
    \  cache.push(cache[i as usize - 1] + cache[i as usize - 2] + cache[i as usize\
    \ - 3]);\n    }\n    cache[n as usize]\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_(n, 0, 0, 1)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_` in this scope\n  --> /tmp/tmp325k_1jl.rs:14:5\n\
    \   |\n14 |     fibfib_(n, 0, 0, 1)\n   |     ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 2..n {\n        let d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    c\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsy_0dv9u.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // your code goes here\n\
    \    let mut result = 0;\n    let mut first = 0;\n    let mut second = 0;\n  \
    \  let mut third = 1;\n    let mut i = 1;\n    while i < n {\n        result =\
    \ first + second + third;\n        first = second;\n        second = third;\n\
    \        third = result;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmp2x0ybkde.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n as isize;\n    }\n\n    let mut last3 = 0;\n    let mut last2 = 0;\n    let\
    \ mut last1 = 1;\n    let mut i = 3;\n    let mut current;\n\n    while i <= n\
    \ {\n        current = last1 + last2 + last3;\n        last3 = last2;\n      \
    \  last2 = last1;\n        last1 = current;\n        i += 1;\n    }\n\n    current\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0381]: use of possibly-uninitialized variable: `current`\n  -->\
    \ /tmp/tmpm7qo56j9.rs:32:5\n   |\n32 |     current\n   |     ^^^^^^^ use of possibly-uninitialized\
    \ `current`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0381`.\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut last_last_last = 0;\n    let mut last_last\
    \ = 0;\n    let mut last = 1;\n    for _ in 3..n+1 {\n        let cur = last_last_last\
    \ + last_last + last;\n        last_last_last = last_last;\n        last_last\
    \ = last;\n        last = cur;\n    }\n    last\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 { return 0\
    \ }\n    if n == 1 { return 0 }\n    if n == 2 { return 1 }\n    let (mut i, mut\
    \ j, mut k) = (0, 0, 1);\n    for _ in 2..n {\n        let t = i + j + k;\n  \
    \      i = j;\n        j = k;\n        k = t;\n    }\n    return k;\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut x1 = 0;\n   \
    \ let mut x2 = 0;\n    let mut x3 = 1;\n    let mut xn = 0;\n    for _ in 0..n\
    \ {\n        xn = x1 + x2 + x3;\n        x1 = x2;\n        x2 = x3;\n        x3\
    \ = xn;\n    }\n    xn\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp28yprd81.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        return\
    \ 0;\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n    \
    \    return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  let mut xs = vec![0, 0,\
    \ 1];\n  for _ in 3..(n + 1) {\n    let xs_len = xs.len();\n    let n = xs[xs_len\
    \ - 1] + xs[xs_len - 2] + xs[xs_len - 3];\n    xs.push(n);\n  }\n  xs[n as usize]\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = 1;\n    let mut n = n;\n    while n > 2 {\n    \
    \    let m = j + k;\n        i = j;\n        j = k;\n        k = m;\n        n\
    \ -= 1;\n    }\n    k\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2gk6xmrp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_eager(n, &mut\
    \ vec![0, 0, 1])\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_eager` in this scope\n  -->\
    \ /tmp/tmpps6lggv2.rs:14:5\n   |\n14 |     fibfib_eager(n, &mut vec![0, 0, 1])\n\
    \   |     ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut sum = 1;\n    for _ in 3..n {\n        sum = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = sum;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpirteuhsi.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be greater than 0\");\n    } else if n < 2 {\n        0\n    } else if\
    \ n == 2 {\n        1\n    } else {\n        fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n == 0 {\n    return\
    \ 0;\n  } else if n == 1 {\n    return 0;\n  } else if n == 2 {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        0\n\
    \    } else if n == 2 {\n        1\n    } else {\n        fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // Your code here!\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe2fd6u8_.rs:15:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  let mut a: isize = 0;\n\
    \  let mut b: isize = 0;\n  let mut c: isize = 1;\n  let mut d: isize = 1;\n \
    \ let mut e: isize = 1;\n  let mut f: isize = 2;\n  if n == 0 {\n    return 0;\n\
    \  }\n  if n == 1 {\n    return 0;\n  }\n  if n == 2 {\n    return 1;\n  }\n \
    \ for _ in 3..(n + 1) {\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e\
    \ = f;\n    f = a + b + c + d + e;\n  }\n  return f;\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `19`,\n right: `4`', /tmp/tmpviwj2oq8.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkbumay_z.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    } else if n == 2 {\n        return 1;\n    }\n    let mut n2 = 0;\n\
    \    let mut n1 = 0;\n    let mut n0 = 1;\n    for _ in 3..n + 1 {\n        let\
    \ t = n0 + n1 + n2;\n        n2 = n1;\n        n1 = n0;\n        n0 = t;\n   \
    \ }\n    n0\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    } else if n == 2 {\n        return 1;\n    }\n    let mut prev = vec![0,\
    \ 0, 1];\n    for _ in 3..=n {\n        let res = prev[0] + prev[1] + prev[2];\n\
    \        prev[0] = prev[1];\n        prev[1] = prev[2];\n        prev[2] = res;\n\
    \    }\n    prev[2]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n < 2 {\n    return\
    \ 0;\n  } else if n == 2 {\n    return 1;\n  } else {\n    return fibfib(n - 1)\
    \ + fibfib(n - 2) + fibfib(n - 3);\n  }\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        return\
    \ -1;\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n   \
    \     return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut\
    \ a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for\
    \ _ in 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpb26hup42.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut prev: isize =\
    \ 0;\n    let mut curr: isize = 0;\n    let mut next: isize = 1;\n    for _ in\
    \ 0..n {\n        let tmp = curr;\n        curr = next;\n        next = prev +\
    \ curr + next;\n        prev = tmp;\n    }\n    return curr;\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp4slsenqf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    0\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkbumay_z.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 2..n {\n        let d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    c\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsy_0dv9u.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpgn_8q0vg.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // TODO: Implement.\n\
    \    0\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zmtwkzy.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut prev3 = 0;\n\
    \    let mut prev2 = 0;\n    let mut prev1 = 1;\n    let mut curr = 0;\n    for\
    \ _ in 2..n {\n        curr = prev1 + prev2 + prev3;\n        prev3 = prev2;\n\
    \        prev2 = prev1;\n        prev1 = curr;\n    }\n    curr\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpgu5m1y6v.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut f0 = 0;\n   \
    \ let mut f1 = 0;\n    let mut f2 = 1;\n    let mut f3 = 0;\n    if n == 0 {\n\
    \        return f0;\n    }\n    if n == 1 {\n        return f1;\n    }\n    if\
    \ n == 2 {\n        return f2;\n    }\n    for _ in 3..n+1 {\n        f3 = f0\
    \ + f1 + f2;\n        f0 = f1;\n        f1 = f2;\n        f2 = f3;\n    }\n  \
    \  return f3;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut result = 0;\n    let mut last = 0;\n  \
    \  let mut second_last = 0;\n    let mut third_last = 1;\n    for _ in 3..n +\
    \ 1 {\n        result = last + second_last + third_last;\n        third_last =\
    \ second_last;\n        second_last = last;\n        last = result;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpr6m1gdz_.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        let d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    a\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n0 = 0;\n    let mut n1 = 0;\n    let mut\
    \ n2 = 1;\n    let mut i = 2;\n    let mut result = 0;\n    while i < n {\n  \
    \      result = n0 + n1 + n2;\n        n0 = n1;\n        n1 = n2;\n        n2\
    \ = result;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976483
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n  if n == 0 {\n    return\
    \ 0;\n  }\n  let mut a = 0;\n  let mut b = 0;\n  let mut c = 1;\n  for _ in 0..n-1\
    \ {\n    a = b;\n    b = c;\n    c = a + b + c;\n  }\n  c\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp2bufon6y.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ | 1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976482
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        n\n\
    \    } else {\n        fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    }\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz2as_89b.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976483
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823153
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // if n == 0 {\n    //\
    \     return 0;\n    // } else if n == 1 {\n    //     return 0;\n    // } else\
    \ if n == 2 {\n    //     return 1;\n    // } else {\n    //     return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n    // }\n    if n < 2 {\n        return\
    \ n;\n    }\n\n    let mut a = 0;\n    let mut b = 1;\n    let mut c = 1;\n  \
    \  let mut d = 1;\n    for _ in 2..n {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpv1jn5tel.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976484
