name: HumanEval_142_sum_squares
language: rs
prompt: "/// \"\n/// This function will take a vector of integers. For all entries\
  \ in the vector, the function shall square the integer entry if its index is a \n\
  /// multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n/// change the entries in the\
  \ vector whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1, 2, 3]\n/// >>>\
  \ lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn sum_squares(lst:\
  \ Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
  \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
  \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
  \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0,\
  \ -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40,\
  \ 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17,\
  \ -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n\
  }\n"
completions: ["\tlet mut sum = 0;\n\tfor (idx, val) in lst.iter().enumerate() {\n\t\
    \tif idx % 3 == 0 {\n\t\t\tsum += val * val;\n\t\t} else if idx % 4 == 0 {\n\t\
    \t\tsum += val * val * val;\n\t\t} else {\n\t\t\tsum += val;\n\t\t}\n\t}\n\tsum",
  '    unimplemented!()', "    let mut sum = 0;\n    for i in 0..lst.len() {\n   \
    \     if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n        } else if\
    \ i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n\
    \            sum += lst[i];\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for i in 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i]\
    \ * lst[i];\n        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i]\
    \ * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n\
    \    sum", "    // YOUR CODE HERE\n    0", "    let mut sum = 0;\n    for (i,\
    \ x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum +=\
    \ x * x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n    \
    \    } else {\n            sum += x;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for i in 0..lst.len() {\n        if i % 3 == 0 {\n           \
    \ sum += lst[i] * lst[i];\n        } else if i % 4 == 0 {\n            sum +=\
    \ lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n  \
    \      }\n    }\n    sum", "    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 3 == 0 {\n            sum += x * x;\n        } else if i %\
    \ 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 3 == 0 {\n            sum += v.pow(2);\n        } else if\
    \ i % 4 == 0 {\n            sum += v.pow(3);\n        } else {\n            sum\
    \ += v;\n        }\n    }\n    sum", "    let mut sum: isize = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i];\n\
    \        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n\
    \        } else {\n            sum += lst[i];\n        }\n    }\n    sum", '    unimplemented!()',
  "    let mut sum = 0;\n    for (index, element) in lst.iter().enumerate() {\n  \
    \      if index % 3 == 0 {\n            sum += element.pow(2);\n        } else\
    \ if index % 4 == 0 {\n            sum += element.pow(3);\n        } else {\n\
    \            sum += element;\n        }\n    }\n    sum", "    let mut ret = 0;\n\
    \    for (idx, x) in lst.iter().enumerate() {\n        let mut term = *x;\n  \
    \      if idx % 3 == 0 {\n            term = term * term;\n        }\n       \
    \ if idx % 4 == 0 && idx % 3 != 0 {\n            term = term * term * term;\n\
    \        }\n        ret += term;\n    }\n    ret", "    let mut mut_lst = lst;\n\
    \    for (index, value) in mut_lst.iter_mut().enumerate() {\n        if index\
    \ % 3 == 0 {\n            *value = value.pow(2);\n        }\n        if index\
    \ % 4 == 0 && index % 3 != 0 {\n            *value = value.pow(3);\n        }\n\
    \    }\n    mut_lst.iter().sum()", "    let mut lst = lst;\n    let mut sum =\
    \ 0;\n    for (i, v) in lst.iter_mut().enumerate() {\n        if i % 3 == 0 {\n\
    \            *v = v.pow(2);\n        } else if i % 4 == 0 {\n            *v =\
    \ v.pow(3);\n        }\n        sum += *v;\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for i in 0..lst.len() {\n        let mut sum_of_indices = 0;\n   \
    \     if (i + 1) % 3 == 0 {\n            sum_of_indices += 1;\n        }\n   \
    \     if (i + 1) % 4 == 0 {\n            sum_of_indices += 2;\n        }\n   \
    \     sum += match sum_of_indices {\n            1 => lst[i] * lst[i],\n     \
    \       2 => lst[i] * lst[i] * lst[i],\n            3 => lst[i] * lst[i] * lst[i]\
    \ * lst[i],\n            _ => lst[i],\n        };\n    }\n    sum", "    let mut\
    \ ret_val: isize = 0;\n    for i in 0..lst.len() {\n        let val = lst[i];\n\
    \        if i % 3 == 0 {\n            ret_val += val * val;\n        } else if\
    \ i % 4 == 0 {\n            ret_val += val * val * val;\n        } else {\n  \
    \          ret_val += val;\n        }\n    }\n    ret_val", "    let mut new_list\
    \ = lst.clone();\n    for i in 0..new_list.len() {\n        if i % 3 == 0 {\n\
    \            new_list[i] = new_list[i] * new_list[i];\n        } else if i % 4\
    \ == 0 {\n            new_list[i] = new_list[i] * new_list[i] * new_list[i];\n\
    \        }\n    }\n    let sum: isize = new_list.iter().sum();\n    sum", "  \
    \  let mut sum = 0;\n    for (i, element) in lst.iter().enumerate() {\n      \
    \  if i % 3 == 0 {\n            sum += element.pow(2);\n        } else if i %\
    \ 4 == 0 {\n            sum += element.pow(3);\n        } else {\n           \
    \ sum += element;\n        }\n    }\n    sum", '    lst.iter().enumerate().map(|(i,
    &x)| if i % 3 == 0 { x * x } else if i % 4 == 0 { x * x * x } else { x }).sum()']
stop_tokens:
- "\n}"
