name: HumanEval_67_fruit_distribution
language: rs
prompt: "/// In this task, you will be given a string that represents a number of\
  \ apples and oranges \n/// that are distributed in a basket of fruit this basket\
  \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
  \ the total number of \n/// the oranges and apples and an integer that represent\
  \ the total number of the fruits \n/// in the basket return the number of the mango\
  \ fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
  5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
  0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
  2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
  100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
  5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples\
  \ and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples\
  \ and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and\
  \ 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and 3\
  \ oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and 3\
  \ oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and 100\
  \ oranges\"), 120), 19);\n}\n"
completions: ["    let mut n_fruits: Vec<isize> = Vec::new();\n    let mut temp_int\
    \ = String::new();\n    for i in s.chars() {\n        if i == ' ' {\n        \
    \    n_fruits.push(temp_int.parse::<isize>().unwrap());\n            temp_int\
    \ = String::new();\n        } else {\n            temp_int.push(i);\n        }\n\
    \    }\n    n_fruits.push(temp_int.parse::<isize>().unwrap());\n    n - n_fruits.iter().sum::<isize>()",
  '    unimplemented!();', "    // Unwrap the string to get a vector of chars\n  \
    \  let mut chars = s.chars().collect::<Vec<char>>();\n    // Get the numbers of\
    \ apples and oranges\n    let apples = isize::from_str(\n        chars.iter()\n\
    \            .skip_while(|c| !c.is_digit(10))\n            .take_while(|c| c.is_digit(10))\n\
    \            .collect::<String>()\n            .as_str()\n    ).unwrap();\n  \
    \  let oranges = isize::from_str(\n        chars.iter()\n            .skip_while(|c|\
    \ !c.is_digit(10))\n            .skip_while(|c| c.is_digit(10))\n            .skip_while(|c|\
    \ !c.is_digit(10))\n            .take_while(|c| c.is_digit(10))\n            .collect::<String>()\n\
    \            .as_str()\n    ).unwrap();\n    // Return the number of mangoes\n\
    \    n - apples - oranges", "    // Write your code here\n    let mut splitted_str:\
    \ Vec<&str> = s.split(\" and \").collect();\n    let number_of_apples: isize =\
    \ splitted_str[0].trim().parse().unwrap();\n    let number_of_oranges: isize =\
    \ splitted_str[1].trim().parse().unwrap();\n    n - number_of_apples - number_of_oranges",
  "    let split_input: Vec<&str> = s.split(\" \").collect();\n    let apples = split_input[0].parse::<isize>().unwrap();\n\
    \    let oranges = split_input[3].parse::<isize>().unwrap();\n    let total_apples_oranges\
    \ = apples + oranges;\n    n - total_apples_oranges", "    let t: Vec<&str> =\
    \ s.split(\" and \").collect();\n    let a = t[0].split(\" \").collect::<Vec<&str>>();\n\
    \    let b = t[1].split(\" \").collect::<Vec<&str>>();\n    n - (a[0].parse::<isize>().unwrap()\
    \ + b[0].parse::<isize>().unwrap())", "    // Your code here\n    let mut sum\
    \ = 0;\n    let mut apples = 0;\n    let mut oranges = 0;\n    for (i, word) in\
    \ s.split_whitespace().enumerate() {\n        if i == 0 {\n            apples\
    \ = word.parse::<isize>().unwrap();\n        } else {\n            oranges = word.parse::<isize>().unwrap();\n\
    \        }\n    }\n    sum = n - (apples + oranges);\n    sum", "    let mut nums\
    \ = s.split(\" \");\n    let apples = nums.next().unwrap().parse::<isize>().unwrap();\n\
    \    let oranges = nums.next().unwrap().parse::<isize>().unwrap();\n    return\
    \ n - apples - oranges;", "    // Write your code here\n    0", "    let mut sum\
    \ = 0;\n    let mut sum_apples = 0;\n    let mut sum_oranges = 0;\n    let mut\
    \ words = s.split_whitespace();\n    for word in words {\n        if word.contains(\"\
    apples\") {\n            let mut word_len = word.len();\n            word_len\
    \ -= 1;\n            sum_apples = word[..word_len].parse::<isize>().unwrap();\n\
    \        } else if word.contains(\"oranges\") {\n            let mut word_len\
    \ = word.len();\n            word_len -= 1;\n            sum_oranges = word[..word_len].parse::<isize>().unwrap();\n\
    \        }\n    }\n    sum = n - (sum_apples + sum_oranges);\n    sum", "    let\
    \ (apples, oranges) = s.split_whitespace().filter_map(|x| x.parse::<isize>().ok()).sum();\n\
    \    n - apples - oranges", "    let split = s.split(\" \").map(|x| x.parse::<isize>().unwrap()).collect::<Vec<isize>>();\n\
    \    let apples = split[0];\n    let oranges = split[2];\n    n - apples - oranges",
  "    // Write your code here\n    // \u4E0D\u540C\u7684\u9898\u76EE\u6709\u4E0D\u540C\
    \u7684\u89E3\u6CD5\uFF0C\u8FD9\u9898\u4E3B\u8981\u662F\u5BF9\u5B57\u7B26\u4E32\
    \u7684\u64CD\u4F5C\uFF0C\u4F46\u662F\u7531\u4E8E\u5B57\u7B26\u4E32\u7684\u4E0D\
    \u53EF\u53D8\u6027\uFF0C\u56E0\u6B64\u8981\u5148\u628A\u5B57\u7B26\u4E32\u8F6C\
    \u6362\u6210vec\uFF0C\u7136\u540E\u8FDB\u884C\u64CD\u4F5C\n    let mut v = s.chars().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    let mut start = -1;\n    while i < v.len() {\n      \
    \  if v[i] == 'a' && v[i + 1] == 'p' && v[i + 2] == 'p' && v[i + 3] == 'l' &&\
    \ v[i + 4] == 'e' && v[i + 5] == 's' {\n            start = i;\n            break;\n\
    \        }\n        i += 1;\n    }\n    let mut j = start;\n    while j < v.len()\
    \ {\n        if v[j] == 'o' && v[j + 1] == 'r' && v[j + 2] == 'a' && v[j + 3]\
    \ == 'n' && v[j + 4] == 'g' && v[j + 5] == 'e' {\n            start = j;\n   \
    \         break;\n        }\n        j += 1;\n    }\n    let mut l = 0;\n    while\
    \ l < start {\n        if v[l] >= '0' && v[l] <= '9' {\n            let mut a\
    \ = 0;\n            while l < start {\n                if v[l] >= '0' && v[l]\
    \ <= '9' {\n                    a = a * 10 + (v[l] as isize - '0' as isize);\n\
    \                    l += 1;\n                } else {\n                    break;\n\
    \                }\n            }\n            n -= a;\n        } else {\n   \
    \         l += 1;\n        }\n    }\n", "    let mut apples = 0;\n    let mut\
    \ oranges = 0;\n    for c in s.chars() {\n        if c == 'a' {\n            apples\
    \ += 1;\n        } else if c == 'o' {\n            oranges += 1;\n        }\n\
    \    }\n    n - apples - oranges", "    let f = s.split(\" and \").map(|s| s.replace(\"\
    \ apples\", \"\").replace(\" oranges\", \"\").parse::<isize>().unwrap()).sum::<isize>();\n\
    \    n - f", "    let mut sum = 0;\n    let tmp: Vec<_> = s.split_whitespace().collect();\n\
    \    for i in 0..tmp.len() - 1 {\n        sum += tmp[i].parse::<isize>().unwrap();\n\
    \    }\n    return n - sum;", "    let mut splitted_str: Vec<&str> = s.split(\"\
    \ \").collect();\n    let counter = splitted_str.len() as isize - 1;\n    let\
    \ sum: isize = splitted_str.iter().skip(1).map(|x| x.parse::<isize>().unwrap()).sum();\n\
    \    n - sum - counter", "    let mut mango = n;\n    let mut number_of_apples\
    \ = 0;\n    let mut number_of_oranges = 0;\n    let mut current_index = 0;\n \
    \   let mut current_char = String::from(\"\");\n    for c in s.chars() {\n   \
    \     if c.is_digit(10) {\n            current_char.push(c);\n        } else if\
    \ c == ' ' {\n            if current_index == 0 {\n                number_of_apples\
    \ = match current_char.parse::<isize>() {\n                    Ok(n) => n,\n \
    \                   Err(_) => 0,\n                };\n            } else {\n \
    \               number_of_oranges = match current_char.parse::<isize>() {\n  \
    \                  Ok(n) => n,\n                    Err(_) => 0,\n           \
    \     };\n            }\n            current_char = String::from(\"\");\n    \
    \        current_index += 1;\n        }\n    }\n    mango = mango - number_of_apples\
    \ - number_of_oranges;\n    return mango;", "    let mut split_s = s.split_whitespace();\n\
    \    let apples = split_s.next().unwrap().parse::<isize>().unwrap();\n    let\
    \ oranges = split_s.next().unwrap().parse::<isize>().unwrap();\n    n - apples\
    \ - oranges", "    let words = s.split(\" and \").collect::<Vec<&str>>();\n  \
    \  let mut fruit_number: isize = 0;\n    for word in words {\n        let fruit_type\
    \ = word.split(\" \").collect::<Vec<&str>>();\n        fruit_number += fruit_type[0].parse::<isize>().unwrap();\n\
    \    }\n    n - fruit_number"]
stop_tokens:
- "\n}"
